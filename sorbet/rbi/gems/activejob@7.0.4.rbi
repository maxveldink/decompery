# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activejob` gem.
# Please instead update this file by running `bin/tapioca gem activejob`.

module AbstractController::AssetPaths
  extend ::ActiveSupport::Concern
end

class AbstractController::Base
  include ::ActiveSupport::Configurable
  extend ::ActiveSupport::Configurable::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#161
  def action_methods; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def action_name; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def action_name=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#175
  def available_action?(action_name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#156
  def controller_path; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def formats; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def formats=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#194
  def inspect; end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#182
  def performed?; end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#142
  def process(action, *args, **_arg2); end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def response_body; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def response_body=(_arg0); end

  def send_action(*_arg0); end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#246
  def _find_action_name(action_name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#228
  def _handle_action_missing(*args); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#282
  def _valid_action_name?(action_name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#204
  def action_method?(name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#273
  def method_for_action(action_name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#214
  def process_action(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#50
    def abstract; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#55
    def abstract!; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#50
    def abstract?; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#89
    def action_methods; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#107
    def clear_action_methods!; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#121
    def controller_path; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#59
    def inherited(klass); end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#74
    def internal_methods; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#126
    def method_added(name); end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#190
    def supports_path?; end
  end
end

module AbstractController::Caching
  include ::AbstractController::Caching::ConfigMethods
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Autoload
  include GeneratedInstanceMethods
  include ::AbstractController::Caching::Fragments

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Caching::Fragments::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ConfigMethods

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#52
  def view_cache_dependencies; end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#58
  def cache(key, options = T.unsafe(nil), &block); end

  module GeneratedClassMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end

  module GeneratedInstanceMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end
end

module AbstractController::Caching::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#47
  def view_cache_dependency(&dependency); end
end

module AbstractController::Caching::ConfigMethods
  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#13
  def cache_store; end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#17
  def cache_store=(store); end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#22
  def cache_configured?; end
end

module AbstractController::Caching::Fragments
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Caching::Fragments::ClassMethods

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#68
  def combined_fragment_cache_key(key); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#132
  def expire_fragment(key, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#105
  def fragment_exist?(key, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#145
  def instrument_fragment_cache(name, key, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#93
  def read_fragment(key, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#80
  def write_fragment(key, content, options = T.unsafe(nil)); end

  module GeneratedClassMethods
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end

  module GeneratedInstanceMethods
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end
end

module AbstractController::Caching::Fragments::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#57
  def fragment_cache_key(value = T.unsafe(nil), &key); end
end

module AbstractController::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::AbstractController::Callbacks::ClassMethods

  private

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#232
  def process_action(*_arg0, **_arg1, &_arg2); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

class AbstractController::Callbacks::ActionFilter
  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#39
  def initialize(actions); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#43
  def after(controller); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#43
  def around(controller); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#43
  def before(controller); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#43
  def match?(controller); end
end

module AbstractController::Callbacks::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#96
  def _insert_callbacks(callbacks, block = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#77
  def _normalize_callback_option(options, from, to); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#72
  def _normalize_callback_options(options); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def after_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def append_after_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def append_around_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def append_before_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def around_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def before_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#210
  def prepend_after_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#210
  def prepend_around_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#210
  def prepend_before_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#218
  def skip_after_action(*names); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#218
  def skip_around_action(*names); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#218
  def skip_before_action(*names); end
end

module AbstractController::Collector
  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def atom(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def bmp(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def css(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def csv(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def gif(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def gzip(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def html(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def ics(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def jpeg(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def js(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def json(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def m4a(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def mp3(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def mp4(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def mpeg(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def multipart_form(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def ogg(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def otf(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def pdf(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def png(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def rss(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def svg(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def text(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def tiff(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def ttf(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def url_encoded_form(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def vcf(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def vtt(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def webm(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def woff(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def woff2(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def xml(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def yaml(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def zip(*args, **_arg1, &block); end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#26
  def method_missing(symbol, *args, **_arg2, &block); end

  class << self
    # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#7
    def generate_method_for_mime(mime); end
  end
end

module AbstractController::Helpers
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#40
  def _helpers; end

  module GeneratedClassMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end

  module GeneratedInstanceMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end
end

module AbstractController::Helpers::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#56
  def _helpers=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#184
  def _helpers_for_modification; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#158
  def clear_helpers; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#147
  def helper(*args, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#79
  def helper_method(*methods); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#48
  def inherited(klass); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#169
  def modules_for_helpers(modules_or_helper_prefixes); end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#203
  def default_helper_module!; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#192
  def define_helpers_module(klass, helpers = T.unsafe(nil)); end
end

class AbstractController::Helpers::MissingHelperError < ::LoadError
  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#27
  def initialize(error, path); end
end

module AbstractController::Logger
  extend ::ActiveSupport::Concern
  include ::ActiveSupport::Benchmarkable
end

module AbstractController::Rendering
  extend ::ActiveSupport::Concern
  include ::ActionView::ViewPaths

  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#23
  def render(*args, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#51
  def render_to_body(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#45
  def render_to_string(*args, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#55
  def rendered_format; end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#63
  def view_assigns; end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#75
  def _normalize_args(action = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#90
  def _normalize_options(options); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#116
  def _normalize_render(*args, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#100
  def _process_format(format); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#95
  def _process_options(options); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#103
  def _process_variant(options); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#123
  def _protected_ivars; end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#106
  def _set_html_content_type; end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#112
  def _set_rendered_content_type(format); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#109
  def _set_vary_header; end
end

# source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#59
AbstractController::Rendering::DEFAULT_PROTECTED_INSTANCE_VARIABLES = T.let(T.unsafe(nil), Array)

module AbstractController::Translation
  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#33
  def l(object, **options); end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#33
  def localize(object, **options); end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#7
  def raise_on_missing_translations; end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#7
  def raise_on_missing_translations=(val); end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#17
  def t(key, **options); end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#17
  def translate(key, **options); end

  class << self
    # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#7
    def raise_on_missing_translations; end

    # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#7
    def raise_on_missing_translations=(val); end
  end
end

module AbstractController::UrlFor
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionDispatch::Routing::UrlFor

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::UrlFor::ClassMethods

  # source://actionpack/7.0.4/lib/abstract_controller/url_for.rb#14
  def _routes; end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

module AbstractController::UrlFor::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/url_for.rb#20
  def _routes; end

  # source://actionpack/7.0.4/lib/abstract_controller/url_for.rb#24
  def action_methods; end
end

class ActionController::Base < ::ActionController::Metal
  include ::ActionView::ViewPaths
  include ::AbstractController::Rendering
  include ::AbstractController::Translation
  include ::AbstractController::AssetPaths
  include ::AbstractController::Helpers
  include ::ActionController::Helpers
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor
  include ::AbstractController::Logger
  include ::ActiveSupport::Benchmarkable
  include ::ActionController::Redirecting
  include ::ActionView::Rendering
  include ::ActionView::Layouts
  include ::ActionController::Rendering
  include ::ActionController::Renderers
  include ::ActionController::Renderers::All
  include ::ActionController::Head
  include ::ActionController::ConditionalGet
  include ::ActionController::EtagWithTemplateDigest
  include ::ActionController::EtagWithFlash
  include ::ActionController::Caching
  include ::AbstractController::Caching::Fragments
  include ::AbstractController::Caching::ConfigMethods
  include ::AbstractController::Caching
  include ::ActionController::MimeResponds
  include ::ActionController::BasicImplicitRender
  include ::ActionController::ImplicitRender
  include ::ActionController::StrongParameters
  include ::ActionController::ParameterEncoding
  include ::ActionController::Cookies
  include ::ActionController::Flash
  include ::ActionController::FormBuilder
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks
  include ::ActionController::RequestForgeryProtection
  include ::ActionController::ContentSecurityPolicy
  include ::ActionController::PermissionsPolicy
  include ::ActionController::Streaming
  include ::ActionController::DataStreaming
  include ::ActionController::HttpAuthentication::Basic::ControllerMethods
  include ::ActionController::HttpAuthentication::Digest::ControllerMethods
  include ::ActionController::HttpAuthentication::Token::ControllerMethods
  include ::ActionController::DefaultHeaders
  include ::ActionController::Logging
  include ::ActiveSupport::Rescuable
  include ::ActionController::Rescue
  include ::ActionController::Instrumentation
  include ::ActionController::ParamsWrapper
  extend ::ActionView::ViewPaths::ClassMethods
  extend ::AbstractController::Helpers::ClassMethods
  extend ::ActionController::Helpers::ClassMethods
  extend ::AbstractController::UrlFor::ClassMethods
  extend ::ActionView::Rendering::ClassMethods
  extend ::ActionView::Layouts::ClassMethods
  extend ::ActionController::Rendering::ClassMethods
  extend ::ActionController::Renderers::ClassMethods
  extend ::ActionController::ConditionalGet::ClassMethods
  extend ::AbstractController::Caching::Fragments::ClassMethods
  extend ::AbstractController::Caching::ClassMethods
  extend ::AbstractController::Caching::ConfigMethods
  extend ::ActionController::ParameterEncoding::ClassMethods
  extend ::ActionController::Flash::ClassMethods
  extend ::ActionController::FormBuilder::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::AbstractController::Callbacks::ClassMethods
  extend ::ActionController::RequestForgeryProtection::ClassMethods
  extend ::ActionController::ContentSecurityPolicy::ClassMethods
  extend ::ActionController::PermissionsPolicy::ClassMethods
  extend ::ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods
  extend ::ActionController::DefaultHeaders::ClassMethods
  extend ::ActionController::Logging::ClassMethods
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::ActionController::Instrumentation::ClassMethods
  extend ::ActionController::ParamsWrapper::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _process_action_callbacks; end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_process_action_callbacks(&block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies; end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#36
  def alert; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def allow_forgery_protection; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def allow_forgery_protection=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def asset_host; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def asset_host=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def assets_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def assets_dir=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def default_asset_host_protocol; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def default_asset_host_protocol=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def default_protect_from_forgery; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def default_protect_from_forgery=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def default_static_extension; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def default_static_extension=(value); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def enable_fragment_cache_logging; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def enable_fragment_cache_logging=(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest; end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#10
  def flash(*_arg0, **_arg1, &_arg2); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def forgery_protection_origin_check; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def forgery_protection_origin_check=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def forgery_protection_strategy; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def forgery_protection_strategy=(value); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys; end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
  def helpers_path; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
  def helpers_path=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
  def helpers_path?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def javascripts_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def javascripts_dir=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def log_warning_on_csrf_failure; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def log_warning_on_csrf_failure=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def logger; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def logger=(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#36
  def notice; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def per_form_csrf_tokens; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def per_form_csrf_tokens=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def perform_caching; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def perform_caching=(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects; end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects=(val); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def relative_url_root; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def relative_url_root=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def request_forgery_protection_token; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def request_forgery_protection_token=(value); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def stylesheets_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def stylesheets_dir=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def urlsafe_csrf_tokens; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://actionpack/7.0.4/lib/action_controller/base.rb#266
  def _protected_ivars; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#31
    def _default_form_builder; end

    # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#31
    def _default_form_builder=(value); end

    # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#31
    def _default_form_builder?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#8
    def _flash_types; end

    # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#8
    def _flash_types=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#8
    def _flash_types?; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods?; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#15
    def _helpers; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout=(value); end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout?; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions=(value); end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _process_action_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _process_action_callbacks=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers?; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options; end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def allow_forgery_protection; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def allow_forgery_protection=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def asset_host; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def asset_host=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def assets_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def assets_dir=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def default_asset_host_protocol; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def default_asset_host_protocol=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def default_protect_from_forgery; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def default_protect_from_forgery=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def default_static_extension; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def default_static_extension=(value); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def enable_fragment_cache_logging; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def enable_fragment_cache_logging=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest; end

    # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def forgery_protection_origin_check; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def forgery_protection_origin_check=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def forgery_protection_strategy; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def forgery_protection_strategy=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
    def helpers_path; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
    def helpers_path=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
    def helpers_path?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def javascripts_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def javascripts_dir=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def log_warning_on_csrf_failure; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def log_warning_on_csrf_failure=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def logger; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def logger=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def per_form_csrf_tokens; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def per_form_csrf_tokens=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def perform_caching; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def perform_caching=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects; end

    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects=(val); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def relative_url_root; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def relative_url_root=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def request_forgery_protection_token; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def request_forgery_protection_token=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def stylesheets_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def stylesheets_dir=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def urlsafe_csrf_tokens; end

    # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#97
    def urlsafe_csrf_tokens=(urlsafe_csrf_tokens); end

    # source://actionpack/7.0.4/lib/action_controller/base.rb#198
    def without_modules(*modules); end
  end
end

module ActionController::Base::HelperMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#39
  def alert(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#31
  def combined_fragment_cache_key(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#11
  def content_security_policy?(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#12
  def content_security_policy_nonce(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/cookies.rb#8
  def cookies(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#106
  def form_authenticity_token(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#39
  def notice(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#107
  def protect_against_forgery?(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#43
  def view_cache_dependencies(*args, **_arg1, &block); end
end

# source://actionpack/7.0.4/lib/action_controller/base.rb#206
ActionController::Base::MODULES = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.4/lib/action_controller/base.rb#261
ActionController::Base::PROTECTED_IVARS = T.let(T.unsafe(nil), Array)

module ActionController::BasicImplicitRender
  # source://actionpack/7.0.4/lib/action_controller/metal/basic_implicit_render.rb#9
  def default_render; end

  # source://actionpack/7.0.4/lib/action_controller/metal/basic_implicit_render.rb#5
  def send_action(method, *args); end
end

module ActionController::Caching
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Caching::Fragments
  include ::AbstractController::Caching

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Caching::Fragments::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ConfigMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/caching.rb#40
  def instrument_name; end

  # source://actionpack/7.0.4/lib/action_controller/caching.rb#32
  def instrument_payload(key); end

  module GeneratedClassMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end

  module GeneratedInstanceMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end
end

module ActionController::ConditionalGet
  include ::ActionController::Head
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ConditionalGet::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#276
  def expires_in(seconds, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#294
  def expires_now; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#117
  def fresh_when(object = T.unsafe(nil), etag: T.unsafe(nil), weak_etag: T.unsafe(nil), strong_etag: T.unsafe(nil), last_modified: T.unsafe(nil), public: T.unsafe(nil), cache_control: T.unsafe(nil), template: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#306
  def http_cache_forever(public: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#316
  def no_store; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#249
  def stale?(object = T.unsafe(nil), **freshness_kwargs); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#321
  def combine_etags(validator, options); end

  module GeneratedClassMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end

  module GeneratedInstanceMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end
end

module ActionController::ConditionalGet::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#31
  def etag(&etagger); end
end

module ActionController::ContentSecurityPolicy
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Helpers
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::AbstractController::Callbacks::ClassMethods
  mixes_in_class_methods ::ActionController::ContentSecurityPolicy::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#73
  def content_security_policy?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#77
  def content_security_policy_nonce; end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#81
  def current_content_security_policy; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end
end

module ActionController::ContentSecurityPolicy::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#39
  def content_security_policy(enabled = T.unsafe(nil), **options, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#65
  def content_security_policy_report_only(report_only = T.unsafe(nil), **options); end
end

module ActionController::Cookies
  extend ::ActiveSupport::Concern

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/cookies.rb#14
  def cookies; end
end

module ActionController::DataStreaming
  extend ::ActiveSupport::Concern
  include ::ActionController::Rendering

  mixes_in_class_methods ::ActionController::Rendering::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#109
  def send_data(data, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#69
  def send_file(path, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#114
  def send_file_headers!(options); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#15
ActionController::DataStreaming::DEFAULT_SEND_FILE_DISPOSITION = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#14
ActionController::DataStreaming::DEFAULT_SEND_FILE_TYPE = T.let(T.unsafe(nil), String)

module ActionController::DefaultHeaders
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::DefaultHeaders::ClassMethods
end

module ActionController::DefaultHeaders::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/default_headers.rb#10
  def make_response!(request); end
end

module ActionController::EtagWithFlash
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionController::ConditionalGet

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ConditionalGet::ClassMethods

  module GeneratedClassMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end

  module GeneratedInstanceMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end
end

module ActionController::EtagWithTemplateDigest
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionController::ConditionalGet

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ConditionalGet::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#35
  def determine_template_etag(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#51
  def lookup_and_digest_template(template); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#45
  def pick_template_for_etag(options); end

  module GeneratedClassMethods
    def etag_with_template_digest; end
    def etag_with_template_digest=(value); end
    def etag_with_template_digest?; end
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end

  module GeneratedInstanceMethods
    def etag_with_template_digest; end
    def etag_with_template_digest=(value); end
    def etag_with_template_digest?; end
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end
end

module ActionController::Flash
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::Flash::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#51
  def redirect_to(options = T.unsafe(nil), response_options_and_flash = T.unsafe(nil)); end

  module GeneratedClassMethods
    def _flash_types; end
    def _flash_types=(value); end
    def _flash_types?; end
  end

  module GeneratedInstanceMethods; end
end

module ActionController::Flash::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#45
  def action_methods; end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#32
  def add_flash_types(*types); end
end

module ActionController::FormBuilder
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::FormBuilder::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#46
  def default_form_builder; end

  module GeneratedClassMethods
    def _default_form_builder; end
    def _default_form_builder=(value); end
    def _default_form_builder?; end
  end

  module GeneratedInstanceMethods; end
end

module ActionController::FormBuilder::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#40
  def default_form_builder(builder); end
end

module ActionController::Head
  # source://actionpack/7.0.4/lib/action_controller/metal/head.rb#21
  def head(status, options = T.unsafe(nil)); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/head.rb#52
  def include_content?(status); end
end

module ActionController::Helpers
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Helpers

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods
  mixes_in_class_methods ::ActionController::Helpers::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#128
  def helpers; end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#59
    def helpers_path; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#59
    def helpers_path=(_arg0); end
  end

  module GeneratedClassMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
    def helpers_path; end
    def helpers_path=(value); end
    def helpers_path?; end
    def include_all_helpers; end
    def include_all_helpers=(value); end
    def include_all_helpers?; end
  end

  module GeneratedInstanceMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
    def helpers_path; end
    def helpers_path=(value); end
    def helpers_path?; end
    def include_all_helpers; end
    def include_all_helpers=(value); end
    def include_all_helpers?; end
  end
end

module ActionController::Helpers::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#111
  def all_helpers_from_path(path); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#76
  def helper_attr(*attrs); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#86
  def helpers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#102
  def modules_for_helpers(args); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#122
  def all_application_helpers; end
end

module ActionController::HttpAuthentication::Basic::ControllerMethods
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#92
  def authenticate_or_request_with_http_basic(realm = T.unsafe(nil), message = T.unsafe(nil), &login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#96
  def authenticate_with_http_basic(&login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#83
  def http_basic_authenticate_or_request_with(name:, password:, realm: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#100
  def request_http_basic_authentication(realm = T.unsafe(nil), message = T.unsafe(nil)); end
end

module ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#76
  def http_basic_authenticate_with(name:, password:, realm: T.unsafe(nil), **options); end
end

module ActionController::HttpAuthentication::Digest::ControllerMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#193
  def authenticate_or_request_with_http_digest(realm = T.unsafe(nil), message = T.unsafe(nil), &password_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#199
  def authenticate_with_http_digest(realm = T.unsafe(nil), &password_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#205
  def request_http_digest_authentication(realm = T.unsafe(nil), message = T.unsafe(nil)); end
end

module ActionController::HttpAuthentication::Token::ControllerMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#430
  def authenticate_or_request_with_http_token(realm = T.unsafe(nil), message = T.unsafe(nil), &login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#436
  def authenticate_with_http_token(&login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#442
  def request_http_token_authentication(realm = T.unsafe(nil), message = T.unsafe(nil)); end
end

module ActionController::ImplicitRender
  include ::ActionController::BasicImplicitRender

  # source://actionpack/7.0.4/lib/action_controller/metal/implicit_render.rb#33
  def default_render; end

  # source://actionpack/7.0.4/lib/action_controller/metal/implicit_render.rb#52
  def method_for_action(action_name); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/implicit_render.rb#59
  def interactive_browser_request?; end
end

module ActionController::Instrumentation
  extend ::ActiveSupport::Concern
  include ::ActiveSupport::Benchmarkable
  include ::AbstractController::Logger

  mixes_in_class_methods ::ActionController::Instrumentation::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#40
  def redirect_to(*_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#19
  def render(*_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#34
  def send_data(data, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#27
  def send_file(path, options = T.unsafe(nil)); end

  def view_runtime; end
  def view_runtime=(_arg0); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#96
  def append_info_to_payload(payload); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#90
  def cleanup_view_runtime; end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#80
  def halted_callback_hook(filter, _); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#50
  def process_action(*_arg0); end
end

module ActionController::Instrumentation::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#104
  def log_process_action(payload); end
end

module ActionController::Logging
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::Logging::ClassMethods
end

module ActionController::Logging::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/logging.rb#15
  def log_at(level, **options); end
end

class ActionController::Metal < ::AbstractController::Base
  # source://actionpack/7.0.4/lib/action_controller/metal.rb#150
  def initialize; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def content_type(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def content_type=(arg); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#141
  def controller_name; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#185
  def dispatch(name, request, response); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def headers(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def location(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def location=(arg); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def media_type(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
  def middleware_stack; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
  def middleware_stack=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
  def middleware_stack?; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#157
  def params; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#161
  def params=(val); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#181
  def performed?; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def request; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def request=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#206
  def reset_session; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def response; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def response=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#172
  def response_body=(body); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def response_code(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#146
  def session(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#197
  def set_request!(request); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#193
  def set_response!(response); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def status(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def status=(arg); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#202
  def to_a; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#168
  def url_for(string); end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal.rb#231
    def action(name); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#136
    def action_encoding_template(action); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#126
    def controller_name; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#247
    def dispatch(name, req, res); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#212
    def inherited(base); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#130
    def make_response!(request); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#226
    def middleware; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack?; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#220
    def use(*_arg0, **_arg1, &_arg2); end
  end
end

module ActionController::MimeResponds
  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#201
  def respond_to(*mimes); end
end

class ActionController::MimeResponds::Collector
  include ::AbstractController::Collector

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#246
  def initialize(mimes, variant = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#253
  def all(*args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#253
  def any(*args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#271
  def any_response?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#262
  def custom(mime_type, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#244
  def format; end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#244
  def format=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#288
  def negotiate_format(request); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#275
  def response; end
end

class ActionController::MimeResponds::Collector::VariantCollector
  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#293
  def initialize(variant = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#298
  def all(*args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#298
  def any(*args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#309
  def method_missing(name, *args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#313
  def variant; end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#322
  def variant_key; end
end

module ActionController::ParameterEncoding
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::ParameterEncoding::ClassMethods
end

module ActionController::ParameterEncoding::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#18
  def action_encoding_template(action); end

  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#9
  def inherited(klass); end

  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#77
  def param_encoding(action, param, encoding); end

  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#14
  def setup_param_encode; end

  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#48
  def skip_parameter_encoding(action); end
end

module ActionController::ParamsWrapper
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ParamsWrapper::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#277
  def _extract_parameters(parameters); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#299
  def _perform_parameter_wrapping; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#273
  def _wrap_parameters(parameters); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#289
  def _wrapper_enabled?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#268
  def _wrapper_formats; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#263
  def _wrapper_key; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#257
  def process_action(*_arg0); end

  module GeneratedClassMethods
    def _wrapper_options; end
    def _wrapper_options=(value); end
    def _wrapper_options?; end
  end

  module GeneratedInstanceMethods
    def _wrapper_options; end
    def _wrapper_options=(value); end
    def _wrapper_options?; end
  end
end

module ActionController::ParamsWrapper::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#189
  def _set_wrapper_options(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#244
  def inherited(klass); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#220
  def wrap_parameters(name_or_model_or_options, options = T.unsafe(nil)); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#83
ActionController::ParamsWrapper::EXCLUDE_PARAMETERS = T.let(T.unsafe(nil), Array)

class ActionController::ParamsWrapper::Options < ::Struct
  include ::Mutex_m

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#98
  def initialize(name, format, include, exclude, klass, model); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#108
  def include; end

  # source://mutex_m/0.1.1/mutex_m.rb#93
  def lock; end

  # source://mutex_m/0.1.1/mutex_m.rb#83
  def locked?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#104
  def model; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#141
  def name; end

  # source://mutex_m/0.1.1/mutex_m.rb#78
  def synchronize(&block); end

  # source://mutex_m/0.1.1/mutex_m.rb#88
  def try_lock; end

  # source://mutex_m/0.1.1/mutex_m.rb#98
  def unlock; end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#165
  def _default_wrap_model; end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#90
    def from_hash(hash); end
  end
end

module ActionController::PermissionsPolicy
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::PermissionsPolicy::ClassMethods
end

module ActionController::PermissionsPolicy::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/permissions_policy.rb#26
  def permissions_policy(**options, &block); end
end

module ActionController::Redirecting
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Benchmarkable
  include ::AbstractController::Logger
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::UrlFor::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#130
  def _compute_redirect_to_location(request, options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#95
  def redirect_back(fallback_location:, allow_other_host: T.unsafe(nil), **args); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#121
  def redirect_back_or_to(fallback_location, allow_other_host: T.unsafe(nil), **options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#82
  def redirect_to(options = T.unsafe(nil), response_options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#169
  def url_from(location); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#175
  def _allow_other_host; end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#189
  def _enforce_open_redirect_protection(location, allow_other_host:); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#179
  def _extract_redirect_to_status(options, response_options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#197
  def _url_host_allowed?(url); end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#130
    def _compute_redirect_to_location(request, options); end
  end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

class ActionController::Redirecting::UnsafeRedirectError < ::StandardError; end

module ActionController::Renderers
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::Renderers::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#144
  def _render_to_body_with_renderer(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#170
  def _render_with_renderer_js(js, options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#155
  def _render_with_renderer_json(json, options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#175
  def _render_with_renderer_xml(xml, options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#140
  def render_to_body(options); end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#90
    def _render_with_renderer_method_name(key); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#74
    def add(key, &block); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#84
    def remove(key); end
  end

  module GeneratedClassMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end

  module GeneratedInstanceMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end
end

module ActionController::Renderers::All
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionController::Renderers

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::Renderers::ClassMethods

  module GeneratedClassMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end

  module GeneratedInstanceMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end
end

module ActionController::Renderers::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#128
  def use_renderer(*args); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#128
  def use_renderers(*args); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#28
ActionController::Renderers::RENDERERS = T.let(T.unsafe(nil), Set)

module ActionController::Rendering
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::Rendering::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#28
  def render(*args); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#45
  def render_to_body(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#34
  def render_to_string(*_arg0); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#87
  def _normalize_args(action = T.unsafe(nil), options = T.unsafe(nil), &blk); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#94
  def _normalize_options(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#108
  def _normalize_text(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#117
  def _process_options(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#56
  def _process_variant(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#62
  def _render_in_priorities(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#70
  def _set_html_content_type; end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#74
  def _set_rendered_content_type(format); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#80
  def _set_vary_header; end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#51
  def process_action(*_arg0); end
end

module ActionController::Rendering::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#21
  def inherited(klass); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#11
  def render(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#15
  def renderer; end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#17
  def setup_renderer!; end
end

# source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#7
ActionController::Rendering::RENDER_FORMATS_IN_PRIORITY = T.let(T.unsafe(nil), Array)

module ActionController::RequestForgeryProtection
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Helpers
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::AbstractController::Callbacks::ClassMethods
  mixes_in_class_methods ::ActionController::RequestForgeryProtection::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#344
  def any_authenticity_token_valid?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#430
  def compare_with_global_token(token, session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#426
  def compare_with_real_token(token, session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#464
  def csrf_token_hmac(session, identifier); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#535
  def decode_csrf_token(encoded_csrf_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#527
  def encode_csrf_token(csrf_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#484
  def form_authenticity_param; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#356
  def form_authenticity_token(form_options: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#519
  def generate_csrf_token; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#460
  def global_csrf_token(session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#277
  def handle_unverified_request; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#316
  def mark_for_same_origin_verification!; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#322
  def marked_for_same_origin_verification?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#419
  def mask_token(raw_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#363
  def masked_authenticity_token(session, form_options: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#327
  def non_xhr_javascript_response?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#514
  def normalize_action_path(action_path); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#453
  def per_form_csrf_token(session, action_path, method); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#489
  def protect_against_forgery?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#448
  def real_csrf_token(session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#351
  def request_authenticity_tokens; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#411
  def unmask_token(masked_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#287
  def unverified_request_warning_message; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#379
  def valid_authenticity_token?(session, encoded_masked_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#434
  def valid_per_form_csrf_token?(token, session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#504
  def valid_request_origin?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#338
  def verified_request?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#267
  def verify_authenticity_token; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#306
  def verify_same_origin_request; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#472
  def xor_byte_strings(s1, s2); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end
end

# source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#331
ActionController::RequestForgeryProtection::AUTHENTICITY_TOKEN_LENGTH = T.let(T.unsafe(nil), Integer)

module ActionController::RequestForgeryProtection::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#156
  def protect_from_forgery(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#170
  def skip_forgery_protection(options = T.unsafe(nil)); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#175
  def protection_method_class(name); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#493
ActionController::RequestForgeryProtection::NULL_ORIGIN_MESSAGE = T.let(T.unsafe(nil), String)

module ActionController::RequestForgeryProtection::ProtectionMethods; end

class ActionController::RequestForgeryProtection::ProtectionMethods::Exception
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#246
  def initialize(controller); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#250
  def handle_unverified_request; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#244
  def warning_message; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#244
  def warning_message=(_arg0); end
end

class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#193
  def initialize(controller); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#198
  def handle_unverified_request; end
end

class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession::NullCookieJar < ::ActionDispatch::Cookies::CookieJar
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#227
  def write(*_arg0); end
end

class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession::NullSessionHash < ::Rack::Session::Abstract::SessionHash
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#208
  def initialize(req); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#215
  def destroy; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#221
  def enabled?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#217
  def exists?; end
end

class ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#234
  def initialize(controller); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#238
  def handle_unverified_request; end
end

module ActionController::Rescue
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Rescuable

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/rescue.rb#16
  def show_detailed_exceptions?; end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/rescue.rb#21
  def process_action(*_arg0); end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

module ActionController::Streaming
  private

  # source://actionpack/7.0.4/lib/action_controller/metal/streaming.rb#198
  def _process_options(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/streaming.rb#212
  def _render_template(options); end
end

module ActionController::StrongParameters
  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1224
  def params; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1239
  def params=(value); end
end

module ActionController::UrlFor
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::UrlFor::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/url_for.rb#30
  def url_options; end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

module ActionDispatch::Cookies::ChainedCookieJars
  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#252
  def encrypted; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#218
  def permanent; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#234
  def signed; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#258
  def signed_or_encrypted; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#281
  def encrypted_cookie_cipher; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#275
  def prepare_upgrade_legacy_hmac_aes_cbc_cookies?; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#285
  def signed_cookie_digest; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#268
  def upgrade_legacy_hmac_aes_cbc_cookies?; end
end

class ActionDispatch::Cookies::CookieJar
  include ::ActionDispatch::Cookies::ChainedCookieJars
  include ::Enumerable

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#315
  def initialize(request); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#336
  def [](name); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#370
  def []=(name, options); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#424
  def always_write_cookie; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#424
  def always_write_cookie=(val); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#414
  def clear(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#325
  def commit!; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#323
  def committed?; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#393
  def delete(name, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#407
  def deleted?(name, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#331
  def each(&block); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#340
  def fetch(name, *args, &block); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#344
  def has_key?(name); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#344
  def key?(name); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#313
  def request; end

  def to_hash(*_arg0); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#364
  def to_header; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#352
  def update(other_hash); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#357
  def update_cookies_from_jar; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#418
  def write(headers); end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#427
  def escape(string); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#448
  def handle_options(options); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#431
  def make_set_cookie_header(header); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#444
  def write_cookie?(cookie); end

  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#424
    def always_write_cookie; end

    # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#424
    def always_write_cookie=(val); end

    # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#307
    def build(req, cookies); end
  end
end

# source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#305
ActionDispatch::Cookies::CookieJar::DOMAIN_REGEXP = T.let(T.unsafe(nil), Regexp)

module ActionDispatch::Routing::PolymorphicRoutes
  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#153
  def edit_polymorphic_path(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#149
  def edit_polymorphic_url(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#153
  def new_polymorphic_path(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#149
  def new_polymorphic_url(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#124
  def polymorphic_path(record_or_hash_or_array, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#101
  def polymorphic_url(record_or_hash_or_array, options = T.unsafe(nil)); end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#168
  def polymorphic_mapping(record); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#164
  def polymorphic_path_for_action(action, record_or_hash, options); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#160
  def polymorphic_url_for_action(action, record_or_hash, options); end
end

class ActionDispatch::Routing::PolymorphicRoutes::HelperMethodBuilder
  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#239
  def initialize(key_strategy, prefix, suffix); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#253
  def handle_class(klass); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#257
  def handle_class_call(target, klass); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#284
  def handle_list(list); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#261
  def handle_model(record); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#275
  def handle_model_call(target, record); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#245
  def handle_string(record); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#249
  def handle_string_call(target, str); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#237
  def prefix; end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#237
  def suffix; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#338
  def get_method_for_class(klass); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#343
  def get_method_for_string(str); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#330
  def polymorphic_mapping(target, record); end

  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#187
    def build(action, type); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#179
    def get(action, type); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#185
    def path; end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#201
    def plural(prefix, suffix); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#205
    def polymorphic_method(recipient, record_or_hash_or_array, action, type, options); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#197
    def singular(prefix, suffix); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#184
    def url; end
  end
end

# source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#177
ActionDispatch::Routing::PolymorphicRoutes::HelperMethodBuilder::CACHE = T.let(T.unsafe(nil), Hash)

module ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#106
  def initialize(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#173
  def full_url_for(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#213
  def route_for(name, *args); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#169
  def url_for(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#114
  def url_options; end

  protected

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#218
  def optimize_routes_generation?; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#230
  def _routes_context; end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#223
  def _with_routes(routes); end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

module ActionView::Layouts
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionView::ViewPaths
  include ::ActionView::Rendering

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods
  mixes_in_class_methods ::ActionView::Rendering::ClassMethods
  mixes_in_class_methods ::ActionView::Layouts::ClassMethods

  # source://actionview/7.0.4/lib/action_view/layouts.rb#361
  def initialize(*_arg0); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#215
  def _layout_conditions(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#350
  def _normalize_options(options); end

  def action_has_layout=(_arg0); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#372
  def action_has_layout?; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#377
  def _conditional_layout?; end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#415
  def _default_layout(lookup_context, formats, require_layout = T.unsafe(nil)); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#430
  def _include_layout?(options); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#382
  def _layout(*_arg0); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#388
  def _layout_for_option(name); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#401
  def _normalize_layout(value); end

  module GeneratedClassMethods
    def _layout; end
    def _layout=(value); end
    def _layout?; end
    def _layout_conditions; end
    def _layout_conditions=(value); end
    def _layout_conditions?; end
  end

  module GeneratedInstanceMethods; end
end

module ActionView::Layouts::ClassMethods
  # source://actionview/7.0.4/lib/action_view/layouts.rb#283
  def _write_layout_method; end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#218
  def inherited(klass); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#269
  def layout(layout, conditions = T.unsafe(nil)); end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#345
  def _implied_layout_name; end
end

module ActionView::Layouts::ClassMethods::LayoutConditions
  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#233
  def _conditional_layout?; end
end

module ActionView::Rendering
  extend ::ActiveSupport::Concern
  include ::ActionView::ViewPaths

  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods
  mixes_in_class_methods ::ActionView::Rendering::ClassMethods

  # source://actionview/7.0.4/lib/action_view/rendering.rb#31
  def initialize; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#37
  def process(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#101
  def render_to_body(options = T.unsafe(nil)); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#29
  def rendered_format; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#91
  def view_context; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#77
  def view_context_class; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#96
  def view_renderer; end

  private

  # source://actionview/7.0.4/lib/action_view/rendering.rb#134
  def _normalize_args(action = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#158
  def _normalize_options(options); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#127
  def _process_format(format); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#108
  def _render_template(options); end
end

module ActionView::Rendering::ClassMethods
  # source://actionview/7.0.4/lib/action_view/rendering.rb#48
  def _helpers; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#45
  def _routes; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#51
  def build_view_context_class(klass, supports_path, routes, helpers); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#64
  def view_context_class; end
end

module ActionView::ViewPaths
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#90
  def _prefixes; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def any_templates?(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#112
  def append_view_path(path); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#102
  def details_for_lookup; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def formats(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def formats=(arg); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def locale(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def locale=(arg); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#97
  def lookup_context; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#122
  def prepend_view_path(path); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def template_exists?(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def view_paths(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://actionview/7.0.4/lib/action_view/view_paths.rb#84
    def all_view_paths; end

    # source://actionview/7.0.4/lib/action_view/view_paths.rb#76
    def get_view_paths(klass); end

    # source://actionview/7.0.4/lib/action_view/view_paths.rb#80
    def set_view_paths(klass, paths); end
  end
end

module ActionView::ViewPaths::ClassMethods
  # source://actionview/7.0.4/lib/action_view/view_paths.rb#23
  def _prefixes; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#15
  def _view_paths; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#19
  def _view_paths=(paths); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#37
  def append_view_path(path); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#47
  def prepend_view_path(path); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#52
  def view_paths; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#61
  def view_paths=(paths); end

  private

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#68
  def local_prefixes; end
end

module ActiveJob
  extend ::ActiveSupport::Autoload

  class << self
    # Returns the currently loaded version of Active Job as a <tt>Gem::Version</tt>.
    #
    # source://activejob//lib/active_job/gem_version.rb#5
    def gem_version; end

    # Returns the currently loaded version of Active Job as a <tt>Gem::Version</tt>.
    #
    # source://activejob//lib/active_job/version.rb#7
    def version; end
  end
end

module ActiveJob::Arguments
  extend ::ActiveJob::Arguments

  # Deserializes a set of arguments. Intrinsic types that can safely be
  # deserialized without mutation are returned as-is. Arrays/Hashes are
  # deserialized element by element. All other types are deserialized using
  # GlobalID.
  #
  # source://activejob//lib/active_job/arguments.rb#42
  def deserialize(arguments); end

  # Serializes a set of arguments. Intrinsic types that can safely be
  # serialized without mutation are returned as-is. Arrays/Hashes are
  # serialized element by element. All other types are serialized using
  # GlobalID.
  #
  # source://activejob//lib/active_job/arguments.rb#34
  def serialize(arguments); end

  private

  # source://activejob//lib/active_job/arguments.rb#204
  def convert_to_global_id_hash(argument); end

  # @return [Boolean]
  #
  # source://activejob//lib/active_job/arguments.rb#151
  def custom_serialized?(hash); end

  # source://activejob//lib/active_job/arguments.rb#122
  def deserialize_argument(argument); end

  # source://activejob//lib/active_job/arguments.rb#147
  def deserialize_global_id(hash); end

  # source://activejob//lib/active_job/arguments.rb#161
  def deserialize_hash(serialized_hash); end

  # source://activejob//lib/active_job/arguments.rb#95
  def serialize_argument(argument); end

  # source://activejob//lib/active_job/arguments.rb#155
  def serialize_hash(argument); end

  # source://activejob//lib/active_job/arguments.rb#174
  def serialize_hash_key(key); end

  # source://activejob//lib/active_job/arguments.rb#185
  def serialize_indifferent_hash(indifferent_hash); end

  # @return [Boolean]
  #
  # source://activejob//lib/active_job/arguments.rb#143
  def serialized_global_id?(hash); end

  # source://activejob//lib/active_job/arguments.rb#191
  def transform_symbol_keys(hash, symbol_keys); end
end

# source://activejob//lib/active_job/arguments.rb#52
ActiveJob::Arguments::GLOBALID_KEY = T.let(T.unsafe(nil), String)

# source://activejob//lib/active_job/arguments.rb#60
ActiveJob::Arguments::OBJECT_SERIALIZER_KEY = T.let(T.unsafe(nil), String)

# source://activejob//lib/active_job/arguments.rb#50
ActiveJob::Arguments::PERMITTED_TYPES = T.let(T.unsafe(nil), Array)

# source://activejob//lib/active_job/arguments.rb#63
ActiveJob::Arguments::RESERVED_KEYS = T.let(T.unsafe(nil), Array)

# source://activejob//lib/active_job/arguments.rb#56
ActiveJob::Arguments::RUBY2_KEYWORDS_KEY = T.let(T.unsafe(nil), String)

# source://activejob//lib/active_job/arguments.rb#54
ActiveJob::Arguments::SYMBOL_KEYS_KEY = T.let(T.unsafe(nil), String)

# source://activejob//lib/active_job/arguments.rb#58
ActiveJob::Arguments::WITH_INDIFFERENT_ACCESS_KEY = T.let(T.unsafe(nil), String)

# = Active Job
#
# Active Job objects can be configured to work with different backend
# queuing frameworks. To specify a queue adapter to use:
#
#   ActiveJob::Base.queue_adapter = :inline
#
# A list of supported adapters can be found in QueueAdapters.
#
# Active Job objects can be defined by creating a class that inherits
# from the ActiveJob::Base class. The only necessary method to
# implement is the "perform" method.
#
# To define an Active Job object:
#
#   class ProcessPhotoJob < ActiveJob::Base
#     def perform(photo)
#       photo.watermark!('Rails')
#       photo.rotate!(90.degrees)
#       photo.resize_to_fit!(300, 300)
#       photo.upload!
#     end
#   end
#
# Records that are passed in are serialized/deserialized using Global
# ID. More information can be found in Arguments.
#
# To enqueue a job to be performed as soon as the queuing system is free:
#
#   ProcessPhotoJob.perform_later(photo)
#
# To enqueue a job to be processed at some point in the future:
#
#   ProcessPhotoJob.set(wait_until: Date.tomorrow.noon).perform_later(photo)
#
# More information can be found in ActiveJob::Core::ClassMethods#set
#
# A job can also be processed immediately without sending to the queue:
#
#  ProcessPhotoJob.perform_now(photo)
#
# == Exceptions
#
# * DeserializationError - Error class for deserialization errors.
# * SerializationError - Error class for serialization errors.
class ActiveJob::Base
  include ::ActiveJob::Core
  include ::ActiveJob::QueueAdapter
  include ::ActiveJob::QueueName
  include ::ActiveJob::QueuePriority
  include ::ActiveJob::Enqueuing
  include ::ActiveSupport::Rescuable
  include ::ActiveJob::Execution
  include ::ActiveSupport::Callbacks
  include ::ActiveJob::Callbacks
  include ::ActiveJob::Exceptions
  include ::ActiveJob::Instrumentation
  include ::ActiveJob::Logging
  include ::ActiveJob::Timezones
  include ::ActiveJob::Translation
  include ::ActiveJob::TestHelper::TestQueueAdapter
  extend ::ActiveJob::Core::ClassMethods
  extend ::ActiveJob::QueueAdapter::ClassMethods
  extend ::ActiveJob::QueueName::ClassMethods
  extend ::ActiveJob::QueuePriority::ClassMethods
  extend ::ActiveJob::Enqueuing::ClassMethods
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::ActiveJob::Execution::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveJob::Callbacks::ClassMethods
  extend ::ActiveJob::Exceptions::ClassMethods
  extend ::ActiveJob::TestHelper::TestQueueAdapter::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _enqueue_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _perform_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_enqueue_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_perform_callbacks(&block); end

  # source://activejob//lib/active_job/logging.rb#11
  def logger; end

  # source://activejob//lib/active_job/logging.rb#11
  def logger=(val); end

  # source://activejob//lib/active_job/queue_adapter.rb#15
  def queue_adapter(*_arg0, **_arg1, &_arg2); end

  # source://activejob//lib/active_job/queue_name.rb#58
  def queue_name_prefix; end

  # source://activejob//lib/active_job/queue_name.rb#58
  def queue_name_prefix=(_arg0); end

  # source://activejob//lib/active_job/queue_name.rb#58
  def queue_name_prefix?; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers?; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _enqueue_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _enqueue_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _perform_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _perform_callbacks=(value); end

    # source://activejob//lib/active_job/queue_adapter.rb#13
    def _queue_adapter; end

    # source://activejob//lib/active_job/queue_adapter.rb#13
    def _queue_adapter=(value); end

    # source://activejob//lib/active_job/queue_adapter.rb#12
    def _queue_adapter_name; end

    # source://activejob//lib/active_job/queue_adapter.rb#12
    def _queue_adapter_name=(value); end

    # source://activejob//lib/active_job/test_helper.rb#19
    def _test_adapter; end

    # source://activejob//lib/active_job/test_helper.rb#19
    def _test_adapter=(value); end

    # source://activejob//lib/active_job/logging.rb#12
    def log_arguments; end

    # source://activejob//lib/active_job/logging.rb#12
    def log_arguments=(value); end

    # source://activejob//lib/active_job/logging.rb#12
    def log_arguments?; end

    # source://activejob//lib/active_job/logging.rb#11
    def logger; end

    # source://activejob//lib/active_job/logging.rb#11
    def logger=(val); end

    # source://activejob//lib/active_job/queue_priority.rb#32
    def priority; end

    # source://activejob//lib/active_job/queue_priority.rb#32
    def priority=(value); end

    # source://activejob//lib/active_job/queue_priority.rb#32
    def priority?; end

    # source://activejob//lib/active_job/queue_name.rb#56
    def queue_name; end

    # source://activejob//lib/active_job/queue_name.rb#56
    def queue_name=(value); end

    # source://activejob//lib/active_job/queue_name.rb#56
    def queue_name?; end

    # source://activejob//lib/active_job/queue_name.rb#57
    def queue_name_delimiter; end

    # source://activejob//lib/active_job/queue_name.rb#57
    def queue_name_delimiter=(value); end

    # source://activejob//lib/active_job/queue_name.rb#57
    def queue_name_delimiter?; end

    # source://activejob//lib/active_job/queue_name.rb#58
    def queue_name_prefix; end

    # source://activejob//lib/active_job/queue_name.rb#58
    def queue_name_prefix=(value); end

    # source://activejob//lib/active_job/queue_name.rb#58
    def queue_name_prefix?; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers?; end

    # source://activejob//lib/active_job/exceptions.rb#11
    def retry_jitter; end

    # source://activejob//lib/active_job/exceptions.rb#11
    def retry_jitter=(value); end

    # source://activesupport/7.0.4/lib/active_support/deprecation/method_wrappers.rb#63
    def skip_after_callbacks_if_terminated(*args, **_arg1, &block); end

    # source://activesupport/7.0.4/lib/active_support/deprecation/method_wrappers.rb#63
    def skip_after_callbacks_if_terminated=(*args, **_arg1, &block); end
  end
end

# = Active Job Callbacks
#
# Active Job provides hooks during the life cycle of a job. Callbacks allow you
# to trigger logic during this cycle. Available callbacks are:
#
# * <tt>before_enqueue</tt>
# * <tt>around_enqueue</tt>
# * <tt>after_enqueue</tt>
# * <tt>before_perform</tt>
# * <tt>around_perform</tt>
# * <tt>after_perform</tt>
#
# NOTE: Calling the same callback multiple times will overwrite previous callback definitions.
module ActiveJob::Callbacks
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Callbacks
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveJob::Callbacks::ClassMethods

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
    def _execute_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
    def _run_execute_callbacks(&block); end
  end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# These methods will be included into any Active Job object, adding
# callbacks for +perform+ and +enqueue+ methods.
module ActiveJob::Callbacks::ClassMethods
  # Defines a callback that will get called right after the
  # job is enqueued.
  #
  #   class VideoProcessJob < ActiveJob::Base
  #     queue_as :default
  #
  #     after_enqueue do |job|
  #       $statsd.increment "enqueue-video-job.success"
  #     end
  #
  #     def perform(video_id)
  #       Video.find(video_id).process
  #     end
  #   end
  #
  # source://activejob//lib/active_job/callbacks.rb#146
  def after_enqueue(*filters, &blk); end

  # Defines a callback that will get called right after the
  # job's perform method has finished.
  #
  #   class VideoProcessJob < ActiveJob::Base
  #     queue_as :default
  #
  #     after_perform do |job|
  #       UserMailer.notify_video_processed(job.arguments.first)
  #     end
  #
  #     def perform(video_id)
  #       Video.find(video_id).process
  #     end
  #   end
  #
  # source://activejob//lib/active_job/callbacks.rb#75
  def after_perform(*filters, &blk); end

  # Defines a callback that will get called around the enqueuing
  # of the job.
  #
  #   class VideoProcessJob < ActiveJob::Base
  #     queue_as :default
  #
  #     around_enqueue do |job, block|
  #       $statsd.time "video-job.process" do
  #         block.call
  #       end
  #     end
  #
  #     def perform(video_id)
  #       Video.find(video_id).process
  #     end
  #   end
  #
  # source://activejob//lib/active_job/callbacks.rb#167
  def around_enqueue(*filters, &blk); end

  # Defines a callback that will get called around the job's perform method.
  #
  #   class VideoProcessJob < ActiveJob::Base
  #     queue_as :default
  #
  #     around_perform do |job, block|
  #       UserMailer.notify_video_started_processing(job.arguments.first)
  #       block.call
  #       UserMailer.notify_video_processed(job.arguments.first)
  #     end
  #
  #     def perform(video_id)
  #       Video.find(video_id).process
  #     end
  #   end
  #
  # You can access the return value of the job only if the execution wasn't halted.
  #
  #   class VideoProcessJob < ActiveJob::Base
  #     around_perform do |job, block|
  #       value = block.call
  #       puts value # => "Hello World!"
  #     end
  #
  #     def perform
  #       "Hello World!"
  #     end
  #   end
  #
  # source://activejob//lib/active_job/callbacks.rb#108
  def around_perform(*filters, &blk); end

  # Defines a callback that will get called right before the
  # job is enqueued.
  #
  #   class VideoProcessJob < ActiveJob::Base
  #     queue_as :default
  #
  #     before_enqueue do |job|
  #       $statsd.increment "enqueue-video-job.try"
  #     end
  #
  #     def perform(video_id)
  #       Video.find(video_id).process
  #     end
  #   end
  #
  # source://activejob//lib/active_job/callbacks.rb#127
  def before_enqueue(*filters, &blk); end

  # Defines a callback that will get called right before the
  # job's perform method is executed.
  #
  #   class VideoProcessJob < ActiveJob::Base
  #     queue_as :default
  #
  #     before_perform do |job|
  #       UserMailer.notify_video_started_processing(job.arguments.first)
  #     end
  #
  #     def perform(video_id)
  #       Video.find(video_id).process
  #     end
  #   end
  #
  # source://activejob//lib/active_job/callbacks.rb#56
  def before_perform(*filters, &blk); end
end

class ActiveJob::ConfiguredJob
  # @return [ConfiguredJob] a new instance of ConfiguredJob
  #
  # source://activejob//lib/active_job/configured_job.rb#5
  def initialize(job_class, options = T.unsafe(nil)); end

  # source://activejob//lib/active_job/configured_job.rb#14
  def perform_later(*_arg0, **_arg1, &_arg2); end

  # source://activejob//lib/active_job/configured_job.rb#10
  def perform_now(*_arg0, **_arg1, &_arg2); end
end

# Provides general behavior that will be included into every Active Job
# object that inherits from ActiveJob::Base.
module ActiveJob::Core
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::Core::ClassMethods

  # Creates a new job instance. Takes the arguments that will be
  # passed to the perform method.
  #
  # source://activejob//lib/active_job/core.rb#91
  def initialize(*arguments, **_arg1); end

  # Job arguments
  #
  # source://activejob//lib/active_job/core.rb#10
  def arguments; end

  # Job arguments
  #
  # source://activejob//lib/active_job/core.rb#10
  def arguments=(_arg0); end

  # Attaches the stored job data to the current instance. Receives a hash
  # returned from +serialize+
  #
  # ==== Examples
  #
  #    class DeliverWebhookJob < ActiveJob::Base
  #      attr_writer :attempt_number
  #
  #      def attempt_number
  #        @attempt_number ||= 0
  #      end
  #
  #      def serialize
  #        super.merge('attempt_number' => attempt_number + 1)
  #      end
  #
  #      def deserialize(job_data)
  #        super
  #        self.attempt_number = job_data['attempt_number']
  #      end
  #
  #      rescue_from(Timeout::Error) do |exception|
  #        raise exception if attempt_number > 5
  #        retry_job(wait: 10)
  #      end
  #    end
  #
  # source://activejob//lib/active_job/core.rb#146
  def deserialize(job_data); end

  # Track any exceptions raised by the backend so callers can inspect the errors.
  #
  # source://activejob//lib/active_job/core.rb#54
  def enqueue_error; end

  # Track any exceptions raised by the backend so callers can inspect the errors.
  #
  # source://activejob//lib/active_job/core.rb#54
  def enqueue_error=(_arg0); end

  # Track when a job was enqueued
  #
  # source://activejob//lib/active_job/core.rb#44
  def enqueued_at; end

  # Track when a job was enqueued
  #
  # source://activejob//lib/active_job/core.rb#44
  def enqueued_at=(_arg0); end

  # Hash that contains the number of times this job handled errors for each specific retry_on declaration.
  # Keys are the string representation of the exceptions listed in the retry_on declaration,
  # while its associated value holds the number of executions where the corresponding retry_on
  # declaration handled one of its listed exceptions.
  #
  # source://activejob//lib/active_job/core.rb#35
  def exception_executions; end

  # Hash that contains the number of times this job handled errors for each specific retry_on declaration.
  # Keys are the string representation of the exceptions listed in the retry_on declaration,
  # while its associated value holds the number of executions where the corresponding retry_on
  # declaration handled one of its listed exceptions.
  #
  # source://activejob//lib/active_job/core.rb#35
  def exception_executions=(_arg0); end

  # Number of times this job has been executed (which increments on every retry, like after an exception).
  #
  # source://activejob//lib/active_job/core.rb#29
  def executions; end

  # Number of times this job has been executed (which increments on every retry, like after an exception).
  #
  # source://activejob//lib/active_job/core.rb#29
  def executions=(_arg0); end

  # Job Identifier
  #
  # source://activejob//lib/active_job/core.rb#17
  def job_id; end

  # Job Identifier
  #
  # source://activejob//lib/active_job/core.rb#17
  def job_id=(_arg0); end

  # I18n.locale to be used during the job.
  #
  # source://activejob//lib/active_job/core.rb#38
  def locale; end

  # I18n.locale to be used during the job.
  #
  # source://activejob//lib/active_job/core.rb#38
  def locale=(_arg0); end

  # Priority that the job will have (lower is more priority).
  #
  # source://activejob//lib/active_job/core.rb#23
  def priority=(_arg0); end

  # ID optionally provided by adapter
  #
  # source://activejob//lib/active_job/core.rb#26
  def provider_job_id; end

  # ID optionally provided by adapter
  #
  # source://activejob//lib/active_job/core.rb#26
  def provider_job_id=(_arg0); end

  # Queue in which the job will reside.
  #
  # source://activejob//lib/active_job/core.rb#20
  def queue_name=(_arg0); end

  # Timestamp when the job should be performed
  #
  # source://activejob//lib/active_job/core.rb#14
  def scheduled_at; end

  # Timestamp when the job should be performed
  #
  # source://activejob//lib/active_job/core.rb#14
  def scheduled_at=(_arg0); end

  # Returns a hash with the job data that can safely be passed to the
  # queuing adapter.
  #
  # source://activejob//lib/active_job/core.rb#104
  def serialize; end

  # Sets the attribute serialized_arguments
  #
  # @param value the value to set the attribute serialized_arguments to.
  #
  # source://activejob//lib/active_job/core.rb#11
  def serialized_arguments=(_arg0); end

  # Configures the job with the given options.
  #
  # source://activejob//lib/active_job/core.rb#160
  def set(options = T.unsafe(nil)); end

  # Track whether the adapter received the job successfully.
  #
  # source://activejob//lib/active_job/core.rb#47
  def successfully_enqueued=(_arg0); end

  # @return [Boolean]
  #
  # source://activejob//lib/active_job/core.rb#49
  def successfully_enqueued?; end

  # Timezone to be used during the job.
  #
  # source://activejob//lib/active_job/core.rb#41
  def timezone; end

  # Timezone to be used during the job.
  #
  # source://activejob//lib/active_job/core.rb#41
  def timezone=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://activejob//lib/active_job/core.rb#193
  def arguments_serialized?; end

  # source://activejob//lib/active_job/core.rb#189
  def deserialize_arguments(serialized_args); end

  # source://activejob//lib/active_job/core.rb#178
  def deserialize_arguments_if_needed; end

  # source://activejob//lib/active_job/core.rb#185
  def serialize_arguments(arguments); end

  # source://activejob//lib/active_job/core.rb#170
  def serialize_arguments_if_needed(arguments); end
end

# These methods will be included into any Active Job object, adding
# helpers for de/serialization and creation of job instances.
module ActiveJob::Core::ClassMethods
  # Creates a new job instance from a hash created with +serialize+
  #
  # source://activejob//lib/active_job/core.rb#60
  def deserialize(job_data); end

  # Creates a job preconfigured with the given options. You can call
  # perform_later with the job arguments to enqueue the job with the
  # preconfigured options
  #
  # ==== Options
  # * <tt>:wait</tt> - Enqueues the job with the specified delay
  # * <tt>:wait_until</tt> - Enqueues the job at the time specified
  # * <tt>:queue</tt> - Enqueues the job on the specified queue
  # * <tt>:priority</tt> - Enqueues the job with the specified priority
  #
  # ==== Examples
  #
  #    VideoJob.set(queue: :some_queue).perform_later(Video.last)
  #    VideoJob.set(wait: 5.minutes).perform_later(Video.last)
  #    VideoJob.set(wait_until: Time.now.tomorrow).perform_later(Video.last)
  #    VideoJob.set(queue: :some_queue, wait: 5.minutes).perform_later(Video.last)
  #    VideoJob.set(queue: :some_queue, wait_until: Time.now.tomorrow).perform_later(Video.last)
  #    VideoJob.set(queue: :some_queue, wait: 5.minutes, priority: 10).perform_later(Video.last)
  #
  # source://activejob//lib/active_job/core.rb#84
  def set(options = T.unsafe(nil)); end
end

# Raised when an exception is raised during job arguments deserialization.
#
# Wraps the original exception raised as +cause+.
class ActiveJob::DeserializationError < ::StandardError
  # @return [DeserializationError] a new instance of DeserializationError
  #
  # source://activejob//lib/active_job/arguments.rb#11
  def initialize; end
end

# Can be raised by adapters if they wish to communicate to the caller a reason
# why the adapter was unexpectedly unable to enqueue a job.
class ActiveJob::EnqueueError < ::StandardError; end

module ActiveJob::Enqueuing
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::Enqueuing::ClassMethods

  # Enqueues the job to be performed by the queue adapter.
  #
  # ==== Options
  # * <tt>:wait</tt> - Enqueues the job with the specified delay
  # * <tt>:wait_until</tt> - Enqueues the job at the time specified
  # * <tt>:queue</tt> - Enqueues the job on the specified queue
  # * <tt>:priority</tt> - Enqueues the job with the specified priority
  #
  # ==== Examples
  #
  #    my_job_instance.enqueue
  #    my_job_instance.enqueue wait: 5.minutes
  #    my_job_instance.enqueue queue: :important
  #    my_job_instance.enqueue wait_until: Date.tomorrow.midnight
  #    my_job_instance.enqueue priority: 10
  #
  # source://activejob//lib/active_job/enqueuing.rb#59
  def enqueue(options = T.unsafe(nil)); end
end

# Includes the +perform_later+ method for job initialization.
module ActiveJob::Enqueuing::ClassMethods
  # Push a job onto the queue. By default the arguments must be either String,
  # Integer, Float, NilClass, TrueClass, FalseClass, BigDecimal, Symbol, Date,
  # Time, DateTime, ActiveSupport::TimeWithZone, ActiveSupport::Duration,
  # Hash, ActiveSupport::HashWithIndifferentAccess, Array, Range, or
  # GlobalID::Identification instances, although this can be extended by adding
  # custom serializers.
  #
  # Returns an instance of the job class queued with arguments available in
  # Job#arguments or false if the enqueue did not succeed.
  #
  # After the attempted enqueue, the job will be yielded to an optional block.
  #
  # @yield [job]
  #
  # source://activejob//lib/active_job/enqueuing.rb#28
  def perform_later(*_arg0, **_arg1, &_arg2); end

  private

  # source://activejob//lib/active_job/enqueuing.rb#38
  def job_or_instantiate(*args, **_arg1); end
end

# Provides behavior for retrying and discarding jobs on exceptions.
module ActiveJob::Exceptions
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::Exceptions::ClassMethods

  # Reschedules the job to be re-executed. This is useful in combination
  # with the +rescue_from+ option. When you rescue an exception from your job
  # you can ask Active Job to retry performing your job.
  #
  # ==== Options
  # * <tt>:wait</tt> - Enqueues the job with the specified delay in seconds
  # * <tt>:wait_until</tt> - Enqueues the job at the time specified
  # * <tt>:queue</tt> - Enqueues the job on the specified queue
  # * <tt>:priority</tt> - Enqueues the job with the specified priority
  #
  # ==== Examples
  #
  #  class SiteScraperJob < ActiveJob::Base
  #    rescue_from(ErrorLoadingSite) do
  #      retry_job queue: :low_priority
  #    end
  #
  #    def perform(*args)
  #      # raise ErrorLoadingSite if cannot scrape
  #    end
  #  end
  #
  # source://activejob//lib/active_job/exceptions.rb#124
  def retry_job(options = T.unsafe(nil)); end

  private

  # source://activejob//lib/active_job/exceptions.rb#134
  def determine_delay(seconds_or_duration_or_algorithm:, executions:, jitter: T.unsafe(nil)); end

  # source://activejob//lib/active_job/exceptions.rb#154
  def determine_jitter_for_delay(delay, jitter); end

  # source://activejob//lib/active_job/exceptions.rb#159
  def executions_for(exceptions); end

  module GeneratedClassMethods
    def retry_jitter; end
    def retry_jitter=(value); end
  end

  module GeneratedInstanceMethods; end
end

module ActiveJob::Exceptions::ClassMethods
  # Discard the job with no attempts to retry, if the exception is raised. This is useful when the subject of the job,
  # like an Active Record, is no longer available, and the job is thus no longer relevant.
  #
  # You can also pass a block that'll be invoked. This block is yielded with the job instance as the first and the error instance as the second parameter.
  #
  # ==== Example
  #
  #  class SearchIndexingJob < ActiveJob::Base
  #    discard_on ActiveJob::DeserializationError
  #    discard_on(CustomAppException) do |job, error|
  #      ExceptionNotifier.caught(error)
  #    end
  #
  #    def perform(record)
  #      # Will raise ActiveJob::DeserializationError if the record can't be deserialized
  #      # Might raise CustomAppException for something domain specific
  #    end
  #  end
  #
  # source://activejob//lib/active_job/exceptions.rb#94
  def discard_on(*exceptions); end

  # Catch the exception and reschedule job for re-execution after so many seconds, for a specific number of attempts.
  # If the exception keeps getting raised beyond the specified number of attempts, the exception is allowed to
  # bubble up to the underlying queuing system, which may have its own retry mechanism or place it in a
  # holding queue for inspection.
  #
  # You can also pass a block that'll be invoked if the retry attempts fail for custom logic rather than letting
  # the exception bubble up. This block is yielded with the job instance as the first and the error instance as the second parameter.
  #
  # ==== Options
  # * <tt>:wait</tt> - Re-enqueues the job with a delay specified either in seconds (default: 3 seconds),
  #   as a computing proc that takes the number of executions so far as an argument, or as a symbol reference of
  #   <tt>:exponentially_longer</tt>, which applies the wait algorithm of <tt>((executions**4) + (Kernel.rand * (executions**4) * jitter)) + 2</tt>
  #   (first wait ~3s, then ~18s, then ~83s, etc)
  # * <tt>:attempts</tt> - Re-enqueues the job the specified number of times (default: 5 attempts) or a symbol reference of <tt>:unlimited</tt>
  #   to retry the job until it succeeds
  # * <tt>:queue</tt> - Re-enqueues the job on a different queue
  # * <tt>:priority</tt> - Re-enqueues the job with a different priority
  # * <tt>:jitter</tt> - A random delay of wait time used when calculating backoff. The default is 15% (0.15) which represents the upper bound of possible wait time (expressed as a percentage)
  #
  # ==== Examples
  #
  #  class RemoteServiceJob < ActiveJob::Base
  #    retry_on CustomAppException # defaults to ~3s wait, 5 attempts
  #    retry_on AnotherCustomAppException, wait: ->(executions) { executions * 2 }
  #    retry_on CustomInfrastructureException, wait: 5.minutes, attempts: :unlimited
  #
  #    retry_on ActiveRecord::Deadlocked, wait: 5.seconds, attempts: 3
  #    retry_on Net::OpenTimeout, Timeout::Error, wait: :exponentially_longer, attempts: 10 # retries at most 10 times for Net::OpenTimeout and Timeout::Error combined
  #    # To retry at most 10 times for each individual exception:
  #    # retry_on Net::OpenTimeout, wait: :exponentially_longer, attempts: 10
  #    # retry_on Net::ReadTimeout, wait: 5.seconds, jitter: 0.30, attempts: 10
  #    # retry_on Timeout::Error, wait: :exponentially_longer, attempts: 10
  #
  #    retry_on(YetAnotherCustomAppException) do |job, error|
  #      ExceptionNotifier.caught(error)
  #    end
  #
  #    def perform(*args)
  #      # Might raise CustomAppException, AnotherCustomAppException, or YetAnotherCustomAppException for something domain specific
  #      # Might raise ActiveRecord::Deadlocked when a local db deadlock is detected
  #      # Might raise Net::OpenTimeout or Timeout::Error when the remote service is down
  #    end
  #  end
  #
  # source://activejob//lib/active_job/exceptions.rb#58
  def retry_on(*exceptions, wait: T.unsafe(nil), attempts: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil), jitter: T.unsafe(nil)); end
end

# source://activejob//lib/active_job/exceptions.rb#131
ActiveJob::Exceptions::JITTER_DEFAULT = T.let(T.unsafe(nil), Object)

module ActiveJob::Execution
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Rescuable

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods
  mixes_in_class_methods ::ActiveJob::Execution::ClassMethods

  # source://activejob//lib/active_job/execution.rb#51
  def perform(*_arg0); end

  # Performs the job immediately. The job is not sent to the queuing adapter
  # but directly executed by blocking the execution of others until it's finished.
  # +perform_now+ returns the value of your job's +perform+ method.
  #
  #   class MyJob < ActiveJob::Base
  #     def perform
  #       "Hello World!"
  #     end
  #   end
  #
  #   puts MyJob.new(*args).perform_now # => "Hello World!"
  #
  # source://activejob//lib/active_job/execution.rb#40
  def perform_now; end

  private

  # source://activejob//lib/active_job/execution.rb#56
  def _perform_job; end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

# Includes methods for executing and performing jobs instantly.
module ActiveJob::Execution::ClassMethods
  # source://activejob//lib/active_job/execution.rb#21
  def execute(job_data); end

  # Performs the job immediately.
  #
  #   MyJob.perform_now("mike")
  #
  # source://activejob//lib/active_job/execution.rb#17
  def perform_now(*_arg0, **_arg1, &_arg2); end
end

module ActiveJob::Instrumentation
  extend ::ActiveSupport::Concern

  # source://activejob//lib/active_job/instrumentation.rb#13
  def perform_now; end

  private

  # source://activejob//lib/active_job/instrumentation.rb#18
  def _perform_job; end

  # source://activejob//lib/active_job/instrumentation.rb#39
  def halted_callback_hook(*_arg0); end

  # source://activejob//lib/active_job/instrumentation.rb#23
  def instrument(operation, payload = T.unsafe(nil), &block); end
end

class ActiveJob::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://activejob//lib/active_job/log_subscriber.rb#94
  def discard(event); end

  # source://activejob//lib/active_job/log_subscriber.rb#8
  def enqueue(event); end

  # source://activejob//lib/active_job/log_subscriber.rb#27
  def enqueue_at(event); end

  # source://activejob//lib/active_job/log_subscriber.rb#71
  def enqueue_retry(event); end

  # source://activejob//lib/active_job/log_subscriber.rb#53
  def perform(event); end

  # source://activejob//lib/active_job/log_subscriber.rb#46
  def perform_start(event); end

  # source://activejob//lib/active_job/log_subscriber.rb#85
  def retry_stopped(event); end

  private

  # source://activejob//lib/active_job/log_subscriber.rb#108
  def args_info(job); end

  # source://activejob//lib/active_job/log_subscriber.rb#117
  def format(arg); end

  # source://activejob//lib/active_job/log_subscriber.rb#134
  def logger; end

  # source://activejob//lib/active_job/log_subscriber.rb#104
  def queue_name(event); end

  # source://activejob//lib/active_job/log_subscriber.rb#130
  def scheduled_at(event); end
end

module ActiveJob::Logging
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://activejob//lib/active_job/logging.rb#17
  def perform_now; end

  private

  # @return [Boolean]
  #
  # source://activejob//lib/active_job/logging.rb#31
  def logger_tagged_by_active_job?; end

  # source://activejob//lib/active_job/logging.rb#22
  def tag_logger(*tags, &block); end

  module GeneratedClassMethods
    def log_arguments; end
    def log_arguments=(value); end
    def log_arguments?; end
  end

  module GeneratedInstanceMethods; end
end

# The <tt>ActiveJob::QueueAdapter</tt> module is used to load the
# correct adapter. The default queue adapter is the +:async+ queue.
module ActiveJob::QueueAdapter
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueueAdapter::ClassMethods

  module GeneratedClassMethods
    def _queue_adapter; end
    def _queue_adapter=(value); end
    def _queue_adapter_name; end
    def _queue_adapter_name=(value); end
  end

  module GeneratedInstanceMethods; end
end

# Includes the setter method for changing the active queue adapter.
module ActiveJob::QueueAdapter::ClassMethods
  # Returns the backend queue provider. The default queue adapter
  # is the +:async+ queue. See QueueAdapters for more information.
  #
  # source://activejob//lib/active_job/queue_adapter.rb#24
  def queue_adapter; end

  # Specify the backend queue provider. The default queue adapter
  # is the +:async+ queue. See QueueAdapters for more
  # information.
  #
  # source://activejob//lib/active_job/queue_adapter.rb#37
  def queue_adapter=(name_or_adapter); end

  # Returns string denoting the name of the configured queue adapter.
  # By default returns <tt>"async"</tt>.
  #
  # source://activejob//lib/active_job/queue_adapter.rb#30
  def queue_adapter_name; end

  private

  # source://activejob//lib/active_job/queue_adapter.rb#53
  def assign_adapter(adapter_name, queue_adapter); end

  # @return [Boolean]
  #
  # source://activejob//lib/active_job/queue_adapter.rb#60
  def queue_adapter?(object); end
end

# source://activejob//lib/active_job/queue_adapter.rb#58
ActiveJob::QueueAdapter::ClassMethods::QUEUE_ADAPTER_METHODS = T.let(T.unsafe(nil), Array)

# == Active Job adapters
#
# Active Job has adapters for the following queuing backends:
#
# * {Backburner}[https://github.com/nesquena/backburner]
# * {Delayed Job}[https://github.com/collectiveidea/delayed_job]
# * {Que}[https://github.com/chanks/que]
# * {queue_classic}[https://github.com/QueueClassic/queue_classic]
# * {Resque}[https://github.com/resque/resque]
# * {Sidekiq}[https://sidekiq.org]
# * {Sneakers}[https://github.com/jondot/sneakers]
# * {Sucker Punch}[https://github.com/brandonhilkert/sucker_punch]
# * {Active Job Async Job}[https://api.rubyonrails.org/classes/ActiveJob/QueueAdapters/AsyncAdapter.html]
# * {Active Job Inline}[https://api.rubyonrails.org/classes/ActiveJob/QueueAdapters/InlineAdapter.html]
# * Please Note: We are not accepting pull requests for new adapters. See the {README}[link:files/activejob/README_md.html] for more details.
#
# === Backends Features
#
#   |                   | Async | Queues | Delayed    | Priorities | Timeout | Retries |
#   |-------------------|-------|--------|------------|------------|---------|---------|
#   | Backburner        | Yes   | Yes    | Yes        | Yes        | Job     | Global  |
#   | Delayed Job       | Yes   | Yes    | Yes        | Job        | Global  | Global  |
#   | Que               | Yes   | Yes    | Yes        | Job        | No      | Job     |
#   | queue_classic     | Yes   | Yes    | Yes*       | No         | No      | No      |
#   | Resque            | Yes   | Yes    | Yes (Gem)  | Queue      | Global  | Yes     |
#   | Sidekiq           | Yes   | Yes    | Yes        | Queue      | No      | Job     |
#   | Sneakers          | Yes   | Yes    | No         | Queue      | Queue   | No      |
#   | Sucker Punch      | Yes   | Yes    | Yes        | No         | No      | No      |
#   | Active Job Async  | Yes   | Yes    | Yes        | No         | No      | No      |
#   | Active Job Inline | No    | Yes    | N/A        | N/A        | N/A     | N/A     |
#
# ==== Async
#
# Yes: The Queue Adapter has the ability to run the job in a non-blocking manner.
# It either runs on a separate or forked process, or on a different thread.
#
# No: The job is run in the same process.
#
# ==== Queues
#
# Yes: Jobs may set which queue they are run in with queue_as or by using the set
# method.
#
# ==== Delayed
#
# Yes: The adapter will run the job in the future through perform_later.
#
# (Gem): An additional gem is required to use perform_later with this adapter.
#
# No: The adapter will run jobs at the next opportunity and cannot use perform_later.
#
# N/A: The adapter does not support queuing.
#
# NOTE:
# queue_classic supports job scheduling since version 3.1.
# For older versions you can use the queue_classic-later gem.
#
# ==== Priorities
#
# The order in which jobs are processed can be configured differently depending
# on the adapter.
#
# Job: Any class inheriting from the adapter may set the priority on the job
# object relative to other jobs.
#
# Queue: The adapter can set the priority for job queues, when setting a queue
# with Active Job this will be respected.
#
# Yes: Allows the priority to be set on the job object, at the queue level or
# as default configuration option.
#
# No: The adapter does not allow the priority of jobs to be configured.
#
# N/A: The adapter does not support queuing, and therefore sorting them.
#
# ==== Timeout
#
# When a job will stop after the allotted time.
#
# Job: The timeout can be set for each instance of the job class.
#
# Queue: The timeout is set for all jobs on the queue.
#
# Global: The adapter is configured that all jobs have a maximum run time.
#
# No: The adapter does not allow the timeout of jobs to be configured.
#
# N/A: This adapter does not run in a separate process, and therefore timeout
# is unsupported.
#
# ==== Retries
#
# Job: The number of retries can be set per instance of the job class.
#
# Yes: The Number of retries can be configured globally, for each instance or
# on the queue. This adapter may also present failed instances of the job class
# that can be restarted.
#
# Global: The adapter has a global number of retries.
#
# No: The adapter does not allow the number of retries to be configured.
#
# N/A: The adapter does not run in a separate process, and therefore doesn't
# support retries.
#
# === Async and Inline Queue Adapters
#
# Active Job has two built-in queue adapters intended for development and
# testing: +:async+ and +:inline+.
module ActiveJob::QueueAdapters
  extend ::ActiveSupport::Autoload

  class << self
    # Returns adapter for specified name.
    #
    #   ActiveJob::QueueAdapters.lookup(:sidekiq)
    #   # => ActiveJob::QueueAdapters::SidekiqAdapter
    #
    # source://activejob//lib/active_job/queue_adapters.rb#136
    def lookup(name); end
  end
end

# source://activejob//lib/active_job/queue_adapters.rb#128
ActiveJob::QueueAdapters::ADAPTER = T.let(T.unsafe(nil), String)

# == Active Job Async adapter
#
# The Async adapter runs jobs with an in-process thread pool.
#
# This is the default queue adapter. It's well-suited for dev/test since
# it doesn't need an external infrastructure, but it's a poor fit for
# production since it drops pending jobs on restart.
#
# To use this adapter, set queue adapter to +:async+:
#
#   config.active_job.queue_adapter = :async
#
# To configure the adapter's thread pool, instantiate the adapter and
# pass your own config:
#
#   config.active_job.queue_adapter = ActiveJob::QueueAdapters::AsyncAdapter.new \
#     min_threads: 1,
#     max_threads: 2 * Concurrent.processor_count,
#     idletime: 600.seconds
#
# The adapter uses a {Concurrent Ruby}[https://github.com/ruby-concurrency/concurrent-ruby] thread pool to schedule and execute
# jobs. Since jobs share a single thread pool, long-running jobs will block
# short-lived jobs. Fine for dev/test; bad for production.
class ActiveJob::QueueAdapters::AsyncAdapter
  # See {Concurrent::ThreadPoolExecutor}[https://ruby-concurrency.github.io/concurrent-ruby/master/Concurrent/ThreadPoolExecutor.html] for executor options.
  #
  # @return [AsyncAdapter] a new instance of AsyncAdapter
  #
  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#35
  def initialize(**executor_options); end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#39
  def enqueue(job); end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#43
  def enqueue_at(job, timestamp); end

  # Used for our test suite.
  #
  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#55
  def immediate=(immediate); end

  # Gracefully stop processing jobs. Finishes in-progress work and handles
  # any new jobs following the executor's fallback policy (`caller_runs`).
  # Waits for termination by default. Pass `wait: false` to continue.
  #
  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#50
  def shutdown(wait: T.unsafe(nil)); end
end

# Note that we don't actually need to serialize the jobs since we're
# performing them in-process, but we do so anyway for parity with other
# adapters and deployment environments. Otherwise, serialization bugs
# may creep in undetected.
class ActiveJob::QueueAdapters::AsyncAdapter::JobWrapper
  # @return [JobWrapper] a new instance of JobWrapper
  #
  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#64
  def initialize(job); end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#69
  def perform; end
end

class ActiveJob::QueueAdapters::AsyncAdapter::Scheduler
  # @return [Scheduler] a new instance of Scheduler
  #
  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#86
  def initialize(**options); end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#92
  def enqueue(job, queue_name:); end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#96
  def enqueue_at(job, timestamp, queue_name:); end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#110
  def executor; end

  # Returns the value of attribute immediate.
  #
  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#84
  def immediate; end

  # Sets the attribute immediate
  #
  # @param value the value to set the attribute immediate to.
  #
  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#84
  def immediate=(_arg0); end

  # source://activejob//lib/active_job/queue_adapters/async_adapter.rb#105
  def shutdown(wait: T.unsafe(nil)); end
end

# source://activejob//lib/active_job/queue_adapters/async_adapter.rb#75
ActiveJob::QueueAdapters::AsyncAdapter::Scheduler::DEFAULT_EXECUTOR_OPTIONS = T.let(T.unsafe(nil), Hash)

# == Active Job Inline adapter
#
# When enqueuing jobs with the Inline adapter the job will be executed
# immediately.
#
# To use the Inline set the queue_adapter config to +:inline+.
#
#   Rails.application.config.active_job.queue_adapter = :inline
class ActiveJob::QueueAdapters::InlineAdapter
  # source://activejob//lib/active_job/queue_adapters/inline_adapter.rb#14
  def enqueue(job); end

  # @raise [NotImplementedError]
  #
  # source://activejob//lib/active_job/queue_adapters/inline_adapter.rb#18
  def enqueue_at(*_arg0); end
end

# == Test adapter for Active Job
#
# The test adapter should be used only in testing. Along with
# ActiveJob::TestCase and ActiveJob::TestHelper
# it makes a great tool to test your Rails application.
#
# To use the test adapter set +queue_adapter+ config to +:test+.
#
#   Rails.application.config.active_job.queue_adapter = :test
class ActiveJob::QueueAdapters::TestAdapter
  # Returns the value of attribute at.
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def at; end

  # Sets the attribute at
  #
  # @param value the value to set the attribute at to.
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def at=(_arg0); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#28
  def enqueue(job); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#33
  def enqueue_at(job, timestamp); end

  # Provides a store of all the enqueued jobs with the TestAdapter so you can check them.
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#19
  def enqueued_jobs; end

  # Sets the attribute enqueued_jobs
  #
  # @param value the value to set the attribute enqueued_jobs to.
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#16
  def enqueued_jobs=(_arg0); end

  # Returns the value of attribute filter.
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def filter; end

  # Sets the attribute filter
  #
  # @param value the value to set the attribute filter to.
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def filter=(_arg0); end

  # Returns the value of attribute perform_enqueued_at_jobs.
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def perform_enqueued_at_jobs; end

  # Sets the attribute perform_enqueued_at_jobs
  #
  # @param value the value to set the attribute perform_enqueued_at_jobs to.
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def perform_enqueued_at_jobs=(_arg0); end

  # Returns the value of attribute perform_enqueued_jobs.
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def perform_enqueued_jobs; end

  # Sets the attribute perform_enqueued_jobs
  #
  # @param value the value to set the attribute perform_enqueued_jobs to.
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def perform_enqueued_jobs=(_arg0); end

  # Provides a store of all the performed jobs with the TestAdapter so you can check them.
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#24
  def performed_jobs; end

  # Sets the attribute performed_jobs
  #
  # @param value the value to set the attribute performed_jobs to.
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#16
  def performed_jobs=(_arg0); end

  # Returns the value of attribute queue.
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def queue; end

  # Sets the attribute queue
  #
  # @param value the value to set the attribute queue to.
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def queue=(_arg0); end

  # Returns the value of attribute reject.
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def reject; end

  # Sets the attribute reject
  #
  # @param value the value to set the attribute reject to.
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#15
  def reject=(_arg0); end

  private

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#79
  def filter_as_proc(filter); end

  # @return [Boolean]
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#57
  def filtered?(job); end

  # @return [Boolean]
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#71
  def filtered_job_class?(job); end

  # @return [Boolean]
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#65
  def filtered_queue?(job); end

  # @return [Boolean]
  #
  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#61
  def filtered_time?(job); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#39
  def job_to_hash(job, extras = T.unsafe(nil)); end

  # source://activejob//lib/active_job/queue_adapters/test_adapter.rb#48
  def perform_or_enqueue(perform, job, job_data); end
end

module ActiveJob::QueueName
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueueName::ClassMethods

  # Returns the name of the queue the job will be run on.
  #
  # source://activejob//lib/active_job/queue_name.rb#62
  def queue_name; end

  module GeneratedClassMethods
    def queue_name; end
    def queue_name=(value); end
    def queue_name?; end
    def queue_name_delimiter; end
    def queue_name_delimiter=(value); end
    def queue_name_delimiter?; end
    def queue_name_prefix; end
    def queue_name_prefix=(value); end
    def queue_name_prefix?; end
  end

  module GeneratedInstanceMethods
    def queue_name_prefix; end
    def queue_name_prefix=(value); end
    def queue_name_prefix?; end
  end
end

# Includes the ability to override the default queue name and prefix.
module ActiveJob::QueueName::ClassMethods
  # source://activejob//lib/active_job/queue_name.rb#9
  def default_queue_name; end

  # source://activejob//lib/active_job/queue_name.rb#9
  def default_queue_name=(val); end

  # Specifies the name of the queue to process the job on.
  #
  #   class PublishToFeedJob < ActiveJob::Base
  #     queue_as :feeds
  #
  #     def perform(post)
  #       post.to_feed!
  #     end
  #   end
  #
  # Can be given a block that will evaluate in the context of the job
  # allowing +self.arguments+ to be accessed so that a dynamic queue name
  # can be applied:
  #
  #   class PublishToFeedJob < ApplicationJob
  #     queue_as do
  #       post = self.arguments.first
  #
  #       if post.paid?
  #         :paid_feeds
  #       else
  #         :feeds
  #       end
  #     end
  #
  #     def perform(post)
  #       post.to_feed!
  #     end
  #   end
  #
  # source://activejob//lib/active_job/queue_name.rb#40
  def queue_as(part_name = T.unsafe(nil), &block); end

  # source://activejob//lib/active_job/queue_name.rb#48
  def queue_name_from_part(part_name); end

  class << self
    # source://activejob//lib/active_job/queue_name.rb#9
    def default_queue_name; end

    # source://activejob//lib/active_job/queue_name.rb#9
    def default_queue_name=(val); end
  end
end

module ActiveJob::QueuePriority
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueuePriority::ClassMethods

  # Returns the priority that the job will be created with
  #
  # source://activejob//lib/active_job/queue_priority.rb#36
  def priority; end

  module GeneratedClassMethods
    def priority; end
    def priority=(value); end
    def priority?; end
  end

  module GeneratedInstanceMethods; end
end

# Includes the ability to override the default queue priority.
module ActiveJob::QueuePriority::ClassMethods
  # source://activejob//lib/active_job/queue_priority.rb#9
  def default_priority; end

  # source://activejob//lib/active_job/queue_priority.rb#9
  def default_priority=(val); end

  # Specifies the priority of the queue to create the job with.
  #
  #   class PublishToFeedJob < ActiveJob::Base
  #     queue_with_priority 50
  #
  #     def perform(post)
  #       post.to_feed!
  #     end
  #   end
  #
  # Specify either an argument or a block.
  #
  # source://activejob//lib/active_job/queue_priority.rb#22
  def queue_with_priority(priority = T.unsafe(nil), &block); end

  class << self
    # source://activejob//lib/active_job/queue_priority.rb#9
    def default_priority; end

    # source://activejob//lib/active_job/queue_priority.rb#9
    def default_priority=(val); end
  end
end

# = Active Job Railtie
class ActiveJob::Railtie < ::Rails::Railtie; end

# Raised when an unsupported argument type is set as a job argument. We
# currently support String, Integer, Float, NilClass, TrueClass, FalseClass,
# BigDecimal, Symbol, Date, Time, DateTime, ActiveSupport::TimeWithZone,
# ActiveSupport::Duration, Hash, ActiveSupport::HashWithIndifferentAccess,
# Array, Range, or GlobalID::Identification instances, although this can be
# extended by adding custom serializers.
# Raised if you set the key for a Hash something else than a string or
# a symbol. Also raised when trying to serialize an object which can't be
# identified with a GlobalID - such as an unpersisted Active Record model.
class ActiveJob::SerializationError < ::ArgumentError; end

# The <tt>ActiveJob::Serializers</tt> module is used to store a list of known serializers
# and to add new ones. It also has helpers to serialize/deserialize objects.
module ActiveJob::Serializers
  extend ::ActiveSupport::Autoload

  # source://activejob//lib/active_job/serializers.rb#22
  def _additional_serializers; end

  # source://activejob//lib/active_job/serializers.rb#22
  def _additional_serializers=(val); end

  class << self
    # source://activejob//lib/active_job/serializers.rb#22
    def _additional_serializers; end

    # source://activejob//lib/active_job/serializers.rb#22
    def _additional_serializers=(val); end

    # Adds new serializers to a list of known serializers.
    #
    # source://activejob//lib/active_job/serializers.rb#54
    def add_serializers(*new_serializers); end

    # Returns deserialized object.
    # Will look up through all known serializers.
    # If no serializer found will raise <tt>ArgumentError</tt>.
    #
    # @raise [ArgumentError]
    #
    # source://activejob//lib/active_job/serializers.rb#38
    def deserialize(argument); end

    # Returns serialized representative of the passed object.
    # Will look up through all known serializers.
    # Raises <tt>ActiveJob::SerializationError</tt> if it can't find a proper serializer.
    #
    # @raise [SerializationError]
    #
    # source://activejob//lib/active_job/serializers.rb#29
    def serialize(argument); end

    # Returns list of known serializers.
    #
    # source://activejob//lib/active_job/serializers.rb#49
    def serializers; end
  end
end

class ActiveJob::Serializers::DateSerializer < ::ActiveJob::Serializers::ObjectSerializer
  # source://activejob//lib/active_job/serializers/date_serializer.rb#10
  def deserialize(hash); end

  # source://activejob//lib/active_job/serializers/date_serializer.rb#6
  def serialize(date); end

  private

  # source://activejob//lib/active_job/serializers/date_serializer.rb#15
  def klass; end
end

class ActiveJob::Serializers::DateTimeSerializer < ::ActiveJob::Serializers::TimeObjectSerializer
  # source://activejob//lib/active_job/serializers/date_time_serializer.rb#6
  def deserialize(hash); end

  private

  # source://activejob//lib/active_job/serializers/date_time_serializer.rb#11
  def klass; end
end

class ActiveJob::Serializers::DurationSerializer < ::ActiveJob::Serializers::ObjectSerializer
  # source://activejob//lib/active_job/serializers/duration_serializer.rb#10
  def deserialize(hash); end

  # source://activejob//lib/active_job/serializers/duration_serializer.rb#6
  def serialize(duration); end

  private

  # source://activejob//lib/active_job/serializers/duration_serializer.rb#18
  def klass; end
end

class ActiveJob::Serializers::ModuleSerializer < ::ActiveJob::Serializers::ObjectSerializer
  # source://activejob//lib/active_job/serializers/module_serializer.rb#11
  def deserialize(hash); end

  # @raise [SerializationError]
  #
  # source://activejob//lib/active_job/serializers/module_serializer.rb#6
  def serialize(constant); end

  private

  # source://activejob//lib/active_job/serializers/module_serializer.rb#16
  def klass; end
end

# Base class for serializing and deserializing custom objects.
#
# Example:
#
#   class MoneySerializer < ActiveJob::Serializers::ObjectSerializer
#     def serialize(money)
#       super("amount" => money.amount, "currency" => money.currency)
#     end
#
#     def deserialize(hash)
#       Money.new(hash["amount"], hash["currency"])
#     end
#
#     private
#
#       def klass
#         Money
#       end
#   end
class ActiveJob::Serializers::ObjectSerializer
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # Deserializes an argument from a JSON primitive type.
  #
  # @raise [NotImplementedError]
  #
  # source://activejob//lib/active_job/serializers/object_serializer.rb#42
  def deserialize(json); end

  # Serializes an argument to a JSON primitive type.
  #
  # source://activejob//lib/active_job/serializers/object_serializer.rb#37
  def serialize(hash); end

  # Determines if an argument should be serialized by a serializer.
  #
  # @return [Boolean]
  #
  # source://activejob//lib/active_job/serializers/object_serializer.rb#32
  def serialize?(argument); end

  private

  # The class of the object that will be serialized.
  #
  # @raise [NotImplementedError]
  #
  # source://activejob//lib/active_job/serializers/object_serializer.rb#48
  def klass; end

  class << self
    # source://activejob//lib/active_job/serializers/object_serializer.rb#28
    def deserialize(*_arg0, **_arg1, &_arg2); end

    # source://activejob//lib/active_job/serializers/object_serializer.rb#28
    def serialize(*_arg0, **_arg1, &_arg2); end

    # source://activejob//lib/active_job/serializers/object_serializer.rb#28
    def serialize?(*_arg0, **_arg1, &_arg2); end
  end
end

class ActiveJob::Serializers::RangeSerializer < ::ActiveJob::Serializers::ObjectSerializer
  # source://activejob//lib/active_job/serializers/range_serializer.rb#13
  def deserialize(hash); end

  # source://activejob//lib/active_job/serializers/range_serializer.rb#8
  def serialize(range); end

  private

  # source://activejob//lib/active_job/serializers/range_serializer.rb#18
  def klass; end
end

# source://activejob//lib/active_job/serializers/range_serializer.rb#6
ActiveJob::Serializers::RangeSerializer::KEYS = T.let(T.unsafe(nil), Array)

class ActiveJob::Serializers::SymbolSerializer < ::ActiveJob::Serializers::ObjectSerializer
  # source://activejob//lib/active_job/serializers/symbol_serializer.rb#10
  def deserialize(argument); end

  # source://activejob//lib/active_job/serializers/symbol_serializer.rb#6
  def serialize(argument); end

  private

  # source://activejob//lib/active_job/serializers/symbol_serializer.rb#15
  def klass; end
end

class ActiveJob::Serializers::TimeObjectSerializer < ::ActiveJob::Serializers::ObjectSerializer
  # source://activejob//lib/active_job/serializers/time_object_serializer.rb#8
  def serialize(time); end
end

# source://activejob//lib/active_job/serializers/time_object_serializer.rb#6
ActiveJob::Serializers::TimeObjectSerializer::NANO_PRECISION = T.let(T.unsafe(nil), Integer)

class ActiveJob::Serializers::TimeSerializer < ::ActiveJob::Serializers::TimeObjectSerializer
  # source://activejob//lib/active_job/serializers/time_serializer.rb#6
  def deserialize(hash); end

  private

  # source://activejob//lib/active_job/serializers/time_serializer.rb#11
  def klass; end
end

class ActiveJob::Serializers::TimeWithZoneSerializer < ::ActiveJob::Serializers::TimeObjectSerializer
  # source://activejob//lib/active_job/serializers/time_with_zone_serializer.rb#6
  def deserialize(hash); end

  private

  # source://activejob//lib/active_job/serializers/time_with_zone_serializer.rb#11
  def klass; end
end

class ActiveJob::TestCase < ::ActiveSupport::TestCase
  include ::ActiveJob::TestHelper
end

# Provides helper methods for testing Active Job
module ActiveJob::TestHelper
  include ::ActiveSupport::Testing::Assertions

  # source://activejob//lib/active_job/test_helper.rb#51
  def after_teardown; end

  # Asserts that the number of enqueued jobs matches the given number.
  #
  #   def test_jobs
  #     assert_enqueued_jobs 0
  #     HelloJob.perform_later('david')
  #     assert_enqueued_jobs 1
  #     HelloJob.perform_later('abdelkader')
  #     assert_enqueued_jobs 2
  #   end
  #
  # If a block is passed, asserts that the block will cause the specified number of
  # jobs to be enqueued.
  #
  #   def test_jobs_again
  #     assert_enqueued_jobs 1 do
  #       HelloJob.perform_later('cristian')
  #     end
  #
  #     assert_enqueued_jobs 2 do
  #       HelloJob.perform_later('aaron')
  #       HelloJob.perform_later('rafael')
  #     end
  #   end
  #
  # Asserts the number of times a specific job was enqueued by passing +:only+ option.
  #
  #   def test_logging_job
  #     assert_enqueued_jobs 1, only: LoggingJob do
  #       LoggingJob.perform_later
  #       HelloJob.perform_later('jeremy')
  #     end
  #   end
  #
  # Asserts the number of times a job except specific class was enqueued by passing +:except+ option.
  #
  #   def test_logging_job
  #     assert_enqueued_jobs 1, except: HelloJob do
  #       LoggingJob.perform_later
  #       HelloJob.perform_later('jeremy')
  #     end
  #   end
  #
  # +:only+ and +:except+ options accept Class, Array of Class, or Proc. When passed a Proc,
  # a hash containing the job's class and it's argument are passed as argument.
  #
  # Asserts the number of times a job is enqueued to a specific queue by passing +:queue+ option.
  #
  #   def test_logging_job
  #     assert_enqueued_jobs 2, queue: 'default' do
  #       LoggingJob.perform_later
  #       HelloJob.perform_later('elfassy')
  #     end
  #   end
  #
  # source://activejob//lib/active_job/test_helper.rb#123
  def assert_enqueued_jobs(number, only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  # Asserts that the job has been enqueued with the given arguments.
  #
  #   def test_assert_enqueued_with
  #     MyJob.perform_later(1,2,3)
  #     assert_enqueued_with(job: MyJob, args: [1,2,3])
  #
  #     MyJob.set(wait_until: Date.tomorrow.noon, queue: "my_queue").perform_later
  #     assert_enqueued_with(at: Date.tomorrow.noon, queue: "my_queue")
  #   end
  #
  # The given arguments may also be specified as matcher procs that return a
  # boolean value indicating whether a job's attribute meets certain criteria.
  #
  # For example, a proc can be used to match a range of times:
  #
  #   def test_assert_enqueued_with
  #     at_matcher = ->(job_at) { (Date.yesterday..Date.tomorrow).cover?(job_at) }
  #
  #     MyJob.set(wait_until: Date.today.noon).perform_later
  #
  #     assert_enqueued_with(job: MyJob, at: at_matcher)
  #   end
  #
  # A proc can also be used to match a subset of a job's args:
  #
  #   def test_assert_enqueued_with
  #     args_matcher = ->(job_args) { job_args[0].key?(:foo) }
  #
  #     MyJob.perform_later(foo: "bar", other_arg: "No need to check in the test")
  #
  #     assert_enqueued_with(job: MyJob, args: args_matcher)
  #   end
  #
  # If a block is passed, asserts that the block will cause the job to be
  # enqueued with the given arguments.
  #
  #   def test_assert_enqueued_with
  #     assert_enqueued_with(job: MyJob, args: [1,2,3]) do
  #       MyJob.perform_later(1,2,3)
  #     end
  #
  #     assert_enqueued_with(job: MyJob, at: Date.tomorrow.noon) do
  #       MyJob.set(wait_until: Date.tomorrow.noon).perform_later
  #     end
  #   end
  #
  # source://activejob//lib/active_job/test_helper.rb#392
  def assert_enqueued_with(job: T.unsafe(nil), args: T.unsafe(nil), at: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil), &block); end

  # Asserts that no jobs have been enqueued.
  #
  #   def test_jobs
  #     assert_no_enqueued_jobs
  #     HelloJob.perform_later('jeremy')
  #     assert_enqueued_jobs 1
  #   end
  #
  # If a block is passed, asserts that the block will not cause any job to be enqueued.
  #
  #   def test_jobs_again
  #     assert_no_enqueued_jobs do
  #       # No job should be enqueued from this block
  #     end
  #   end
  #
  # Asserts that no jobs of a specific kind are enqueued by passing +:only+ option.
  #
  #   def test_no_logging
  #     assert_no_enqueued_jobs only: LoggingJob do
  #       HelloJob.perform_later('jeremy')
  #     end
  #   end
  #
  # Asserts that no jobs except specific class are enqueued by passing +:except+ option.
  #
  #   def test_no_logging
  #     assert_no_enqueued_jobs except: HelloJob do
  #       HelloJob.perform_later('jeremy')
  #     end
  #   end
  #
  # +:only+ and +:except+ options accept Class, Array of Class, or Proc. When passed a Proc,
  # a hash containing the job's class and it's argument are passed as argument.
  #
  # Asserts that no jobs are enqueued to a specific queue by passing +:queue+ option
  #
  #   def test_no_logging
  #     assert_no_enqueued_jobs queue: 'default' do
  #       LoggingJob.set(queue: :some_queue).perform_later
  #     end
  #   end
  #
  # Note: This assertion is simply a shortcut for:
  #
  #   assert_enqueued_jobs 0, &block
  #
  # source://activejob//lib/active_job/test_helper.rb#185
  def assert_no_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  # Asserts that no jobs have been performed.
  #
  #   def test_jobs
  #     assert_no_performed_jobs
  #
  #     perform_enqueued_jobs do
  #       HelloJob.perform_later('matthew')
  #       assert_performed_jobs 1
  #     end
  #   end
  #
  # If a block is passed, asserts that the block will not cause any job to be performed.
  #
  #   def test_jobs_again
  #     assert_no_performed_jobs do
  #       # No job should be performed from this block
  #     end
  #   end
  #
  # The block form supports filtering. If the +:only+ option is specified,
  # then only the listed job(s) will not be performed.
  #
  #   def test_no_logging
  #     assert_no_performed_jobs only: LoggingJob do
  #       HelloJob.perform_later('jeremy')
  #     end
  #   end
  #
  # Also if the +:except+ option is specified,
  # then the job(s) except specific class will not be performed.
  #
  #   def test_no_logging
  #     assert_no_performed_jobs except: HelloJob do
  #       HelloJob.perform_later('jeremy')
  #     end
  #   end
  #
  # +:only+ and +:except+ options accept Class, Array of Class, or Proc. When passed a Proc,
  # an instance of the job will be passed as argument.
  #
  # If the +:queue+ option is specified,
  # then only the job(s) enqueued to a specific queue will not be performed.
  #
  #   def test_assert_no_performed_jobs_with_queue_option
  #     assert_no_performed_jobs queue: :some_queue do
  #       HelloJob.set(queue: :other_queue).perform_later("jeremy")
  #     end
  #   end
  #
  # Note: This assertion is simply a shortcut for:
  #
  #   assert_performed_jobs 0, &block
  #
  # source://activejob//lib/active_job/test_helper.rb#343
  def assert_no_performed_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  # Asserts that the number of performed jobs matches the given number.
  # If no block is passed, <tt>perform_enqueued_jobs</tt>
  # must be called around or after the job call.
  #
  #   def test_jobs
  #     assert_performed_jobs 0
  #
  #     perform_enqueued_jobs do
  #       HelloJob.perform_later('xavier')
  #     end
  #     assert_performed_jobs 1
  #
  #     HelloJob.perform_later('yves')
  #
  #     perform_enqueued_jobs
  #
  #     assert_performed_jobs 2
  #   end
  #
  # If a block is passed, asserts that the block will cause the specified number of
  # jobs to be performed.
  #
  #   def test_jobs_again
  #     assert_performed_jobs 1 do
  #       HelloJob.perform_later('robin')
  #     end
  #
  #     assert_performed_jobs 2 do
  #       HelloJob.perform_later('carlos')
  #       HelloJob.perform_later('sean')
  #     end
  #   end
  #
  # This method also supports filtering. If the +:only+ option is specified,
  # then only the listed job(s) will be performed.
  #
  #     def test_hello_job
  #       assert_performed_jobs 1, only: HelloJob do
  #         HelloJob.perform_later('jeremy')
  #         LoggingJob.perform_later
  #       end
  #     end
  #
  # Also if the +:except+ option is specified,
  # then the job(s) except specific class will be performed.
  #
  #     def test_hello_job
  #       assert_performed_jobs 1, except: LoggingJob do
  #         HelloJob.perform_later('jeremy')
  #         LoggingJob.perform_later
  #       end
  #     end
  #
  # An array may also be specified, to support testing multiple jobs.
  #
  #     def test_hello_and_logging_jobs
  #       assert_nothing_raised do
  #         assert_performed_jobs 2, only: [HelloJob, LoggingJob] do
  #           HelloJob.perform_later('jeremy')
  #           LoggingJob.perform_later('stewie')
  #           RescueJob.perform_later('david')
  #         end
  #       end
  #     end
  #
  # A proc may also be specified. When passed a Proc, the job's instance will be passed as argument.
  #
  #     def test_hello_and_logging_jobs
  #       assert_nothing_raised do
  #         assert_performed_jobs(1, only: ->(job) { job.is_a?(HelloJob) }) do
  #           HelloJob.perform_later('jeremy')
  #           LoggingJob.perform_later('stewie')
  #           RescueJob.perform_later('david')
  #         end
  #       end
  #     end
  #
  # If the +:queue+ option is specified,
  # then only the job(s) enqueued to a specific queue will be performed.
  #
  #     def test_assert_performed_jobs_with_queue_option
  #       assert_performed_jobs 1, queue: :some_queue do
  #         HelloJob.set(queue: :some_queue).perform_later("jeremy")
  #         HelloJob.set(queue: :other_queue).perform_later("bogdan")
  #       end
  #     end
  #
  # source://activejob//lib/active_job/test_helper.rb#275
  def assert_performed_jobs(number, only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  # Asserts that the job has been performed with the given arguments.
  #
  #   def test_assert_performed_with
  #     MyJob.perform_later(1,2,3)
  #
  #     perform_enqueued_jobs
  #
  #     assert_performed_with(job: MyJob, args: [1,2,3])
  #
  #     MyJob.set(wait_until: Date.tomorrow.noon, queue: "my_queue").perform_later
  #
  #     perform_enqueued_jobs
  #
  #     assert_performed_with(at: Date.tomorrow.noon, queue: "my_queue")
  #   end
  #
  # The given arguments may also be specified as matcher procs that return a
  # boolean value indicating whether a job's attribute meets certain criteria.
  #
  # For example, a proc can be used to match a range of times:
  #
  #   def test_assert_performed_with
  #     at_matcher = ->(job_at) { (Date.yesterday..Date.tomorrow).cover?(job_at) }
  #
  #     MyJob.set(wait_until: Date.today.noon).perform_later
  #
  #     perform_enqueued_jobs
  #
  #     assert_performed_with(job: MyJob, at: at_matcher)
  #   end
  #
  # A proc can also be used to match a subset of a job's args:
  #
  #   def test_assert_performed_with
  #     args_matcher = ->(job_args) { job_args[0].key?(:foo) }
  #
  #     MyJob.perform_later(foo: "bar", other_arg: "No need to check in the test")
  #
  #     perform_enqueued_jobs
  #
  #     assert_performed_with(job: MyJob, args: args_matcher)
  #   end
  #
  # If a block is passed, that block performs all of the jobs that were
  # enqueued throughout the duration of the block and asserts that
  # the job has been performed with the given arguments in the block.
  #
  #   def test_assert_performed_with
  #     assert_performed_with(job: MyJob, args: [1,2,3]) do
  #       MyJob.perform_later(1,2,3)
  #     end
  #
  #     assert_performed_with(job: MyJob, at: Date.tomorrow.noon) do
  #       MyJob.set(wait_until: Date.tomorrow.noon).perform_later
  #     end
  #   end
  #
  # source://activejob//lib/active_job/test_helper.rb#494
  def assert_performed_with(job: T.unsafe(nil), args: T.unsafe(nil), at: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil), &block); end

  # source://activejob//lib/active_job/test_helper.rb#39
  def before_setup; end

  # source://activejob//lib/active_job/test_helper.rb#9
  def enqueued_jobs(*_arg0, **_arg1, &_arg2); end

  # source://activejob//lib/active_job/test_helper.rb#9
  def enqueued_jobs=(arg); end

  # Performs all enqueued jobs. If a block is given, performs all of the jobs
  # that were enqueued throughout the duration of the block. If a block is
  # not given, performs all of the enqueued jobs up to this point in the test.
  #
  #   def test_perform_enqueued_jobs
  #     perform_enqueued_jobs do
  #       MyJob.perform_later(1, 2, 3)
  #     end
  #     assert_performed_jobs 1
  #   end
  #
  #   def test_perform_enqueued_jobs_without_block
  #     MyJob.perform_later(1, 2, 3)
  #
  #     perform_enqueued_jobs
  #
  #     assert_performed_jobs 1
  #   end
  #
  # This method also supports filtering. If the +:only+ option is specified,
  # then only the listed job(s) will be performed.
  #
  #   def test_perform_enqueued_jobs_with_only
  #     perform_enqueued_jobs(only: MyJob) do
  #       MyJob.perform_later(1, 2, 3) # will be performed
  #       HelloJob.perform_later(1, 2, 3) # will not be performed
  #     end
  #     assert_performed_jobs 1
  #   end
  #
  # Also if the +:except+ option is specified,
  # then the job(s) except specific class will be performed.
  #
  #   def test_perform_enqueued_jobs_with_except
  #     perform_enqueued_jobs(except: HelloJob) do
  #       MyJob.perform_later(1, 2, 3) # will be performed
  #       HelloJob.perform_later(1, 2, 3) # will not be performed
  #     end
  #     assert_performed_jobs 1
  #   end
  #
  # +:only+ and +:except+ options accept Class, Array of Class, or Proc. When passed a Proc,
  # an instance of the job will be passed as argument.
  #
  # If the +:queue+ option is specified,
  # then only the job(s) enqueued to a specific queue will be performed.
  #
  #   def test_perform_enqueued_jobs_with_queue
  #     perform_enqueued_jobs queue: :some_queue do
  #       MyJob.set(queue: :some_queue).perform_later(1, 2, 3) # will be performed
  #       HelloJob.set(queue: :other_queue).perform_later(1, 2, 3) # will not be performed
  #     end
  #     assert_performed_jobs 1
  #   end
  #
  # If the +:at+ option is specified, then only run jobs enqueued to run
  # immediately or before the given time
  #
  # source://activejob//lib/active_job/test_helper.rb#598
  def perform_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), at: T.unsafe(nil), &block); end

  # source://activejob//lib/active_job/test_helper.rb#9
  def performed_jobs(*_arg0, **_arg1, &_arg2); end

  # source://activejob//lib/active_job/test_helper.rb#9
  def performed_jobs=(arg); end

  # Accesses the queue_adapter set by ActiveJob::Base.
  #
  #   def test_assert_job_has_custom_queue_adapter_set
  #     assert_instance_of CustomQueueAdapter, HelloJob.queue_adapter
  #   end
  #
  # source://activejob//lib/active_job/test_helper.rb#634
  def queue_adapter; end

  # Specifies the queue adapter to use with all Active Job test helpers.
  #
  # Returns an instance of the queue adapter and defaults to
  # ActiveJob::QueueAdapters::TestAdapter.
  #
  # Note: The adapter provided by this method must provide some additional
  # methods from those expected of a standard ActiveJob::QueueAdapter
  # in order to be used with the active job test helpers. Refer to
  # ActiveJob::QueueAdapters::TestAdapter.
  #
  # source://activejob//lib/active_job/test_helper.rb#66
  def queue_adapter_for_test; end

  private

  # source://activejob//lib/active_job/test_helper.rb#639
  def clear_enqueued_jobs; end

  # source://activejob//lib/active_job/test_helper.rb#643
  def clear_performed_jobs; end

  # source://activejob//lib/active_job/test_helper.rb#704
  def deserialize_args_for_assertion(job); end

  # source://activejob//lib/active_job/test_helper.rb#679
  def enqueued_jobs_with(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), at: T.unsafe(nil), &block); end

  # source://activejob//lib/active_job/test_helper.rb#673
  def filter_as_proc(filter); end

  # source://activejob//lib/active_job/test_helper.rb#687
  def flush_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), at: T.unsafe(nil)); end

  # source://activejob//lib/active_job/test_helper.rb#711
  def instantiate_job(payload, skip_deserialize_arguments: T.unsafe(nil)); end

  # source://activejob//lib/active_job/test_helper.rb#647
  def jobs_with(jobs, only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), at: T.unsafe(nil)); end

  # source://activejob//lib/active_job/test_helper.rb#683
  def performed_jobs_with(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  # source://activejob//lib/active_job/test_helper.rb#695
  def prepare_args_for_assertion(args); end

  # source://activejob//lib/active_job/test_helper.rb#718
  def queue_adapter_changed_jobs; end

  # @raise [ArgumentError]
  #
  # source://activejob//lib/active_job/test_helper.rb#725
  def validate_option(only: T.unsafe(nil), except: T.unsafe(nil)); end
end

module ActiveJob::TestHelper::TestQueueAdapter
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::TestHelper::TestQueueAdapter::ClassMethods

  module GeneratedClassMethods
    def _test_adapter; end
    def _test_adapter=(value); end
  end

  module GeneratedInstanceMethods; end
end

module ActiveJob::TestHelper::TestQueueAdapter::ClassMethods
  # source://activejob//lib/active_job/test_helper.rb#27
  def disable_test_adapter; end

  # source://activejob//lib/active_job/test_helper.rb#31
  def enable_test_adapter(test_adapter); end

  # source://activejob//lib/active_job/test_helper.rb#23
  def queue_adapter; end
end

module ActiveJob::Timezones
  extend ::ActiveSupport::Concern
end

module ActiveJob::Translation
  extend ::ActiveSupport::Concern
end

module ActiveJob::VERSION; end

# source://activejob//lib/active_job/gem_version.rb#10
ActiveJob::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://activejob//lib/active_job/gem_version.rb#11
ActiveJob::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://activejob//lib/active_job/gem_version.rb#13
ActiveJob::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)

# source://activejob//lib/active_job/gem_version.rb#15
ActiveJob::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://activejob//lib/active_job/gem_version.rb#12
ActiveJob::VERSION::TINY = T.let(T.unsafe(nil), Integer)

module ActiveSupport::Autoload
  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#37
  def autoload(const_name, path = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#57
  def autoload_at(path); end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#50
  def autoload_under(path); end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#75
  def autoloads; end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#64
  def eager_autoload; end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#71
  def eager_load!; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#28
    def extended(base); end
  end
end

module ActiveSupport::Benchmarkable
  # source://activesupport/7.0.4/lib/active_support/benchmarkable.rb#37
  def benchmark(message = T.unsafe(nil), options = T.unsafe(nil), &block); end
end

module ActiveSupport::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#95
  def run_callbacks(kind); end

  private

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#147
  def halted_callback_hook(filter, name); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://activesupport/7.0.4/lib/active_support/callbacks.rb#71
ActiveSupport::Callbacks::CALLBACK_FILTER_TYPES = T.let(T.unsafe(nil), Array)

module ActiveSupport::Callbacks::CallTemplate
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#533
    def build(filter, callback); end
  end
end

class ActiveSupport::Callbacks::CallTemplate::InstanceExec0
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#435
  def initialize(block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#439
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#449
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#443
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::InstanceExec1
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#457
  def initialize(block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#461
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#471
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#465
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::InstanceExec2
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#479
  def initialize(block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#483
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#495
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#488
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::MethodCall
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#377
  def initialize(method); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#394
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#404
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#398
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::ObjectCall
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#412
  def initialize(target, method); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#417
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#427
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#421
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::ProcCall
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#504
  def initialize(target); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#508
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#518
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#512
  def make_lambda; end
end

class ActiveSupport::Callbacks::Callback
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#295
  def initialize(name, filter, kind, options, chain_config); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#330
  def apply(callback_sequence); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#293
  def chain_config; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#344
  def current_scopes; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#320
  def duplicates?(other); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#293
  def filter; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def kind; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def kind=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#316
  def matches?(_kind, _filter); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#304
  def merge_conditional_options(chain, if_option:, unless_option:); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def name; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def name=(_arg0); end

  private

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#352
  def check_conditionals(conditionals); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#367
  def conditions_lambdas; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#281
    def build(chain, filter, kind, options); end
  end
end

class ActiveSupport::Callbacks::CallbackChain
  include ::Enumerable

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#608
  def initialize(name, config); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#654
  def append(*callbacks); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#633
  def clear; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#645
  def compile; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#606
  def config; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#628
  def delete(o); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#619
  def each(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#621
  def empty?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#620
  def index(o); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#623
  def insert(index, o); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#606
  def name; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#658
  def prepend(*callbacks); end

  protected

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#663
  def chain; end

  private

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#666
  def append_one(callback); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#683
  def default_terminator; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#639
  def initialize_copy(other); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#672
  def prepend_one(callback); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#678
  def remove_duplicates(callback); end
end

class ActiveSupport::Callbacks::CallbackSequence
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#557
  def initialize(nested = T.unsafe(nil), call_template = T.unsafe(nil), user_conditions = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#571
  def after(&after); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#576
  def around(call_template, user_conditions); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#566
  def before(&before); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#590
  def expand_call_template(arg, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#586
  def final?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#598
  def invoke_after(arg); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#594
  def invoke_before(arg); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#584
  def nested; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#580
  def skip?(arg); end
end

module ActiveSupport::Callbacks::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#705
  def __update_callbacks(name); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#917
  def define_callbacks(*names); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#696
  def normalize_callback_params(filters, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#827
  def reset_callbacks(name); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#756
  def set_callback(name, *filter_list, &block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#802
  def skip_callback(name, *filter_list, &block); end

  protected

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#948
  def get_callbacks(name); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#952
  def set_callbacks(name, callbacks); end
end

module ActiveSupport::Callbacks::Conditionals; end

class ActiveSupport::Callbacks::Conditionals::Value
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#152
  def initialize(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#155
  def call(target, value); end
end

module ActiveSupport::Callbacks::Filters; end

class ActiveSupport::Callbacks::Filters::After
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#213
    def build(callback_sequence, user_callback, user_conditions, chain_config); end

    private

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#255
    def conditional(callback_sequence, user_callback, user_conditions); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#244
    def halting(callback_sequence, user_callback); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#229
    def halting_and_conditional(callback_sequence, user_callback, user_conditions); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#269
    def simple(callback_sequence, user_callback); end
  end
end

class ActiveSupport::Callbacks::Filters::Before
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#163
    def build(callback_sequence, user_callback, user_conditions, chain_config, filter, name); end

    private

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#192
    def halting(callback_sequence, user_callback, halted_lambda, filter, name); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#173
    def halting_and_conditional(callback_sequence, user_callback, user_conditions, halted_lambda, filter, name); end
  end
end

class ActiveSupport::Callbacks::Filters::Environment < ::Struct
  def halted; end
  def halted=(_); end
  def target; end
  def target=(_); end
  def value; end
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module ActiveSupport::Concern
  # source://activesupport/7.0.4/lib/active_support/concern.rb#127
  def append_features(base); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#207
  def class_methods(&class_methods_module_definition); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#156
  def included(base = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#140
  def prepend_features(base); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#173
  def prepended(base = T.unsafe(nil), &block); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/concern.rb#123
    def extended(base); end
  end
end

class ActiveSupport::Concern::MultipleIncludedBlocks < ::StandardError
  # source://activesupport/7.0.4/lib/active_support/concern.rb#112
  def initialize; end
end

class ActiveSupport::Concern::MultiplePrependBlocks < ::StandardError
  # source://activesupport/7.0.4/lib/active_support/concern.rb#118
  def initialize; end
end

module ActiveSupport::Configurable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveSupport::Configurable::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#145
  def config; end
end

module ActiveSupport::Configurable::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/configurable.rb#28
  def config; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#37
  def configure; end

  private

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#109
  def config_accessor(*names, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil)); end
end

class ActiveSupport::Configurable::Configuration < ::ActiveSupport::InheritableOptions
  # source://activesupport/7.0.4/lib/active_support/configurable.rb#13
  def compile_methods!; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/configurable.rb#18
    def compile_methods!(keys); end
  end
end

module ActiveSupport::DescendantsTracker
  # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#88
  def descendants; end

  # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#92
  def direct_descendants; end

  # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#82
  def subclasses; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#66
    def clear(classes); end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#62
    def descendants(klass); end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#11
    def direct_descendants(klass); end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#50
    def disable_clear!; end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#77
    def native?; end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#58
    def subclasses(klass); end
  end
end

class ActiveSupport::InheritableOptions < ::ActiveSupport::OrderedOptions
  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#80
  def initialize(parent = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#91
  def inheritable_copy; end
end

class ActiveSupport::LogSubscriber < ::ActiveSupport::Subscriber
  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
  def colorize_logging; end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
  def colorize_logging=(val); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def debug(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def error(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def fatal(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#114
  def finish(name, id, payload); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def info(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#106
  def logger; end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#120
  def publish_event(event); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#110
  def start(name, id, payload); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def unknown(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def warn(progname = T.unsafe(nil), &block); end

  private

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#139
  def color(text, color, bold = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#146
  def log_exception(name, e); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
    def colorize_logging; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
    def colorize_logging=(val); end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#96
    def flush_all!; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#91
    def log_subscribers; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#83
    def logger; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#89
    def logger=(_arg0); end

    private

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#101
    def fetch_public_methods(subscriber, inherit_all); end
  end
end

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#71
ActiveSupport::LogSubscriber::BLACK = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#75
ActiveSupport::LogSubscriber::BLUE = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#68
ActiveSupport::LogSubscriber::BOLD = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#67
ActiveSupport::LogSubscriber::CLEAR = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#77
ActiveSupport::LogSubscriber::CYAN = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#73
ActiveSupport::LogSubscriber::GREEN = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#76
ActiveSupport::LogSubscriber::MAGENTA = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#72
ActiveSupport::LogSubscriber::RED = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#78
ActiveSupport::LogSubscriber::WHITE = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#74
ActiveSupport::LogSubscriber::YELLOW = T.let(T.unsafe(nil), String)

class ActiveSupport::OrderedOptions < ::Hash
  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#39
  def [](key); end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#35
  def []=(key, value); end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#62
  def extractable_options?; end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#66
  def inspect; end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#43
  def method_missing(name, *args); end

  protected

  def _get(_arg0); end

  private

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#58
  def respond_to_missing?(name, include_private); end
end

module ActiveSupport::Rescuable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#170
  def handler_for_rescue(exception); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#164
  def rescue_with_handler(exception); end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

module ActiveSupport::Rescuable::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#103
  def handler_for_rescue(exception, object: T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#51
  def rescue_from(*klasses, with: T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#88
  def rescue_with_handler(exception, object: T.unsafe(nil), visited_exceptions: T.unsafe(nil)); end

  private

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#137
  def constantize_rescue_handler_class(class_or_name); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#122
  def find_rescue_handler(exception); end
end

class ActiveSupport::Subscriber
  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#128
  def initialize; end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#143
  def finish(name, id, payload); end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#126
  def patterns; end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#152
  def publish_event(event); end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#134
  def start(name, id, payload); end

  private

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#158
  def event_stack; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#33
    def attach_to(namespace, subscriber = T.unsafe(nil), notifier = T.unsafe(nil), inherit_all: T.unsafe(nil)); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#48
    def detach_from(namespace, notifier = T.unsafe(nil)); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#67
    def method_added(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#76
    def subscribers; end

    private

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#83
    def add_event_subscriber(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#121
    def fetch_public_methods(subscriber, inherit_all); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#105
    def find_attached_subscriber; end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#109
    def invalid_event?(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#81
    def namespace; end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#81
    def notifier; end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#117
    def pattern_subscribed?(pattern); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#113
    def prepare_pattern(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#94
    def remove_event_subscriber(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#81
    def subscriber; end
  end
end

class ActiveSupport::TestCase < ::Minitest::Test
  include ::ActiveSupport::Testing::SetupAndTeardown
  include ::ActiveSupport::Testing::TaggedLogging
  include ::ActiveSupport::Callbacks
  include ::ActiveSupport::Testing::Assertions
  include ::ActiveSupport::Testing::Deprecation
  include ::ActiveSupport::Testing::TimeHelpers
  include ::ActiveSupport::Testing::FileFixtures
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveSupport::Testing::SetupAndTeardown::ClassMethods
  extend ::ActiveSupport::Testing::Declarative

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_setup_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_teardown_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _setup_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _teardown_callbacks; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#709
  def assert_no_match(matcher, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#638
  def assert_not_empty(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#649
  def assert_not_equal(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#661
  def assert_not_in_delta(exp, act, delta = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#673
  def assert_not_in_epsilon(a, b, epsilon = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#680
  def assert_not_includes(collection, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#691
  def assert_not_instance_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#701
  def assert_not_kind_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#719
  def assert_not_nil(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#730
  def assert_not_operator(o1, op, o2 = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#753
  def assert_not_predicate(o1, op, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#761
  def assert_not_respond_to(obj, meth, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#770
  def assert_not_same(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#396
  def assert_raise(*exp); end

  # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
  def file_fixture_path; end

  # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
  def file_fixture_path?; end

  # source://activesupport/7.0.4/lib/active_support/test_case.rb#151
  def inspect; end

  # source://minitest/5.16.3/lib/minitest.rb#304
  def method_name; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _setup_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _setup_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _teardown_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _teardown_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path; end

    # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path=(value); end

    # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path?; end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#79
    def parallelize(workers: T.unsafe(nil), with: T.unsafe(nil), threshold: T.unsafe(nil)); end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#101
    def parallelize_setup(&block); end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#118
    def parallelize_teardown(&block); end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#42
    def test_order; end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#32
    def test_order=(new_order); end
  end
end

# source://activesupport/7.0.4/lib/active_support/test_case.rb#20
ActiveSupport::TestCase::Assertion = Minitest::Assertion

module ActiveSupport::Testing::Assertions
  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#175
  def assert_changes(expression, message = T.unsafe(nil), from: T.unsafe(nil), to: T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#86
  def assert_difference(expression, *args, &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#222
  def assert_no_changes(expression, message = T.unsafe(nil), from: T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#137
  def assert_no_difference(expression, message = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#21
  def assert_not(object, message = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#33
  def assert_nothing_raised; end

  private

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#249
  def _assert_nothing_raised_or_warn(assertion, &block); end
end

# source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#8
ActiveSupport::Testing::Assertions::UNTRACKED = T.let(T.unsafe(nil), Object)

module ActiveSupport::Testing::Declarative
  # source://activesupport/7.0.4/lib/active_support/testing/declarative.rb#13
  def test(name, &block); end
end

module ActiveSupport::Testing::Deprecation
  # source://activesupport/7.0.4/lib/active_support/testing/deprecation.rb#31
  def assert_deprecated(match = T.unsafe(nil), deprecator = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/deprecation.rb#56
  def assert_not_deprecated(deprecator = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/deprecation.rb#75
  def collect_deprecations(deprecator = T.unsafe(nil)); end
end

module ActiveSupport::Testing::FileFixtures
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#26
  def file_fixture(fixture_name); end

  module GeneratedClassMethods
    def file_fixture_path; end
    def file_fixture_path=(value); end
    def file_fixture_path?; end
  end

  module GeneratedInstanceMethods
    def file_fixture_path; end
    def file_fixture_path?; end
  end
end

module ActiveSupport::Testing::SetupAndTeardown
  # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#44
  def after_teardown; end

  # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#39
  def before_setup; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#21
    def prepended(klass); end
  end
end

module ActiveSupport::Testing::SetupAndTeardown::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#29
  def setup(*args, &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#34
  def teardown(*args, &block); end
end

module ActiveSupport::Testing::TaggedLogging
  # source://activesupport/7.0.4/lib/active_support/testing/tagged_logging.rb#10
  def before_setup; end

  # source://activesupport/7.0.4/lib/active_support/testing/tagged_logging.rb#8
  def tagged_logger=(_arg0); end

  private

  # source://activesupport/7.0.4/lib/active_support/testing/tagged_logging.rb#22
  def tagged_logger; end
end

module ActiveSupport::Testing::TimeHelpers
  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#70
  def after_teardown; end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#234
  def freeze_time(&block); end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#93
  def travel(duration, &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#208
  def travel_back; end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#128
  def travel_to(date_or_time); end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#208
  def unfreeze_time; end

  private

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#243
  def in_block; end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#243
  def in_block=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#239
  def simple_stubs; end
end

class Loofah::Scrubber
  # source://loofah/2.19.0/lib/loofah/scrubber.rb#65
  def initialize(options = T.unsafe(nil), &block); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#94
  def append_attribute(node, attribute, value); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#49
  def block; end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#44
  def direction; end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#86
  def scrub(node); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#78
  def traverse(node); end

  private

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#103
  def html5lib_sanitize(node); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#125
  def traverse_conditionally_bottom_up(node); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#116
  def traverse_conditionally_top_down(node); end
end

# source://loofah/2.19.0/lib/loofah/scrubber.rb#37
Loofah::Scrubber::CONTINUE = T.let(T.unsafe(nil), Object)

# source://loofah/2.19.0/lib/loofah/scrubber.rb#40
Loofah::Scrubber::STOP = T.let(T.unsafe(nil), Object)

module Minitest::Assertions
  # source://minitest/5.16.3/lib/minitest/assertions.rb#188
  def _synchronize; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#178
  def assert(test, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#195
  def assert_empty(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#216
  def assert_equal(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#240
  def assert_in_delta(exp, act, delta = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#252
  def assert_in_epsilon(exp, act, epsilon = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#259
  def assert_includes(collection, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#270
  def assert_instance_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#281
  def assert_kind_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#291
  def assert_match(matcher, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#303
  def assert_nil(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#313
  def assert_operator(o1, op, o2 = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#331
  def assert_output(stdout = T.unsafe(nil), stderr = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#355
  def assert_path_exists(path, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#369
  def assert_predicate(o1, op, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#396
  def assert_raises(*exp); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#427
  def assert_respond_to(obj, meth, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#437
  def assert_same(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#450
  def assert_send(send_ary, m = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#466
  def assert_silent; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#475
  def assert_throws(sym, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#516
  def capture_io; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#549
  def capture_subprocess_io; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#59
  def diff(exp, act); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#581
  def exception_details(e, msg); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#597
  def fail_after(y, m, d, msg); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#604
  def flunk(msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#612
  def message(msg = T.unsafe(nil), ending = T.unsafe(nil), &default); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#129
  def mu_pp(obj); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#152
  def mu_pp_for_diff(obj); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#623
  def pass(_msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#630
  def refute(test, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#638
  def refute_empty(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#649
  def refute_equal(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#661
  def refute_in_delta(exp, act, delta = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#673
  def refute_in_epsilon(a, b, epsilon = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#680
  def refute_includes(collection, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#691
  def refute_instance_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#701
  def refute_kind_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#709
  def refute_match(matcher, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#719
  def refute_nil(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#730
  def refute_operator(o1, op, o2 = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#739
  def refute_path_exists(path, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#753
  def refute_predicate(o1, op, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#761
  def refute_respond_to(obj, meth, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#770
  def refute_same(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#783
  def skip(msg = T.unsafe(nil), bt = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#795
  def skip_until(y, m, d, msg); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#804
  def skipped?; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#104
  def things_to_diff(exp, act); end

  class << self
    # source://minitest/5.16.3/lib/minitest/assertions.rb#29
    def diff; end

    # source://minitest/5.16.3/lib/minitest/assertions.rb#47
    def diff=(o); end
  end
end

# source://minitest/5.16.3/lib/minitest/assertions.rb#201
Minitest::Assertions::E = T.let(T.unsafe(nil), String)

# source://minitest/5.16.3/lib/minitest/assertions.rb#19
Minitest::Assertions::UNDEFINED = T.let(T.unsafe(nil), Object)

module Minitest::Guard
  # source://minitest/5.16.3/lib/minitest.rb#984
  def jruby?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#991
  def maglev?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#1001
  def mri?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#1008
  def osx?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#1015
  def rubinius?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#1025
  def windows?(platform = T.unsafe(nil)); end
end

module Minitest::Reportable
  # source://minitest/5.16.3/lib/minitest.rb#495
  def class_name; end

  # source://minitest/5.16.3/lib/minitest.rb#516
  def error?; end

  # source://minitest/5.16.3/lib/minitest.rb#490
  def location; end

  # source://minitest/5.16.3/lib/minitest.rb#482
  def passed?; end

  # source://minitest/5.16.3/lib/minitest.rb#502
  def result_code; end

  # source://minitest/5.16.3/lib/minitest.rb#509
  def skipped?; end
end

class Minitest::Runnable
  # source://minitest/5.16.3/lib/minitest.rb#431
  def initialize(name); end

  # source://minitest/5.16.3/lib/minitest.rb#281
  def assertions; end

  # source://minitest/5.16.3/lib/minitest.rb#281
  def assertions=(_arg0); end

  # source://minitest/5.16.3/lib/minitest.rb#427
  def failure; end

  # source://minitest/5.16.3/lib/minitest.rb#286
  def failures; end

  # source://minitest/5.16.3/lib/minitest.rb#286
  def failures=(_arg0); end

  # source://minitest/5.16.3/lib/minitest.rb#413
  def marshal_dump; end

  # source://minitest/5.16.3/lib/minitest.rb#423
  def marshal_load(ary); end

  # source://minitest/5.16.3/lib/minitest.rb#304
  def name; end

  # source://minitest/5.16.3/lib/minitest.rb#311
  def name=(o); end

  # source://minitest/5.16.3/lib/minitest.rb#450
  def passed?; end

  # source://minitest/5.16.3/lib/minitest.rb#459
  def result_code; end

  # source://minitest/5.16.3/lib/minitest.rb#440
  def run; end

  # source://minitest/5.16.3/lib/minitest.rb#466
  def skipped?; end

  # source://minitest/5.16.3/lib/minitest.rb#291
  def time; end

  # source://minitest/5.16.3/lib/minitest.rb#291
  def time=(_arg0); end

  # source://minitest/5.16.3/lib/minitest.rb#293
  def time_it; end

  class << self
    # source://minitest/5.16.3/lib/minitest.rb#1077
    def inherited(klass); end

    # source://minitest/5.16.3/lib/minitest.rb#318
    def methods_matching(re); end

    # source://minitest/5.16.3/lib/minitest.rb#383
    def on_signal(name, action); end

    # source://minitest/5.16.3/lib/minitest.rb#322
    def reset; end

    # source://minitest/5.16.3/lib/minitest.rb#333
    def run(reporter, options = T.unsafe(nil)); end

    # source://minitest/5.16.3/lib/minitest.rb#363
    def run_one_method(klass, method_name, reporter); end

    # source://minitest/5.16.3/lib/minitest.rb#400
    def runnable_methods; end

    # source://minitest/5.16.3/lib/minitest.rb#407
    def runnables; end

    # source://minitest/5.16.3/lib/minitest.rb#368
    def with_info_handler(reporter, &block); end
  end
end

# source://minitest/5.16.3/lib/minitest.rb#381
Minitest::Runnable::SIGNALS = T.let(T.unsafe(nil), Hash)

class Minitest::Test < ::Minitest::Runnable
  include ::Minitest::Assertions
  include ::Minitest::Reportable
  include ::Minitest::Test::LifecycleHooks
  include ::Minitest::Guard
  extend ::Minitest::Guard

  # source://minitest/5.16.3/lib/minitest/test.rb#194
  def capture_exceptions; end

  # source://minitest/5.16.3/lib/minitest/test.rb#15
  def class_name; end

  # source://minitest/5.16.3/lib/minitest/test.rb#211
  def neuter_exception(e); end

  # source://minitest/5.16.3/lib/minitest/test.rb#222
  def new_exception(klass, msg, bt, kill = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/test.rb#92
  def run; end

  # source://minitest/5.16.3/lib/minitest/test.rb#204
  def sanitize_exception(e); end

  # source://minitest/5.16.3/lib/minitest/test.rb#236
  def with_info_handler(&block); end

  class << self
    # source://minitest/5.16.3/lib/minitest/test.rb#31
    def i_suck_and_my_tests_are_order_dependent!; end

    # source://minitest/5.16.3/lib/minitest/test.rb#22
    def io_lock; end

    # source://minitest/5.16.3/lib/minitest/test.rb#22
    def io_lock=(_arg0); end

    # source://minitest/5.16.3/lib/minitest/test.rb#44
    def make_my_diffs_pretty!; end

    # source://minitest/5.16.3/lib/minitest/test.rb#55
    def parallelize_me!; end

    # source://minitest/5.16.3/lib/minitest/test.rb#65
    def runnable_methods; end

    # source://minitest/5.16.3/lib/minitest/test.rb#83
    def test_order; end
  end
end

module Minitest::Test::LifecycleHooks
  # source://minitest/5.16.3/lib/minitest/test.rb#167
  def after_setup; end

  # source://minitest/5.16.3/lib/minitest/test.rb#191
  def after_teardown; end

  # source://minitest/5.16.3/lib/minitest/test.rb#152
  def before_setup; end

  # source://minitest/5.16.3/lib/minitest/test.rb#176
  def before_teardown; end

  # source://minitest/5.16.3/lib/minitest/test.rb#158
  def setup; end

  # source://minitest/5.16.3/lib/minitest/test.rb#182
  def teardown; end
end

# source://minitest/5.16.3/lib/minitest/test.rb#19
Minitest::Test::PASSTHROUGH_EXCEPTIONS = T.let(T.unsafe(nil), Array)

# source://minitest/5.16.3/lib/minitest/test.rb#87
Minitest::Test::TEARDOWN_METHODS = T.let(T.unsafe(nil), Array)

class Rack::Session::Abstract::SessionHash
  include ::Enumerable

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#62
  def initialize(store, req); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#82
  def [](key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#108
  def []=(key, value); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#114
  def clear; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#140
  def delete(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#119
  def destroy; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#87
  def dig(key, *keys); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#77
  def each(&block); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#163
  def empty?; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#153
  def exists?; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#92
  def fetch(key, default = T.unsafe(nil), &block); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#101
  def has_key?(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#68
  def id; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#46
  def id=(_arg0); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#101
  def include?(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#145
  def inspect; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#101
  def key?(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#168
  def keys; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#159
  def loaded?; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#129
  def merge!(hash); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#73
  def options; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#135
  def replace(hash); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#108
  def store(key, value); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#124
  def to_hash; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#129
  def update(hash); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#173
  def values; end

  private

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#188
  def load!; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#180
  def load_for_read!; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#184
  def load_for_write!; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#194
  def stringify_keys(other); end

  class << self
    # source://rack/2.2.4/lib/rack/session/abstract/id.rb#50
    def find(req); end

    # source://rack/2.2.4/lib/rack/session/abstract/id.rb#54
    def set(req, session); end

    # source://rack/2.2.4/lib/rack/session/abstract/id.rb#58
    def set_options(req, options); end
  end
end

# source://rack/2.2.4/lib/rack/session/abstract/id.rb#48
Rack::Session::Abstract::SessionHash::Unspecified = T.let(T.unsafe(nil), Object)

module Rails
  extend ::ActiveSupport::Autoload
  extend ::ActiveSupport::Benchmarkable

  class << self
    # source://railties/7.0.4/lib/rails.rb#38
    def app_class; end

    # source://railties/7.0.4/lib/rails.rb#38
    def app_class=(_arg0); end

    # source://railties/7.0.4/lib/rails.rb#39
    def application; end

    # source://railties/7.0.4/lib/rails.rb#37
    def application=(_arg0); end

    # source://railties/7.0.4/lib/rails.rb#123
    def autoloaders; end

    # source://railties/7.0.4/lib/rails.rb#50
    def backtrace_cleaner; end

    # source://railties/7.0.4/lib/rails.rb#38
    def cache; end

    # source://railties/7.0.4/lib/rails.rb#38
    def cache=(_arg0); end

    # source://railties/7.0.4/lib/rails.rb#46
    def configuration; end

    # source://railties/7.0.4/lib/rails.rb#72
    def env; end

    # source://railties/7.0.4/lib/rails.rb#79
    def env=(environment); end

    # source://railties/7.0.4/lib/rails.rb#90
    def error; end

    # source://railties/7.0.4/lib/rails/gem_version.rb#5
    def gem_version; end

    # source://railties/7.0.4/lib/rails.rb#103
    def groups(*groups); end

    # source://railties/7.0.4/lib/rails.rb#43
    def initialize!(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.0.4/lib/rails.rb#43
    def initialized?(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.0.4/lib/rails.rb#38
    def logger; end

    # source://railties/7.0.4/lib/rails.rb#38
    def logger=(_arg0); end

    # source://railties/7.0.4/lib/rails.rb#119
    def public_path; end

    # source://railties/7.0.4/lib/rails.rb#63
    def root; end

    # source://railties/7.0.4/lib/rails/version.rb#7
    def version; end
  end
end

class Rails::Application < ::Rails::Engine
  # source://railties/7.0.4/lib/rails/application.rb#106
  def initialize(initial_variable_values = T.unsafe(nil), &block); end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def assets; end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def assets=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def autoloaders; end

  # source://railties/7.0.4/lib/rails/engine.rb#511
  def build_middleware_stack; end

  # source://railties/7.0.4/lib/rails/application.rb#383
  def config; end

  # source://railties/7.0.4/lib/rails/application.rb#387
  def config=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#221
  def config_for(name, env: T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application.rb#303
  def console(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#432
  def credentials; end

  # source://railties/7.0.4/lib/rails/application.rb#403
  def credentials=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#101
  def default_url_options(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/application.rb#101
  def default_url_options=(arg); end

  # source://railties/7.0.4/lib/rails/application.rb#497
  def eager_load!; end

  # source://railties/7.0.4/lib/rails/application.rb#463
  def encrypted(path, key_path: T.unsafe(nil), env_key: T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application.rb#250
  def env_config; end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def executor; end

  # source://railties/7.0.4/lib/rails/application.rb#309
  def generators(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#476
  def helpers_paths; end

  # source://importmap-rails/1.1.5/lib/importmap/engine.rb#4
  def importmap; end

  # source://importmap-rails/1.1.5/lib/importmap/engine.rb#4
  def importmap=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#370
  def initialize!(group = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application.rb#129
  def initialized?; end

  # source://railties/7.0.4/lib/rails/application.rb#291
  def initializer(name, opts = T.unsafe(nil), &block); end

  # source://railties/7.0.4/lib/rails/application.rb#377
  def initializers; end

  # source://railties/7.0.4/lib/rails/application.rb#320
  def isolate_namespace(mod); end

  # source://railties/7.0.4/lib/rails/application.rb#153
  def key_generator; end

  # source://railties/7.0.4/lib/rails/application.rb#179
  def message_verifier(verifier_name); end

  # source://railties/7.0.4/lib/rails/application.rb#492
  def migration_railties; end

  # source://railties/7.0.4/lib/rails/application.rb#284
  def rake_tasks(&block); end

  # source://railties/7.0.4/lib/rails/application.rb#148
  def reload_routes!; end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def reloader; end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def reloaders; end

  # source://railties/7.0.4/lib/rails/application.rb#346
  def require_environment!; end

  # source://railties/7.0.4/lib/rails/application.rb#351
  def routes_reloader; end

  # source://railties/7.0.4/lib/rails/application.rb#133
  def run_load_hooks!; end

  # source://railties/7.0.4/lib/rails/application.rb#297
  def runner(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def sandbox; end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def sandbox=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def sandbox?; end

  # source://railties/7.0.4/lib/rails/application.rb#415
  def secret_key_base; end

  # source://railties/7.0.4/lib/rails/application.rb#389
  def secrets; end

  # source://railties/7.0.4/lib/rails/application.rb#403
  def secrets=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#315
  def server(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#472
  def to_app; end

  # source://railties/7.0.4/lib/rails/application.rb#358
  def watchable_args; end

  protected

  # source://railties/7.0.4/lib/rails/application.rb#570
  def default_middleware_stack; end

  # source://railties/7.0.4/lib/rails/application.rb#536
  def ordered_railties; end

  # source://railties/7.0.4/lib/rails/application.rb#558
  def railties_initializers(current); end

  # source://railties/7.0.4/lib/rails/application.rb#525
  def run_console_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#515
  def run_generators_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#520
  def run_runner_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#530
  def run_server_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#504
  def run_tasks_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#575
  def validate_secret_key_base(secret_key_base); end

  private

  # source://railties/7.0.4/lib/rails/application.rb#609
  def build_middleware; end

  # source://railties/7.0.4/lib/rails/application.rb#602
  def build_request(env); end

  # source://railties/7.0.4/lib/rails/application.rb#613
  def coerce_same_site_protection(protection); end

  # source://railties/7.0.4/lib/rails/application.rb#586
  def generate_development_secret; end

  class << self
    # source://railties/7.0.4/lib/rails/application.rb#339
    def add_lib_to_load_path!(root); end

    # source://railties/7.0.4/lib/rails/application.rb#81
    def create(initial_variable_values = T.unsafe(nil), &block); end

    # source://railties/7.0.4/lib/rails/application.rb#85
    def find_root(from); end

    # source://railties/7.0.4/lib/rails/application.rb#70
    def inherited(base); end

    # source://railties/7.0.4/lib/rails/application.rb#77
    def instance; end
  end
end

module Rails::Application::Bootstrap
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

class Rails::Application::Configuration < ::Rails::Engine::Configuration
  # source://railties/7.0.4/lib/rails/application/configuration.rb#28
  def initialize(*_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def add_autoload_paths_to_load_path; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def add_autoload_paths_to_load_path=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def allow_concurrency; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def allow_concurrency=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#415
  def annotations; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#26
  def api_only; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#276
  def api_only=(value); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def asset_host; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def asset_host=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def autoflush_log; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def autoflush_log=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def beginning_of_week; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def beginning_of_week=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def cache_classes; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def cache_classes=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def cache_store; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def cache_store=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#361
  def colorize_logging; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#365
  def colorize_logging=(val); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def consider_all_requests_local; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def consider_all_requests_local=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def console; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def console=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#420
  def content_security_policy(&block); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_nonce_directives; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_nonce_directives=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_nonce_generator; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_nonce_generator=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_report_only; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_report_only=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def credentials; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def credentials=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#330
  def database_configuration; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#283
  def debug_exception_response_format; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#287
  def debug_exception_response_format=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#437
  def default_log_file; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def disable_sandbox; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def disable_sandbox=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def eager_load; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def eager_load=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def enable_dependency_loading; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def enable_dependency_loading=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#26
  def encoding; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#268
  def encoding=(value); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def exceptions_app; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def exceptions_app=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def file_watcher; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def file_watcher=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def filter_parameters; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def filter_parameters=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def filter_redirect; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def filter_redirect=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def force_ssl; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def force_ssl=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def helpers_paths; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def helpers_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def host_authorization; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def host_authorization=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def hosts; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def hosts=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#312
  def load_database_yaml; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#88
  def load_defaults(target_version); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#26
  def loaded_config_version; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_formatter; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_formatter=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_level; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_level=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_tags; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_tags=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def logger; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def logger=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#289
  def paths; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#429
  def permissions_policy(&block); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def public_file_server; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def public_file_server=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def railties_order; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def railties_order=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def rake_eager_load; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def rake_eager_load=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def read_encrypted_secrets; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def read_encrypted_secrets=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def relative_url_root; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def relative_url_root=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def reload_classes_only_on_change; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def reload_classes_only_on_change=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def require_master_key; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def require_master_key=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def secret_key_base; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def secret_key_base=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def server_timing; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def server_timing=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def session_options; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def session_options=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#384
  def session_store(new_session_store = T.unsafe(nil), **options); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#411
  def session_store?; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def ssl_options; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def ssl_options=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def time_zone; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def time_zone=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def x; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def x=(_arg0); end

  private

  # source://railties/7.0.4/lib/rails/application/configuration.rb#486
  def credentials_available_for_current_env?; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#470
  def default_credentials_content_path; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#478
  def default_credentials_key_path; end
end

class Rails::Application::Configuration::Custom
  # source://railties/7.0.4/lib/rails/application/configuration.rb#450
  def initialize; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#454
  def method_missing(method, *args); end

  private

  # source://railties/7.0.4/lib/rails/application/configuration.rb#464
  def respond_to_missing?(symbol, *_arg1); end
end

class Rails::Application::DefaultMiddlewareStack
  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#8
  def initialize(app, config, paths); end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#6
  def app; end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#14
  def build_stack; end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#6
  def config; end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#6
  def paths; end

  private

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#103
  def load_rack_cache; end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#125
  def show_exceptions_app; end
end

module Rails::Application::Finisher
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

module Rails::Application::Finisher::InterlockHook
  class << self
    # source://railties/7.0.4/lib/rails/application/finisher.rb#109
    def complete(_state); end

    # source://railties/7.0.4/lib/rails/application/finisher.rb#105
    def run; end
  end
end

class Rails::Application::Finisher::MonitorHook
  # source://railties/7.0.4/lib/rails/application/finisher.rb#91
  def initialize(monitor = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application/finisher.rb#99
  def complete(_state); end

  # source://railties/7.0.4/lib/rails/application/finisher.rb#95
  def run; end
end

# source://railties/7.0.4/lib/rails/application.rb#103
Rails::Application::INITIAL_VARIABLES = T.let(T.unsafe(nil), Array)

class Rails::Application::RoutesReloader
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#15
  def initialize; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#11
  def eager_load; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#11
  def eager_load=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#13
  def execute(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#13
  def execute_if_updated(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#10
  def external_routes; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#10
  def paths; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#22
  def reload!; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#10
  def route_sets; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#12
  def run_after_load_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#13
  def updated?(*_arg0, **_arg1, &_arg2); end

  private

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#42
  def clear!; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#58
  def finalize!; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#49
  def load_paths; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#62
  def revert; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#54
  def run_after_load_paths; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#32
  def updater; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end
  end
end

class Rails::ApplicationController < ::ActionController::Base
  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://railties/7.0.4/lib/rails/application_controller.rb#25
  def disable_content_security_policy_nonce!; end

  # source://railties/7.0.4/lib/rails/application_controller.rb#21
  def local_request?; end

  # source://railties/7.0.4/lib/rails/application_controller.rb#15
  def require_local!; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

class Rails::Autoloaders
  include ::Enumerable

  # source://railties/7.0.4/lib/rails/autoloaders.rb#11
  def initialize; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#31
  def each; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#40
  def log!; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#36
  def logger=(logger); end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#9
  def main; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#9
  def once; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#44
  def zeitwerk_enabled?; end
end

module Rails::Autoloaders::Inflector
  class << self
    # source://railties/7.0.4/lib/rails/autoloaders/inflector.rb#12
    def camelize(basename, _abspath); end

    # source://railties/7.0.4/lib/rails/autoloaders/inflector.rb#16
    def inflect(overrides); end
  end
end

module Rails::Configuration; end

class Rails::Configuration::Generators
  # source://railties/7.0.4/lib/rails/configuration.rb#108
  def initialize; end

  # source://railties/7.0.4/lib/rails/configuration.rb#130
  def after_generate(&block); end

  # source://railties/7.0.4/lib/rails/configuration.rb#106
  def after_generate_callbacks; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def aliases; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def aliases=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def api_only; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def api_only=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def colorize_logging; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def colorize_logging=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def fallbacks; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def fallbacks=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#106
  def hidden_namespaces; end

  # source://railties/7.0.4/lib/rails/configuration.rb#126
  def hide_namespace(namespace); end

  # source://railties/7.0.4/lib/rails/configuration.rb#134
  def method_missing(method, *args); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def options; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def options=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def templates; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def templates=(_arg0); end

  private

  # source://railties/7.0.4/lib/rails/configuration.rb#119
  def initialize_copy(source); end
end

class Rails::Configuration::MiddlewareStackProxy
  # source://railties/7.0.4/lib/rails/configuration.rb#47
  def initialize(operations = T.unsafe(nil), delete_operations = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/configuration.rb#96
  def +(other); end

  # source://railties/7.0.4/lib/rails/configuration.rb#70
  def delete(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#52
  def insert(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#58
  def insert_after(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#52
  def insert_before(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#88
  def merge_into(other); end

  # source://railties/7.0.4/lib/rails/configuration.rb#74
  def move(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#80
  def move_after(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#74
  def move_before(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#62
  def swap(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#84
  def unshift(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#66
  def use(*_arg0, **_arg1, &_arg2); end

  protected

  # source://railties/7.0.4/lib/rails/configuration.rb#101
  def delete_operations; end

  # source://railties/7.0.4/lib/rails/configuration.rb#101
  def operations; end
end

class Rails::Engine < ::Rails::Railtie
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods

  # source://railties/7.0.4/lib/rails/engine.rb#432
  def initialize; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _load_seed_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_load_seed_callbacks(&block); end

  # source://railties/7.0.4/lib/rails/engine.rb#511
  def app; end

  # source://railties/7.0.4/lib/rails/engine.rb#528
  def call(env); end

  # source://railties/7.0.4/lib/rails/engine.rb#547
  def config; end

  # source://railties/7.0.4/lib/rails/engine.rb#484
  def eager_load!; end

  # source://railties/7.0.4/lib/rails/engine.rb#523
  def endpoint; end

  # source://railties/7.0.4/lib/rails/engine.rb#430
  def engine_name(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#534
  def env_config; end

  # source://railties/7.0.4/lib/rails/engine.rb#494
  def helpers; end

  # source://railties/7.0.4/lib/rails/engine.rb#506
  def helpers_paths; end

  # source://railties/7.0.4/lib/rails/engine.rb#430
  def isolated?(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#446
  def load_console(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#470
  def load_generators(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#455
  def load_runner(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#555
  def load_seed; end

  # source://railties/7.0.4/lib/rails/engine.rb#479
  def load_server(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#462
  def load_tasks(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#429
  def middleware(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#429
  def paths(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#489
  def railties; end

  # source://railties/7.0.4/lib/rails/engine.rb#429
  def root(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#540
  def routes(&block); end

  # source://railties/7.0.4/lib/rails/engine.rb#654
  def routes?; end

  protected

  # source://railties/7.0.4/lib/rails/engine.rb#659
  def run_tasks_blocks(*_arg0); end

  private

  # source://railties/7.0.4/lib/rails/engine.rb#691
  def _all_autoload_once_paths; end

  # source://railties/7.0.4/lib/rails/engine.rb#695
  def _all_autoload_paths; end

  # source://railties/7.0.4/lib/rails/engine.rb#704
  def _all_load_paths(add_autoload_paths_to_load_path); end

  # source://railties/7.0.4/lib/rails/engine.rb#723
  def build_middleware; end

  # source://railties/7.0.4/lib/rails/engine.rb#715
  def build_request(env); end

  # source://railties/7.0.4/lib/rails/engine.rb#687
  def default_middleware_stack; end

  # source://railties/7.0.4/lib/rails/engine.rb#671
  def has_migrations?; end

  # source://railties/7.0.4/lib/rails/engine.rb#665
  def load_config_initializer(initializer); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _load_seed_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _load_seed_callbacks=(value); end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def called_from; end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def called_from=(_arg0); end

    # source://railties/7.0.4/lib/rails/engine.rb#358
    def eager_load!(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.0.4/lib/rails/engine.rb#378
    def endpoint(endpoint = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/railtie.rb#176
    def engine_name(name = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/engine.rb#416
    def find(path); end

    # source://railties/7.0.4/lib/rails/engine.rb#374
    def find_root(from); end

    # source://railties/7.0.4/lib/rails/engine.rb#675
    def find_root_with_flag(flag, root_path, default = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/engine.rb#360
    def inherited(base); end

    # source://railties/7.0.4/lib/rails/engine.rb#384
    def isolate_namespace(mod); end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def isolated; end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def isolated=(_arg0); end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def isolated?; end
  end
end

class Rails::Engine::Configuration < ::Rails::Railtie::Configuration
  # source://railties/7.0.4/lib/rails/engine/configuration.rb#12
  def initialize(root = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#83
  def autoload_once_paths; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#10
  def autoload_once_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#87
  def autoload_paths; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#10
  def autoload_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#79
  def eager_load_paths; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#10
  def eager_load_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#32
  def generators; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#9
  def javascript_path; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#9
  def javascript_path=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#9
  def middleware; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#9
  def middleware=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#38
  def paths; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#8
  def root; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#75
  def root=(value); end
end

class Rails::Engine::Railties
  include ::Enumerable

  # source://railties/7.0.4/lib/rails/engine/railties.rb#9
  def initialize; end

  # source://railties/7.0.4/lib/rails/engine/railties.rb#18
  def -(others); end

  # source://railties/7.0.4/lib/rails/engine/railties.rb#7
  def _all; end

  # source://railties/7.0.4/lib/rails/engine/railties.rb#14
  def each(*args, &block); end
end

module Rails::Html; end

class Rails::Html::FullSanitizer < ::Rails::Html::Sanitizer
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#29
  def sanitize(html, options = T.unsafe(nil)); end
end

class Rails::Html::LinkSanitizer < ::Rails::Html::Sanitizer
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#50
  def initialize; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#56
  def sanitize(html, options = T.unsafe(nil)); end
end

class Rails::Html::PermitScrubber < ::Loofah::Scrubber
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#50
  def initialize; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#48
  def attributes; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#59
  def attributes=(attributes); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#63
  def scrub(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#48
  def tags; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#55
  def tags=(tags); end

  protected

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#80
  def allowed_node?(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#92
  def keep_node?(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#134
  def scrub_attribute(node, attr_node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#88
  def scrub_attribute?(name); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#105
  def scrub_attributes(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#118
  def scrub_css_attribute(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#100
  def scrub_node(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#84
  def skip_node?(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#127
  def validate!(var, name); end
end

class Rails::Html::SafeListSanitizer < ::Rails::Html::Sanitizer
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#113
  def initialize; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#117
  def sanitize(html, options = T.unsafe(nil)); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#138
  def sanitize_css(style_string); end

  private

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#165
  def allowed_attributes(options); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#157
  def allowed_tags(options); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#144
  def loofah_using_html5?; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#149
  def remove_safelist_tag_combinations(tags); end

  class << self
    # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#106
    def allowed_attributes; end

    # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#106
    def allowed_attributes=(_arg0); end

    # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#105
    def allowed_tags; end

    # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#105
    def allowed_tags=(_arg0); end
  end
end

class Rails::Html::Sanitizer
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#6
  def sanitize(html, options = T.unsafe(nil)); end

  private

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#17
  def properly_encode(fragment, options); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#12
  def remove_xpaths(node, xpaths); end

  class << self
    # source://rails-html-sanitizer/1.4.3/lib/rails-html-sanitizer.rb#10
    def full_sanitizer; end

    # source://rails-html-sanitizer/1.4.3/lib/rails-html-sanitizer.rb#14
    def link_sanitizer; end

    # source://rails-html-sanitizer/1.4.3/lib/rails-html-sanitizer.rb#18
    def safe_list_sanitizer; end

    # source://rails-html-sanitizer/1.4.3/lib/rails-html-sanitizer.rb#22
    def white_list_sanitizer; end
  end
end

# source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer/version.rb#4
Rails::Html::Sanitizer::VERSION = T.let(T.unsafe(nil), String)

class Rails::Html::TargetScrubber < ::Rails::Html::PermitScrubber
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#172
  def allowed_node?(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#176
  def scrub_attribute?(name); end
end

class Rails::Html::TextOnlyScrubber < ::Loofah::Scrubber
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#187
  def initialize; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#191
  def scrub(node); end
end

# source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#170
Rails::Html::WhiteListSanitizer = Rails::Html::SafeListSanitizer

# source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#3
Rails::Html::XPATHS_TO_REMOVE = T.let(T.unsafe(nil), Array)

module Rails::Info
  # source://railties/7.0.4/lib/rails/info.rb#10
  def properties; end

  # source://railties/7.0.4/lib/rails/info.rb#10
  def properties=(val); end

  class << self
    # source://railties/7.0.4/lib/rails/info.rb#31
    def inspect; end

    # source://railties/7.0.4/lib/rails/info.rb#10
    def properties; end

    # source://railties/7.0.4/lib/rails/info.rb#10
    def properties=(val); end

    # source://railties/7.0.4/lib/rails/info.rb#25
    def property(name, value = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/info.rb#43
    def to_html; end

    # source://railties/7.0.4/lib/rails/info.rb#31
    def to_s; end
  end
end

class Rails::InfoController < ::Rails::ApplicationController
  # source://railties/7.0.4/lib/rails/info_controller.rb#12
  def index; end

  # source://railties/7.0.4/lib/rails/info_controller.rb#16
  def properties; end

  # source://railties/7.0.4/lib/rails/info_controller.rb#21
  def routes; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://railties/7.0.4/lib/rails/info_controller.rb#8
  def _layout_from_proc; end

  # source://railties/7.0.4/lib/rails/info_controller.rb#36
  def match_route; end

  # source://railties/7.0.4/lib/rails/info_controller.rb#40
  def with_leading_slash(path); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

module Rails::Initializable
  mixes_in_class_methods ::Rails::Initializable::ClassMethods

  # source://railties/7.0.4/lib/rails/initializable.rb#66
  def initializers; end

  # source://railties/7.0.4/lib/rails/initializable.rb#58
  def run_initializers(group = T.unsafe(nil), *args); end

  class << self
    # source://railties/7.0.4/lib/rails/initializable.rb#7
    def included(base); end
  end
end

module Rails::Initializable::ClassMethods
  # source://railties/7.0.4/lib/rails/initializable.rb#88
  def initializer(name, opts = T.unsafe(nil), &blk); end

  # source://railties/7.0.4/lib/rails/initializable.rb#71
  def initializers; end

  # source://railties/7.0.4/lib/rails/initializable.rb#75
  def initializers_chain; end

  # source://railties/7.0.4/lib/rails/initializable.rb#84
  def initializers_for(binding); end
end

class Rails::Initializable::Collection < ::Array
  include ::TSort

  # source://railties/7.0.4/lib/rails/initializable.rb#53
  def +(other); end

  # source://railties/7.0.4/lib/rails/initializable.rb#49
  def tsort_each_child(initializer, &block); end

  def tsort_each_node; end
end

class Rails::Initializable::Initializer
  # source://railties/7.0.4/lib/rails/initializable.rb#14
  def initialize(name, context, options, &block); end

  # source://railties/7.0.4/lib/rails/initializable.rb#23
  def after; end

  # source://railties/7.0.4/lib/rails/initializable.rb#19
  def before; end

  # source://railties/7.0.4/lib/rails/initializable.rb#27
  def belongs_to?(group); end

  # source://railties/7.0.4/lib/rails/initializable.rb#35
  def bind(context); end

  # source://railties/7.0.4/lib/rails/initializable.rb#12
  def block; end

  # source://railties/7.0.4/lib/rails/initializable.rb#40
  def context_class; end

  # source://railties/7.0.4/lib/rails/initializable.rb#12
  def name; end

  # source://railties/7.0.4/lib/rails/initializable.rb#31
  def run(*args); end
end

class Rails::MailersController < ::Rails::ApplicationController
  # source://railties/7.0.4/lib/rails/mailers_controller.rb#16
  def index; end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#21
  def preview; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#80
  def find_part(format); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#68
  def find_preferred_part(*formats); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#56
  def find_preview; end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#92
  def locale_query(locale); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#88
  def part_query(mime_type); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#96
  def set_locale(&block); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#52
  def show_previews?; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

module Rails::MailersController::HelperMethods
  include ::ActionController::Base::HelperMethods

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#12
  def locale_query(*args, **_arg1, &block); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#12
  def part_query(*args, **_arg1, &block); end
end

module Rails::Paths; end

class Rails::Paths::Path
  include ::Enumerable

  # source://railties/7.0.4/lib/rails/paths.rb#116
  def initialize(root, current, paths, options = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/paths.rb#168
  def <<(path); end

  # source://railties/7.0.4/lib/rails/paths.rb#129
  def absolute_current; end

  # source://railties/7.0.4/lib/rails/paths.rb#150
  def autoload!; end

  # source://railties/7.0.4/lib/rails/paths.rb#158
  def autoload?; end

  # source://railties/7.0.4/lib/rails/paths.rb#150
  def autoload_once!; end

  # source://railties/7.0.4/lib/rails/paths.rb#158
  def autoload_once?; end

  # source://railties/7.0.4/lib/rails/paths.rb#133
  def children; end

  # source://railties/7.0.4/lib/rails/paths.rb#173
  def concat(paths); end

  # source://railties/7.0.4/lib/rails/paths.rb#164
  def each(&block); end

  # source://railties/7.0.4/lib/rails/paths.rb#150
  def eager_load!; end

  # source://railties/7.0.4/lib/rails/paths.rb#158
  def eager_load?; end

  # source://railties/7.0.4/lib/rails/paths.rb#217
  def existent; end

  # source://railties/7.0.4/lib/rails/paths.rb#228
  def existent_directories; end

  # source://railties/7.0.4/lib/rails/paths.rb#198
  def expanded; end

  # source://railties/7.0.4/lib/rails/paths.rb#193
  def extensions; end

  # source://railties/7.0.4/lib/rails/paths.rb#140
  def first; end

  # source://railties/7.0.4/lib/rails/paths.rb#114
  def glob; end

  # source://railties/7.0.4/lib/rails/paths.rb#114
  def glob=(_arg0); end

  # source://railties/7.0.4/lib/rails/paths.rb#144
  def last; end

  # source://railties/7.0.4/lib/rails/paths.rb#150
  def load_path!; end

  # source://railties/7.0.4/lib/rails/paths.rb#158
  def load_path?; end

  # source://railties/7.0.4/lib/rails/paths.rb#185
  def paths; end

  # source://railties/7.0.4/lib/rails/paths.rb#168
  def push(path); end

  # source://railties/7.0.4/lib/rails/paths.rb#154
  def skip_autoload!; end

  # source://railties/7.0.4/lib/rails/paths.rb#154
  def skip_autoload_once!; end

  # source://railties/7.0.4/lib/rails/paths.rb#154
  def skip_eager_load!; end

  # source://railties/7.0.4/lib/rails/paths.rb#154
  def skip_load_path!; end

  # source://railties/7.0.4/lib/rails/paths.rb#198
  def to_a; end

  # source://railties/7.0.4/lib/rails/paths.rb#181
  def to_ary; end

  # source://railties/7.0.4/lib/rails/paths.rb#177
  def unshift(*paths); end

  private

  # source://railties/7.0.4/lib/rails/paths.rb#235
  def files_in(path); end
end

class Rails::Paths::Root
  # source://railties/7.0.4/lib/rails/paths.rb#51
  def initialize(path); end

  # source://railties/7.0.4/lib/rails/paths.rb#66
  def [](path); end

  # source://railties/7.0.4/lib/rails/paths.rb#56
  def []=(path, value); end

  # source://railties/7.0.4/lib/rails/paths.rb#61
  def add(path, options = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/paths.rb#82
  def all_paths; end

  # source://railties/7.0.4/lib/rails/paths.rb#86
  def autoload_once; end

  # source://railties/7.0.4/lib/rails/paths.rb#94
  def autoload_paths; end

  # source://railties/7.0.4/lib/rails/paths.rb#90
  def eager_load; end

  # source://railties/7.0.4/lib/rails/paths.rb#74
  def keys; end

  # source://railties/7.0.4/lib/rails/paths.rb#98
  def load_paths; end

  # source://railties/7.0.4/lib/rails/paths.rb#49
  def path; end

  # source://railties/7.0.4/lib/rails/paths.rb#49
  def path=(_arg0); end

  # source://railties/7.0.4/lib/rails/paths.rb#70
  def values; end

  # source://railties/7.0.4/lib/rails/paths.rb#78
  def values_at(*list); end

  private

  # source://railties/7.0.4/lib/rails/paths.rb#103
  def filter_by(&block); end
end

module Rails::Rack; end

class Rails::Rack::Logger < ::ActiveSupport::LogSubscriber
  # source://railties/7.0.4/lib/rails/rack/logger.rb#16
  def initialize(app, taggers = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/rack/logger.rb#21
  def call(env); end

  private

  # source://railties/7.0.4/lib/rails/rack/logger.rb#32
  def call_app(request, env); end

  # source://railties/7.0.4/lib/rails/rack/logger.rb#59
  def compute_tags(request); end

  # source://railties/7.0.4/lib/rails/rack/logger.rb#72
  def logger; end

  # source://railties/7.0.4/lib/rails/rack/logger.rb#51
  def started_request_message(request); end
end

class Rails::Railtie
  include ::Rails::Initializable
  extend ::ActiveSupport::DescendantsTracker
  extend ::Rails::Initializable::ClassMethods

  # source://railties/7.0.4/lib/rails/railtie.rb#246
  def initialize; end

  # source://railties/7.0.4/lib/rails/railtie.rb#263
  def config; end

  # source://railties/7.0.4/lib/rails/railtie.rb#256
  def configure(&block); end

  # source://railties/7.0.4/lib/rails/railtie.rb#252
  def inspect; end

  # source://railties/7.0.4/lib/rails/railtie.rb#244
  def railtie_name(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/railtie.rb#267
  def railtie_namespace; end

  protected

  # source://railties/7.0.4/lib/rails/railtie.rb#272
  def run_console_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#276
  def run_generators_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#280
  def run_runner_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#289
  def run_server_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#284
  def run_tasks_blocks(app); end

  private

  # source://railties/7.0.4/lib/rails/railtie.rb#295
  def each_registered_block(type, &block); end

  class << self
    # source://railties/7.0.4/lib/rails/railtie.rb#194
    def <=>(other); end

    # source://railties/7.0.4/lib/rails/railtie.rb#172
    def abstract_railtie?; end

    # source://railties/7.0.4/lib/rails/railtie.rb#146
    def config(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.0.4/lib/rails/railtie.rb#190
    def configure(&block); end

    # source://railties/7.0.4/lib/rails/railtie.rb#156
    def console(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#164
    def generators(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#198
    def inherited(subclass); end

    # source://railties/7.0.4/lib/rails/railtie.rb#183
    def instance; end

    # source://railties/7.0.4/lib/rails/railtie.rb#176
    def railtie_name(name = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/railtie.rb#152
    def rake_tasks(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#160
    def runner(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#168
    def server(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#148
    def subclasses; end

    protected

    # source://railties/7.0.4/lib/rails/railtie.rb#206
    def increment_load_index; end

    # source://railties/7.0.4/lib/rails/railtie.rb#204
    def load_index; end

    private

    # source://railties/7.0.4/lib/rails/railtie.rb#212
    def generate_railtie_name(string); end

    # source://railties/7.0.4/lib/rails/railtie.rb#224
    def method_missing(name, *args, **_arg2, &block); end

    # source://railties/7.0.4/lib/rails/railtie.rb#236
    def register_block_for(type, &blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#216
    def respond_to_missing?(name, _); end
  end
end

# source://railties/7.0.4/lib/rails/railtie.rb#142
Rails::Railtie::ABSTRACT_RAILTIES = T.let(T.unsafe(nil), Array)

class Rails::Railtie::Configuration
  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#8
  def initialize; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#70
  def after_initialize(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#47
  def app_generators; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#39
  def app_middleware; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#54
  def before_configuration(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#60
  def before_eager_load(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#65
  def before_initialize(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#18
  def eager_load_namespaces; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#85
  def respond_to?(name, include_private = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#81
  def to_prepare(&blk); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#75
  def to_prepare_blocks; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#30
  def watchable_dirs; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#23
  def watchable_files; end

  private

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#90
  def method_missing(name, *args, &blk); end

  class << self
    # source://railties/7.0.4/lib/rails/railtie/configuration.rb#13
    def eager_load_namespaces; end
  end
end

class Rails::Secrets
  class << self
    # source://railties/7.0.4/lib/rails/secrets.rb#45
    def decrypt(data); end

    # source://railties/7.0.4/lib/rails/secrets.rb#41
    def encrypt(data); end

    # source://railties/7.0.4/lib/rails/secrets.rb#37
    def key; end

    # source://railties/7.0.4/lib/rails/secrets.rb#24
    def parse(paths, env:); end

    # source://railties/7.0.4/lib/rails/secrets.rb#49
    def read; end

    # source://railties/7.0.4/lib/rails/secrets.rb#58
    def read_for_editing(&block); end

    # source://railties/7.0.4/lib/rails/secrets.rb#22
    def root=(_arg0); end

    # source://railties/7.0.4/lib/rails/secrets.rb#53
    def write(contents); end

    private

    # source://railties/7.0.4/lib/rails/secrets.rb#103
    def encryptor; end

    # source://railties/7.0.4/lib/rails/secrets.rb#63
    def handle_missing_key; end

    # source://railties/7.0.4/lib/rails/secrets.rb#73
    def key_path; end

    # source://railties/7.0.4/lib/rails/secrets.rb#77
    def path; end

    # source://railties/7.0.4/lib/rails/secrets.rb#81
    def preprocess(path); end

    # source://railties/7.0.4/lib/rails/secrets.rb#67
    def read_key_file; end

    # source://railties/7.0.4/lib/rails/secrets.rb#89
    def writing(contents); end
  end
end

class Rails::Secrets::MissingKeyError < ::RuntimeError
  # source://railties/7.0.4/lib/rails/secrets.rb#10
  def initialize; end
end

class Rails::SourceAnnotationExtractor
  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#85
  def initialize(tag); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#137
  def display(results, options = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#125
  def extract_annotations_from(file, pattern); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#91
  def find(dirs); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#99
  def find_in(dir); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#83
  def tag; end

  class << self
    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#76
    def enumerate(tag = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

class Rails::SourceAnnotationExtractor::Annotation < ::Struct
  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#55
  def to_s(options = T.unsafe(nil)); end

  class << self
    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#15
    def directories; end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#35
    def extensions; end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#21
    def register_directories(*dirs); end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#41
    def register_extensions(*exts, &block); end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#31
    def register_tags(*additional_tags); end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#25
    def tags; end
  end
end

module Rails::VERSION; end

# source://railties/7.0.4/lib/rails/gem_version.rb#10
Rails::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://railties/7.0.4/lib/rails/gem_version.rb#11
Rails::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://railties/7.0.4/lib/rails/gem_version.rb#13
Rails::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)

# source://railties/7.0.4/lib/rails/gem_version.rb#15
Rails::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://railties/7.0.4/lib/rails/gem_version.rb#12
Rails::VERSION::TINY = T.let(T.unsafe(nil), Integer)

class Rails::WelcomeController < ::Rails::ApplicationController
  # source://railties/7.0.4/lib/rails/welcome_controller.rb#9
  def index; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end
