# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `jbuilder` gem.
# Please instead update this file by running `bin/tapioca gem jbuilder`.

module AbstractController::AssetPaths
  extend ::ActiveSupport::Concern
end

class AbstractController::Base
  include ::ActiveSupport::Configurable
  extend ::ActiveSupport::Configurable::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#161
  def action_methods; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def action_name; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def action_name=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#175
  def available_action?(action_name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#156
  def controller_path; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def formats; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def formats=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#194
  def inspect; end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#182
  def performed?; end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#142
  def process(action, *args, **_arg2); end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def response_body; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def response_body=(_arg0); end

  def send_action(*_arg0); end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#246
  def _find_action_name(action_name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#228
  def _handle_action_missing(*args); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#282
  def _valid_action_name?(action_name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#204
  def action_method?(name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#273
  def method_for_action(action_name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#214
  def process_action(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#50
    def abstract; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#55
    def abstract!; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#50
    def abstract?; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#89
    def action_methods; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#107
    def clear_action_methods!; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#121
    def controller_path; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#59
    def inherited(klass); end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#74
    def internal_methods; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#126
    def method_added(name); end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#190
    def supports_path?; end
  end
end

module AbstractController::Caching
  include ::AbstractController::Caching::ConfigMethods
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Autoload
  include GeneratedInstanceMethods
  include ::AbstractController::Caching::Fragments

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Caching::Fragments::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ConfigMethods

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#52
  def view_cache_dependencies; end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#58
  def cache(key, options = T.unsafe(nil), &block); end

  module GeneratedClassMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end

  module GeneratedInstanceMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end
end

module AbstractController::Caching::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#47
  def view_cache_dependency(&dependency); end
end

module AbstractController::Caching::ConfigMethods
  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#13
  def cache_store; end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#17
  def cache_store=(store); end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#22
  def cache_configured?; end
end

module AbstractController::Caching::Fragments
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Caching::Fragments::ClassMethods

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#68
  def combined_fragment_cache_key(key); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#132
  def expire_fragment(key, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#105
  def fragment_exist?(key, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#145
  def instrument_fragment_cache(name, key, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#93
  def read_fragment(key, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#80
  def write_fragment(key, content, options = T.unsafe(nil)); end

  module GeneratedClassMethods
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end

  module GeneratedInstanceMethods
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end
end

module AbstractController::Caching::Fragments::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#57
  def fragment_cache_key(value = T.unsafe(nil), &key); end
end

module AbstractController::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::AbstractController::Callbacks::ClassMethods

  private

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#232
  def process_action(*_arg0, **_arg1, &_arg2); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

class AbstractController::Callbacks::ActionFilter
  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#39
  def initialize(actions); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#43
  def after(controller); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#43
  def around(controller); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#43
  def before(controller); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#43
  def match?(controller); end
end

module AbstractController::Callbacks::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#96
  def _insert_callbacks(callbacks, block = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#77
  def _normalize_callback_option(options, from, to); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#72
  def _normalize_callback_options(options); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def after_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def append_after_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def append_around_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def append_before_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def around_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def before_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#210
  def prepend_after_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#210
  def prepend_around_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#210
  def prepend_before_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#218
  def skip_after_action(*names); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#218
  def skip_around_action(*names); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#218
  def skip_before_action(*names); end
end

module AbstractController::Collector
  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def atom(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def bmp(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def css(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def csv(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def gif(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def gzip(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def html(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def ics(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def jpeg(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def js(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def json(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def m4a(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def mp3(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def mp4(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def mpeg(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def multipart_form(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def ogg(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def otf(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def pdf(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def png(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def rss(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def svg(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def text(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def tiff(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def ttf(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def url_encoded_form(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def vcf(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def vtt(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def webm(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def woff(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def woff2(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def xml(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def yaml(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def zip(*args, **_arg1, &block); end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#26
  def method_missing(symbol, *args, **_arg2, &block); end

  class << self
    # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#7
    def generate_method_for_mime(mime); end
  end
end

module AbstractController::Helpers
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#40
  def _helpers; end

  module GeneratedClassMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end

  module GeneratedInstanceMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end
end

module AbstractController::Helpers::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#56
  def _helpers=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#184
  def _helpers_for_modification; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#158
  def clear_helpers; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#147
  def helper(*args, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#79
  def helper_method(*methods); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#48
  def inherited(klass); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#169
  def modules_for_helpers(modules_or_helper_prefixes); end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#203
  def default_helper_module!; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#192
  def define_helpers_module(klass, helpers = T.unsafe(nil)); end
end

class AbstractController::Helpers::MissingHelperError < ::LoadError
  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#27
  def initialize(error, path); end
end

module AbstractController::Logger
  extend ::ActiveSupport::Concern
  include ::ActiveSupport::Benchmarkable
end

module AbstractController::Rendering
  extend ::ActiveSupport::Concern
  include ::ActionView::ViewPaths

  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#23
  def render(*args, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#51
  def render_to_body(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#45
  def render_to_string(*args, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#55
  def rendered_format; end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#63
  def view_assigns; end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#75
  def _normalize_args(action = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#90
  def _normalize_options(options); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#116
  def _normalize_render(*args, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#100
  def _process_format(format); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#95
  def _process_options(options); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#103
  def _process_variant(options); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#123
  def _protected_ivars; end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#106
  def _set_html_content_type; end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#112
  def _set_rendered_content_type(format); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#109
  def _set_vary_header; end
end

# source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#59
AbstractController::Rendering::DEFAULT_PROTECTED_INSTANCE_VARIABLES = T.let(T.unsafe(nil), Array)

module AbstractController::Translation
  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#33
  def l(object, **options); end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#33
  def localize(object, **options); end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#7
  def raise_on_missing_translations; end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#7
  def raise_on_missing_translations=(val); end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#17
  def t(key, **options); end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#17
  def translate(key, **options); end

  class << self
    # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#7
    def raise_on_missing_translations; end

    # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#7
    def raise_on_missing_translations=(val); end
  end
end

module AbstractController::UrlFor
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionDispatch::Routing::UrlFor

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::UrlFor::ClassMethods

  # source://actionpack/7.0.4/lib/abstract_controller/url_for.rb#14
  def _routes; end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

module AbstractController::UrlFor::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/url_for.rb#20
  def _routes; end

  # source://actionpack/7.0.4/lib/abstract_controller/url_for.rb#24
  def action_methods; end
end

module ActionController
  extend ::ActiveSupport::Autoload

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#7
    def add_renderer(key, &block); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#12
    def remove_renderer(key); end
  end
end

class ActionController::API < ::ActionController::Metal
  include ::ActionView::ViewPaths
  include ::AbstractController::Rendering
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor
  include ::AbstractController::Logger
  include ::ActiveSupport::Benchmarkable
  include ::ActionController::Redirecting
  include ::ActionController::ApiRendering
  include ::ActionController::Rendering
  include ::ActionController::Renderers
  include ::ActionController::Renderers::All
  include ::ActionController::Head
  include ::ActionController::ConditionalGet
  include ::ActionController::BasicImplicitRender
  include ::ActionController::StrongParameters
  include ::ActionController::DataStreaming
  include ::ActionController::DefaultHeaders
  include ::ActionController::Logging
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks
  include ::ActiveSupport::Rescuable
  include ::ActionController::Rescue
  include ::ActionController::Instrumentation
  include ::ActionController::ParamsWrapper
  extend ::ActionView::ViewPaths::ClassMethods
  extend ::AbstractController::UrlFor::ClassMethods
  extend ::ActionController::Rendering::ClassMethods
  extend ::ActionController::Renderers::ClassMethods
  extend ::ActionController::ConditionalGet::ClassMethods
  extend ::ActionController::DefaultHeaders::ClassMethods
  extend ::ActionController::Logging::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::AbstractController::Callbacks::ClassMethods
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::ActionController::Instrumentation::ClassMethods
  extend ::ActionController::ParamsWrapper::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _process_action_callbacks; end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_process_action_callbacks(&block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options?; end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def logger; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def logger=(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects; end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects=(val); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers?; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _process_action_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _process_action_callbacks=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options; end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options?; end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def logger; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def logger=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects; end

    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects=(val); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers?; end

    # source://actionpack/7.0.4/lib/action_controller/api.rb#104
    def without_modules(*modules); end
  end
end

# source://actionpack/7.0.4/lib/action_controller/api.rb#112
ActionController::API::MODULES = T.let(T.unsafe(nil), Array)

class ActionController::ActionControllerError < ::StandardError; end

module ActionController::ApiRendering
  extend ::ActiveSupport::Concern
  include ::ActionController::Rendering

  mixes_in_class_methods ::ActionController::Rendering::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/api/api_rendering.rb#11
  def render_to_body(options = T.unsafe(nil)); end
end

class ActionController::BadRequest < ::ActionController::ActionControllerError
  # source://actionpack/7.0.4/lib/action_controller/metal/exceptions.rb#8
  def initialize(msg = T.unsafe(nil)); end
end

class ActionController::Base < ::ActionController::Metal
  include ::ActionView::ViewPaths
  include ::AbstractController::Rendering
  include ::AbstractController::Translation
  include ::AbstractController::AssetPaths
  include ::AbstractController::Helpers
  include ::ActionController::Helpers
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor
  include ::AbstractController::Logger
  include ::ActiveSupport::Benchmarkable
  include ::ActionController::Redirecting
  include ::ActionView::Rendering
  include ::ActionView::Layouts
  include ::ActionController::Rendering
  include ::ActionController::Renderers
  include ::ActionController::Renderers::All
  include ::ActionController::Head
  include ::ActionController::ConditionalGet
  include ::ActionController::EtagWithTemplateDigest
  include ::ActionController::EtagWithFlash
  include ::ActionController::Caching
  include ::AbstractController::Caching::Fragments
  include ::AbstractController::Caching::ConfigMethods
  include ::AbstractController::Caching
  include ::ActionController::MimeResponds
  include ::ActionController::BasicImplicitRender
  include ::ActionController::ImplicitRender
  include ::ActionController::StrongParameters
  include ::ActionController::ParameterEncoding
  include ::ActionController::Cookies
  include ::ActionController::Flash
  include ::ActionController::FormBuilder
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks
  include ::ActionController::RequestForgeryProtection
  include ::ActionController::ContentSecurityPolicy
  include ::ActionController::PermissionsPolicy
  include ::ActionController::Streaming
  include ::ActionController::DataStreaming
  include ::ActionController::HttpAuthentication::Basic::ControllerMethods
  include ::ActionController::HttpAuthentication::Digest::ControllerMethods
  include ::ActionController::HttpAuthentication::Token::ControllerMethods
  include ::ActionController::DefaultHeaders
  include ::ActionController::Logging
  include ::ActiveSupport::Rescuable
  include ::ActionController::Rescue
  include ::ActionController::Instrumentation
  include ::ActionController::ParamsWrapper
  extend ::ActionView::ViewPaths::ClassMethods
  extend ::AbstractController::Helpers::ClassMethods
  extend ::ActionController::Helpers::ClassMethods
  extend ::AbstractController::UrlFor::ClassMethods
  extend ::ActionView::Rendering::ClassMethods
  extend ::ActionView::Layouts::ClassMethods
  extend ::ActionController::Rendering::ClassMethods
  extend ::ActionController::Renderers::ClassMethods
  extend ::ActionController::ConditionalGet::ClassMethods
  extend ::AbstractController::Caching::Fragments::ClassMethods
  extend ::AbstractController::Caching::ClassMethods
  extend ::AbstractController::Caching::ConfigMethods
  extend ::ActionController::ParameterEncoding::ClassMethods
  extend ::ActionController::Flash::ClassMethods
  extend ::ActionController::FormBuilder::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::AbstractController::Callbacks::ClassMethods
  extend ::ActionController::RequestForgeryProtection::ClassMethods
  extend ::ActionController::ContentSecurityPolicy::ClassMethods
  extend ::ActionController::PermissionsPolicy::ClassMethods
  extend ::ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods
  extend ::ActionController::DefaultHeaders::ClassMethods
  extend ::ActionController::Logging::ClassMethods
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::ActionController::Instrumentation::ClassMethods
  extend ::ActionController::ParamsWrapper::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _process_action_callbacks; end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_process_action_callbacks(&block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies; end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#36
  def alert; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def allow_forgery_protection; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def allow_forgery_protection=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def asset_host; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def asset_host=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def assets_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def assets_dir=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def default_asset_host_protocol; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def default_asset_host_protocol=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def default_protect_from_forgery; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def default_protect_from_forgery=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def default_static_extension; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def default_static_extension=(value); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def enable_fragment_cache_logging; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def enable_fragment_cache_logging=(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest; end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#10
  def flash(*_arg0, **_arg1, &_arg2); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def forgery_protection_origin_check; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def forgery_protection_origin_check=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def forgery_protection_strategy; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def forgery_protection_strategy=(value); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys; end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
  def helpers_path; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
  def helpers_path=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
  def helpers_path?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def javascripts_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def javascripts_dir=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def log_warning_on_csrf_failure; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def log_warning_on_csrf_failure=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def logger; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def logger=(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#36
  def notice; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def per_form_csrf_tokens; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def per_form_csrf_tokens=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def perform_caching; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def perform_caching=(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects; end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects=(val); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def relative_url_root; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def relative_url_root=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def request_forgery_protection_token; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def request_forgery_protection_token=(value); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def stylesheets_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def stylesheets_dir=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def urlsafe_csrf_tokens; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://actionpack/7.0.4/lib/action_controller/base.rb#266
  def _protected_ivars; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#31
    def _default_form_builder; end

    # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#31
    def _default_form_builder=(value); end

    # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#31
    def _default_form_builder?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#8
    def _flash_types; end

    # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#8
    def _flash_types=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#8
    def _flash_types?; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods?; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#15
    def _helpers; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout=(value); end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout?; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions=(value); end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _process_action_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _process_action_callbacks=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers?; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options; end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def allow_forgery_protection; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def allow_forgery_protection=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def asset_host; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def asset_host=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def assets_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def assets_dir=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def default_asset_host_protocol; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def default_asset_host_protocol=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def default_protect_from_forgery; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def default_protect_from_forgery=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def default_static_extension; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def default_static_extension=(value); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def enable_fragment_cache_logging; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def enable_fragment_cache_logging=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest; end

    # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def forgery_protection_origin_check; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def forgery_protection_origin_check=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def forgery_protection_strategy; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def forgery_protection_strategy=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
    def helpers_path; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
    def helpers_path=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
    def helpers_path?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def javascripts_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def javascripts_dir=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def log_warning_on_csrf_failure; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def log_warning_on_csrf_failure=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def logger; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def logger=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def per_form_csrf_tokens; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def per_form_csrf_tokens=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def perform_caching; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def perform_caching=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects; end

    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects=(val); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def relative_url_root; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def relative_url_root=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def request_forgery_protection_token; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def request_forgery_protection_token=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def stylesheets_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def stylesheets_dir=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def urlsafe_csrf_tokens; end

    # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#97
    def urlsafe_csrf_tokens=(urlsafe_csrf_tokens); end

    # source://actionpack/7.0.4/lib/action_controller/base.rb#198
    def without_modules(*modules); end
  end
end

module ActionController::Base::HelperMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#39
  def alert(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#31
  def combined_fragment_cache_key(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#11
  def content_security_policy?(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#12
  def content_security_policy_nonce(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/cookies.rb#8
  def cookies(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#106
  def form_authenticity_token(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#39
  def notice(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#107
  def protect_against_forgery?(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#43
  def view_cache_dependencies(*args, **_arg1, &block); end
end

# source://actionpack/7.0.4/lib/action_controller/base.rb#206
ActionController::Base::MODULES = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.4/lib/action_controller/base.rb#261
ActionController::Base::PROTECTED_IVARS = T.let(T.unsafe(nil), Array)

module ActionController::BasicImplicitRender
  # source://actionpack/7.0.4/lib/action_controller/metal/basic_implicit_render.rb#9
  def default_render; end

  # source://actionpack/7.0.4/lib/action_controller/metal/basic_implicit_render.rb#5
  def send_action(method, *args); end
end

module ActionController::Caching
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Caching::Fragments
  include ::AbstractController::Caching

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Caching::Fragments::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ConfigMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/caching.rb#40
  def instrument_name; end

  # source://actionpack/7.0.4/lib/action_controller/caching.rb#32
  def instrument_payload(key); end

  module GeneratedClassMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end

  module GeneratedInstanceMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end
end

module ActionController::ConditionalGet
  include ::ActionController::Head
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ConditionalGet::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#276
  def expires_in(seconds, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#294
  def expires_now; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#117
  def fresh_when(object = T.unsafe(nil), etag: T.unsafe(nil), weak_etag: T.unsafe(nil), strong_etag: T.unsafe(nil), last_modified: T.unsafe(nil), public: T.unsafe(nil), cache_control: T.unsafe(nil), template: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#306
  def http_cache_forever(public: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#316
  def no_store; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#249
  def stale?(object = T.unsafe(nil), **freshness_kwargs); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#321
  def combine_etags(validator, options); end

  module GeneratedClassMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end

  module GeneratedInstanceMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end
end

module ActionController::ConditionalGet::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#31
  def etag(&etagger); end
end

module ActionController::ContentSecurityPolicy
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Helpers
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::AbstractController::Callbacks::ClassMethods
  mixes_in_class_methods ::ActionController::ContentSecurityPolicy::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#73
  def content_security_policy?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#77
  def content_security_policy_nonce; end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#81
  def current_content_security_policy; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end
end

module ActionController::ContentSecurityPolicy::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#39
  def content_security_policy(enabled = T.unsafe(nil), **options, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#65
  def content_security_policy_report_only(report_only = T.unsafe(nil), **options); end
end

module ActionController::Cookies
  extend ::ActiveSupport::Concern

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/cookies.rb#14
  def cookies; end
end

module ActionController::DataStreaming
  extend ::ActiveSupport::Concern
  include ::ActionController::Rendering

  mixes_in_class_methods ::ActionController::Rendering::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#109
  def send_data(data, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#69
  def send_file(path, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#114
  def send_file_headers!(options); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#15
ActionController::DataStreaming::DEFAULT_SEND_FILE_DISPOSITION = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#14
ActionController::DataStreaming::DEFAULT_SEND_FILE_TYPE = T.let(T.unsafe(nil), String)

module ActionController::DefaultHeaders
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::DefaultHeaders::ClassMethods
end

module ActionController::DefaultHeaders::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/default_headers.rb#10
  def make_response!(request); end
end

module ActionController::EtagWithFlash
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionController::ConditionalGet

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ConditionalGet::ClassMethods

  module GeneratedClassMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end

  module GeneratedInstanceMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end
end

module ActionController::EtagWithTemplateDigest
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionController::ConditionalGet

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ConditionalGet::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#35
  def determine_template_etag(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#51
  def lookup_and_digest_template(template); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#45
  def pick_template_for_etag(options); end

  module GeneratedClassMethods
    def etag_with_template_digest; end
    def etag_with_template_digest=(value); end
    def etag_with_template_digest?; end
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end

  module GeneratedInstanceMethods
    def etag_with_template_digest; end
    def etag_with_template_digest=(value); end
    def etag_with_template_digest?; end
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end
end

module ActionController::Flash
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::Flash::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#51
  def redirect_to(options = T.unsafe(nil), response_options_and_flash = T.unsafe(nil)); end

  module GeneratedClassMethods
    def _flash_types; end
    def _flash_types=(value); end
    def _flash_types?; end
  end

  module GeneratedInstanceMethods; end
end

module ActionController::Flash::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#45
  def action_methods; end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#32
  def add_flash_types(*types); end
end

module ActionController::FormBuilder
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::FormBuilder::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#46
  def default_form_builder; end

  module GeneratedClassMethods
    def _default_form_builder; end
    def _default_form_builder=(value); end
    def _default_form_builder?; end
  end

  module GeneratedInstanceMethods; end
end

module ActionController::FormBuilder::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#40
  def default_form_builder(builder); end
end

module ActionController::Head
  # source://actionpack/7.0.4/lib/action_controller/metal/head.rb#21
  def head(status, options = T.unsafe(nil)); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/head.rb#52
  def include_content?(status); end
end

module ActionController::Helpers
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Helpers

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods
  mixes_in_class_methods ::ActionController::Helpers::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#128
  def helpers; end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#59
    def helpers_path; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#59
    def helpers_path=(_arg0); end
  end

  module GeneratedClassMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
    def helpers_path; end
    def helpers_path=(value); end
    def helpers_path?; end
    def include_all_helpers; end
    def include_all_helpers=(value); end
    def include_all_helpers?; end
  end

  module GeneratedInstanceMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
    def helpers_path; end
    def helpers_path=(value); end
    def helpers_path?; end
    def include_all_helpers; end
    def include_all_helpers=(value); end
    def include_all_helpers?; end
  end
end

module ActionController::Helpers::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#111
  def all_helpers_from_path(path); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#76
  def helper_attr(*attrs); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#86
  def helpers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#102
  def modules_for_helpers(args); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#122
  def all_application_helpers; end
end

module ActionController::HttpAuthentication; end

module ActionController::HttpAuthentication::Basic
  extend ::ActionController::HttpAuthentication::Basic

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#127
  def auth_param(request); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#123
  def auth_scheme(request); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#105
  def authenticate(request, &login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#135
  def authentication_request(controller, realm, message); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#119
  def decode_credentials(request); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#131
  def encode_credentials(user_name, password); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#111
  def has_basic_credentials?(request); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#115
  def user_name_and_password(request); end
end

module ActionController::HttpAuthentication::Basic::ControllerMethods
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#92
  def authenticate_or_request_with_http_basic(realm = T.unsafe(nil), message = T.unsafe(nil), &login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#96
  def authenticate_with_http_basic(&login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#83
  def http_basic_authenticate_or_request_with(name:, password:, realm: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#100
  def request_http_basic_authentication(realm = T.unsafe(nil), message = T.unsafe(nil)); end
end

module ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#76
  def http_basic_authenticate_with(name:, password:, realm: T.unsafe(nil), **options); end
end

module ActionController::HttpAuthentication::Digest
  extend ::ActionController::HttpAuthentication::Digest

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#211
  def authenticate(request, realm, &password_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#269
  def authentication_header(controller, realm); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#276
  def authentication_request(controller, realm, message = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#262
  def decode_credentials(header); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#258
  def decode_credentials_header(request); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#253
  def encode_credentials(http_method, credentials, password, password_is_ha1); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#243
  def expected_response(http_method, uri, credentials, password, password_is_ha1 = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#249
  def ha1(credentials, password); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#321
  def nonce(secret_key, time = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#340
  def opaque(secret_key); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#283
  def secret_token(request); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#218
  def validate_digest_response(request, realm, &password_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#333
  def validate_nonce(secret_key, request, value, seconds_to_timeout = T.unsafe(nil)); end
end

module ActionController::HttpAuthentication::Digest::ControllerMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#193
  def authenticate_or_request_with_http_digest(realm = T.unsafe(nil), message = T.unsafe(nil), &password_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#199
  def authenticate_with_http_digest(realm = T.unsafe(nil), &password_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#205
  def request_http_digest_authentication(realm = T.unsafe(nil), message = T.unsafe(nil)); end
end

module ActionController::HttpAuthentication::Token
  extend ::ActionController::HttpAuthentication::Token

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#461
  def authenticate(controller, &login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#541
  def authentication_request(controller, realm, message = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#526
  def encode_credentials(token, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#496
  def params_array_from(raw_params); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#508
  def raw_params(auth); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#501
  def rewrite_param_values(array_params); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#483
  def token_and_options(request); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#491
  def token_params_from(auth); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#422
ActionController::HttpAuthentication::Token::AUTHN_PAIR_DELIMITERS = T.let(T.unsafe(nil), Regexp)

module ActionController::HttpAuthentication::Token::ControllerMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#430
  def authenticate_or_request_with_http_token(realm = T.unsafe(nil), message = T.unsafe(nil), &login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#436
  def authenticate_with_http_token(&login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#442
  def request_http_token_authentication(realm = T.unsafe(nil), message = T.unsafe(nil)); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#420
ActionController::HttpAuthentication::Token::TOKEN_KEY = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#421
ActionController::HttpAuthentication::Token::TOKEN_REGEX = T.let(T.unsafe(nil), Regexp)

module ActionController::ImplicitRender
  include ::ActionController::BasicImplicitRender

  # source://actionpack/7.0.4/lib/action_controller/metal/implicit_render.rb#33
  def default_render; end

  # source://actionpack/7.0.4/lib/action_controller/metal/implicit_render.rb#52
  def method_for_action(action_name); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/implicit_render.rb#59
  def interactive_browser_request?; end
end

module ActionController::Instrumentation
  extend ::ActiveSupport::Concern
  include ::ActiveSupport::Benchmarkable
  include ::AbstractController::Logger

  mixes_in_class_methods ::ActionController::Instrumentation::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#40
  def redirect_to(*_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#19
  def render(*_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#34
  def send_data(data, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#27
  def send_file(path, options = T.unsafe(nil)); end

  def view_runtime; end
  def view_runtime=(_arg0); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#96
  def append_info_to_payload(payload); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#90
  def cleanup_view_runtime; end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#80
  def halted_callback_hook(filter, _); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#50
  def process_action(*_arg0); end
end

module ActionController::Instrumentation::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#104
  def log_process_action(payload); end
end

class ActionController::InvalidAuthenticityToken < ::ActionController::ActionControllerError; end
class ActionController::InvalidCrossOriginRequest < ::ActionController::ActionControllerError; end

module ActionController::Live
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::Live::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#24
  def new_controller_thread; end

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#249
  def process(name); end

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#295
  def response_body=(body); end

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#321
  def send_stream(filename:, disposition: T.unsafe(nil), type: T.unsafe(nil)); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#348
  def log_error(exception); end
end

class ActionController::Live::Buffer < ::ActionDispatch::Response::Buffer
  include ::MonitorMixin

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#143
  def initialize(response); end

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#193
  def abort; end

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#212
  def call_on_error; end

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#180
  def close; end

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#204
  def connected?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#141
  def ignore_disconnect; end

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#141
  def ignore_disconnect=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#208
  def on_error(&block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#151
  def write(string); end

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#172
  def writeln(string); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#228
  def build_queue(queue_size); end

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#217
  def each_chunk(&block); end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#131
    def queue_size; end

    # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#131
    def queue_size=(_arg0); end
  end
end

module ActionController::Live::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#41
  def make_response!(request); end
end

class ActionController::Live::ClientDisconnected < ::RuntimeError; end

class ActionController::Live::Response < ::ActionDispatch::Response
  private

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#235
  def before_committed; end

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#242
  def build_buffer(response, body); end
end

class ActionController::Live::SSE
  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#91
  def initialize(stream, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#96
  def close; end

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#100
  def write(object, options = T.unsafe(nil)); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/live.rb#110
  def perform_write(json, options); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/live.rb#89
ActionController::Live::SSE::PERMITTED_OPTIONS = T.let(T.unsafe(nil), Array)

class ActionController::LiveTestResponse < ::ActionController::Live::Response
  # source://rack/2.2.4/lib/rack/response.rb#141
  def error?; end

  # source://rack/2.2.4/lib/rack/response.rb#151
  def missing?; end

  # source://rack/2.2.4/lib/rack/response.rb#138
  def success?; end
end

class ActionController::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://actionpack/7.0.4/lib/action_controller/log_subscriber.rb#67
  def exist_fragment?(event); end

  # source://actionpack/7.0.4/lib/action_controller/log_subscriber.rb#67
  def expire_fragment(event); end

  # source://actionpack/7.0.4/lib/action_controller/log_subscriber.rb#40
  def halted_callback(event); end

  # source://actionpack/7.0.4/lib/action_controller/log_subscriber.rb#76
  def logger; end

  # source://actionpack/7.0.4/lib/action_controller/log_subscriber.rb#20
  def process_action(event); end

  # source://actionpack/7.0.4/lib/action_controller/log_subscriber.rb#67
  def read_fragment(event); end

  # source://actionpack/7.0.4/lib/action_controller/log_subscriber.rb#48
  def redirect_to(event); end

  # source://actionpack/7.0.4/lib/action_controller/log_subscriber.rb#52
  def send_data(event); end

  # source://actionpack/7.0.4/lib/action_controller/log_subscriber.rb#44
  def send_file(event); end

  # source://actionpack/7.0.4/lib/action_controller/log_subscriber.rb#7
  def start_processing(event); end

  # source://actionpack/7.0.4/lib/action_controller/log_subscriber.rb#56
  def unpermitted_parameters(event); end

  # source://actionpack/7.0.4/lib/action_controller/log_subscriber.rb#67
  def write_fragment(event); end
end

# source://actionpack/7.0.4/lib/action_controller/log_subscriber.rb#5
ActionController::LogSubscriber::INTERNAL_PARAMS = T.let(T.unsafe(nil), Array)

module ActionController::Logging
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::Logging::ClassMethods
end

module ActionController::Logging::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/logging.rb#15
  def log_at(level, **options); end
end

class ActionController::Metal < ::AbstractController::Base
  include ::ActionController::Testing::Functional

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#150
  def initialize; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def content_type(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def content_type=(arg); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#141
  def controller_name; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#185
  def dispatch(name, request, response); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def headers(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def location(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def location=(arg); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def media_type(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
  def middleware_stack; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
  def middleware_stack=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
  def middleware_stack?; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#157
  def params; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#161
  def params=(val); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#181
  def performed?; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def request; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def request=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#206
  def reset_session; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def response; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def response=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#172
  def response_body=(body); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def response_code(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#146
  def session(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#197
  def set_request!(request); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#193
  def set_response!(response); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def status(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def status=(arg); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#202
  def to_a; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#168
  def url_for(string); end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal.rb#231
    def action(name); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#136
    def action_encoding_template(action); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#126
    def controller_name; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#247
    def dispatch(name, req, res); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#212
    def inherited(base); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#130
    def make_response!(request); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#226
    def middleware; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack?; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#220
    def use(*_arg0, **_arg1, &_arg2); end
  end
end

class ActionController::MethodNotAllowed < ::ActionController::ActionControllerError
  # source://actionpack/7.0.4/lib/action_controller/metal/exceptions.rb#51
  def initialize(*allowed_methods); end
end

class ActionController::MiddlewareStack < ::ActionDispatch::MiddlewareStack
  # source://actionpack/7.0.4/lib/action_controller/metal.rb#27
  def build(action, app = T.unsafe(nil), &block); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#40
  def build_middleware(klass, args, block); end
end

# source://actionpack/7.0.4/lib/action_controller/metal.rb#37
ActionController::MiddlewareStack::EXCLUDE = T.let(T.unsafe(nil), Proc)

# source://actionpack/7.0.4/lib/action_controller/metal.rb#36
ActionController::MiddlewareStack::INCLUDE = T.let(T.unsafe(nil), Proc)

class ActionController::MiddlewareStack::Middleware < ::ActionDispatch::MiddlewareStack::Middleware
  # source://actionpack/7.0.4/lib/action_controller/metal.rb#16
  def initialize(klass, args, actions, strategy, block); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#22
  def valid?(action); end
end

# source://actionpack/7.0.4/lib/action_controller/metal.rb#38
ActionController::MiddlewareStack::NULL = T.let(T.unsafe(nil), Proc)

module ActionController::MimeResponds
  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#201
  def respond_to(*mimes); end
end

class ActionController::MimeResponds::Collector
  include ::AbstractController::Collector

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#246
  def initialize(mimes, variant = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#253
  def all(*args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#253
  def any(*args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#271
  def any_response?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#262
  def custom(mime_type, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#244
  def format; end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#244
  def format=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#288
  def negotiate_format(request); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#275
  def response; end
end

class ActionController::MimeResponds::Collector::VariantCollector
  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#293
  def initialize(variant = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#298
  def all(*args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#298
  def any(*args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#309
  def method_missing(name, *args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#313
  def variant; end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#322
  def variant_key; end
end

class ActionController::MissingExactTemplate < ::ActionController::UnknownFormat; end
class ActionController::MissingFile < ::ActionController::ActionControllerError; end

class ActionController::MissingRenderer < ::LoadError
  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#18
  def initialize(format); end
end

class ActionController::NotImplemented < ::ActionController::MethodNotAllowed; end

module ActionController::ParameterEncoding
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::ParameterEncoding::ClassMethods
end

module ActionController::ParameterEncoding::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#18
  def action_encoding_template(action); end

  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#9
  def inherited(klass); end

  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#77
  def param_encoding(action, param, encoding); end

  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#14
  def setup_param_encode; end

  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#48
  def skip_parameter_encoding(action); end
end

class ActionController::ParameterMissing < ::KeyError
  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#24
  def initialize(param, keys = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#33
  def corrections; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#22
  def keys; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#22
  def param; end
end

class ActionController::Parameters
  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#267
  def initialize(parameters = T.unsafe(nil), logging_context = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#275
  def ==(other); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#643
  def [](key); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#649
  def []=(key, value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#243
  def always_permitted_parameters; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#243
  def always_permitted_parameters=(val); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#233
  def as_json(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#819
  def compact; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#824
  def compact!; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#830
  def compact_blank; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#836
  def compact_blank!; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#407
  def converted_arrays; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#921
  def deep_dup; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#770
  def deep_transform_keys(&block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#779
  def deep_transform_keys!(&block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#788
  def delete(key, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#812
  def delete_if(&block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#687
  def dig(*keys); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#379
  def each(&block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#233
  def each_key(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#379
  def each_pair(&block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#391
  def each_value(&block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#233
  def empty?(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#916
  def encode_with(coder); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#283
  def eql?(other); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#716
  def except(*keys); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#725
  def extract!(*keys); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#666
  def fetch(key, *args); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#233
  def has_key?(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#233
  def has_value?(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#289
  def hash; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#233
  def include?(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#898
  def init_with(coder); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#885
  def inspect; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#799
  def keep_if(&block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#233
  def key?(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#233
  def keys(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#233
  def member?(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#848
  def merge(other_hash); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#856
  def merge!(other_hash); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#620
  def permit(*filters); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#433
  def permit!; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#417
  def permitted?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#807
  def reject(&block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#812
  def reject!(&block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#494
  def require(key); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#494
  def required(key); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#863
  def reverse_merge(other_hash); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#872
  def reverse_merge!(other_hash); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#794
  def select(&block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#799
  def select!(&block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#699
  def slice(*keys); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#705
  def slice!(*keys); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#881
  def stringify_keys; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#305
  def to_h; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#325
  def to_hash; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#357
  def to_param(*args); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#357
  def to_query(*args); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#233
  def to_s(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#372
  def to_unsafe_h; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#372
  def to_unsafe_hash; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#752
  def transform_keys(&block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#761
  def transform_keys!(&block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#735
  def transform_values; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#744
  def transform_values!; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#233
  def value?(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#233
  def values(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#842
  def values_at(*keys); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#863
  def with_defaults(other_hash); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#872
  def with_defaults!(other_hash); end

  protected

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#936
  def each_nested_attribute; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#932
  def nested_attributes?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#928
  def parameters; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#930
  def permitted=(_arg0); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1076
  def array_of_permitted_scalars?(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#964
  def convert_hashes_to_parameters(key, value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#949
  def convert_parameters_to_hashes(value, using); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#970
  def convert_value_to_parameters(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#990
  def each_element(object, filter, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1088
  def hash_filter(params, filter); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1147
  def initialize_copy(source); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#943
  def new_instance_with_inherited_permitted_status(hash); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1082
  def non_scalar?(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1132
  def permit_any_in_array(array); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1115
  def permit_any_in_parameters(params); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1047
  def permitted_scalar?(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1061
  def permitted_scalar_filter(params, permitted_key); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#984
  def specify_numeric_keys?(filter); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1016
  def unpermitted_keys(params); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1003
  def unpermitted_parameters!(params); end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#135
    def action_on_unpermitted_parameters; end

    # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#135
    def action_on_unpermitted_parameters=(val); end

    # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#243
    def always_permitted_parameters; end

    # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#243
    def always_permitted_parameters=(val); end

    # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#889
    def hook_into_yaml_loading; end

    # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#246
    def nested_attribute?(key, value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#133
    def permit_all_parameters; end

    # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#133
    def permit_all_parameters=(val); end
  end
end

# source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1086
ActionController::Parameters::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1087
ActionController::Parameters::EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1031
ActionController::Parameters::PERMITTED_SCALAR_TYPES = T.let(T.unsafe(nil), Array)

module ActionController::ParamsWrapper
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ParamsWrapper::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#277
  def _extract_parameters(parameters); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#299
  def _perform_parameter_wrapping; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#273
  def _wrap_parameters(parameters); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#289
  def _wrapper_enabled?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#268
  def _wrapper_formats; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#263
  def _wrapper_key; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#257
  def process_action(*_arg0); end

  module GeneratedClassMethods
    def _wrapper_options; end
    def _wrapper_options=(value); end
    def _wrapper_options?; end
  end

  module GeneratedInstanceMethods
    def _wrapper_options; end
    def _wrapper_options=(value); end
    def _wrapper_options?; end
  end
end

module ActionController::ParamsWrapper::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#189
  def _set_wrapper_options(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#244
  def inherited(klass); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#220
  def wrap_parameters(name_or_model_or_options, options = T.unsafe(nil)); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#83
ActionController::ParamsWrapper::EXCLUDE_PARAMETERS = T.let(T.unsafe(nil), Array)

class ActionController::ParamsWrapper::Options < ::Struct
  include ::Mutex_m

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#98
  def initialize(name, format, include, exclude, klass, model); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#108
  def include; end

  # source://mutex_m/0.1.1/mutex_m.rb#93
  def lock; end

  # source://mutex_m/0.1.1/mutex_m.rb#83
  def locked?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#104
  def model; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#141
  def name; end

  # source://mutex_m/0.1.1/mutex_m.rb#78
  def synchronize(&block); end

  # source://mutex_m/0.1.1/mutex_m.rb#88
  def try_lock; end

  # source://mutex_m/0.1.1/mutex_m.rb#98
  def unlock; end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#165
  def _default_wrap_model; end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#90
    def from_hash(hash); end
  end
end

module ActionController::PermissionsPolicy
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::PermissionsPolicy::ClassMethods
end

module ActionController::PermissionsPolicy::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/permissions_policy.rb#26
  def permissions_policy(**options, &block); end
end

class ActionController::Railtie < ::Rails::Railtie; end
module ActionController::Railties; end

module ActionController::Railties::Helpers
  # source://actionpack/7.0.4/lib/action_controller/railties/helpers.rb#6
  def inherited(klass); end
end

module ActionController::Redirecting
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Benchmarkable
  include ::AbstractController::Logger
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::UrlFor::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#130
  def _compute_redirect_to_location(request, options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#95
  def redirect_back(fallback_location:, allow_other_host: T.unsafe(nil), **args); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#121
  def redirect_back_or_to(fallback_location, allow_other_host: T.unsafe(nil), **options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#82
  def redirect_to(options = T.unsafe(nil), response_options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#169
  def url_from(location); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#175
  def _allow_other_host; end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#189
  def _enforce_open_redirect_protection(location, allow_other_host:); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#179
  def _extract_redirect_to_status(options, response_options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#197
  def _url_host_allowed?(url); end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#130
    def _compute_redirect_to_location(request, options); end
  end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

class ActionController::Redirecting::UnsafeRedirectError < ::StandardError; end
class ActionController::RenderError < ::ActionController::ActionControllerError; end

class ActionController::Renderer
  # source://actionpack/7.0.4/lib/action_controller/renderer.rb#65
  def initialize(controller, env, defaults); end

  # source://actionpack/7.0.4/lib/action_controller/renderer.rb#37
  def controller; end

  # source://actionpack/7.0.4/lib/action_controller/renderer.rb#37
  def defaults; end

  # source://actionpack/7.0.4/lib/action_controller/renderer.rb#53
  def new(env = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/renderer.rb#91
  def render(*args); end

  # source://actionpack/7.0.4/lib/action_controller/renderer.rb#91
  def render_to_string(*args); end

  # source://actionpack/7.0.4/lib/action_controller/renderer.rb#58
  def with_defaults(defaults); end

  private

  # source://actionpack/7.0.4/lib/action_controller/renderer.rb#105
  def normalize_keys(defaults, env); end

  # source://actionpack/7.0.4/lib/action_controller/renderer.rb#126
  def rack_key_for(key); end

  # source://actionpack/7.0.4/lib/action_controller/renderer.rb#130
  def rack_value_for(key, value); end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/renderer.rb#48
    def for(controller, env = T.unsafe(nil), defaults = T.unsafe(nil)); end
  end
end

# source://actionpack/7.0.4/lib/action_controller/renderer.rb#39
ActionController::Renderer::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://actionpack/7.0.4/lib/action_controller/renderer.rb#118
ActionController::Renderer::RACK_KEY_TRANSLATION = T.let(T.unsafe(nil), Hash)

module ActionController::Renderers
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::Renderers::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#144
  def _render_to_body_with_renderer(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#170
  def _render_with_renderer_js(js, options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#155
  def _render_with_renderer_json(json, options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#175
  def _render_with_renderer_xml(xml, options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#140
  def render_to_body(options); end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#90
    def _render_with_renderer_method_name(key); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#74
    def add(key, &block); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#84
    def remove(key); end
  end

  module GeneratedClassMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end

  module GeneratedInstanceMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end
end

module ActionController::Renderers::All
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionController::Renderers

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::Renderers::ClassMethods

  module GeneratedClassMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end

  module GeneratedInstanceMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end
end

module ActionController::Renderers::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#128
  def use_renderer(*args); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#128
  def use_renderers(*args); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#28
ActionController::Renderers::RENDERERS = T.let(T.unsafe(nil), Set)

module ActionController::Rendering
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::Rendering::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#28
  def render(*args); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#45
  def render_to_body(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#34
  def render_to_string(*_arg0); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#87
  def _normalize_args(action = T.unsafe(nil), options = T.unsafe(nil), &blk); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#94
  def _normalize_options(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#108
  def _normalize_text(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#117
  def _process_options(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#56
  def _process_variant(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#62
  def _render_in_priorities(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#70
  def _set_html_content_type; end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#74
  def _set_rendered_content_type(format); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#80
  def _set_vary_header; end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#51
  def process_action(*_arg0); end
end

module ActionController::Rendering::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#21
  def inherited(klass); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#11
  def render(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#15
  def renderer; end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#17
  def setup_renderer!; end
end

# source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#7
ActionController::Rendering::RENDER_FORMATS_IN_PRIORITY = T.let(T.unsafe(nil), Array)

module ActionController::RequestForgeryProtection
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Helpers
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::AbstractController::Callbacks::ClassMethods
  mixes_in_class_methods ::ActionController::RequestForgeryProtection::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#344
  def any_authenticity_token_valid?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#430
  def compare_with_global_token(token, session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#426
  def compare_with_real_token(token, session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#464
  def csrf_token_hmac(session, identifier); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#535
  def decode_csrf_token(encoded_csrf_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#527
  def encode_csrf_token(csrf_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#484
  def form_authenticity_param; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#356
  def form_authenticity_token(form_options: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#519
  def generate_csrf_token; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#460
  def global_csrf_token(session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#277
  def handle_unverified_request; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#316
  def mark_for_same_origin_verification!; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#322
  def marked_for_same_origin_verification?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#419
  def mask_token(raw_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#363
  def masked_authenticity_token(session, form_options: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#327
  def non_xhr_javascript_response?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#514
  def normalize_action_path(action_path); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#453
  def per_form_csrf_token(session, action_path, method); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#489
  def protect_against_forgery?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#448
  def real_csrf_token(session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#351
  def request_authenticity_tokens; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#411
  def unmask_token(masked_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#287
  def unverified_request_warning_message; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#379
  def valid_authenticity_token?(session, encoded_masked_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#434
  def valid_per_form_csrf_token?(token, session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#504
  def valid_request_origin?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#338
  def verified_request?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#267
  def verify_authenticity_token; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#306
  def verify_same_origin_request; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#472
  def xor_byte_strings(s1, s2); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end
end

# source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#331
ActionController::RequestForgeryProtection::AUTHENTICITY_TOKEN_LENGTH = T.let(T.unsafe(nil), Integer)

module ActionController::RequestForgeryProtection::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#156
  def protect_from_forgery(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#170
  def skip_forgery_protection(options = T.unsafe(nil)); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#175
  def protection_method_class(name); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#493
ActionController::RequestForgeryProtection::NULL_ORIGIN_MESSAGE = T.let(T.unsafe(nil), String)

module ActionController::RequestForgeryProtection::ProtectionMethods; end

class ActionController::RequestForgeryProtection::ProtectionMethods::Exception
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#246
  def initialize(controller); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#250
  def handle_unverified_request; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#244
  def warning_message; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#244
  def warning_message=(_arg0); end
end

class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#193
  def initialize(controller); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#198
  def handle_unverified_request; end
end

class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession::NullCookieJar < ::ActionDispatch::Cookies::CookieJar
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#227
  def write(*_arg0); end
end

class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession::NullSessionHash < ::Rack::Session::Abstract::SessionHash
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#208
  def initialize(req); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#215
  def destroy; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#221
  def enabled?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#217
  def exists?; end
end

class ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#234
  def initialize(controller); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#238
  def handle_unverified_request; end
end

module ActionController::Rescue
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Rescuable

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/rescue.rb#16
  def show_detailed_exceptions?; end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/rescue.rb#21
  def process_action(*_arg0); end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

class ActionController::RespondToMismatchError < ::ActionController::ActionControllerError
  # source://actionpack/7.0.4/lib/action_controller/metal/exceptions.rb#89
  def initialize(message = T.unsafe(nil)); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/exceptions.rb#87
ActionController::RespondToMismatchError::DEFAULT_MESSAGE = T.let(T.unsafe(nil), String)

class ActionController::RoutingError < ::ActionController::ActionControllerError
  # source://actionpack/7.0.4/lib/action_controller/metal/exceptions.rb#19
  def initialize(message, failures = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/exceptions.rb#18
  def failures; end
end

class ActionController::SessionOverflowError < ::ActionController::ActionControllerError
  # source://actionpack/7.0.4/lib/action_controller/metal/exceptions.rb#65
  def initialize(message = T.unsafe(nil)); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/exceptions.rb#63
ActionController::SessionOverflowError::DEFAULT_MESSAGE = T.let(T.unsafe(nil), String)

module ActionController::Streaming
  private

  # source://actionpack/7.0.4/lib/action_controller/metal/streaming.rb#198
  def _process_options(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/streaming.rb#212
  def _render_template(options); end
end

module ActionController::StrongParameters
  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1224
  def params; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1239
  def params=(value); end
end

module ActionController::TemplateAssertions
  # source://actionpack/7.0.4/lib/action_controller/template_assertions.rb#5
  def assert_template(options = T.unsafe(nil), message = T.unsafe(nil)); end
end

class ActionController::TestCase < ::ActiveSupport::TestCase
  include ::ActiveSupport::Testing::ConstantLookup
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::TestProcess
  include ::ActionController::TestCase::Behavior
  include ::ActionController::TemplateAssertions
  include ::ActionDispatch::Assertions
  extend ::ActiveSupport::Testing::ConstantLookup::ClassMethods
  extend ::ActionController::TestCase::Behavior::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#561
  def _controller_class; end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#561
  def _controller_class=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#561
  def _controller_class?; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.4/lib/action_controller/test_case.rb#561
    def _controller_class; end

    # source://actionpack/7.0.4/lib/action_controller/test_case.rb#561
    def _controller_class=(value); end

    # source://actionpack/7.0.4/lib/action_controller/test_case.rb#561
    def _controller_class?; end

    # source://actionpack/7.0.4/lib/action_controller/test_case.rb#336
    def executor_around_each_request; end

    # source://actionpack/7.0.4/lib/action_controller/test_case.rb#336
    def executor_around_each_request=(_arg0); end
  end
end

module ActionController::TestCase::Behavior
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::TestProcess
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Testing::ConstantLookup
  include ::Rails::Dom::Testing::Assertions
  include ::ActionController::TemplateAssertions
  include ::ActionDispatch::Assertions

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Testing::ConstantLookup::ClassMethods
  mixes_in_class_methods ::ActionController::TestCase::Behavior::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#554
  def build_response(klass); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#514
  def controller_class_name; end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#429
  def delete(action, **args); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#518
  def generated_path(generated_extras); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#403
  def get(action, **args); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#435
  def head(action, **args); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#417
  def patch(action, **args); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#411
  def post(action, **args); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#474
  def process(action, method: T.unsafe(nil), params: T.unsafe(nil), session: T.unsafe(nil), body: T.unsafe(nil), flash: T.unsafe(nil), format: T.unsafe(nil), xhr: T.unsafe(nil), as: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#423
  def put(action, **args); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#522
  def query_parameter_names(generated_extras); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#344
  def request; end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#344
  def response; end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#526
  def setup_controller_request_and_response; end

  private

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#646
  def check_required_ivars; end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#642
  def document_root_element; end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#597
  def process_controller_response(action, cookies, xhr); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#632
  def scrub_env!(env); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#567
  def setup_request(controller_class_name, action, parameters, session, flash, xhr); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#589
  def wrap_execution(&block); end

  module GeneratedClassMethods
    def _controller_class; end
    def _controller_class=(value); end
    def _controller_class?; end
  end

  module GeneratedInstanceMethods
    def _controller_class; end
    def _controller_class=(value); end
    def _controller_class?; end
  end
end

module ActionController::TestCase::Behavior::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#368
  def controller_class; end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#364
  def controller_class=(new_class); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#376
  def determine_default_controller_class(name); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#353
  def tests(controller_class); end
end

class ActionController::TestRequest < ::ActionDispatch::TestRequest
  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#57
  def initialize(env, session, controller_class); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#76
  def assign_parameters(routes, controller_path, action, parameters, generated_path, query_string_keys); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#72
  def content_type=(type); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#42
  def controller_class; end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#68
  def query_string=(string); end

  private

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#164
  def params_parsers; end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/test_case.rb#45
    def create(controller_class); end

    # source://actionpack/7.0.4/lib/action_controller/test_case.rb#38
    def new_session; end

    private

    # source://actionpack/7.0.4/lib/action_controller/test_case.rb#52
    def default_env; end
  end
end

# source://actionpack/7.0.4/lib/action_controller/test_case.rb#35
ActionController::TestRequest::DEFAULT_ENV = T.let(T.unsafe(nil), Hash)

# source://actionpack/7.0.4/lib/action_controller/test_case.rb#136
ActionController::TestRequest::ENCODER = T.let(T.unsafe(nil), T.untyped)

class ActionController::TestSession < ::Rack::Session::Abstract::PersistedSecure::SecureSessionHash
  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#185
  def initialize(session = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#204
  def destroy; end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#208
  def dig(*keys); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#217
  def enabled?; end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#192
  def exists?; end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#213
  def fetch(key, *args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#196
  def keys; end

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#200
  def values; end

  private

  # source://actionpack/7.0.4/lib/action_controller/test_case.rb#222
  def load!; end
end

# source://actionpack/7.0.4/lib/action_controller/test_case.rb#183
ActionController::TestSession::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

module ActionController::Testing; end

module ActionController::Testing::Functional
  # source://actionpack/7.0.4/lib/action_controller/metal/testing.rb#7
  def clear_instance_variables_between_requests; end

  # source://actionpack/7.0.4/lib/action_controller/metal/testing.rb#16
  def recycle!; end
end

class ActionController::UnfilteredParameters < ::ArgumentError
  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#62
  def initialize; end
end

class ActionController::UnknownFormat < ::ActionController::ActionControllerError; end
class ActionController::UnknownHttpMethod < ::ActionController::ActionControllerError; end

class ActionController::UnpermittedParameters < ::IndexError
  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#49
  def initialize(params); end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#47
  def params; end
end

module ActionController::UrlFor
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::UrlFor::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/url_for.rb#30
  def url_options; end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

class ActionController::UrlGenerationError < ::ActionController::ActionControllerError
  include ::DidYouMean::Correctable

  # source://actionpack/7.0.4/lib/action_controller/metal/exceptions.rb#28
  def initialize(message, routes = T.unsafe(nil), route_name = T.unsafe(nil), method_name = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/exceptions.rb#39
  def corrections; end

  # source://actionpack/7.0.4/lib/action_controller/metal/exceptions.rb#26
  def method_name; end

  # source://actionpack/7.0.4/lib/action_controller/metal/exceptions.rb#26
  def route_name; end

  # source://actionpack/7.0.4/lib/action_controller/metal/exceptions.rb#26
  def routes; end
end

module ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions

  # source://actionpack/7.0.4/lib/action_dispatch/testing/assertions.rb#13
  def html_document; end
end

module ActionDispatch::Assertions::ResponseAssertions
  # source://actionpack/7.0.4/lib/action_dispatch/testing/assertions/response.rb#53
  def assert_redirected_to(options = T.unsafe(nil), message = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/assertions/response.rb#30
  def assert_response(type, message = T.unsafe(nil)); end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/testing/assertions/response.rb#95
  def code_with_name(code_or_name); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/assertions/response.rb#79
  def generate_response_message(expected, actual = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/assertions/response.rb#89
  def location_if_redirected; end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/assertions/response.rb#70
  def normalize_argument_to_redirection(fragment); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/assertions/response.rb#66
  def parameterize(value); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/assertions/response.rb#84
  def response_body_if_short; end
end

# source://actionpack/7.0.4/lib/action_dispatch/testing/assertions/response.rb#7
ActionDispatch::Assertions::ResponseAssertions::RESPONSE_PREDICATES = T.let(T.unsafe(nil), Hash)

module ActionDispatch::Assertions::RoutingAssertions
  # source://actionpack/7.0.4/lib/action_dispatch/testing/assertions/routing.rb#85
  def assert_generates(expected_path, options, defaults = T.unsafe(nil), extras = T.unsafe(nil), message = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/assertions/routing.rb#47
  def assert_recognizes(expected_options, path, extras = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/assertions/routing.rb#128
  def assert_routing(path, options, defaults = T.unsafe(nil), extras = T.unsafe(nil), message = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/assertions/routing.rb#183
  def method_missing(selector, *args, **_arg2, &block); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/assertions/routing.rb#12
  def setup; end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/assertions/routing.rb#153
  def with_routing; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/testing/assertions/routing.rb#228
  def fail_on(exception_class, message); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/assertions/routing.rb#194
  def recognized_request_for(path, extras = T.unsafe(nil), msg); end
end

module ActionDispatch::ContentSecurityPolicy::Request
  # source://actionpack/7.0.4/lib/action_dispatch/http/content_security_policy.rb#71
  def content_security_policy; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/content_security_policy.rb#75
  def content_security_policy=(policy); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/content_security_policy.rb#103
  def content_security_policy_nonce; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/content_security_policy.rb#95
  def content_security_policy_nonce_directives; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/content_security_policy.rb#99
  def content_security_policy_nonce_directives=(generator); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/content_security_policy.rb#87
  def content_security_policy_nonce_generator; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/content_security_policy.rb#91
  def content_security_policy_nonce_generator=(generator); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/content_security_policy.rb#79
  def content_security_policy_report_only; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/content_security_policy.rb#83
  def content_security_policy_report_only=(value); end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/http/content_security_policy.rb#114
  def generate_content_security_policy_nonce; end
end

# source://actionpack/7.0.4/lib/action_dispatch/http/content_security_policy.rb#68
ActionDispatch::ContentSecurityPolicy::Request::NONCE = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/http/content_security_policy.rb#69
ActionDispatch::ContentSecurityPolicy::Request::NONCE_DIRECTIVES = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/http/content_security_policy.rb#67
ActionDispatch::ContentSecurityPolicy::Request::NONCE_GENERATOR = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/http/content_security_policy.rb#65
ActionDispatch::ContentSecurityPolicy::Request::POLICY = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/http/content_security_policy.rb#66
ActionDispatch::ContentSecurityPolicy::Request::POLICY_REPORT_ONLY = T.let(T.unsafe(nil), String)

module ActionDispatch::Cookies::ChainedCookieJars
  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#252
  def encrypted; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#218
  def permanent; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#234
  def signed; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#258
  def signed_or_encrypted; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#281
  def encrypted_cookie_cipher; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#275
  def prepare_upgrade_legacy_hmac_aes_cbc_cookies?; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#285
  def signed_cookie_digest; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#268
  def upgrade_legacy_hmac_aes_cbc_cookies?; end
end

class ActionDispatch::Cookies::CookieJar
  include ::ActionDispatch::Cookies::ChainedCookieJars
  include ::Enumerable

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#315
  def initialize(request); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#336
  def [](name); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#370
  def []=(name, options); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#424
  def always_write_cookie; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#424
  def always_write_cookie=(val); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#414
  def clear(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#325
  def commit!; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#323
  def committed?; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#393
  def delete(name, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#407
  def deleted?(name, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#331
  def each(&block); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#340
  def fetch(name, *args, &block); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#344
  def has_key?(name); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#344
  def key?(name); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#313
  def request; end

  def to_hash(*_arg0); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#364
  def to_header; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#352
  def update(other_hash); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#357
  def update_cookies_from_jar; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#418
  def write(headers); end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#427
  def escape(string); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#448
  def handle_options(options); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#431
  def make_set_cookie_header(header); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#444
  def write_cookie?(cookie); end

  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#424
    def always_write_cookie; end

    # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#424
    def always_write_cookie=(val); end

    # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#307
    def build(req, cookies); end
  end
end

# source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#305
ActionDispatch::Cookies::CookieJar::DOMAIN_REGEXP = T.let(T.unsafe(nil), Regexp)

module ActionDispatch::Flash::RequestMethods
  # source://actionpack/7.0.4/lib/action_dispatch/middleware/flash.rb#62
  def commit_flash; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/flash.rb#48
  def flash; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/flash.rb#54
  def flash=(flash); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/flash.rb#58
  def flash_hash; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/flash.rb#75
  def reset_session; end
end

module ActionDispatch::Http::Cache::Request
  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#28
  def etag_matches?(etag); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#38
  def fresh?(response); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#10
  def if_modified_since; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#16
  def if_none_match; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#20
  def if_none_match_etags; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#24
  def not_modified?(modified_at); end
end

# source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#7
ActionDispatch::Http::Cache::Request::HTTP_IF_MODIFIED_SINCE = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#8
ActionDispatch::Http::Cache::Request::HTTP_IF_NONE_MATCH = T.let(T.unsafe(nil), String)

module ActionDispatch::Http::Cache::Response
  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#52
  def cache_control; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#68
  def date; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#78
  def date=(utc_time); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#74
  def date?; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#101
  def etag=(weak_validators); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#113
  def etag?; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#54
  def last_modified; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#64
  def last_modified=(utc_time); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#60
  def last_modified?; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#109
  def strong_etag=(strong_validators); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#121
  def strong_etag?; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#105
  def weak_etag=(weak_validators); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#116
  def weak_etag?; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#146
  def cache_control_headers; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#138
  def cache_control_segments; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#134
  def generate_strong_etag(validators); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#130
  def generate_weak_etag(validators); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#175
  def handle_conditional_get!; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#185
  def merge_and_normalize_cache_control!(cache_control); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#164
  def prepare_cache_control!; end
end

# source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#126
ActionDispatch::Http::Cache::Response::DATE = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#168
ActionDispatch::Http::Cache::Response::DEFAULT_CACHE_CONTROL = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#127
ActionDispatch::Http::Cache::Response::LAST_MODIFIED = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#173
ActionDispatch::Http::Cache::Response::MUST_REVALIDATE = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#170
ActionDispatch::Http::Cache::Response::NO_CACHE = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#169
ActionDispatch::Http::Cache::Response::NO_STORE = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#172
ActionDispatch::Http::Cache::Response::PRIVATE = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#171
ActionDispatch::Http::Cache::Response::PUBLIC = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/http/cache.rb#128
ActionDispatch::Http::Cache::Response::SPECIAL_KEYS = T.let(T.unsafe(nil), Set)

module ActionDispatch::Http::FilterParameters
  # source://actionpack/7.0.4/lib/action_dispatch/http/filter_parameters.rb#39
  def initialize; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/filter_parameters.rb#54
  def filtered_env; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/filter_parameters.rb#47
  def filtered_parameters; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/filter_parameters.rb#59
  def filtered_path; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/http/filter_parameters.rb#70
  def env_filter; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/filter_parameters.rb#83
  def filtered_query_string; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/filter_parameters.rb#64
  def parameter_filter; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/filter_parameters.rb#77
  def parameter_filter_for(filters); end
end

# source://actionpack/7.0.4/lib/action_dispatch/http/filter_parameters.rb#35
ActionDispatch::Http::FilterParameters::ENV_MATCH = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.4/lib/action_dispatch/http/filter_parameters.rb#81
ActionDispatch::Http::FilterParameters::KV_RE = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/http/filter_parameters.rb#37
ActionDispatch::Http::FilterParameters::NULL_ENV_FILTER = T.let(T.unsafe(nil), ActiveSupport::ParameterFilter)

# source://actionpack/7.0.4/lib/action_dispatch/http/filter_parameters.rb#36
ActionDispatch::Http::FilterParameters::NULL_PARAM_FILTER = T.let(T.unsafe(nil), ActiveSupport::ParameterFilter)

# source://actionpack/7.0.4/lib/action_dispatch/http/filter_parameters.rb#82
ActionDispatch::Http::FilterParameters::PAIR_RE = T.let(T.unsafe(nil), Regexp)

module ActionDispatch::Http::FilterRedirect
  # source://actionpack/7.0.4/lib/action_dispatch/http/filter_redirect.rb#8
  def filtered_location; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/http/filter_redirect.rb#25
  def location_filter_match?; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/filter_redirect.rb#17
  def location_filters; end
end

# source://actionpack/7.0.4/lib/action_dispatch/http/filter_redirect.rb#6
ActionDispatch::Http::FilterRedirect::FILTERED = T.let(T.unsafe(nil), String)

module ActionDispatch::Http::MimeNegotiation
  extend ::ActiveSupport::Concern

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#54
  def accepts; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#23
  def content_mime_type; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#36
  def content_type; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#75
  def format(view_path = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#127
  def format=(extension); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#79
  def formats; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#146
  def formats=(extensions); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#49
  def has_content_type?; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#154
  def negotiate_mime(order); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#166
  def should_apply_vary_header?; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#112
  def variant; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#102
  def variant=(variant); end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#190
  def format_from_path_extension; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#175
  def params_readable?; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#186
  def use_accept_header; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#181
  def valid_accept_header; end
end

# source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#173
ActionDispatch::Http::MimeNegotiation::BROWSER_LIKE_ACCEPTS = T.let(T.unsafe(nil), Regexp)

class ActionDispatch::Http::MimeNegotiation::InvalidType < ::Mime::Type::InvalidMimeType; end

# source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#12
ActionDispatch::Http::MimeNegotiation::RESCUABLE_MIME_FORMAT_ERRORS = T.let(T.unsafe(nil), Array)

module ActionDispatch::Http::Parameters
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionDispatch::Http::Parameters::ClassMethods

  # source://actionpack/7.0.4/lib/action_dispatch/http/parameters.rb#50
  def parameters; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/parameters.rb#50
  def params; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/parameters.rb#82
  def path_parameters; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/parameters.rb#65
  def path_parameters=(parameters); end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/http/parameters.rb#100
  def log_parse_error_once; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/parameters.rb#112
  def params_parsers; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/parameters.rb#87
  def parse_formatted_parameters(parsers); end
end

module ActionDispatch::Http::Parameters::ClassMethods
  # source://actionpack/7.0.4/lib/action_dispatch/http/parameters.rb#44
  def parameter_parsers=(parsers); end
end

# source://actionpack/7.0.4/lib/action_dispatch/http/parameters.rb#10
ActionDispatch::Http::Parameters::DEFAULT_PARSERS = T.let(T.unsafe(nil), Hash)

# source://actionpack/7.0.4/lib/action_dispatch/http/parameters.rb#8
ActionDispatch::Http::Parameters::PARAMETERS_KEY = T.let(T.unsafe(nil), String)

class ActionDispatch::Http::Parameters::ParseError < ::StandardError
  # source://actionpack/7.0.4/lib/action_dispatch/http/parameters.rb#20
  def initialize(message = T.unsafe(nil)); end
end

module ActionDispatch::Http::URL
  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#179
  def initialize; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#321
  def domain(tld_length = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#226
  def host; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#242
  def host_with_port; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#292
  def optional_port; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#253
  def port; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#304
  def port_string; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#200
  def protocol; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#214
  def raw_host_with_port; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#12
  def secure_protocol; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#12
  def secure_protocol=(val); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#315
  def server_port; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#265
  def standard_port; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#280
  def standard_port?; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#337
  def subdomain(tld_length = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#329
  def subdomains(tld_length = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#13
  def tld_length; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#13
  def tld_length=(val); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#189
  def url; end

  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#22
    def extract_domain(host, tld_length); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#46
    def extract_subdomain(host, tld_length); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#32
    def extract_subdomains(host, tld_length); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#58
    def full_url_for(options); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#70
    def path_for(options); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#12
    def secure_protocol; end

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#12
    def secure_protocol=(val); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#13
    def tld_length; end

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#13
    def tld_length=(val); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#50
    def url_for(options); end

    private

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#90
    def add_anchor(path, anchor); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#83
    def add_params(path, params); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#105
    def build_host_url(host, port, protocol, options, path); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#96
    def extract_domain_from(host, tld_length); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#100
    def extract_subdomains_from(host, tld_length); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#129
    def named_host?(host); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#146
    def normalize_host(_host, options); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#166
    def normalize_port(port, protocol); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#133
    def normalize_protocol(protocol); end
  end
end

# source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#9
ActionDispatch::Http::URL::HOST_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#8
ActionDispatch::Http::URL::IP_HOST_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://actionpack/7.0.4/lib/action_dispatch/http/url.rb#10
ActionDispatch::Http::URL::PROTOCOL_REGEXP = T.let(T.unsafe(nil), Regexp)

class ActionDispatch::MiddlewareStack
  include ::Enumerable

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#70
  def initialize(*args); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#87
  def [](i); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#160
  def build(app = T.unsafe(nil), &block); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#125
  def delete(target); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#133
  def delete!(target); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#75
  def each(&block); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#100
  def insert(index, klass, *args, **_arg3, &block); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#108
  def insert_after(index, *args, **_arg2, &block); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#100
  def insert_before(index, klass, *args, **_arg3, &block); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#83
  def last; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#68
  def middlewares; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#68
  def middlewares=(_arg0); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#137
  def move(target, source); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#147
  def move_after(target, source); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#137
  def move_before(target, source); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#79
  def size; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#114
  def swap(target, *args, **_arg2, &block); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#91
  def unshift(klass, *args, **_arg2, &block); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#155
  def use(klass, *args, **_arg2, &block); end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#172
  def assert_index(index, where); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#178
  def build_middleware(klass, args, block); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#182
  def index_of(klass); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#96
  def initialize_copy(other); end
end

class ActionDispatch::MiddlewareStack::InstrumentationProxy
  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#51
  def initialize(middleware, class_name); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#59
  def call(env); end
end

# source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#49
ActionDispatch::MiddlewareStack::InstrumentationProxy::EVENT_NAME = T.let(T.unsafe(nil), String)

class ActionDispatch::MiddlewareStack::Middleware
  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#11
  def initialize(klass, args, block); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#19
  def ==(middleware); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#9
  def args; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#9
  def block; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#36
  def build(app); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#40
  def build_instrumented(app); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#28
  def inspect; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#9
  def klass; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/stack.rb#17
  def name; end
end

module ActionDispatch::PermissionsPolicy::Request
  # source://actionpack/7.0.4/lib/action_dispatch/http/permissions_policy.rb#73
  def permissions_policy; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/permissions_policy.rb#77
  def permissions_policy=(policy); end
end

# source://actionpack/7.0.4/lib/action_dispatch/http/permissions_policy.rb#71
ActionDispatch::PermissionsPolicy::Request::POLICY = T.let(T.unsafe(nil), String)

class ActionDispatch::Request
  include ::ActionDispatch::Flash::RequestMethods
  include ::Rack::Request::Helpers
  include ::ActionDispatch::Http::Cache::Request
  include ::ActionDispatch::Http::MimeNegotiation
  include ::ActionDispatch::Http::Parameters
  include ::ActionDispatch::Http::FilterParameters
  include ::ActionDispatch::Http::URL
  include ::ActionDispatch::ContentSecurityPolicy::Request
  include ::ActionDispatch::PermissionsPolicy::Request
  include ::Rack::Request::Env
  include ::ActionDispatch::RequestCookieMethods
  extend ::ActionDispatch::Http::Parameters::ClassMethods

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#60
  def initialize(env); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#372
  def GET; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#388
  def POST; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def accept; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def accept_charset; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def accept_encoding; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def accept_language; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def auth_type; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#404
  def authorization; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#334
  def body; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#355
  def body_stream; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def cache_control; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def client_ip; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#70
  def commit_cookie_jar!; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/flash.rb#62
  def commit_flash; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#270
  def content_length; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#79
  def controller_class; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#85
  def controller_class_for(name); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#171
  def controller_instance; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#175
  def controller_instance=(controller); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#157
  def engine_script_name(_routes); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#161
  def engine_script_name=(name); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#351
  def form_data?; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def from; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#249
  def fullpath; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def gateway_interface; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#210
  def headers; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#179
  def http_auth_salt; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#18
  def ignore_accept_header; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#18
  def ignore_accept_header=(val); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#428
  def inspect; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#283
  def ip; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#106
  def key?(key); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#412
  def local?; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#421
  def logger; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#265
  def media_type; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#198
  def method; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#203
  def method_symbol; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def negotiate; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def origin; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#238
  def original_fullpath; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def original_script_name; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#257
  def original_url; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def path_translated; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def pragma; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#372
  def query_parameters; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#323
  def raw_post; end

  # source://rack/2.2.4/lib/rack/request.rb#157
  def raw_request_method; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def remote_addr; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def remote_host; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def remote_ident; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#289
  def remote_ip; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#293
  def remote_ip=(remote_ip); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def remote_user; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#306
  def request_id; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#310
  def request_id=(id); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#145
  def request_method; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#165
  def request_method=(request_method); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#191
  def request_method_symbol; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#388
  def request_parameters; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#416
  def request_parameters=(params); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/flash.rb#75
  def reset_session; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#19
  def return_only_media_type_on_content_type; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#19
  def return_only_media_type_on_content_type=(val); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#149
  def routes; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#153
  def routes=(routes); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#225
  def send_early_hints(links); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def server_name; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def server_protocol; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#317
  def server_software; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#363
  def session=(session); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#367
  def session_options=(options); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#183
  def show_exceptions?; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#306
  def uuid; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def version; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def x_csrf_token; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def x_forwarded_for; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def x_forwarded_host; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#50
  def x_request_id; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#277
  def xhr?; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#277
  def xml_http_request?; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#433
  def check_method(name); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#438
  def default_session; end

  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#56
    def empty; end

    # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#18
    def ignore_accept_header; end

    # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#18
    def ignore_accept_header=(val); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/parameters.rb#28
    def parameter_parsers; end

    # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#19
    def return_only_media_type_on_content_type; end

    # source://actionpack/7.0.4/lib/action_dispatch/http/mime_negotiation.rb#19
    def return_only_media_type_on_content_type=(val); end
  end
end

# source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#298
ActionDispatch::Request::ACTION_DISPATCH_REQUEST_ID = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#34
ActionDispatch::Request::ENV_METHODS = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#128
ActionDispatch::Request::HTTP_METHODS = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#130
ActionDispatch::Request::HTTP_METHOD_LOOKUP = T.let(T.unsafe(nil), Hash)

# source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#32
ActionDispatch::Request::LOCALHOST = T.let(T.unsafe(nil), Regexp)

class ActionDispatch::Request::PASS_NOT_FOUND
  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#74
    def action(_); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#76
    def action_encoding_template(action); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#75
    def call(_); end
  end
end

# source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#120
ActionDispatch::Request::RFC2518 = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#119
ActionDispatch::Request::RFC2616 = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#121
ActionDispatch::Request::RFC3253 = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#122
ActionDispatch::Request::RFC3648 = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#123
ActionDispatch::Request::RFC3744 = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#125
ActionDispatch::Request::RFC4791 = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#124
ActionDispatch::Request::RFC5323 = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.4/lib/action_dispatch/http/request.rb#126
ActionDispatch::Request::RFC5789 = T.let(T.unsafe(nil), Array)

class ActionDispatch::Request::Session
  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#74
  def initialize(by, req, enabled: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#110
  def [](key); end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#150
  def []=(key, value); end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#156
  def clear; end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#184
  def delete(key); end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#95
  def destroy; end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#123
  def dig(*keys); end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#240
  def each(&block); end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#230
  def empty?; end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#87
  def enabled?; end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#220
  def exists?; end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#203
  def fetch(key, default = T.unsafe(nil), &block); end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#130
  def has_key?(key); end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#83
  def id; end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#130
  def include?(key); end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#212
  def inspect; end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#130
  def key?(key); end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#138
  def keys; end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#226
  def loaded?; end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#235
  def merge!(other); end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#91
  def options; end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#162
  def to_h; end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#162
  def to_hash; end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#178
  def update(hash); end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#144
  def values; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#261
  def load!; end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#257
  def load_for_delete!; end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#245
  def load_for_read!; end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#249
  def load_for_write!; end

  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#17
    def create(store, req, default_options); end

    # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#41
    def delete(req); end

    # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#27
    def disabled(req); end

    # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#33
    def find(req); end

    # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#37
    def set(req, session); end
  end
end

class ActionDispatch::Request::Session::DisabledSessionError < ::StandardError; end

# source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#10
ActionDispatch::Request::Session::ENV_SESSION_KEY = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#11
ActionDispatch::Request::Session::ENV_SESSION_OPTIONS_KEY = T.let(T.unsafe(nil), String)

class ActionDispatch::Request::Session::Options
  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#54
  def initialize(by, default_options); end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#59
  def [](key); end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#69
  def []=(k, v); end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#63
  def id(req); end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#70
  def to_hash; end

  # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#71
  def values_at(*args); end

  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#50
    def find(req); end

    # source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#46
    def set(req, options); end
  end
end

# source://actionpack/7.0.4/lib/action_dispatch/request/session.rb#14
ActionDispatch::Request::Session::Unspecified = T.let(T.unsafe(nil), Object)

class ActionDispatch::Request::Utils
  # source://actionpack/7.0.4/lib/action_dispatch/request/utils.rb#8
  def perform_deep_munge; end

  # source://actionpack/7.0.4/lib/action_dispatch/request/utils.rb#8
  def perform_deep_munge=(val); end

  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/request/utils.rb#29
    def check_param_encoding(params); end

    # source://actionpack/7.0.4/lib/action_dispatch/request/utils.rb#10
    def each_param_value(params, &block); end

    # source://actionpack/7.0.4/lib/action_dispatch/request/utils.rb#21
    def normalize_encode_params(params); end

    # source://actionpack/7.0.4/lib/action_dispatch/request/utils.rb#8
    def perform_deep_munge; end

    # source://actionpack/7.0.4/lib/action_dispatch/request/utils.rb#8
    def perform_deep_munge=(val); end

    # source://actionpack/7.0.4/lib/action_dispatch/request/utils.rb#44
    def set_binary_encoding(request, params, controller, action); end
  end
end

class ActionDispatch::Request::Utils::CustomParamEncoder
  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/request/utils.rb#94
    def action_encoding_template(request, controller, action); end

    # source://actionpack/7.0.4/lib/action_dispatch/request/utils.rb#82
    def encode(request, params, controller, action); end
  end
end

class ActionDispatch::Request::Utils::NoNilParamEncoder < ::ActionDispatch::Request::Utils::ParamEncoder
  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/request/utils.rb#74
    def handle_array(params); end
  end
end

class ActionDispatch::Request::Utils::ParamEncoder
  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/request/utils.rb#67
    def handle_array(params); end

    # source://actionpack/7.0.4/lib/action_dispatch/request/utils.rb#50
    def normalize_encode_params(params); end
  end
end

module ActionDispatch::RequestCookieMethods
  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#48
  def authenticated_encrypted_cookie_salt; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#11
  def cookie_jar; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#28
  def cookie_jar=(jar); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#76
  def cookies_digest; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#80
  def cookies_rotations; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#72
  def cookies_same_site_protection; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#68
  def cookies_serializer; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#56
  def encrypted_cookie_cipher; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#40
  def encrypted_cookie_salt; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#44
  def encrypted_signed_cookie_salt; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#24
  def have_cookie_jar?; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#32
  def key_generator; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#64
  def secret_key_base; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#60
  def signed_cookie_digest; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#36
  def signed_cookie_salt; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#52
  def use_authenticated_cookie_encryption; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#84
  def use_cookies_with_metadata; end
end

class ActionDispatch::Response
  include ::Rack::Response::Helpers
  include ::ActionDispatch::Http::FilterRedirect
  include ::ActionDispatch::Http::Cache::Response
  include ::MonitorMixin

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#161
  def initialize(status = T.unsafe(nil), header = T.unsafe(nil), body = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#71
  def [](*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#71
  def []=(*_arg0, **_arg1, &_arg2); end

  # source://rack/2.2.4/lib/rack/response.rb#229
  def _cache_control; end

  # source://rack/2.2.4/lib/rack/response.rb#233
  def _cache_control=(v); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#370
  def abort; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#183
  def await_commit; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#189
  def await_sent; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#304
  def body; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#313
  def body=(body); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#357
  def body_parts; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#274
  def charset; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#263
  def charset=(charset); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#366
  def close; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#285
  def code; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#193
  def commit!; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#217
  def committed?; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#243
  def content_type; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#233
  def content_type=(content_type); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#394
  def cookies; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#85
  def default_charset; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#85
  def default_charset=(val); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#86
  def default_headers; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#86
  def default_headers=(val); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#181
  def delete_header(key); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#73
  def each(&block); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#179
  def get_header(key); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#178
  def has_header?(key); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#67
  def header; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#67
  def headers; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#248
  def media_type; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#297
  def message; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#385
  def prepare!; end

  # source://rack/2.2.4/lib/rack/response.rb#204
  def redirect_url; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#61
  def request; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#61
  def request=(_arg0); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#353
  def reset_body!; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#280
  def response_code; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#348
  def send_file(path); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#201
  def sending!; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#216
  def sending?; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#252
  def sending_file=(v); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#209
  def sent!; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#218
  def sent?; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#180
  def set_header(key, v); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#64
  def status; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#221
  def status=(status); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#297
  def status_message; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#159
  def stream; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#385
  def to_a; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#308
  def write(string); end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#466
  def assign_default_content_type_and_charset!; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#438
  def before_committed; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#446
  def before_sending; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#458
  def build_buffer(response, body); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#510
  def handle_no_content!; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#462
  def munge_body_object(body); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#418
  def parse_content_type(content_type); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#428
  def parsed_content_type_header; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#517
  def rack_response(status, header); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#432
  def set_content_type(content_type, charset); end

  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#149
    def create(status = T.unsafe(nil), header = T.unsafe(nil), body = T.unsafe(nil), default_headers: T.unsafe(nil)); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#85
    def default_charset; end

    # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#85
    def default_charset=(val); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#86
    def default_headers; end

    # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#86
    def default_headers=(val); end

    # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#154
    def merge_default_headers(original, default); end
  end
end

class ActionDispatch::Response::Buffer
  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#98
  def initialize(response, buf); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#131
  def abort; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#105
  def body; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#134
  def close; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#139
  def closed?; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#121
  def each(&block); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#113
  def write(string); end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#144
  def each_chunk(&block); end
end

# source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#80
ActionDispatch::Response::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#412
ActionDispatch::Response::CONTENT_TYPE_PARSER = T.let(T.unsafe(nil), Regexp)

class ActionDispatch::Response::ContentTypeHeader < ::Struct
  def charset; end
  def charset=(_); end
  def mime_type; end
  def mime_type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class ActionDispatch::Response::FileBody
  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#329
  def initialize(path); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#333
  def body; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#338
  def each; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#327
  def to_path; end
end

class ActionDispatch::Response::Header
  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#38
  def initialize(response, header); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#43
  def []=(k, v); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#51
  def merge(other); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#55
  def to_hash; end
end

# source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#82
ActionDispatch::Response::LOCATION = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#83
ActionDispatch::Response::NO_CONTENT_CODES = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#410
ActionDispatch::Response::NullContentTypeHeader = T.let(T.unsafe(nil), ActionDispatch::Response::ContentTypeHeader)

class ActionDispatch::Response::RackBody
  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#475
  def initialize(response); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#489
  def body; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#483
  def close; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#479
  def each(*args, &block); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#493
  def respond_to?(method, include_private = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#505
  def to_ary; end

  # source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#501
  def to_path; end
end

# source://actionpack/7.0.4/lib/action_dispatch/http/response.rb#81
ActionDispatch::Response::SET_COOKIE = T.let(T.unsafe(nil), String)

module ActionDispatch::Routing::PolymorphicRoutes
  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#153
  def edit_polymorphic_path(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#149
  def edit_polymorphic_url(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#153
  def new_polymorphic_path(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#149
  def new_polymorphic_url(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#124
  def polymorphic_path(record_or_hash_or_array, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#101
  def polymorphic_url(record_or_hash_or_array, options = T.unsafe(nil)); end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#168
  def polymorphic_mapping(record); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#164
  def polymorphic_path_for_action(action, record_or_hash, options); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#160
  def polymorphic_url_for_action(action, record_or_hash, options); end
end

class ActionDispatch::Routing::PolymorphicRoutes::HelperMethodBuilder
  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#239
  def initialize(key_strategy, prefix, suffix); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#253
  def handle_class(klass); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#257
  def handle_class_call(target, klass); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#284
  def handle_list(list); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#261
  def handle_model(record); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#275
  def handle_model_call(target, record); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#245
  def handle_string(record); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#249
  def handle_string_call(target, str); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#237
  def prefix; end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#237
  def suffix; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#338
  def get_method_for_class(klass); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#343
  def get_method_for_string(str); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#330
  def polymorphic_mapping(target, record); end

  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#187
    def build(action, type); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#179
    def get(action, type); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#185
    def path; end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#201
    def plural(prefix, suffix); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#205
    def polymorphic_method(recipient, record_or_hash_or_array, action, type, options); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#197
    def singular(prefix, suffix); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#184
    def url; end
  end
end

# source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#177
ActionDispatch::Routing::PolymorphicRoutes::HelperMethodBuilder::CACHE = T.let(T.unsafe(nil), Hash)

module ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#106
  def initialize(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#173
  def full_url_for(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#213
  def route_for(name, *args); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#169
  def url_for(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#114
  def url_options; end

  protected

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#218
  def optimize_routes_generation?; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#230
  def _routes_context; end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#223
  def _with_routes(routes); end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

module ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile

  # source://actionpack/7.0.4/lib/action_dispatch/testing/test_process.rb#30
  def assigns(key = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/test_process.rb#44
  def cookies; end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/test_process.rb#40
  def flash; end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/test_process.rb#48
  def redirect_to_url; end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/test_process.rb#36
  def session; end
end

module ActionDispatch::TestProcess::FixtureFile
  # source://actionpack/7.0.4/lib/action_dispatch/testing/test_process.rb#19
  def fixture_file_upload(path, mime_type = T.unsafe(nil), binary = T.unsafe(nil)); end
end

class ActionDispatch::TestRequest < ::ActionDispatch::Request
  # source://actionpack/7.0.4/lib/action_dispatch/testing/test_request.rb#66
  def accept=(mime_types); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/test_request.rb#46
  def action=(action_name); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/test_request.rb#30
  def host=(host); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/test_request.rb#50
  def if_modified_since=(last_modified); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/test_request.rb#54
  def if_none_match=(etag); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/test_request.rb#42
  def path=(path); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/test_request.rb#34
  def port=(number); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/test_request.rb#58
  def remote_addr=(addr); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/test_request.rb#26
  def request_method=(method); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/test_request.rb#38
  def request_uri=(uri); end

  # source://actionpack/7.0.4/lib/action_dispatch/testing/test_request.rb#62
  def user_agent=(user_agent); end

  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/testing/test_request.rb#15
    def create(env = T.unsafe(nil)); end

    private

    # source://actionpack/7.0.4/lib/action_dispatch/testing/test_request.rb#21
    def default_env; end
  end
end

# source://actionpack/7.0.4/lib/action_dispatch/testing/test_request.rb#8
ActionDispatch::TestRequest::DEFAULT_ENV = T.let(T.unsafe(nil), Hash)

# This class defines the interface for a renderer. Each class that
# subclasses +AbstractRenderer+ is used by the base +Renderer+ class to
# render a specific type of object.
#
# The base +Renderer+ class uses its +render+ method to delegate to the
# renderers. These currently consist of
#
#   PartialRenderer - Used for rendering partials
#   TemplateRenderer - Used for rendering other types of templates
#   StreamingTemplateRenderer - Used for streaming
#
# Whenever the +render+ method is called on the base +Renderer+ class, a new
# renderer object of the correct type is created, and the +render+ method on
# that new object is called in turn. This abstracts the set up and rendering
# into a separate classes for partials and templates.
class ActionView::AbstractRenderer
  # @return [AbstractRenderer] a new instance of AbstractRenderer
  #
  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#24
  def initialize(lookup_context); end

  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#22
  def any_templates?(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#22
  def formats(*_arg0, **_arg1, &_arg2); end

  # @raise [NotImplementedError]
  #
  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#28
  def render; end

  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#22
  def template_exists?(*_arg0, **_arg1, &_arg2); end

  private

  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#182
  def build_rendered_collection(templates, spacer); end

  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#178
  def build_rendered_template(content, template); end

  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#159
  def extract_details(options); end

  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#171
  def prepend_formats(formats); end
end

# source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#157
ActionView::AbstractRenderer::NO_DETAILS = T.let(T.unsafe(nil), Hash)

module ActionView::AbstractRenderer::ObjectRendering
  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#37
  def initialize(lookup_context, options); end

  private

  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#43
  def local_variable(path); end

  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#92
  def merge_prefix_into_object_path(prefix, object_path); end

  # Obtains the path to where the object's partial is located. If the object
  # responds to +to_partial_path+, then +to_partial_path+ will be called and
  # will provide the path. If the object does not respond to +to_partial_path+,
  # then an +ArgumentError+ is raised.
  #
  # If +prefix_partial_path_with_controller_namespace+ is true, then this
  # method will prefix the partial paths with a namespace.
  #
  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#76
  def partial_path(object, view); end

  # @raise [ArgumentError]
  #
  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#61
  def raise_invalid_identifier(path); end

  # @raise [ArgumentError]
  #
  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#65
  def raise_invalid_option_as(as); end
end

# source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#54
ActionView::AbstractRenderer::ObjectRendering::IDENTIFIER_ERROR_MESSAGE = T.let(T.unsafe(nil), String)

# source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#57
ActionView::AbstractRenderer::ObjectRendering::OPTION_AS_ERROR_MESSAGE = T.let(T.unsafe(nil), String)

# source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#33
ActionView::AbstractRenderer::ObjectRendering::PREFIXED_PARTIAL_NAMES = T.let(T.unsafe(nil), Concurrent::Map)

class ActionView::AbstractRenderer::RenderedCollection
  # @return [RenderedCollection] a new instance of RenderedCollection
  #
  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#117
  def initialize(rendered_templates, spacer); end

  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#122
  def body; end

  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#126
  def format; end

  # Returns the value of attribute rendered_templates.
  #
  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#115
  def rendered_templates; end

  class << self
    # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#111
    def empty(format); end
  end
end

class ActionView::AbstractRenderer::RenderedCollection::EmptyCollection
  # @return [EmptyCollection] a new instance of EmptyCollection
  #
  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#133
  def initialize(format); end

  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#137
  def body; end

  # Returns the value of attribute format.
  #
  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#131
  def format; end
end

class ActionView::AbstractRenderer::RenderedTemplate
  # @return [RenderedTemplate] a new instance of RenderedTemplate
  #
  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#144
  def initialize(body, template); end

  # Returns the value of attribute body.
  #
  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#142
  def body; end

  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#149
  def format; end

  # Returns the value of attribute template.
  #
  # source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#142
  def template; end
end

# source://actionview/7.0.4/lib/action_view/renderer/abstract_renderer.rb#153
ActionView::AbstractRenderer::RenderedTemplate::EMPTY_SPACER = T.let(T.unsafe(nil), T.untyped)

module ActionView::CollectionCaching
  extend ::ActiveSupport::Concern

  private

  # source://actionview/7.0.4/lib/action_view/renderer/partial_renderer/collection_caching.rb#20
  def cache_collection_render(instrumentation_payload, view, template, collection); end

  # @return [Boolean]
  #
  # source://actionview/7.0.4/lib/action_view/renderer/partial_renderer/collection_caching.rb#54
  def callable_cache_key?; end

  # source://actionview/7.0.4/lib/action_view/renderer/partial_renderer/collection_caching.rb#58
  def collection_by_cache_keys(view, template, collection); end

  # source://actionview/7.0.4/lib/action_view/renderer/partial_renderer/collection_caching.rb#70
  def expanded_cache_key(key, view, template, digest_path); end

  # `order_by` is an enumerable object containing keys of the cache,
  # all keys are  passed in whether found already or not.
  #
  # `cached_partials` is a hash. If the value exists
  # it represents the rendered partial from the cache
  # otherwise `Hash#fetch` will take the value of its block.
  #
  # This method expects a block that will return the rendered
  # partial. An example is to render all results
  # for each element that was not found in the cache and store it as an array.
  # Order it so that the first empty cache element in `cached_partials`
  # corresponds to the first element in `rendered_partials`.
  #
  # If the partial is not already cached it will also be
  # written back to the underlying cache store.
  #
  # source://actionview/7.0.4/lib/action_view/renderer/partial_renderer/collection_caching.rb#90
  def fetch_or_cache_partial(cached_partials, template, order_by:); end

  # @return [Boolean]
  #
  # source://actionview/7.0.4/lib/action_view/renderer/partial_renderer/collection_caching.rb#16
  def will_cache?(options, view); end
end

class ActionView::CollectionRenderer < ::ActionView::PartialRenderer
  include ::ActionView::AbstractRenderer::ObjectRendering

  # source://actionview/7.0.4/lib/action_view/renderer/collection_renderer.rb#122
  def render_collection_derive_partial(collection, context, block); end

  # source://actionview/7.0.4/lib/action_view/renderer/collection_renderer.rb#104
  def render_collection_with_partial(collection, partial, context, block); end

  private

  # source://actionview/7.0.4/lib/action_view/renderer/collection_renderer.rb#174
  def collection_with_template(view, template, layout, collection); end

  # source://actionview/7.0.4/lib/action_view/renderer/collection_renderer.rb#145
  def render_collection(collection, view, path, template, layout, block); end

  # source://actionview/7.0.4/lib/action_view/renderer/collection_renderer.rb#140
  def retrieve_variable(path); end
end

class ActionView::CollectionRenderer::CollectionIterator
  include ::Enumerable

  # @return [CollectionIterator] a new instance of CollectionIterator
  #
  # source://actionview/7.0.4/lib/action_view/renderer/collection_renderer.rb#39
  def initialize(collection); end

  # source://actionview/7.0.4/lib/action_view/renderer/collection_renderer.rb#43
  def each(&blk); end

  # source://actionview/7.0.4/lib/action_view/renderer/collection_renderer.rb#51
  def length; end

  # source://actionview/7.0.4/lib/action_view/renderer/collection_renderer.rb#47
  def size; end
end

class ActionView::CollectionRenderer::MixedCollectionIterator < ::ActionView::CollectionRenderer::CollectionIterator
  # @return [MixedCollectionIterator] a new instance of MixedCollectionIterator
  #
  # source://actionview/7.0.4/lib/action_view/renderer/collection_renderer.rb#93
  def initialize(collection, paths); end

  # source://actionview/7.0.4/lib/action_view/renderer/collection_renderer.rb#98
  def each_with_info; end
end

class ActionView::CollectionRenderer::PreloadCollectionIterator < ::ActionView::CollectionRenderer::SameCollectionIterator
  # @return [PreloadCollectionIterator] a new instance of PreloadCollectionIterator
  #
  # source://actionview/7.0.4/lib/action_view/renderer/collection_renderer.rb#75
  def initialize(collection, path, variables, relation); end

  # source://actionview/7.0.4/lib/action_view/renderer/collection_renderer.rb#85
  def each_with_info; end

  # source://actionview/7.0.4/lib/action_view/renderer/collection_renderer.rb#81
  def from_collection(collection); end
end

class ActionView::CollectionRenderer::SameCollectionIterator < ::ActionView::CollectionRenderer::CollectionIterator
  # @return [SameCollectionIterator] a new instance of SameCollectionIterator
  #
  # source://actionview/7.0.4/lib/action_view/renderer/collection_renderer.rb#57
  def initialize(collection, path, variables); end

  # source://actionview/7.0.4/lib/action_view/renderer/collection_renderer.rb#67
  def each_with_info; end

  # source://actionview/7.0.4/lib/action_view/renderer/collection_renderer.rb#63
  def from_collection(collection); end
end

# Layouts reverse the common pattern of including shared headers and footers in many templates to isolate changes in
# repeated setups. The inclusion pattern has pages that look like this:
#
#   <%= render "shared/header" %>
#   Hello World
#   <%= render "shared/footer" %>
#
# This approach is a decent way of keeping common structures isolated from the changing content, but it's verbose
# and if you ever want to change the structure of these two includes, you'll have to change all the templates.
#
# With layouts, you can flip it around and have the common structure know where to insert changing content. This means
# that the header and footer are only mentioned in one place, like this:
#
#   // The header part of this layout
#   <%= yield %>
#   // The footer part of this layout
#
# And then you have content pages that look like this:
#
#    hello world
#
# At rendering time, the content page is computed and then inserted in the layout, like this:
#
#   // The header part of this layout
#   hello world
#   // The footer part of this layout
#
# == Accessing shared variables
#
# Layouts have access to variables specified in the content pages and vice versa. This allows you to have layouts with
# references that won't materialize before rendering time:
#
#   <h1><%= @page_title %></h1>
#   <%= yield %>
#
# ...and content pages that fulfill these references _at_ rendering time:
#
#    <% @page_title = "Welcome" %>
#    Off-world colonies offers you a chance to start a new life
#
# The result after rendering is:
#
#   <h1>Welcome</h1>
#   Off-world colonies offers you a chance to start a new life
#
# == Layout assignment
#
# You can either specify a layout declaratively (using the #layout class method) or give
# it the same name as your controller, and place it in <tt>app/views/layouts</tt>.
# If a subclass does not have a layout specified, it inherits its layout using normal Ruby inheritance.
#
# For instance, if you have PostsController and a template named <tt>app/views/layouts/posts.html.erb</tt>,
# that template will be used for all actions in PostsController and controllers inheriting
# from PostsController.
#
# If you use a module, for instance Weblog::PostsController, you will need a template named
# <tt>app/views/layouts/weblog/posts.html.erb</tt>.
#
# Since all your controllers inherit from ApplicationController, they will use
# <tt>app/views/layouts/application.html.erb</tt> if no other layout is specified
# or provided.
#
# == Inheritance Examples
#
#   class BankController < ActionController::Base
#     # bank.html.erb exists
#
#   class ExchangeController < BankController
#     # exchange.html.erb exists
#
#   class CurrencyController < BankController
#
#   class InformationController < BankController
#     layout "information"
#
#   class TellerController < InformationController
#     # teller.html.erb exists
#
#   class EmployeeController < InformationController
#     # employee.html.erb exists
#     layout nil
#
#   class VaultController < BankController
#     layout :access_level_layout
#
#   class TillController < BankController
#     layout false
#
# In these examples, we have three implicit lookup scenarios:
# * The +BankController+ uses the "bank" layout.
# * The +ExchangeController+ uses the "exchange" layout.
# * The +CurrencyController+ inherits the layout from BankController.
#
# However, when a layout is explicitly set, the explicitly set layout wins:
# * The +InformationController+ uses the "information" layout, explicitly set.
# * The +TellerController+ also uses the "information" layout, because the parent explicitly set it.
# * The +EmployeeController+ uses the "employee" layout, because it set the layout to +nil+, resetting the parent configuration.
# * The +VaultController+ chooses a layout dynamically by calling the <tt>access_level_layout</tt> method.
# * The +TillController+ does not use a layout at all.
#
# == Types of layouts
#
# Layouts are basically just regular templates, but the name of this template needs not be specified statically. Sometimes
# you want to alternate layouts depending on runtime information, such as whether someone is logged in or not. This can
# be done either by specifying a method reference as a symbol or using an inline method (as a proc).
#
# The method reference is the preferred approach to variable layouts and is used like this:
#
#   class WeblogController < ActionController::Base
#     layout :writers_and_readers
#
#     def index
#       # fetching posts
#     end
#
#     private
#       def writers_and_readers
#         logged_in? ? "writer_layout" : "reader_layout"
#       end
#   end
#
# Now when a new request for the index action is processed, the layout will vary depending on whether the person accessing
# is logged in or not.
#
# If you want to use an inline method, such as a proc, do something like this:
#
#   class WeblogController < ActionController::Base
#     layout proc { |controller| controller.logged_in? ? "writer_layout" : "reader_layout" }
#   end
#
# If an argument isn't given to the proc, it's evaluated in the context of
# the current controller anyway.
#
#   class WeblogController < ActionController::Base
#     layout proc { logged_in? ? "writer_layout" : "reader_layout" }
#   end
#
# Of course, the most common way of specifying a layout is still just as a plain template name:
#
#   class WeblogController < ActionController::Base
#     layout "weblog_standard"
#   end
#
# The template will be looked always in <tt>app/views/layouts/</tt> folder. But you can point
# <tt>layouts</tt> folder direct also. <tt>layout "layouts/demo"</tt> is the same as <tt>layout "demo"</tt>.
#
# Setting the layout to +nil+ forces it to be looked up in the filesystem and fallbacks to the parent behavior if none exists.
# Setting it to +nil+ is useful to re-enable template lookup overriding a previous configuration set in the parent:
#
#     class ApplicationController < ActionController::Base
#       layout "application"
#     end
#
#     class PostsController < ApplicationController
#       # Will use "application" layout
#     end
#
#     class CommentsController < ApplicationController
#       # Will search for "comments" layout and fallback "application" layout
#       layout nil
#     end
#
# == Conditional layouts
#
# If you have a layout that by default is applied to all the actions of a controller, you still have the option of rendering
# a given action or set of actions without a layout, or restricting a layout to only a single action or a set of actions. The
# <tt>:only</tt> and <tt>:except</tt> options can be passed to the layout call. For example:
#
#   class WeblogController < ActionController::Base
#     layout "weblog_standard", except: :rss
#
#     # ...
#
#   end
#
# This will assign "weblog_standard" as the WeblogController's layout for all actions except for the +rss+ action, which will
# be rendered directly, without wrapping a layout around the rendered view.
#
# Both the <tt>:only</tt> and <tt>:except</tt> condition can accept an arbitrary number of method references, so
# <tt>except: [ :rss, :text_only ]</tt> is valid, as is <tt>except: :rss</tt>.
#
# == Using a different layout in the action render call
#
# If most of your actions use the same layout, it makes perfect sense to define a controller-wide layout as described above.
# Sometimes you'll have exceptions where one action wants to use a different layout than the rest of the controller.
# You can do this by passing a <tt>:layout</tt> option to the <tt>render</tt> call. For example:
#
#   class WeblogController < ActionController::Base
#     layout "weblog_standard"
#
#     def help
#       render action: "help", layout: "help"
#     end
#   end
#
# This will override the controller-wide "weblog_standard" layout, and will render the help action with the "help" layout instead.
module ActionView::Layouts
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionView::ViewPaths
  include ::ActionView::Rendering

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods
  mixes_in_class_methods ::ActionView::Rendering::ClassMethods
  mixes_in_class_methods ::ActionView::Layouts::ClassMethods

  # source://actionview/7.0.4/lib/action_view/layouts.rb#361
  def initialize(*_arg0); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#215
  def _layout_conditions(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#350
  def _normalize_options(options); end

  def action_has_layout=(_arg0); end

  # Controls whether an action should be rendered using a layout.
  # If you want to disable any <tt>layout</tt> settings for the
  # current action so that it is rendered without a layout then
  # either override this method in your controller to return false
  # for that action or set the <tt>action_has_layout</tt> attribute
  # to false before rendering.
  #
  # @return [Boolean]
  #
  # source://actionview/7.0.4/lib/action_view/layouts.rb#372
  def action_has_layout?; end

  private

  # @return [Boolean]
  #
  # source://actionview/7.0.4/lib/action_view/layouts.rb#377
  def _conditional_layout?; end

  # Returns the default layout for this controller.
  # Optionally raises an exception if the layout could not be found.
  #
  # ==== Parameters
  # * <tt>formats</tt> - The formats accepted to this layout
  # * <tt>require_layout</tt> - If set to +true+ and layout is not found,
  #   an +ArgumentError+ exception is raised (defaults to +false+)
  #
  # ==== Returns
  # * <tt>template</tt> - The template object for the default layout (or +nil+)
  #
  # source://actionview/7.0.4/lib/action_view/layouts.rb#415
  def _default_layout(lookup_context, formats, require_layout = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://actionview/7.0.4/lib/action_view/layouts.rb#430
  def _include_layout?(options); end

  # This will be overwritten by _write_layout_method
  #
  # source://actionview/7.0.4/lib/action_view/layouts.rb#382
  def _layout(*_arg0); end

  # Determine the layout for a given name, taking into account the name type.
  #
  # ==== Parameters
  # * <tt>name</tt> - The name of the template
  #
  # source://actionview/7.0.4/lib/action_view/layouts.rb#388
  def _layout_for_option(name); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#401
  def _normalize_layout(value); end

  module GeneratedClassMethods
    def _layout; end
    def _layout=(value); end
    def _layout?; end
    def _layout_conditions; end
    def _layout_conditions=(value); end
    def _layout_conditions?; end
  end

  module GeneratedInstanceMethods; end
end

module ActionView::Layouts::ClassMethods
  # Creates a _layout method to be called by _default_layout .
  #
  # If a layout is not explicitly mentioned then look for a layout with the controller's name.
  # if nothing is found then try same procedure to find super class's layout.
  #
  # source://actionview/7.0.4/lib/action_view/layouts.rb#283
  def _write_layout_method; end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#218
  def inherited(klass); end

  # Specify the layout to use for this class.
  #
  # If the specified layout is a:
  # String:: the String is the template name
  # Symbol:: call the method specified by the symbol
  # Proc::   call the passed Proc
  # false::  There is no layout
  # true::   raise an ArgumentError
  # nil::    Force default layout behavior with inheritance
  #
  # Return value of +Proc+ and +Symbol+ arguments should be +String+, +false+, +true+, or +nil+
  # with the same meaning as described above.
  #
  # ==== Parameters
  #
  # * <tt>layout</tt> - The layout to use.
  #
  # ==== Options (conditions)
  #
  # * +:only+   - A list of actions to apply this layout to.
  # * +:except+ - Apply this layout to all actions but this one.
  #
  # source://actionview/7.0.4/lib/action_view/layouts.rb#269
  def layout(layout, conditions = T.unsafe(nil)); end

  private

  # If no layout is supplied, look for a template named the return
  # value of this method.
  #
  # ==== Returns
  # * <tt>String</tt> - A template name
  #
  # source://actionview/7.0.4/lib/action_view/layouts.rb#345
  def _implied_layout_name; end
end

# This module is mixed in if layout conditions are provided. This means
# that if no layout conditions are used, this method is not used
module ActionView::Layouts::ClassMethods::LayoutConditions
  private

  # Determines whether the current action has a layout definition by
  # checking the action name against the :only and :except conditions
  # set by the <tt>layout</tt> method.
  #
  # ==== Returns
  # * <tt>Boolean</tt> - True if the action has a layout definition, false otherwise.
  #
  # @return [Boolean]
  #
  # source://actionview/7.0.4/lib/action_view/layouts.rb#233
  def _conditional_layout?; end
end

# = Action View Partials
#
# There's also a convenience method for rendering sub templates within the current controller that depends on a
# single object (we call this kind of sub templates for partials). It relies on the fact that partials should
# follow the naming convention of being prefixed with an underscore -- as to separate them from regular
# templates that could be rendered on their own.
#
# In a template for Advertiser#account:
#
#  <%= render partial: "account" %>
#
# This would render "advertiser/_account.html.erb".
#
# In another template for Advertiser#buy, we could have:
#
#   <%= render partial: "account", locals: { account: @buyer } %>
#
#   <% @advertisements.each do |ad| %>
#     <%= render partial: "ad", locals: { ad: ad } %>
#   <% end %>
#
# This would first render <tt>advertiser/_account.html.erb</tt> with <tt>@buyer</tt> passed in as the local variable +account+, then
# render <tt>advertiser/_ad.html.erb</tt> and pass the local variable +ad+ to the template for display.
#
# == The +:as+ and +:object+ options
#
# By default ActionView::PartialRenderer doesn't have any local variables.
# The <tt>:object</tt> option can be used to pass an object to the partial. For instance:
#
#   <%= render partial: "account", object: @buyer %>
#
# would provide the <tt>@buyer</tt> object to the partial, available under the local variable +account+ and is
# equivalent to:
#
#   <%= render partial: "account", locals: { account: @buyer } %>
#
# With the <tt>:as</tt> option we can specify a different name for said local variable. For example, if we
# wanted it to be +user+ instead of +account+ we'd do:
#
#   <%= render partial: "account", object: @buyer, as: 'user' %>
#
# This is equivalent to
#
#   <%= render partial: "account", locals: { user: @buyer } %>
#
# == \Rendering a collection of partials
#
# The example of partial use describes a familiar pattern where a template needs to iterate over an array and
# render a sub template for each of the elements. This pattern has been implemented as a single method that
# accepts an array and renders a partial by the same name as the elements contained within. So the three-lined
# example in "Using partials" can be rewritten with a single line:
#
#   <%= render partial: "ad", collection: @advertisements %>
#
# This will render <tt>advertiser/_ad.html.erb</tt> and pass the local variable +ad+ to the template for display. An
# iteration object will automatically be made available to the template with a name of the form
# +partial_name_iteration+. The iteration object has knowledge about which index the current object has in
# the collection and the total size of the collection. The iteration object also has two convenience methods,
# +first?+ and +last?+. In the case of the example above, the template would be fed +ad_iteration+.
# For backwards compatibility the +partial_name_counter+ is still present and is mapped to the iteration's
# +index+ method.
#
# The <tt>:as</tt> option may be used when rendering partials.
#
# You can specify a partial to be rendered between elements via the <tt>:spacer_template</tt> option.
# The following example will render <tt>advertiser/_ad_divider.html.erb</tt> between each ad partial:
#
#   <%= render partial: "ad", collection: @advertisements, spacer_template: "ad_divider" %>
#
# If the given <tt>:collection</tt> is +nil+ or empty, <tt>render</tt> will return +nil+. This will allow you
# to specify a text which will be displayed instead by using this form:
#
#   <%= render(partial: "ad", collection: @advertisements) || "There's no ad to be displayed" %>
#
# == \Rendering shared partials
#
# Two controllers can share a set of partials and render them like this:
#
#   <%= render partial: "advertisement/ad", locals: { ad: @advertisement } %>
#
# This will render the partial <tt>advertisement/_ad.html.erb</tt> regardless of which controller this is being called from.
#
# == \Rendering objects that respond to +to_partial_path+
#
# Instead of explicitly naming the location of a partial, you can also let PartialRenderer do the work
# and pick the proper path by checking +to_partial_path+ method.
#
#  # @account.to_partial_path returns 'accounts/account', so it can be used to replace:
#  # <%= render partial: "accounts/account", locals: { account: @account} %>
#  <%= render partial: @account %>
#
#  # @posts is an array of Post instances, so every post record returns 'posts/post' on +to_partial_path+,
#  # that's why we can replace:
#  # <%= render partial: "posts/post", collection: @posts %>
#  <%= render partial: @posts %>
#
# == \Rendering the default case
#
# If you're not going to be using any of the options like collections or layouts, you can also use the short-hand
# defaults of render to render partials. Examples:
#
#  # Instead of <%= render partial: "account" %>
#  <%= render "account" %>
#
#  # Instead of <%= render partial: "account", locals: { account: @buyer } %>
#  <%= render "account", account: @buyer %>
#
#  # @account.to_partial_path returns 'accounts/account', so it can be used to replace:
#  # <%= render partial: "accounts/account", locals: { account: @account} %>
#  <%= render @account %>
#
#  # @posts is an array of Post instances, so every post record returns 'posts/post' on +to_partial_path+,
#  # that's why we can replace:
#  # <%= render partial: "posts/post", collection: @posts %>
#  <%= render @posts %>
#
# == \Rendering partials with layouts
#
# Partials can have their own layouts applied to them. These layouts are different than the ones that are
# specified globally for the entire action, but they work in a similar fashion. Imagine a list with two types
# of users:
#
#   <%# app/views/users/index.html.erb %>
#   Here's the administrator:
#   <%= render partial: "user", layout: "administrator", locals: { user: administrator } %>
#
#   Here's the editor:
#   <%= render partial: "user", layout: "editor", locals: { user: editor } %>
#
#   <%# app/views/users/_user.html.erb %>
#   Name: <%= user.name %>
#
#   <%# app/views/users/_administrator.html.erb %>
#   <div id="administrator">
#     Budget: $<%= user.budget %>
#     <%= yield %>
#   </div>
#
#   <%# app/views/users/_editor.html.erb %>
#   <div id="editor">
#     Deadline: <%= user.deadline %>
#     <%= yield %>
#   </div>
#
# ...this will return:
#
#   Here's the administrator:
#   <div id="administrator">
#     Budget: $<%= user.budget %>
#     Name: <%= user.name %>
#   </div>
#
#   Here's the editor:
#   <div id="editor">
#     Deadline: <%= user.deadline %>
#     Name: <%= user.name %>
#   </div>
#
# If a collection is given, the layout will be rendered once for each item in
# the collection. For example, these two snippets have the same output:
#
#   <%# app/views/users/_user.html.erb %>
#   Name: <%= user.name %>
#
#   <%# app/views/users/index.html.erb %>
#   <%# This does not use layouts %>
#   <ul>
#     <% users.each do |user| -%>
#       <li>
#         <%= render partial: "user", locals: { user: user } %>
#       </li>
#     <% end -%>
#   </ul>
#
#   <%# app/views/users/_li_layout.html.erb %>
#   <li>
#     <%= yield %>
#   </li>
#
#   <%# app/views/users/index.html.erb %>
#   <ul>
#     <%= render partial: "user", layout: "li_layout", collection: users %>
#   </ul>
#
# Given two users whose names are Alice and Bob, these snippets return:
#
#   <ul>
#     <li>
#       Name: Alice
#     </li>
#     <li>
#       Name: Bob
#     </li>
#   </ul>
#
# The current object being rendered, as well as the object_counter, will be
# available as local variables inside the layout template under the same names
# as available in the partial.
#
# You can also apply a layout to a block within any template:
#
#   <%# app/views/users/_chief.html.erb %>
#   <%= render(layout: "administrator", locals: { user: chief }) do %>
#     Title: <%= chief.title %>
#   <% end %>
#
# ...this will return:
#
#   <div id="administrator">
#     Budget: $<%= user.budget %>
#     Title: <%= chief.name %>
#   </div>
#
# As you can see, the <tt>:locals</tt> hash is shared between both the partial and its layout.
class ActionView::PartialRenderer < ::ActionView::AbstractRenderer
  include ::ActionView::CollectionCaching

  # @return [PartialRenderer] a new instance of PartialRenderer
  #
  # source://actionview/7.0.4/lib/action_view/renderer/partial_renderer.rb#223
  def initialize(lookup_context, options); end

  # source://actionview/7.0.4/lib/action_view/renderer/partial_renderer/collection_caching.rb#12
  def collection_cache; end

  # source://actionview/7.0.4/lib/action_view/renderer/partial_renderer/collection_caching.rb#12
  def collection_cache=(val); end

  # source://actionview/7.0.4/lib/action_view/renderer/partial_renderer.rb#230
  def render(partial, context, block); end

  private

  # source://actionview/7.0.4/lib/action_view/renderer/partial_renderer.rb#261
  def find_template(path, locals); end

  # source://actionview/7.0.4/lib/action_view/renderer/partial_renderer.rb#245
  def render_partial_template(view, locals, template, layout, block); end

  # source://actionview/7.0.4/lib/action_view/renderer/partial_renderer.rb#241
  def template_keys(_); end

  class << self
    # source://actionview/7.0.4/lib/action_view/renderer/partial_renderer/collection_caching.rb#12
    def collection_cache; end

    # source://actionview/7.0.4/lib/action_view/renderer/partial_renderer/collection_caching.rb#12
    def collection_cache=(val); end
  end
end

module ActionView::Rendering
  extend ::ActiveSupport::Concern
  include ::ActionView::ViewPaths

  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods
  mixes_in_class_methods ::ActionView::Rendering::ClassMethods

  # source://actionview/7.0.4/lib/action_view/rendering.rb#31
  def initialize; end

  # Override process to set up I18n proxy.
  #
  # source://actionview/7.0.4/lib/action_view/rendering.rb#37
  def process(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#101
  def render_to_body(options = T.unsafe(nil)); end

  # Returns the value of attribute rendered_format.
  #
  # source://actionview/7.0.4/lib/action_view/rendering.rb#29
  def rendered_format; end

  # An instance of a view class. The default view class is ActionView::Base.
  #
  # The view class must have the following methods:
  #
  # * <tt>View.new(lookup_context, assigns, controller)</tt> — Create a new
  #   ActionView instance for a controller and we can also pass the arguments.
  #
  # * <tt>View#render(option)</tt> — Returns String with the rendered template.
  #
  # Override this method in a module to change the default behavior.
  #
  # source://actionview/7.0.4/lib/action_view/rendering.rb#91
  def view_context; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#77
  def view_context_class; end

  # Returns an object that is able to render templates.
  #
  # source://actionview/7.0.4/lib/action_view/rendering.rb#96
  def view_renderer; end

  private

  # Normalize args by converting render "foo" to render :action => "foo" and
  # render "foo/bar" to render :template => "foo/bar".
  #
  # source://actionview/7.0.4/lib/action_view/rendering.rb#134
  def _normalize_args(action = T.unsafe(nil), options = T.unsafe(nil)); end

  # Normalize options.
  #
  # source://actionview/7.0.4/lib/action_view/rendering.rb#158
  def _normalize_options(options); end

  # Assign the rendered format to look up context.
  #
  # source://actionview/7.0.4/lib/action_view/rendering.rb#127
  def _process_format(format); end

  # Find and render a template based on the options given.
  #
  # source://actionview/7.0.4/lib/action_view/rendering.rb#108
  def _render_template(options); end
end

module ActionView::Rendering::ClassMethods
  # source://actionview/7.0.4/lib/action_view/rendering.rb#48
  def _helpers; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#45
  def _routes; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#51
  def build_view_context_class(klass, supports_path, routes, helpers); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#64
  def view_context_class; end
end

module ActionView::ViewPaths
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods

  # The prefixes used in render "foo" shortcuts.
  #
  # source://actionview/7.0.4/lib/action_view/view_paths.rb#90
  def _prefixes; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def any_templates?(*_arg0, **_arg1, &_arg2); end

  # Append a path to the list of view paths for the current LookupContext.
  #
  # ==== Parameters
  # * <tt>path</tt> - If a String is provided, it gets converted into
  #   the default view path. You may also provide a custom view path
  #   (see ActionView::PathSet for more information)
  #
  # source://actionview/7.0.4/lib/action_view/view_paths.rb#112
  def append_view_path(path); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#102
  def details_for_lookup; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def formats(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def formats=(arg); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def locale(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def locale=(arg); end

  # LookupContext is the object responsible for holding all
  # information required for looking up templates, i.e. view paths and
  # details. Check ActionView::LookupContext for more information.
  #
  # source://actionview/7.0.4/lib/action_view/view_paths.rb#97
  def lookup_context; end

  # Prepend a path to the list of view paths for the current LookupContext.
  #
  # ==== Parameters
  # * <tt>path</tt> - If a String is provided, it gets converted into
  #   the default view path. You may also provide a custom view path
  #   (see ActionView::PathSet for more information)
  #
  # source://actionview/7.0.4/lib/action_view/view_paths.rb#122
  def prepend_view_path(path); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def template_exists?(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def view_paths(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://actionview/7.0.4/lib/action_view/view_paths.rb#84
    def all_view_paths; end

    # source://actionview/7.0.4/lib/action_view/view_paths.rb#76
    def get_view_paths(klass); end

    # source://actionview/7.0.4/lib/action_view/view_paths.rb#80
    def set_view_paths(klass, paths); end
  end
end

module ActionView::ViewPaths::ClassMethods
  # source://actionview/7.0.4/lib/action_view/view_paths.rb#23
  def _prefixes; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#15
  def _view_paths; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#19
  def _view_paths=(paths); end

  # Append a path to the list of view paths for this controller.
  #
  # ==== Parameters
  # * <tt>path</tt> - If a String is provided, it gets converted into
  #   the default view path. You may also provide a custom view path
  #   (see ActionView::PathSet for more information)
  #
  # source://actionview/7.0.4/lib/action_view/view_paths.rb#37
  def append_view_path(path); end

  # Prepend a path to the list of view paths for this controller.
  #
  # ==== Parameters
  # * <tt>path</tt> - If a String is provided, it gets converted into
  #   the default view path. You may also provide a custom view path
  #   (see ActionView::PathSet for more information)
  #
  # source://actionview/7.0.4/lib/action_view/view_paths.rb#47
  def prepend_view_path(path); end

  # A list of all of the default view paths for this controller.
  #
  # source://actionview/7.0.4/lib/action_view/view_paths.rb#52
  def view_paths; end

  # Set the view paths.
  #
  # ==== Parameters
  # * <tt>paths</tt> - If a PathSet is provided, use that;
  #   otherwise, process the parameter into a PathSet.
  #
  # source://actionview/7.0.4/lib/action_view/view_paths.rb#61
  def view_paths=(paths); end

  private

  # Override this method in your controller if you want to change paths prefixes for finding views.
  # Prefixes defined here will still be added to parents' <tt>._prefixes</tt>.
  #
  # source://actionview/7.0.4/lib/action_view/view_paths.rb#68
  def local_prefixes; end
end

module ActiveSupport::Autoload
  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#37
  def autoload(const_name, path = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#57
  def autoload_at(path); end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#50
  def autoload_under(path); end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#75
  def autoloads; end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#64
  def eager_autoload; end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#71
  def eager_load!; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#28
    def extended(base); end
  end
end

module ActiveSupport::Benchmarkable
  # source://activesupport/7.0.4/lib/active_support/benchmarkable.rb#37
  def benchmark(message = T.unsafe(nil), options = T.unsafe(nil), &block); end
end

module ActiveSupport::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#95
  def run_callbacks(kind); end

  private

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#147
  def halted_callback_hook(filter, name); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://activesupport/7.0.4/lib/active_support/callbacks.rb#71
ActiveSupport::Callbacks::CALLBACK_FILTER_TYPES = T.let(T.unsafe(nil), Array)

module ActiveSupport::Callbacks::CallTemplate
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#533
    def build(filter, callback); end
  end
end

class ActiveSupport::Callbacks::CallTemplate::InstanceExec0
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#435
  def initialize(block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#439
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#449
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#443
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::InstanceExec1
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#457
  def initialize(block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#461
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#471
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#465
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::InstanceExec2
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#479
  def initialize(block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#483
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#495
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#488
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::MethodCall
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#377
  def initialize(method); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#394
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#404
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#398
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::ObjectCall
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#412
  def initialize(target, method); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#417
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#427
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#421
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::ProcCall
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#504
  def initialize(target); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#508
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#518
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#512
  def make_lambda; end
end

class ActiveSupport::Callbacks::Callback
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#295
  def initialize(name, filter, kind, options, chain_config); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#330
  def apply(callback_sequence); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#293
  def chain_config; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#344
  def current_scopes; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#320
  def duplicates?(other); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#293
  def filter; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def kind; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def kind=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#316
  def matches?(_kind, _filter); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#304
  def merge_conditional_options(chain, if_option:, unless_option:); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def name; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def name=(_arg0); end

  private

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#352
  def check_conditionals(conditionals); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#367
  def conditions_lambdas; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#281
    def build(chain, filter, kind, options); end
  end
end

class ActiveSupport::Callbacks::CallbackChain
  include ::Enumerable

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#608
  def initialize(name, config); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#654
  def append(*callbacks); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#633
  def clear; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#645
  def compile; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#606
  def config; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#628
  def delete(o); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#619
  def each(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#621
  def empty?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#620
  def index(o); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#623
  def insert(index, o); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#606
  def name; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#658
  def prepend(*callbacks); end

  protected

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#663
  def chain; end

  private

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#666
  def append_one(callback); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#683
  def default_terminator; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#639
  def initialize_copy(other); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#672
  def prepend_one(callback); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#678
  def remove_duplicates(callback); end
end

class ActiveSupport::Callbacks::CallbackSequence
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#557
  def initialize(nested = T.unsafe(nil), call_template = T.unsafe(nil), user_conditions = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#571
  def after(&after); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#576
  def around(call_template, user_conditions); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#566
  def before(&before); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#590
  def expand_call_template(arg, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#586
  def final?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#598
  def invoke_after(arg); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#594
  def invoke_before(arg); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#584
  def nested; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#580
  def skip?(arg); end
end

module ActiveSupport::Callbacks::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#705
  def __update_callbacks(name); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#917
  def define_callbacks(*names); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#696
  def normalize_callback_params(filters, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#827
  def reset_callbacks(name); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#756
  def set_callback(name, *filter_list, &block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#802
  def skip_callback(name, *filter_list, &block); end

  protected

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#948
  def get_callbacks(name); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#952
  def set_callbacks(name, callbacks); end
end

module ActiveSupport::Callbacks::Conditionals; end

class ActiveSupport::Callbacks::Conditionals::Value
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#152
  def initialize(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#155
  def call(target, value); end
end

module ActiveSupport::Callbacks::Filters; end

class ActiveSupport::Callbacks::Filters::After
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#213
    def build(callback_sequence, user_callback, user_conditions, chain_config); end

    private

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#255
    def conditional(callback_sequence, user_callback, user_conditions); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#244
    def halting(callback_sequence, user_callback); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#229
    def halting_and_conditional(callback_sequence, user_callback, user_conditions); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#269
    def simple(callback_sequence, user_callback); end
  end
end

class ActiveSupport::Callbacks::Filters::Before
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#163
    def build(callback_sequence, user_callback, user_conditions, chain_config, filter, name); end

    private

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#192
    def halting(callback_sequence, user_callback, halted_lambda, filter, name); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#173
    def halting_and_conditional(callback_sequence, user_callback, user_conditions, halted_lambda, filter, name); end
  end
end

class ActiveSupport::Callbacks::Filters::Environment < ::Struct
  def halted; end
  def halted=(_); end
  def target; end
  def target=(_); end
  def value; end
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module ActiveSupport::Concern
  # source://activesupport/7.0.4/lib/active_support/concern.rb#127
  def append_features(base); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#207
  def class_methods(&class_methods_module_definition); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#156
  def included(base = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#140
  def prepend_features(base); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#173
  def prepended(base = T.unsafe(nil), &block); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/concern.rb#123
    def extended(base); end
  end
end

class ActiveSupport::Concern::MultipleIncludedBlocks < ::StandardError
  # source://activesupport/7.0.4/lib/active_support/concern.rb#112
  def initialize; end
end

class ActiveSupport::Concern::MultiplePrependBlocks < ::StandardError
  # source://activesupport/7.0.4/lib/active_support/concern.rb#118
  def initialize; end
end

module ActiveSupport::Configurable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveSupport::Configurable::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#145
  def config; end
end

module ActiveSupport::Configurable::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/configurable.rb#28
  def config; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#37
  def configure; end

  private

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#109
  def config_accessor(*names, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil)); end
end

class ActiveSupport::Configurable::Configuration < ::ActiveSupport::InheritableOptions
  # source://activesupport/7.0.4/lib/active_support/configurable.rb#13
  def compile_methods!; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/configurable.rb#18
    def compile_methods!(keys); end
  end
end

module ActiveSupport::DescendantsTracker
  # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#88
  def descendants; end

  # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#92
  def direct_descendants; end

  # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#82
  def subclasses; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#66
    def clear(classes); end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#62
    def descendants(klass); end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#11
    def direct_descendants(klass); end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#50
    def disable_clear!; end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#77
    def native?; end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#58
    def subclasses(klass); end
  end
end

class ActiveSupport::InheritableOptions < ::ActiveSupport::OrderedOptions
  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#80
  def initialize(parent = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#91
  def inheritable_copy; end
end

class ActiveSupport::LogSubscriber < ::ActiveSupport::Subscriber
  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
  def colorize_logging; end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
  def colorize_logging=(val); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def debug(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def error(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def fatal(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#114
  def finish(name, id, payload); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def info(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#106
  def logger; end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#120
  def publish_event(event); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#110
  def start(name, id, payload); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def unknown(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def warn(progname = T.unsafe(nil), &block); end

  private

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#139
  def color(text, color, bold = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#146
  def log_exception(name, e); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
    def colorize_logging; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
    def colorize_logging=(val); end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#96
    def flush_all!; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#91
    def log_subscribers; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#83
    def logger; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#89
    def logger=(_arg0); end

    private

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#101
    def fetch_public_methods(subscriber, inherit_all); end
  end
end

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#71
ActiveSupport::LogSubscriber::BLACK = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#75
ActiveSupport::LogSubscriber::BLUE = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#68
ActiveSupport::LogSubscriber::BOLD = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#67
ActiveSupport::LogSubscriber::CLEAR = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#77
ActiveSupport::LogSubscriber::CYAN = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#73
ActiveSupport::LogSubscriber::GREEN = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#76
ActiveSupport::LogSubscriber::MAGENTA = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#72
ActiveSupport::LogSubscriber::RED = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#78
ActiveSupport::LogSubscriber::WHITE = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#74
ActiveSupport::LogSubscriber::YELLOW = T.let(T.unsafe(nil), String)

class ActiveSupport::OrderedOptions < ::Hash
  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#39
  def [](key); end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#35
  def []=(key, value); end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#62
  def extractable_options?; end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#66
  def inspect; end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#43
  def method_missing(name, *args); end

  protected

  def _get(_arg0); end

  private

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#58
  def respond_to_missing?(name, include_private); end
end

class ActiveSupport::ProxyObject < ::BasicObject
  # source://activesupport/7.0.4/lib/active_support/proxy_object.rb#11
  def raise(*args); end
end

module ActiveSupport::Rescuable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#170
  def handler_for_rescue(exception); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#164
  def rescue_with_handler(exception); end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

module ActiveSupport::Rescuable::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#103
  def handler_for_rescue(exception, object: T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#51
  def rescue_from(*klasses, with: T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#88
  def rescue_with_handler(exception, object: T.unsafe(nil), visited_exceptions: T.unsafe(nil)); end

  private

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#137
  def constantize_rescue_handler_class(class_or_name); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#122
  def find_rescue_handler(exception); end
end

class ActiveSupport::Subscriber
  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#128
  def initialize; end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#143
  def finish(name, id, payload); end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#126
  def patterns; end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#152
  def publish_event(event); end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#134
  def start(name, id, payload); end

  private

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#158
  def event_stack; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#33
    def attach_to(namespace, subscriber = T.unsafe(nil), notifier = T.unsafe(nil), inherit_all: T.unsafe(nil)); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#48
    def detach_from(namespace, notifier = T.unsafe(nil)); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#67
    def method_added(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#76
    def subscribers; end

    private

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#83
    def add_event_subscriber(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#121
    def fetch_public_methods(subscriber, inherit_all); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#105
    def find_attached_subscriber; end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#109
    def invalid_event?(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#81
    def namespace; end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#81
    def notifier; end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#117
    def pattern_subscribed?(pattern); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#113
    def prepare_pattern(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#94
    def remove_event_subscriber(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#81
    def subscriber; end
  end
end

class ActiveSupport::TestCase < ::Minitest::Test
  include ::ActiveSupport::Testing::SetupAndTeardown
  include ::ActiveSupport::Testing::TaggedLogging
  include ::ActiveSupport::Callbacks
  include ::ActiveSupport::Testing::Assertions
  include ::ActiveSupport::Testing::Deprecation
  include ::ActiveSupport::Testing::TimeHelpers
  include ::ActiveSupport::Testing::FileFixtures
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveSupport::Testing::SetupAndTeardown::ClassMethods
  extend ::ActiveSupport::Testing::Declarative

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_setup_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_teardown_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _setup_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _teardown_callbacks; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#709
  def assert_no_match(matcher, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#638
  def assert_not_empty(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#649
  def assert_not_equal(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#661
  def assert_not_in_delta(exp, act, delta = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#673
  def assert_not_in_epsilon(a, b, epsilon = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#680
  def assert_not_includes(collection, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#691
  def assert_not_instance_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#701
  def assert_not_kind_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#719
  def assert_not_nil(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#730
  def assert_not_operator(o1, op, o2 = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#753
  def assert_not_predicate(o1, op, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#761
  def assert_not_respond_to(obj, meth, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#770
  def assert_not_same(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#396
  def assert_raise(*exp); end

  # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
  def file_fixture_path; end

  # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
  def file_fixture_path?; end

  # source://activesupport/7.0.4/lib/active_support/test_case.rb#151
  def inspect; end

  # source://minitest/5.16.3/lib/minitest.rb#304
  def method_name; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _setup_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _setup_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _teardown_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _teardown_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path; end

    # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path=(value); end

    # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path?; end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#79
    def parallelize(workers: T.unsafe(nil), with: T.unsafe(nil), threshold: T.unsafe(nil)); end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#101
    def parallelize_setup(&block); end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#118
    def parallelize_teardown(&block); end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#42
    def test_order; end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#32
    def test_order=(new_order); end
  end
end

# source://activesupport/7.0.4/lib/active_support/test_case.rb#20
ActiveSupport::TestCase::Assertion = Minitest::Assertion

module ActiveSupport::Testing::Assertions
  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#175
  def assert_changes(expression, message = T.unsafe(nil), from: T.unsafe(nil), to: T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#86
  def assert_difference(expression, *args, &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#222
  def assert_no_changes(expression, message = T.unsafe(nil), from: T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#137
  def assert_no_difference(expression, message = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#21
  def assert_not(object, message = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#33
  def assert_nothing_raised; end

  private

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#249
  def _assert_nothing_raised_or_warn(assertion, &block); end
end

# source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#8
ActiveSupport::Testing::Assertions::UNTRACKED = T.let(T.unsafe(nil), Object)

module ActiveSupport::Testing::ConstantLookup
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveSupport::Testing::ConstantLookup::ClassMethods
end

module ActiveSupport::Testing::ConstantLookup::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/testing/constant_lookup.rb#36
  def determine_constant_from_test_name(test_name); end
end

module ActiveSupport::Testing::Declarative
  # source://activesupport/7.0.4/lib/active_support/testing/declarative.rb#13
  def test(name, &block); end
end

module ActiveSupport::Testing::Deprecation
  # source://activesupport/7.0.4/lib/active_support/testing/deprecation.rb#31
  def assert_deprecated(match = T.unsafe(nil), deprecator = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/deprecation.rb#56
  def assert_not_deprecated(deprecator = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/deprecation.rb#75
  def collect_deprecations(deprecator = T.unsafe(nil)); end
end

module ActiveSupport::Testing::FileFixtures
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#26
  def file_fixture(fixture_name); end

  module GeneratedClassMethods
    def file_fixture_path; end
    def file_fixture_path=(value); end
    def file_fixture_path?; end
  end

  module GeneratedInstanceMethods
    def file_fixture_path; end
    def file_fixture_path?; end
  end
end

module ActiveSupport::Testing::SetupAndTeardown
  # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#44
  def after_teardown; end

  # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#39
  def before_setup; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#21
    def prepended(klass); end
  end
end

module ActiveSupport::Testing::SetupAndTeardown::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#29
  def setup(*args, &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#34
  def teardown(*args, &block); end
end

module ActiveSupport::Testing::TaggedLogging
  # source://activesupport/7.0.4/lib/active_support/testing/tagged_logging.rb#10
  def before_setup; end

  # source://activesupport/7.0.4/lib/active_support/testing/tagged_logging.rb#8
  def tagged_logger=(_arg0); end

  private

  # source://activesupport/7.0.4/lib/active_support/testing/tagged_logging.rb#22
  def tagged_logger; end
end

module ActiveSupport::Testing::TimeHelpers
  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#70
  def after_teardown; end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#234
  def freeze_time(&block); end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#93
  def travel(duration, &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#208
  def travel_back; end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#128
  def travel_to(date_or_time); end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#208
  def unfreeze_time; end

  private

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#243
  def in_block; end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#243
  def in_block=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#239
  def simple_stubs; end
end

module ActiveSupport::ToJsonWithActiveSupportEncoder
  # source://activesupport/7.0.4/lib/active_support/core_ext/object/json.rb#36
  def to_json(options = T.unsafe(nil)); end
end

class Jbuilder < ::ActiveSupport::ProxyObject
  # @return [Jbuilder] a new instance of Jbuilder
  # @yield [_self]
  # @yieldparam _self [Jbuilder] the object that the method was called on
  #
  # source://jbuilder//lib/jbuilder.rb#15
  def initialize(options = T.unsafe(nil)); end

  # Turns the current element into an array and iterates over the passed collection, adding each iteration as
  # an element of the resulting array.
  #
  # Example:
  #
  #   json.array!(@people) do |person|
  #     json.name person.name
  #     json.age calculate_age(person.birthday)
  #   end
  #
  #   [ { "name": David", "age": 32 }, { "name": Jamie", "age": 31 } ]
  #
  # You can use the call syntax instead of an explicit extract! call:
  #
  #   json.(@people) { |person| ... }
  #
  # It's generally only needed to use this method for top-level arrays. If you have named arrays, you can do:
  #
  #   json.people(@people) do |person|
  #     json.name person.name
  #     json.age calculate_age(person.birthday)
  #   end
  #
  #   { "people": [ { "name": David", "age": 32 }, { "name": Jamie", "age": 31 } ] }
  #
  # If you omit the block then you can set the top level array directly:
  #
  #   json.array! [1, 2, 3]
  #
  #   [1,2,3]
  #
  # source://jbuilder//lib/jbuilder.rb#213
  def array!(collection = T.unsafe(nil), *attributes, &block); end

  # Returns the attributes of the current builder.
  #
  # source://jbuilder//lib/jbuilder.rb#268
  def attributes!; end

  # source://jbuilder//lib/jbuilder.rb#252
  def call(object, *attributes, &block); end

  # Turns the current element into an array and yields a builder to add a hash.
  #
  # Example:
  #
  #   json.comments do
  #     json.child! { json.content "hello" }
  #     json.child! { json.content "world" }
  #   end
  #
  #   { "comments": [ { "content": "hello" }, { "content": "world" } ]}
  #
  # More commonly, you'd use the combined iterator, though:
  #
  #   json.comments(@post.comments) do |comment|
  #     json.content comment.formatted_content
  #   end
  #
  # source://jbuilder//lib/jbuilder.rb#178
  def child!; end

  # Deeply apply key format to nested hashes and arrays passed to
  # methods like set!, merge! or array!.
  #
  # Example:
  #
  #   json.key_format! camelize: :lower
  #   json.settings({some_value: "abc"})
  #
  #   { "settings": { "some_value": "abc" }}
  #
  #   json.key_format! camelize: :lower
  #   json.deep_format_keys!
  #   json.settings({some_value: "abc"})
  #
  #   { "settings": { "someValue": "abc" }}
  #
  # source://jbuilder//lib/jbuilder.rb#153
  def deep_format_keys!(value = T.unsafe(nil)); end

  # Extracts the mentioned attributes or hash elements from the passed object and turns them into attributes of the JSON.
  #
  # Example:
  #
  #   @person = Struct.new(:name, :age).new('David', 32)
  #
  #   or you can utilize a Hash
  #
  #   @person = { name: 'David', age: 32 }
  #
  #   json.extract! @person, :name, :age
  #
  #   { "name": David", "age": 32 }, { "name": Jamie", "age": 31 }
  #
  # You can also use the call syntax instead of an explicit extract! call:
  #
  #   json.(@person, :name, :age)
  #
  # source://jbuilder//lib/jbuilder.rb#244
  def extract!(object, *attributes); end

  # If you want to skip adding nil values to your JSON hash. This is useful
  # for JSON clients that don't deal well with nil values, and would prefer
  # not to receive keys which have null values.
  #
  # Example:
  #   json.ignore_nil! false
  #   json.id User.new.id
  #
  #   { "id": null }
  #
  #   json.ignore_nil!
  #   json.id User.new.id
  #
  #   {}
  #
  # source://jbuilder//lib/jbuilder.rb#128
  def ignore_nil!(value = T.unsafe(nil)); end

  # Specifies formatting to be applied to the key. Passing in a name of a function
  # will cause that function to be called on the key.  So :upcase will upper case
  # the key.  You can also pass in lambdas for more complex transformations.
  #
  # Example:
  #
  #   json.key_format! :upcase
  #   json.author do
  #     json.name "David"
  #     json.age 32
  #   end
  #
  #   { "AUTHOR": { "NAME": "David", "AGE": 32 } }
  #
  # You can pass parameters to the method using a hash pair.
  #
  #   json.key_format! camelize: :lower
  #   json.first_name "David"
  #
  #   { "firstName": "David" }
  #
  # Lambdas can also be used.
  #
  #   json.key_format! ->(key){ "_" + key }
  #   json.first_name "David"
  #
  #   { "_first_name": "David" }
  #
  # source://jbuilder//lib/jbuilder.rb#104
  def key_format!(*args); end

  # Merges hash, array, or Jbuilder instance into current builder.
  #
  # source://jbuilder//lib/jbuilder.rb#273
  def merge!(object); end

  # source://jbuilder//lib/jbuilder.rb#68
  def method_missing(*args, &block); end

  # Returns the nil JSON.
  #
  # source://jbuilder//lib/jbuilder.rb#261
  def nil!; end

  # Returns the nil JSON.
  #
  # source://jbuilder//lib/jbuilder.rb#261
  def null!; end

  # source://jbuilder//lib/jbuilder.rb#33
  def set!(key, value = T.unsafe(nil), *args, &block); end

  # Encodes the current builder as JSON.
  #
  # source://jbuilder//lib/jbuilder.rb#279
  def target!; end

  private

  # @return [Boolean]
  #
  # source://jbuilder//lib/jbuilder.rb#357
  def _blank?(value = T.unsafe(nil)); end

  # source://jbuilder//lib/jbuilder.rb#285
  def _extract_hash_values(object, attributes); end

  # source://jbuilder//lib/jbuilder.rb#289
  def _extract_method_values(object, attributes); end

  # source://jbuilder//lib/jbuilder.rb#318
  def _format_keys(hash_or_array); end

  # @return [Boolean]
  #
  # source://jbuilder//lib/jbuilder.rb#353
  def _is_collection?(object); end

  # source://jbuilder//lib/jbuilder.rb#314
  def _key(key); end

  # source://jbuilder//lib/jbuilder.rb#338
  def _map_collection(collection); end

  # source://jbuilder//lib/jbuilder.rb#293
  def _merge_block(key); end

  # source://jbuilder//lib/jbuilder.rb#300
  def _merge_values(current_value, updates); end

  # @return [Boolean]
  #
  # source://jbuilder//lib/jbuilder.rb#361
  def _object_respond_to?(object, *methods); end

  # source://jbuilder//lib/jbuilder.rb#344
  def _scope; end

  # source://jbuilder//lib/jbuilder.rb#330
  def _set_value(key, value); end

  class << self
    # Same as instance method deep_format_keys! except sets the default.
    #
    # source://jbuilder//lib/jbuilder.rb#158
    def deep_format_keys(value = T.unsafe(nil)); end

    # Yields a builder and automatically turns the result into a JSON string
    #
    # source://jbuilder//lib/jbuilder.rb#26
    def encode(*args, &block); end

    # Same as instance method ignore_nil! except sets the default.
    #
    # source://jbuilder//lib/jbuilder.rb#133
    def ignore_nil(value = T.unsafe(nil)); end

    # Same as the instance method key_format! except sets the default.
    #
    # source://jbuilder//lib/jbuilder.rb#109
    def key_format(*args); end
  end
end

class Jbuilder::ArrayError < ::StandardError
  class << self
    # source://jbuilder//lib/jbuilder/errors.rb#12
    def build(key); end
  end
end

# source://jbuilder//lib/jbuilder.rb#30
Jbuilder::BLANK = T.let(T.unsafe(nil), Jbuilder::Blank)

class Jbuilder::Blank
  # source://jbuilder//lib/jbuilder/blank.rb#3
  def ==(other); end

  # @return [Boolean]
  #
  # source://jbuilder//lib/jbuilder/blank.rb#7
  def empty?; end
end

module Jbuilder::CollectionRenderable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Jbuilder::CollectionRenderable::ClassMethods

  private

  # source://jbuilder//lib/jbuilder/collection_renderer.rb#27
  def build_rendered_collection(templates, _spacer); end

  # source://jbuilder//lib/jbuilder/collection_renderer.rb#23
  def build_rendered_template(content, template, layout = T.unsafe(nil)); end

  # source://jbuilder//lib/jbuilder/collection_renderer.rb#31
  def json; end
end

module Jbuilder::CollectionRenderable::ClassMethods
  # source://jbuilder//lib/jbuilder/collection_renderer.rb#16
  def supported?; end
end

class Jbuilder::CollectionRenderable::ScopedIterator < ::SimpleDelegator
  include ::Enumerable
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder

  # @return [ScopedIterator] a new instance of ScopedIterator
  #
  # source://jbuilder//lib/jbuilder/collection_renderer.rb#38
  def initialize(obj, scope); end

  # Rails 6.0 support:
  #
  # source://jbuilder//lib/jbuilder/collection_renderer.rb#44
  def each; end

  # Rails 6.1 support:
  #
  # source://jbuilder//lib/jbuilder/collection_renderer.rb#53
  def each_with_info; end
end

# Rails 6.0 support:
class Jbuilder::CollectionRenderer < ::ActionView::CollectionRenderer
  include ::Jbuilder::CollectionRenderable
  extend ::Jbuilder::CollectionRenderable::ClassMethods

  # @return [CollectionRenderer] a new instance of CollectionRenderer
  #
  # source://jbuilder//lib/jbuilder/collection_renderer.rb#70
  def initialize(lookup_context, options, &scope); end

  private

  # source://jbuilder//lib/jbuilder/collection_renderer.rb#76
  def collection_with_template(view, template, layout, collection); end
end

class Jbuilder::KeyFormatter
  # @return [KeyFormatter] a new instance of KeyFormatter
  #
  # source://jbuilder//lib/jbuilder/key_formatter.rb#6
  def initialize(*args); end

  # source://jbuilder//lib/jbuilder/key_formatter.rb#23
  def format(key); end

  private

  # source://jbuilder//lib/jbuilder/key_formatter.rb#19
  def initialize_copy(original); end
end

class Jbuilder::MergeError < ::StandardError
  class << self
    # source://jbuilder//lib/jbuilder/errors.rb#19
    def build(current_value, updates); end
  end
end

# source://jbuilder//lib/jbuilder.rb#31
Jbuilder::NON_ENUMERABLES = T.let(T.unsafe(nil), Set)

class Jbuilder::NullError < ::NoMethodError
  class << self
    # source://jbuilder//lib/jbuilder/errors.rb#5
    def build(key); end
  end
end

class Jbuilder::Railtie < ::Rails::Railtie; end

class JbuilderHandler
  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#271
  def default_format; end

  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#271
  def default_format=(val); end

  class << self
    # source://jbuilder//lib/jbuilder/jbuilder_template.rb#274
    def call(template, source = T.unsafe(nil)); end

    # source://jbuilder//lib/jbuilder/jbuilder_template.rb#271
    def default_format; end

    # source://jbuilder//lib/jbuilder/jbuilder_template.rb#271
    def default_format=(val); end
  end
end

class JbuilderTemplate < ::Jbuilder
  # @return [JbuilderTemplate] a new instance of JbuilderTemplate
  #
  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#13
  def initialize(context, *args); end

  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#117
  def array!(collection = T.unsafe(nil), *args); end

  # Caches the json constructed within the block passed. Has the same signature as the `cache` helper
  # method in `ActionView::Helpers::CacheHelper` and so can be used in the same way.
  #
  # Example:
  #
  #   json.cache! ['v1', @person], expires_in: 10.minutes do
  #     json.extract! @person, :name, :age
  #   end
  #
  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#67
  def cache!(key = T.unsafe(nil), options = T.unsafe(nil)); end

  # Conditionally caches the json depending in the condition given as first parameter. Has the same
  # signature as the `cache` helper method in `ActionView::Helpers::CacheHelper` and so can be used in
  # the same way.
  #
  # Example:
  #
  #   json.cache_if! !admin?, @person, expires_in: 10.minutes do
  #     json.extract! @person, :name, :age
  #   end
  #
  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#109
  def cache_if!(condition, *args, &block); end

  # Caches the json structure at the root using a string rather than the hash structure. This is considerably
  # faster, but the drawback is that it only works, as the name hints, at the root. So you cannot
  # use this approach to cache deeper inside the hierarchy, like in partials or such. Continue to use #cache! there.
  #
  # Example:
  #
  #   json.cache_root! @person do
  #     json.extract! @person, :name, :age
  #   end
  #
  #   # json.extra 'This will not work either, the root must be exclusive'
  #
  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#90
  def cache_root!(key = T.unsafe(nil), options = T.unsafe(nil)); end

  # Generates JSON using the template specified with the `:partial` option. For example, the code below will render
  # the file `views/comments/_comments.json.jbuilder`, and set a local variable comments with all this message's
  # comments, which can be used inside the partial.
  #
  # Example:
  #
  #   json.partial! 'comments/comments', comments: @message.comments
  #
  # There are multiple ways to generate a collection of elements as JSON, as ilustrated below:
  #
  # Example:
  #
  #   json.array! @posts, partial: 'posts/post', as: :post
  #
  #   # or:
  #   json.partial! 'posts/post', collection: @posts, as: :post
  #
  #   # or:
  #   json.partial! partial: 'posts/post', collection: @posts, as: :post
  #
  #   # or:
  #   json.comments @post.comments, partial: 'comments/comment', as: :comment
  #
  # Aside from that, the `:cached` options is available on Rails >= 6.0. This will cache the rendered results
  # effectively using the multi fetch feature.
  #
  # Example:
  #
  #   json.array! @posts, partial: "posts/post", as: :post, cached: true
  #
  #   json.comments @post.comments, partial: "comments/comment", as: :comment, cached: true
  #
  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#51
  def partial!(*args); end

  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#127
  def set!(name, object = T.unsafe(nil), *args); end

  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#113
  def target!; end

  private

  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#183
  def _cache_fragment_for(key, options, &block); end

  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#202
  def _cache_key(key, options); end

  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#215
  def _fragment_name_with_digest(key, options); end

  # @return [Boolean]
  #
  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#227
  def _is_active_model?(object); end

  # @return [Boolean]
  #
  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#223
  def _partial_options?(options); end

  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#188
  def _read_fragment_cache(key, options = T.unsafe(nil)); end

  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#265
  def _render_active_model_partial(object); end

  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#244
  def _render_explicit_partial(name_or_options, locals = T.unsafe(nil)); end

  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#178
  def _render_partial(options); end

  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#139
  def _render_partial_with_options(options); end

  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#231
  def _set_inline_partial(name, object, options); end

  # source://jbuilder//lib/jbuilder/jbuilder_template.rb#194
  def _write_fragment_cache(key, options = T.unsafe(nil)); end

  class << self
    # Returns the value of attribute template_lookup_options.
    #
    # source://jbuilder//lib/jbuilder/jbuilder_template.rb#8
    def template_lookup_options; end

    # Sets the attribute template_lookup_options
    #
    # @param value the value to set the attribute template_lookup_options to.
    #
    # source://jbuilder//lib/jbuilder/jbuilder_template.rb#8
    def template_lookup_options=(_arg0); end
  end
end

class Loofah::Scrubber
  # source://loofah/2.19.0/lib/loofah/scrubber.rb#65
  def initialize(options = T.unsafe(nil), &block); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#94
  def append_attribute(node, attribute, value); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#49
  def block; end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#44
  def direction; end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#86
  def scrub(node); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#78
  def traverse(node); end

  private

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#103
  def html5lib_sanitize(node); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#125
  def traverse_conditionally_bottom_up(node); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#116
  def traverse_conditionally_top_down(node); end
end

# source://loofah/2.19.0/lib/loofah/scrubber.rb#37
Loofah::Scrubber::CONTINUE = T.let(T.unsafe(nil), Object)

# source://loofah/2.19.0/lib/loofah/scrubber.rb#40
Loofah::Scrubber::STOP = T.let(T.unsafe(nil), Object)

class Mime::Type::InvalidMimeType < ::StandardError; end

module Minitest::Assertions
  # source://minitest/5.16.3/lib/minitest/assertions.rb#188
  def _synchronize; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#178
  def assert(test, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#195
  def assert_empty(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#216
  def assert_equal(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#240
  def assert_in_delta(exp, act, delta = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#252
  def assert_in_epsilon(exp, act, epsilon = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#259
  def assert_includes(collection, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#270
  def assert_instance_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#281
  def assert_kind_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#291
  def assert_match(matcher, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#303
  def assert_nil(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#313
  def assert_operator(o1, op, o2 = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#331
  def assert_output(stdout = T.unsafe(nil), stderr = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#355
  def assert_path_exists(path, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#369
  def assert_predicate(o1, op, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#396
  def assert_raises(*exp); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#427
  def assert_respond_to(obj, meth, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#437
  def assert_same(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#450
  def assert_send(send_ary, m = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#466
  def assert_silent; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#475
  def assert_throws(sym, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#516
  def capture_io; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#549
  def capture_subprocess_io; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#59
  def diff(exp, act); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#581
  def exception_details(e, msg); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#597
  def fail_after(y, m, d, msg); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#604
  def flunk(msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#612
  def message(msg = T.unsafe(nil), ending = T.unsafe(nil), &default); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#129
  def mu_pp(obj); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#152
  def mu_pp_for_diff(obj); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#623
  def pass(_msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#630
  def refute(test, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#638
  def refute_empty(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#649
  def refute_equal(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#661
  def refute_in_delta(exp, act, delta = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#673
  def refute_in_epsilon(a, b, epsilon = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#680
  def refute_includes(collection, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#691
  def refute_instance_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#701
  def refute_kind_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#709
  def refute_match(matcher, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#719
  def refute_nil(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#730
  def refute_operator(o1, op, o2 = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#739
  def refute_path_exists(path, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#753
  def refute_predicate(o1, op, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#761
  def refute_respond_to(obj, meth, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#770
  def refute_same(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#783
  def skip(msg = T.unsafe(nil), bt = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#795
  def skip_until(y, m, d, msg); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#804
  def skipped?; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#104
  def things_to_diff(exp, act); end

  class << self
    # source://minitest/5.16.3/lib/minitest/assertions.rb#29
    def diff; end

    # source://minitest/5.16.3/lib/minitest/assertions.rb#47
    def diff=(o); end
  end
end

# source://minitest/5.16.3/lib/minitest/assertions.rb#201
Minitest::Assertions::E = T.let(T.unsafe(nil), String)

# source://minitest/5.16.3/lib/minitest/assertions.rb#19
Minitest::Assertions::UNDEFINED = T.let(T.unsafe(nil), Object)

module Minitest::Guard
  # source://minitest/5.16.3/lib/minitest.rb#984
  def jruby?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#991
  def maglev?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#1001
  def mri?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#1008
  def osx?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#1015
  def rubinius?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#1025
  def windows?(platform = T.unsafe(nil)); end
end

module Minitest::Reportable
  # source://minitest/5.16.3/lib/minitest.rb#495
  def class_name; end

  # source://minitest/5.16.3/lib/minitest.rb#516
  def error?; end

  # source://minitest/5.16.3/lib/minitest.rb#490
  def location; end

  # source://minitest/5.16.3/lib/minitest.rb#482
  def passed?; end

  # source://minitest/5.16.3/lib/minitest.rb#502
  def result_code; end

  # source://minitest/5.16.3/lib/minitest.rb#509
  def skipped?; end
end

class Minitest::Runnable
  # source://minitest/5.16.3/lib/minitest.rb#431
  def initialize(name); end

  # source://minitest/5.16.3/lib/minitest.rb#281
  def assertions; end

  # source://minitest/5.16.3/lib/minitest.rb#281
  def assertions=(_arg0); end

  # source://minitest/5.16.3/lib/minitest.rb#427
  def failure; end

  # source://minitest/5.16.3/lib/minitest.rb#286
  def failures; end

  # source://minitest/5.16.3/lib/minitest.rb#286
  def failures=(_arg0); end

  # source://minitest/5.16.3/lib/minitest.rb#413
  def marshal_dump; end

  # source://minitest/5.16.3/lib/minitest.rb#423
  def marshal_load(ary); end

  # source://minitest/5.16.3/lib/minitest.rb#304
  def name; end

  # source://minitest/5.16.3/lib/minitest.rb#311
  def name=(o); end

  # source://minitest/5.16.3/lib/minitest.rb#450
  def passed?; end

  # source://minitest/5.16.3/lib/minitest.rb#459
  def result_code; end

  # source://minitest/5.16.3/lib/minitest.rb#440
  def run; end

  # source://minitest/5.16.3/lib/minitest.rb#466
  def skipped?; end

  # source://minitest/5.16.3/lib/minitest.rb#291
  def time; end

  # source://minitest/5.16.3/lib/minitest.rb#291
  def time=(_arg0); end

  # source://minitest/5.16.3/lib/minitest.rb#293
  def time_it; end

  class << self
    # source://minitest/5.16.3/lib/minitest.rb#1077
    def inherited(klass); end

    # source://minitest/5.16.3/lib/minitest.rb#318
    def methods_matching(re); end

    # source://minitest/5.16.3/lib/minitest.rb#383
    def on_signal(name, action); end

    # source://minitest/5.16.3/lib/minitest.rb#322
    def reset; end

    # source://minitest/5.16.3/lib/minitest.rb#333
    def run(reporter, options = T.unsafe(nil)); end

    # source://minitest/5.16.3/lib/minitest.rb#363
    def run_one_method(klass, method_name, reporter); end

    # source://minitest/5.16.3/lib/minitest.rb#400
    def runnable_methods; end

    # source://minitest/5.16.3/lib/minitest.rb#407
    def runnables; end

    # source://minitest/5.16.3/lib/minitest.rb#368
    def with_info_handler(reporter, &block); end
  end
end

# source://minitest/5.16.3/lib/minitest.rb#381
Minitest::Runnable::SIGNALS = T.let(T.unsafe(nil), Hash)

class Minitest::Test < ::Minitest::Runnable
  include ::Minitest::Assertions
  include ::Minitest::Reportable
  include ::Minitest::Test::LifecycleHooks
  include ::Minitest::Guard
  extend ::Minitest::Guard

  # source://minitest/5.16.3/lib/minitest/test.rb#194
  def capture_exceptions; end

  # source://minitest/5.16.3/lib/minitest/test.rb#15
  def class_name; end

  # source://minitest/5.16.3/lib/minitest/test.rb#211
  def neuter_exception(e); end

  # source://minitest/5.16.3/lib/minitest/test.rb#222
  def new_exception(klass, msg, bt, kill = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/test.rb#92
  def run; end

  # source://minitest/5.16.3/lib/minitest/test.rb#204
  def sanitize_exception(e); end

  # source://minitest/5.16.3/lib/minitest/test.rb#236
  def with_info_handler(&block); end

  class << self
    # source://minitest/5.16.3/lib/minitest/test.rb#31
    def i_suck_and_my_tests_are_order_dependent!; end

    # source://minitest/5.16.3/lib/minitest/test.rb#22
    def io_lock; end

    # source://minitest/5.16.3/lib/minitest/test.rb#22
    def io_lock=(_arg0); end

    # source://minitest/5.16.3/lib/minitest/test.rb#44
    def make_my_diffs_pretty!; end

    # source://minitest/5.16.3/lib/minitest/test.rb#55
    def parallelize_me!; end

    # source://minitest/5.16.3/lib/minitest/test.rb#65
    def runnable_methods; end

    # source://minitest/5.16.3/lib/minitest/test.rb#83
    def test_order; end
  end
end

module Minitest::Test::LifecycleHooks
  # source://minitest/5.16.3/lib/minitest/test.rb#167
  def after_setup; end

  # source://minitest/5.16.3/lib/minitest/test.rb#191
  def after_teardown; end

  # source://minitest/5.16.3/lib/minitest/test.rb#152
  def before_setup; end

  # source://minitest/5.16.3/lib/minitest/test.rb#176
  def before_teardown; end

  # source://minitest/5.16.3/lib/minitest/test.rb#158
  def setup; end

  # source://minitest/5.16.3/lib/minitest/test.rb#182
  def teardown; end
end

# source://minitest/5.16.3/lib/minitest/test.rb#19
Minitest::Test::PASSTHROUGH_EXCEPTIONS = T.let(T.unsafe(nil), Array)

# source://minitest/5.16.3/lib/minitest/test.rb#87
Minitest::Test::TEARDOWN_METHODS = T.let(T.unsafe(nil), Array)

module Rack::Request::Env
  # source://rack/2.2.4/lib/rack/request.rb#50
  def initialize(env); end

  # source://rack/2.2.4/lib/rack/request.rb#91
  def add_header(key, v); end

  # source://rack/2.2.4/lib/rack/request.rb#102
  def delete_header(name); end

  # source://rack/2.2.4/lib/rack/request.rb#73
  def each_header(&block); end

  # source://rack/2.2.4/lib/rack/request.rb#48
  def env; end

  # source://rack/2.2.4/lib/rack/request.rb#68
  def fetch_header(name, &block); end

  # source://rack/2.2.4/lib/rack/request.rb#62
  def get_header(name); end

  # source://rack/2.2.4/lib/rack/request.rb#57
  def has_header?(name); end

  # source://rack/2.2.4/lib/rack/request.rb#78
  def set_header(name, v); end

  private

  # source://rack/2.2.4/lib/rack/request.rb#106
  def initialize_copy(other); end
end

module Rack::Request::Helpers
  # source://rack/2.2.4/lib/rack/request.rb#426
  def GET; end

  # source://rack/2.2.4/lib/rack/request.rb#440
  def POST; end

  # source://rack/2.2.4/lib/rack/request.rb#532
  def [](key); end

  # source://rack/2.2.4/lib/rack/request.rb#543
  def []=(key, value); end

  # source://rack/2.2.4/lib/rack/request.rb#519
  def accept_encoding; end

  # source://rack/2.2.4/lib/rack/request.rb#523
  def accept_language; end

  # source://rack/2.2.4/lib/rack/request.rb#227
  def authority; end

  # source://rack/2.2.4/lib/rack/request.rb#502
  def base_url; end

  # source://rack/2.2.4/lib/rack/request.rb#150
  def body; end

  # source://rack/2.2.4/lib/rack/request.rb#400
  def content_charset; end

  # source://rack/2.2.4/lib/rack/request.rb#159
  def content_length; end

  # source://rack/2.2.4/lib/rack/request.rb#271
  def content_type; end

  # source://rack/2.2.4/lib/rack/request.rb#256
  def cookies; end

  # source://rack/2.2.4/lib/rack/request.rb#181
  def delete?; end

  # source://rack/2.2.4/lib/rack/request.rb#497
  def delete_param(k); end

  # source://rack/2.2.4/lib/rack/request.rb#412
  def form_data?; end

  # source://rack/2.2.4/lib/rack/request.rb#344
  def forwarded_authority; end

  # source://rack/2.2.4/lib/rack/request.rb#330
  def forwarded_for; end

  # source://rack/2.2.4/lib/rack/request.rb#338
  def forwarded_port; end

  # source://rack/2.2.4/lib/rack/request.rb#515
  def fullpath; end

  # source://rack/2.2.4/lib/rack/request.rb#184
  def get?; end

  # source://rack/2.2.4/lib/rack/request.rb#187
  def head?; end

  # source://rack/2.2.4/lib/rack/request.rb#296
  def host; end

  # source://rack/2.2.4/lib/rack/request.rb#281
  def host_authority; end

  # source://rack/2.2.4/lib/rack/request.rb#285
  def host_with_port(authority = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/request.rb#304
  def hostname; end

  # source://rack/2.2.4/lib/rack/request.rb#354
  def ip; end

  # source://rack/2.2.4/lib/rack/request.rb#193
  def link?; end

  # source://rack/2.2.4/lib/rack/request.rb#160
  def logger; end

  # source://rack/2.2.4/lib/rack/request.rb#383
  def media_type; end

  # source://rack/2.2.4/lib/rack/request.rb#392
  def media_type_params; end

  # source://rack/2.2.4/lib/rack/request.rb#162
  def multithread?; end

  # source://rack/2.2.4/lib/rack/request.rb#190
  def options?; end

  # source://rack/2.2.4/lib/rack/request.rb#468
  def params; end

  # source://rack/2.2.4/lib/rack/request.rb#421
  def parseable_data?; end

  # source://rack/2.2.4/lib/rack/request.rb#196
  def patch?; end

  # source://rack/2.2.4/lib/rack/request.rb#511
  def path; end

  # source://rack/2.2.4/lib/rack/request.rb#154
  def path_info; end

  # source://rack/2.2.4/lib/rack/request.rb#155
  def path_info=(s); end

  # source://rack/2.2.4/lib/rack/request.rb#308
  def port; end

  # source://rack/2.2.4/lib/rack/request.rb#199
  def post?; end

  # source://rack/2.2.4/lib/rack/request.rb#202
  def put?; end

  # source://rack/2.2.4/lib/rack/request.rb#158
  def query_string; end

  # source://rack/2.2.4/lib/rack/request.rb#165
  def referer; end

  # source://rack/2.2.4/lib/rack/request.rb#165
  def referrer; end

  # source://rack/2.2.4/lib/rack/request.rb#157
  def request_method; end

  # source://rack/2.2.4/lib/rack/request.rb#210
  def scheme; end

  # source://rack/2.2.4/lib/rack/request.rb#151
  def script_name; end

  # source://rack/2.2.4/lib/rack/request.rb#152
  def script_name=(s); end

  # source://rack/2.2.4/lib/rack/request.rb#233
  def server_authority; end

  # source://rack/2.2.4/lib/rack/request.rb#246
  def server_name; end

  # source://rack/2.2.4/lib/rack/request.rb#250
  def server_port; end

  # source://rack/2.2.4/lib/rack/request.rb#168
  def session; end

  # source://rack/2.2.4/lib/rack/request.rb#174
  def session_options; end

  # source://rack/2.2.4/lib/rack/request.rb#350
  def ssl?; end

  # source://rack/2.2.4/lib/rack/request.rb#205
  def trace?; end

  # source://rack/2.2.4/lib/rack/request.rb#527
  def trusted_proxy?(ip); end

  # source://rack/2.2.4/lib/rack/request.rb#208
  def unlink?; end

  # source://rack/2.2.4/lib/rack/request.rb#477
  def update_param(k, v); end

  # source://rack/2.2.4/lib/rack/request.rb#507
  def url; end

  # source://rack/2.2.4/lib/rack/request.rb#161
  def user_agent; end

  # source://rack/2.2.4/lib/rack/request.rb#552
  def values_at(*keys); end

  # source://rack/2.2.4/lib/rack/request.rb#276
  def xhr?; end

  private

  # source://rack/2.2.4/lib/rack/request.rb#641
  def allowed_scheme(header); end

  # source://rack/2.2.4/lib/rack/request.rb#558
  def default_session; end

  # source://rack/2.2.4/lib/rack/request.rb#645
  def extract_proto_header(header); end

  # source://rack/2.2.4/lib/rack/request.rb#636
  def forwarded_scheme; end

  # source://rack/2.2.4/lib/rack/request.rb#574
  def parse_http_accept_header(header); end

  # source://rack/2.2.4/lib/rack/request.rb#593
  def parse_multipart; end

  # source://rack/2.2.4/lib/rack/request.rb#589
  def parse_query(qs, d = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/request.rb#585
  def query_parser; end

  # source://rack/2.2.4/lib/rack/request.rb#632
  def reject_trusted_ip_addresses(ip_addresses); end

  # source://rack/2.2.4/lib/rack/request.rb#619
  def split_authority(authority); end

  # source://rack/2.2.4/lib/rack/request.rb#597
  def split_header(value); end

  # source://rack/2.2.4/lib/rack/request.rb#561
  def wrap_ipv6(host); end
end

# source://rack/2.2.4/lib/rack/request.rb#130
Rack::Request::Helpers::DEFAULT_PORTS = T.let(T.unsafe(nil), Hash)

# source://rack/2.2.4/lib/rack/request.rb#115
Rack::Request::Helpers::FORM_DATA_MEDIA_TYPES = T.let(T.unsafe(nil), Array)

# source://rack/2.2.4/lib/rack/request.rb#133
Rack::Request::Helpers::HTTP_X_FORWARDED_FOR = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/request.rb#136
Rack::Request::Helpers::HTTP_X_FORWARDED_HOST = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/request.rb#145
Rack::Request::Helpers::HTTP_X_FORWARDED_PORT = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/request.rb#142
Rack::Request::Helpers::HTTP_X_FORWARDED_PROTO = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/request.rb#139
Rack::Request::Helpers::HTTP_X_FORWARDED_SCHEME = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/request.rb#148
Rack::Request::Helpers::HTTP_X_FORWARDED_SSL = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/request.rb#123
Rack::Request::Helpers::PARSEABLE_DATA_MEDIA_TYPES = T.let(T.unsafe(nil), Array)

module Rack::Response::Helpers
  # source://rack/2.2.4/lib/rack/response.rb#145
  def accepted?; end

  # source://rack/2.2.4/lib/rack/response.rb#171
  def add_header(key, v); end

  # source://rack/2.2.4/lib/rack/response.rb#148
  def bad_request?; end

  # source://rack/2.2.4/lib/rack/response.rb#246
  def cache!(duration = T.unsafe(nil), directive: T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/response.rb#229
  def cache_control; end

  # source://rack/2.2.4/lib/rack/response.rb#233
  def cache_control=(v); end

  # source://rack/2.2.4/lib/rack/response.rb#140
  def client_error?; end

  # source://rack/2.2.4/lib/rack/response.rb#199
  def content_length; end

  # source://rack/2.2.4/lib/rack/response.rb#182
  def content_type; end

  # source://rack/2.2.4/lib/rack/response.rb#187
  def content_type=(content_type); end

  # source://rack/2.2.4/lib/rack/response.rb#144
  def created?; end

  # source://rack/2.2.4/lib/rack/response.rb#217
  def delete_cookie(key, value = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/response.rb#238
  def do_not_cache!; end

  # source://rack/2.2.4/lib/rack/response.rb#253
  def etag; end

  # source://rack/2.2.4/lib/rack/response.rb#257
  def etag=(v); end

  # source://rack/2.2.4/lib/rack/response.rb#150
  def forbidden?; end

  # source://rack/2.2.4/lib/rack/response.rb#158
  def include?(header); end

  # source://rack/2.2.4/lib/rack/response.rb#137
  def informational?; end

  # source://rack/2.2.4/lib/rack/response.rb#135
  def invalid?; end

  # source://rack/2.2.4/lib/rack/response.rb#204
  def location; end

  # source://rack/2.2.4/lib/rack/response.rb#208
  def location=(location); end

  # source://rack/2.2.4/lib/rack/response.rb#191
  def media_type; end

  # source://rack/2.2.4/lib/rack/response.rb#195
  def media_type_params; end

  # source://rack/2.2.4/lib/rack/response.rb#152
  def method_not_allowed?; end

  # source://rack/2.2.4/lib/rack/response.rb#147
  def moved_permanently?; end

  # source://rack/2.2.4/lib/rack/response.rb#146
  def no_content?; end

  # source://rack/2.2.4/lib/rack/response.rb#151
  def not_found?; end

  # source://rack/2.2.4/lib/rack/response.rb#143
  def ok?; end

  # source://rack/2.2.4/lib/rack/response.rb#153
  def precondition_failed?; end

  # source://rack/2.2.4/lib/rack/response.rb#156
  def redirect?; end

  # source://rack/2.2.4/lib/rack/response.rb#139
  def redirection?; end

  # source://rack/2.2.4/lib/rack/response.rb#141
  def server_error?; end

  # source://rack/2.2.4/lib/rack/response.rb#212
  def set_cookie(key, value); end

  # source://rack/2.2.4/lib/rack/response.rb#221
  def set_cookie_header; end

  # source://rack/2.2.4/lib/rack/response.rb#225
  def set_cookie_header=(v); end

  # source://rack/2.2.4/lib/rack/response.rb#138
  def successful?; end

  # source://rack/2.2.4/lib/rack/response.rb#149
  def unauthorized?; end

  # source://rack/2.2.4/lib/rack/response.rb#154
  def unprocessable?; end

  protected

  # source://rack/2.2.4/lib/rack/response.rb#287
  def append(chunk); end

  # source://rack/2.2.4/lib/rack/response.rb#263
  def buffered_body!; end
end

class Rack::Session::Abstract::PersistedSecure::SecureSessionHash < ::Rack::Session::Abstract::SessionHash
  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#455
  def [](key); end
end

class Rack::Session::Abstract::SessionHash
  include ::Enumerable

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#62
  def initialize(store, req); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#82
  def [](key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#108
  def []=(key, value); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#114
  def clear; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#140
  def delete(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#119
  def destroy; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#87
  def dig(key, *keys); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#77
  def each(&block); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#163
  def empty?; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#153
  def exists?; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#92
  def fetch(key, default = T.unsafe(nil), &block); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#101
  def has_key?(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#68
  def id; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#46
  def id=(_arg0); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#101
  def include?(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#145
  def inspect; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#101
  def key?(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#168
  def keys; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#159
  def loaded?; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#129
  def merge!(hash); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#73
  def options; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#135
  def replace(hash); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#108
  def store(key, value); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#124
  def to_hash; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#129
  def update(hash); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#173
  def values; end

  private

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#188
  def load!; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#180
  def load_for_read!; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#184
  def load_for_write!; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#194
  def stringify_keys(other); end

  class << self
    # source://rack/2.2.4/lib/rack/session/abstract/id.rb#50
    def find(req); end

    # source://rack/2.2.4/lib/rack/session/abstract/id.rb#54
    def set(req, session); end

    # source://rack/2.2.4/lib/rack/session/abstract/id.rb#58
    def set_options(req, options); end
  end
end

# source://rack/2.2.4/lib/rack/session/abstract/id.rb#48
Rack::Session::Abstract::SessionHash::Unspecified = T.let(T.unsafe(nil), Object)

module Rails
  extend ::ActiveSupport::Autoload
  extend ::ActiveSupport::Benchmarkable

  class << self
    # source://railties/7.0.4/lib/rails.rb#38
    def app_class; end

    # source://railties/7.0.4/lib/rails.rb#38
    def app_class=(_arg0); end

    # source://railties/7.0.4/lib/rails.rb#39
    def application; end

    # source://railties/7.0.4/lib/rails.rb#37
    def application=(_arg0); end

    # source://railties/7.0.4/lib/rails.rb#123
    def autoloaders; end

    # source://railties/7.0.4/lib/rails.rb#50
    def backtrace_cleaner; end

    # source://railties/7.0.4/lib/rails.rb#38
    def cache; end

    # source://railties/7.0.4/lib/rails.rb#38
    def cache=(_arg0); end

    # source://railties/7.0.4/lib/rails.rb#46
    def configuration; end

    # source://railties/7.0.4/lib/rails.rb#72
    def env; end

    # source://railties/7.0.4/lib/rails.rb#79
    def env=(environment); end

    # source://railties/7.0.4/lib/rails.rb#90
    def error; end

    # source://railties/7.0.4/lib/rails/gem_version.rb#5
    def gem_version; end

    # source://railties/7.0.4/lib/rails.rb#103
    def groups(*groups); end

    # source://railties/7.0.4/lib/rails.rb#43
    def initialize!(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.0.4/lib/rails.rb#43
    def initialized?(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.0.4/lib/rails.rb#38
    def logger; end

    # source://railties/7.0.4/lib/rails.rb#38
    def logger=(_arg0); end

    # source://railties/7.0.4/lib/rails.rb#119
    def public_path; end

    # source://railties/7.0.4/lib/rails.rb#63
    def root; end

    # source://railties/7.0.4/lib/rails/version.rb#7
    def version; end
  end
end

class Rails::Application < ::Rails::Engine
  # source://railties/7.0.4/lib/rails/application.rb#106
  def initialize(initial_variable_values = T.unsafe(nil), &block); end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def assets; end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def assets=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def autoloaders; end

  # source://railties/7.0.4/lib/rails/engine.rb#511
  def build_middleware_stack; end

  # source://railties/7.0.4/lib/rails/application.rb#383
  def config; end

  # source://railties/7.0.4/lib/rails/application.rb#387
  def config=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#221
  def config_for(name, env: T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application.rb#303
  def console(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#432
  def credentials; end

  # source://railties/7.0.4/lib/rails/application.rb#403
  def credentials=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#101
  def default_url_options(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/application.rb#101
  def default_url_options=(arg); end

  # source://railties/7.0.4/lib/rails/application.rb#497
  def eager_load!; end

  # source://railties/7.0.4/lib/rails/application.rb#463
  def encrypted(path, key_path: T.unsafe(nil), env_key: T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application.rb#250
  def env_config; end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def executor; end

  # source://railties/7.0.4/lib/rails/application.rb#309
  def generators(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#476
  def helpers_paths; end

  # source://importmap-rails/1.1.5/lib/importmap/engine.rb#4
  def importmap; end

  # source://importmap-rails/1.1.5/lib/importmap/engine.rb#4
  def importmap=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#370
  def initialize!(group = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application.rb#129
  def initialized?; end

  # source://railties/7.0.4/lib/rails/application.rb#291
  def initializer(name, opts = T.unsafe(nil), &block); end

  # source://railties/7.0.4/lib/rails/application.rb#377
  def initializers; end

  # source://railties/7.0.4/lib/rails/application.rb#320
  def isolate_namespace(mod); end

  # source://railties/7.0.4/lib/rails/application.rb#153
  def key_generator; end

  # source://railties/7.0.4/lib/rails/application.rb#179
  def message_verifier(verifier_name); end

  # source://railties/7.0.4/lib/rails/application.rb#492
  def migration_railties; end

  # source://railties/7.0.4/lib/rails/application.rb#284
  def rake_tasks(&block); end

  # source://railties/7.0.4/lib/rails/application.rb#148
  def reload_routes!; end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def reloader; end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def reloaders; end

  # source://railties/7.0.4/lib/rails/application.rb#346
  def require_environment!; end

  # source://railties/7.0.4/lib/rails/application.rb#351
  def routes_reloader; end

  # source://railties/7.0.4/lib/rails/application.rb#133
  def run_load_hooks!; end

  # source://railties/7.0.4/lib/rails/application.rb#297
  def runner(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def sandbox; end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def sandbox=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def sandbox?; end

  # source://railties/7.0.4/lib/rails/application.rb#415
  def secret_key_base; end

  # source://railties/7.0.4/lib/rails/application.rb#389
  def secrets; end

  # source://railties/7.0.4/lib/rails/application.rb#403
  def secrets=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#315
  def server(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#472
  def to_app; end

  # source://railties/7.0.4/lib/rails/application.rb#358
  def watchable_args; end

  protected

  # source://railties/7.0.4/lib/rails/application.rb#570
  def default_middleware_stack; end

  # source://railties/7.0.4/lib/rails/application.rb#536
  def ordered_railties; end

  # source://railties/7.0.4/lib/rails/application.rb#558
  def railties_initializers(current); end

  # source://railties/7.0.4/lib/rails/application.rb#525
  def run_console_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#515
  def run_generators_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#520
  def run_runner_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#530
  def run_server_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#504
  def run_tasks_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#575
  def validate_secret_key_base(secret_key_base); end

  private

  # source://railties/7.0.4/lib/rails/application.rb#609
  def build_middleware; end

  # source://railties/7.0.4/lib/rails/application.rb#602
  def build_request(env); end

  # source://railties/7.0.4/lib/rails/application.rb#613
  def coerce_same_site_protection(protection); end

  # source://railties/7.0.4/lib/rails/application.rb#586
  def generate_development_secret; end

  class << self
    # source://railties/7.0.4/lib/rails/application.rb#339
    def add_lib_to_load_path!(root); end

    # source://railties/7.0.4/lib/rails/application.rb#81
    def create(initial_variable_values = T.unsafe(nil), &block); end

    # source://railties/7.0.4/lib/rails/application.rb#85
    def find_root(from); end

    # source://railties/7.0.4/lib/rails/application.rb#70
    def inherited(base); end

    # source://railties/7.0.4/lib/rails/application.rb#77
    def instance; end
  end
end

module Rails::Application::Bootstrap
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

class Rails::Application::Configuration < ::Rails::Engine::Configuration
  # source://railties/7.0.4/lib/rails/application/configuration.rb#28
  def initialize(*_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def add_autoload_paths_to_load_path; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def add_autoload_paths_to_load_path=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def allow_concurrency; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def allow_concurrency=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#415
  def annotations; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#26
  def api_only; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#276
  def api_only=(value); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def asset_host; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def asset_host=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def autoflush_log; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def autoflush_log=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def beginning_of_week; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def beginning_of_week=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def cache_classes; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def cache_classes=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def cache_store; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def cache_store=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#361
  def colorize_logging; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#365
  def colorize_logging=(val); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def consider_all_requests_local; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def consider_all_requests_local=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def console; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def console=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#420
  def content_security_policy(&block); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_nonce_directives; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_nonce_directives=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_nonce_generator; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_nonce_generator=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_report_only; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_report_only=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def credentials; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def credentials=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#330
  def database_configuration; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#283
  def debug_exception_response_format; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#287
  def debug_exception_response_format=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#437
  def default_log_file; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def disable_sandbox; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def disable_sandbox=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def eager_load; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def eager_load=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def enable_dependency_loading; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def enable_dependency_loading=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#26
  def encoding; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#268
  def encoding=(value); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def exceptions_app; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def exceptions_app=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def file_watcher; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def file_watcher=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def filter_parameters; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def filter_parameters=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def filter_redirect; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def filter_redirect=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def force_ssl; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def force_ssl=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def helpers_paths; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def helpers_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def host_authorization; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def host_authorization=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def hosts; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def hosts=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#312
  def load_database_yaml; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#88
  def load_defaults(target_version); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#26
  def loaded_config_version; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_formatter; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_formatter=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_level; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_level=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_tags; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_tags=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def logger; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def logger=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#289
  def paths; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#429
  def permissions_policy(&block); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def public_file_server; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def public_file_server=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def railties_order; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def railties_order=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def rake_eager_load; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def rake_eager_load=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def read_encrypted_secrets; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def read_encrypted_secrets=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def relative_url_root; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def relative_url_root=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def reload_classes_only_on_change; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def reload_classes_only_on_change=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def require_master_key; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def require_master_key=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def secret_key_base; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def secret_key_base=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def server_timing; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def server_timing=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def session_options; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def session_options=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#384
  def session_store(new_session_store = T.unsafe(nil), **options); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#411
  def session_store?; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def ssl_options; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def ssl_options=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def time_zone; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def time_zone=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def x; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def x=(_arg0); end

  private

  # source://railties/7.0.4/lib/rails/application/configuration.rb#486
  def credentials_available_for_current_env?; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#470
  def default_credentials_content_path; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#478
  def default_credentials_key_path; end
end

class Rails::Application::Configuration::Custom
  # source://railties/7.0.4/lib/rails/application/configuration.rb#450
  def initialize; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#454
  def method_missing(method, *args); end

  private

  # source://railties/7.0.4/lib/rails/application/configuration.rb#464
  def respond_to_missing?(symbol, *_arg1); end
end

class Rails::Application::DefaultMiddlewareStack
  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#8
  def initialize(app, config, paths); end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#6
  def app; end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#14
  def build_stack; end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#6
  def config; end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#6
  def paths; end

  private

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#103
  def load_rack_cache; end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#125
  def show_exceptions_app; end
end

module Rails::Application::Finisher
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

module Rails::Application::Finisher::InterlockHook
  class << self
    # source://railties/7.0.4/lib/rails/application/finisher.rb#109
    def complete(_state); end

    # source://railties/7.0.4/lib/rails/application/finisher.rb#105
    def run; end
  end
end

class Rails::Application::Finisher::MonitorHook
  # source://railties/7.0.4/lib/rails/application/finisher.rb#91
  def initialize(monitor = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application/finisher.rb#99
  def complete(_state); end

  # source://railties/7.0.4/lib/rails/application/finisher.rb#95
  def run; end
end

# source://railties/7.0.4/lib/rails/application.rb#103
Rails::Application::INITIAL_VARIABLES = T.let(T.unsafe(nil), Array)

class Rails::Application::RoutesReloader
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#15
  def initialize; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#11
  def eager_load; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#11
  def eager_load=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#13
  def execute(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#13
  def execute_if_updated(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#10
  def external_routes; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#10
  def paths; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#22
  def reload!; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#10
  def route_sets; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#12
  def run_after_load_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#13
  def updated?(*_arg0, **_arg1, &_arg2); end

  private

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#42
  def clear!; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#58
  def finalize!; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#49
  def load_paths; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#62
  def revert; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#54
  def run_after_load_paths; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#32
  def updater; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end
  end
end

class Rails::ApplicationController < ::ActionController::Base
  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://railties/7.0.4/lib/rails/application_controller.rb#25
  def disable_content_security_policy_nonce!; end

  # source://railties/7.0.4/lib/rails/application_controller.rb#21
  def local_request?; end

  # source://railties/7.0.4/lib/rails/application_controller.rb#15
  def require_local!; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

class Rails::Autoloaders
  include ::Enumerable

  # source://railties/7.0.4/lib/rails/autoloaders.rb#11
  def initialize; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#31
  def each; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#40
  def log!; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#36
  def logger=(logger); end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#9
  def main; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#9
  def once; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#44
  def zeitwerk_enabled?; end
end

module Rails::Autoloaders::Inflector
  class << self
    # source://railties/7.0.4/lib/rails/autoloaders/inflector.rb#12
    def camelize(basename, _abspath); end

    # source://railties/7.0.4/lib/rails/autoloaders/inflector.rb#16
    def inflect(overrides); end
  end
end

module Rails::Configuration; end

class Rails::Configuration::Generators
  # source://railties/7.0.4/lib/rails/configuration.rb#108
  def initialize; end

  # source://railties/7.0.4/lib/rails/configuration.rb#130
  def after_generate(&block); end

  # source://railties/7.0.4/lib/rails/configuration.rb#106
  def after_generate_callbacks; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def aliases; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def aliases=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def api_only; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def api_only=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def colorize_logging; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def colorize_logging=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def fallbacks; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def fallbacks=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#106
  def hidden_namespaces; end

  # source://railties/7.0.4/lib/rails/configuration.rb#126
  def hide_namespace(namespace); end

  # source://railties/7.0.4/lib/rails/configuration.rb#134
  def method_missing(method, *args); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def options; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def options=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def templates; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def templates=(_arg0); end

  private

  # source://railties/7.0.4/lib/rails/configuration.rb#119
  def initialize_copy(source); end
end

class Rails::Configuration::MiddlewareStackProxy
  # source://railties/7.0.4/lib/rails/configuration.rb#47
  def initialize(operations = T.unsafe(nil), delete_operations = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/configuration.rb#96
  def +(other); end

  # source://railties/7.0.4/lib/rails/configuration.rb#70
  def delete(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#52
  def insert(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#58
  def insert_after(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#52
  def insert_before(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#88
  def merge_into(other); end

  # source://railties/7.0.4/lib/rails/configuration.rb#74
  def move(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#80
  def move_after(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#74
  def move_before(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#62
  def swap(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#84
  def unshift(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#66
  def use(*_arg0, **_arg1, &_arg2); end

  protected

  # source://railties/7.0.4/lib/rails/configuration.rb#101
  def delete_operations; end

  # source://railties/7.0.4/lib/rails/configuration.rb#101
  def operations; end
end

module Rails::Dom; end
module Rails::Dom::Testing; end

module Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  extend ::ActiveSupport::Concern
end

module Rails::Dom::Testing::Assertions::DomAssertions
  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/dom_assertions.rb#10
  def assert_dom_equal(expected, actual, message = T.unsafe(nil)); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/dom_assertions.rb#20
  def assert_dom_not_equal(expected, actual, message = T.unsafe(nil)); end

  protected

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/dom_assertions.rb#28
  def compare_doms(expected, actual); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/dom_assertions.rb#63
  def equal_attribute?(attr, other_attr); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/dom_assertions.rb#50
  def equal_attribute_nodes?(nodes, other_nodes); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/dom_assertions.rb#38
  def equal_children?(child, other_child); end

  private

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/dom_assertions.rb#69
  def fragment(text); end
end

module Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions.rb#161
  def assert_select(*args, &block); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions.rb#247
  def assert_select_email(&block); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions.rb#211
  def assert_select_encoded(element = T.unsafe(nil), &block); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions.rb#59
  def css_select(*args); end

  private

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions.rb#270
  def assert_size_match!(size, equals, css_selector, message = T.unsafe(nil)); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions.rb#264
  def document_root_element; end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions.rb#282
  def nest_selection(selection); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions.rb#291
  def nodeset(node); end
end

module Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  extend ::ActiveSupport::Concern

  private

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions/count_describable.rb#12
  def count_description(min, max, count); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions/count_describable.rb#24
  def pluralize_element(quantity); end
end

class Rails::Engine < ::Rails::Railtie
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods

  # source://railties/7.0.4/lib/rails/engine.rb#432
  def initialize; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _load_seed_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_load_seed_callbacks(&block); end

  # source://railties/7.0.4/lib/rails/engine.rb#511
  def app; end

  # source://railties/7.0.4/lib/rails/engine.rb#528
  def call(env); end

  # source://railties/7.0.4/lib/rails/engine.rb#547
  def config; end

  # source://railties/7.0.4/lib/rails/engine.rb#484
  def eager_load!; end

  # source://railties/7.0.4/lib/rails/engine.rb#523
  def endpoint; end

  # source://railties/7.0.4/lib/rails/engine.rb#430
  def engine_name(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#534
  def env_config; end

  # source://railties/7.0.4/lib/rails/engine.rb#494
  def helpers; end

  # source://railties/7.0.4/lib/rails/engine.rb#506
  def helpers_paths; end

  # source://railties/7.0.4/lib/rails/engine.rb#430
  def isolated?(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#446
  def load_console(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#470
  def load_generators(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#455
  def load_runner(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#555
  def load_seed; end

  # source://railties/7.0.4/lib/rails/engine.rb#479
  def load_server(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#462
  def load_tasks(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#429
  def middleware(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#429
  def paths(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#489
  def railties; end

  # source://railties/7.0.4/lib/rails/engine.rb#429
  def root(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#540
  def routes(&block); end

  # source://railties/7.0.4/lib/rails/engine.rb#654
  def routes?; end

  protected

  # source://railties/7.0.4/lib/rails/engine.rb#659
  def run_tasks_blocks(*_arg0); end

  private

  # source://railties/7.0.4/lib/rails/engine.rb#691
  def _all_autoload_once_paths; end

  # source://railties/7.0.4/lib/rails/engine.rb#695
  def _all_autoload_paths; end

  # source://railties/7.0.4/lib/rails/engine.rb#704
  def _all_load_paths(add_autoload_paths_to_load_path); end

  # source://railties/7.0.4/lib/rails/engine.rb#723
  def build_middleware; end

  # source://railties/7.0.4/lib/rails/engine.rb#715
  def build_request(env); end

  # source://railties/7.0.4/lib/rails/engine.rb#687
  def default_middleware_stack; end

  # source://railties/7.0.4/lib/rails/engine.rb#671
  def has_migrations?; end

  # source://railties/7.0.4/lib/rails/engine.rb#665
  def load_config_initializer(initializer); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _load_seed_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _load_seed_callbacks=(value); end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def called_from; end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def called_from=(_arg0); end

    # source://railties/7.0.4/lib/rails/engine.rb#358
    def eager_load!(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.0.4/lib/rails/engine.rb#378
    def endpoint(endpoint = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/railtie.rb#176
    def engine_name(name = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/engine.rb#416
    def find(path); end

    # source://railties/7.0.4/lib/rails/engine.rb#374
    def find_root(from); end

    # source://railties/7.0.4/lib/rails/engine.rb#675
    def find_root_with_flag(flag, root_path, default = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/engine.rb#360
    def inherited(base); end

    # source://railties/7.0.4/lib/rails/engine.rb#384
    def isolate_namespace(mod); end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def isolated; end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def isolated=(_arg0); end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def isolated?; end
  end
end

class Rails::Engine::Configuration < ::Rails::Railtie::Configuration
  # source://railties/7.0.4/lib/rails/engine/configuration.rb#12
  def initialize(root = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#83
  def autoload_once_paths; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#10
  def autoload_once_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#87
  def autoload_paths; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#10
  def autoload_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#79
  def eager_load_paths; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#10
  def eager_load_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#32
  def generators; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#9
  def javascript_path; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#9
  def javascript_path=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#9
  def middleware; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#9
  def middleware=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#38
  def paths; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#8
  def root; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#75
  def root=(value); end
end

class Rails::Engine::Railties
  include ::Enumerable

  # source://railties/7.0.4/lib/rails/engine/railties.rb#9
  def initialize; end

  # source://railties/7.0.4/lib/rails/engine/railties.rb#18
  def -(others); end

  # source://railties/7.0.4/lib/rails/engine/railties.rb#7
  def _all; end

  # source://railties/7.0.4/lib/rails/engine/railties.rb#14
  def each(*args, &block); end
end

module Rails::Html; end

class Rails::Html::FullSanitizer < ::Rails::Html::Sanitizer
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#29
  def sanitize(html, options = T.unsafe(nil)); end
end

class Rails::Html::LinkSanitizer < ::Rails::Html::Sanitizer
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#50
  def initialize; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#56
  def sanitize(html, options = T.unsafe(nil)); end
end

class Rails::Html::PermitScrubber < ::Loofah::Scrubber
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#50
  def initialize; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#48
  def attributes; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#59
  def attributes=(attributes); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#63
  def scrub(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#48
  def tags; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#55
  def tags=(tags); end

  protected

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#80
  def allowed_node?(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#92
  def keep_node?(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#134
  def scrub_attribute(node, attr_node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#88
  def scrub_attribute?(name); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#105
  def scrub_attributes(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#118
  def scrub_css_attribute(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#100
  def scrub_node(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#84
  def skip_node?(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#127
  def validate!(var, name); end
end

class Rails::Html::SafeListSanitizer < ::Rails::Html::Sanitizer
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#113
  def initialize; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#117
  def sanitize(html, options = T.unsafe(nil)); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#138
  def sanitize_css(style_string); end

  private

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#165
  def allowed_attributes(options); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#157
  def allowed_tags(options); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#144
  def loofah_using_html5?; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#149
  def remove_safelist_tag_combinations(tags); end

  class << self
    # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#106
    def allowed_attributes; end

    # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#106
    def allowed_attributes=(_arg0); end

    # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#105
    def allowed_tags; end

    # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#105
    def allowed_tags=(_arg0); end
  end
end

class Rails::Html::Sanitizer
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#6
  def sanitize(html, options = T.unsafe(nil)); end

  private

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#17
  def properly_encode(fragment, options); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#12
  def remove_xpaths(node, xpaths); end

  class << self
    # source://rails-html-sanitizer/1.4.3/lib/rails-html-sanitizer.rb#10
    def full_sanitizer; end

    # source://rails-html-sanitizer/1.4.3/lib/rails-html-sanitizer.rb#14
    def link_sanitizer; end

    # source://rails-html-sanitizer/1.4.3/lib/rails-html-sanitizer.rb#18
    def safe_list_sanitizer; end

    # source://rails-html-sanitizer/1.4.3/lib/rails-html-sanitizer.rb#22
    def white_list_sanitizer; end
  end
end

# source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer/version.rb#4
Rails::Html::Sanitizer::VERSION = T.let(T.unsafe(nil), String)

class Rails::Html::TargetScrubber < ::Rails::Html::PermitScrubber
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#172
  def allowed_node?(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#176
  def scrub_attribute?(name); end
end

class Rails::Html::TextOnlyScrubber < ::Loofah::Scrubber
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#187
  def initialize; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#191
  def scrub(node); end
end

# source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#170
Rails::Html::WhiteListSanitizer = Rails::Html::SafeListSanitizer

# source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#3
Rails::Html::XPATHS_TO_REMOVE = T.let(T.unsafe(nil), Array)

module Rails::Info
  # source://railties/7.0.4/lib/rails/info.rb#10
  def properties; end

  # source://railties/7.0.4/lib/rails/info.rb#10
  def properties=(val); end

  class << self
    # source://railties/7.0.4/lib/rails/info.rb#31
    def inspect; end

    # source://railties/7.0.4/lib/rails/info.rb#10
    def properties; end

    # source://railties/7.0.4/lib/rails/info.rb#10
    def properties=(val); end

    # source://railties/7.0.4/lib/rails/info.rb#25
    def property(name, value = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/info.rb#43
    def to_html; end

    # source://railties/7.0.4/lib/rails/info.rb#31
    def to_s; end
  end
end

class Rails::InfoController < ::Rails::ApplicationController
  # source://railties/7.0.4/lib/rails/info_controller.rb#12
  def index; end

  # source://railties/7.0.4/lib/rails/info_controller.rb#16
  def properties; end

  # source://railties/7.0.4/lib/rails/info_controller.rb#21
  def routes; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://railties/7.0.4/lib/rails/info_controller.rb#8
  def _layout_from_proc; end

  # source://railties/7.0.4/lib/rails/info_controller.rb#36
  def match_route; end

  # source://railties/7.0.4/lib/rails/info_controller.rb#40
  def with_leading_slash(path); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

module Rails::Initializable
  mixes_in_class_methods ::Rails::Initializable::ClassMethods

  # source://railties/7.0.4/lib/rails/initializable.rb#66
  def initializers; end

  # source://railties/7.0.4/lib/rails/initializable.rb#58
  def run_initializers(group = T.unsafe(nil), *args); end

  class << self
    # source://railties/7.0.4/lib/rails/initializable.rb#7
    def included(base); end
  end
end

module Rails::Initializable::ClassMethods
  # source://railties/7.0.4/lib/rails/initializable.rb#88
  def initializer(name, opts = T.unsafe(nil), &blk); end

  # source://railties/7.0.4/lib/rails/initializable.rb#71
  def initializers; end

  # source://railties/7.0.4/lib/rails/initializable.rb#75
  def initializers_chain; end

  # source://railties/7.0.4/lib/rails/initializable.rb#84
  def initializers_for(binding); end
end

class Rails::Initializable::Collection < ::Array
  include ::TSort

  # source://railties/7.0.4/lib/rails/initializable.rb#53
  def +(other); end

  # source://railties/7.0.4/lib/rails/initializable.rb#49
  def tsort_each_child(initializer, &block); end

  def tsort_each_node; end
end

class Rails::Initializable::Initializer
  # source://railties/7.0.4/lib/rails/initializable.rb#14
  def initialize(name, context, options, &block); end

  # source://railties/7.0.4/lib/rails/initializable.rb#23
  def after; end

  # source://railties/7.0.4/lib/rails/initializable.rb#19
  def before; end

  # source://railties/7.0.4/lib/rails/initializable.rb#27
  def belongs_to?(group); end

  # source://railties/7.0.4/lib/rails/initializable.rb#35
  def bind(context); end

  # source://railties/7.0.4/lib/rails/initializable.rb#12
  def block; end

  # source://railties/7.0.4/lib/rails/initializable.rb#40
  def context_class; end

  # source://railties/7.0.4/lib/rails/initializable.rb#12
  def name; end

  # source://railties/7.0.4/lib/rails/initializable.rb#31
  def run(*args); end
end

class Rails::MailersController < ::Rails::ApplicationController
  # source://railties/7.0.4/lib/rails/mailers_controller.rb#16
  def index; end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#21
  def preview; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#80
  def find_part(format); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#68
  def find_preferred_part(*formats); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#56
  def find_preview; end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#92
  def locale_query(locale); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#88
  def part_query(mime_type); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#96
  def set_locale(&block); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#52
  def show_previews?; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

module Rails::MailersController::HelperMethods
  include ::ActionController::Base::HelperMethods

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#12
  def locale_query(*args, **_arg1, &block); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#12
  def part_query(*args, **_arg1, &block); end
end

module Rails::Paths; end

class Rails::Paths::Path
  include ::Enumerable

  # source://railties/7.0.4/lib/rails/paths.rb#116
  def initialize(root, current, paths, options = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/paths.rb#168
  def <<(path); end

  # source://railties/7.0.4/lib/rails/paths.rb#129
  def absolute_current; end

  # source://railties/7.0.4/lib/rails/paths.rb#150
  def autoload!; end

  # source://railties/7.0.4/lib/rails/paths.rb#158
  def autoload?; end

  # source://railties/7.0.4/lib/rails/paths.rb#150
  def autoload_once!; end

  # source://railties/7.0.4/lib/rails/paths.rb#158
  def autoload_once?; end

  # source://railties/7.0.4/lib/rails/paths.rb#133
  def children; end

  # source://railties/7.0.4/lib/rails/paths.rb#173
  def concat(paths); end

  # source://railties/7.0.4/lib/rails/paths.rb#164
  def each(&block); end

  # source://railties/7.0.4/lib/rails/paths.rb#150
  def eager_load!; end

  # source://railties/7.0.4/lib/rails/paths.rb#158
  def eager_load?; end

  # source://railties/7.0.4/lib/rails/paths.rb#217
  def existent; end

  # source://railties/7.0.4/lib/rails/paths.rb#228
  def existent_directories; end

  # source://railties/7.0.4/lib/rails/paths.rb#198
  def expanded; end

  # source://railties/7.0.4/lib/rails/paths.rb#193
  def extensions; end

  # source://railties/7.0.4/lib/rails/paths.rb#140
  def first; end

  # source://railties/7.0.4/lib/rails/paths.rb#114
  def glob; end

  # source://railties/7.0.4/lib/rails/paths.rb#114
  def glob=(_arg0); end

  # source://railties/7.0.4/lib/rails/paths.rb#144
  def last; end

  # source://railties/7.0.4/lib/rails/paths.rb#150
  def load_path!; end

  # source://railties/7.0.4/lib/rails/paths.rb#158
  def load_path?; end

  # source://railties/7.0.4/lib/rails/paths.rb#185
  def paths; end

  # source://railties/7.0.4/lib/rails/paths.rb#168
  def push(path); end

  # source://railties/7.0.4/lib/rails/paths.rb#154
  def skip_autoload!; end

  # source://railties/7.0.4/lib/rails/paths.rb#154
  def skip_autoload_once!; end

  # source://railties/7.0.4/lib/rails/paths.rb#154
  def skip_eager_load!; end

  # source://railties/7.0.4/lib/rails/paths.rb#154
  def skip_load_path!; end

  # source://railties/7.0.4/lib/rails/paths.rb#198
  def to_a; end

  # source://railties/7.0.4/lib/rails/paths.rb#181
  def to_ary; end

  # source://railties/7.0.4/lib/rails/paths.rb#177
  def unshift(*paths); end

  private

  # source://railties/7.0.4/lib/rails/paths.rb#235
  def files_in(path); end
end

class Rails::Paths::Root
  # source://railties/7.0.4/lib/rails/paths.rb#51
  def initialize(path); end

  # source://railties/7.0.4/lib/rails/paths.rb#66
  def [](path); end

  # source://railties/7.0.4/lib/rails/paths.rb#56
  def []=(path, value); end

  # source://railties/7.0.4/lib/rails/paths.rb#61
  def add(path, options = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/paths.rb#82
  def all_paths; end

  # source://railties/7.0.4/lib/rails/paths.rb#86
  def autoload_once; end

  # source://railties/7.0.4/lib/rails/paths.rb#94
  def autoload_paths; end

  # source://railties/7.0.4/lib/rails/paths.rb#90
  def eager_load; end

  # source://railties/7.0.4/lib/rails/paths.rb#74
  def keys; end

  # source://railties/7.0.4/lib/rails/paths.rb#98
  def load_paths; end

  # source://railties/7.0.4/lib/rails/paths.rb#49
  def path; end

  # source://railties/7.0.4/lib/rails/paths.rb#49
  def path=(_arg0); end

  # source://railties/7.0.4/lib/rails/paths.rb#70
  def values; end

  # source://railties/7.0.4/lib/rails/paths.rb#78
  def values_at(*list); end

  private

  # source://railties/7.0.4/lib/rails/paths.rb#103
  def filter_by(&block); end
end

module Rails::Rack; end

class Rails::Rack::Logger < ::ActiveSupport::LogSubscriber
  # source://railties/7.0.4/lib/rails/rack/logger.rb#16
  def initialize(app, taggers = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/rack/logger.rb#21
  def call(env); end

  private

  # source://railties/7.0.4/lib/rails/rack/logger.rb#32
  def call_app(request, env); end

  # source://railties/7.0.4/lib/rails/rack/logger.rb#59
  def compute_tags(request); end

  # source://railties/7.0.4/lib/rails/rack/logger.rb#72
  def logger; end

  # source://railties/7.0.4/lib/rails/rack/logger.rb#51
  def started_request_message(request); end
end

class Rails::Railtie
  include ::Rails::Initializable
  extend ::ActiveSupport::DescendantsTracker
  extend ::Rails::Initializable::ClassMethods

  # source://railties/7.0.4/lib/rails/railtie.rb#246
  def initialize; end

  # source://railties/7.0.4/lib/rails/railtie.rb#263
  def config; end

  # source://railties/7.0.4/lib/rails/railtie.rb#256
  def configure(&block); end

  # source://railties/7.0.4/lib/rails/railtie.rb#252
  def inspect; end

  # source://railties/7.0.4/lib/rails/railtie.rb#244
  def railtie_name(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/railtie.rb#267
  def railtie_namespace; end

  protected

  # source://railties/7.0.4/lib/rails/railtie.rb#272
  def run_console_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#276
  def run_generators_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#280
  def run_runner_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#289
  def run_server_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#284
  def run_tasks_blocks(app); end

  private

  # source://railties/7.0.4/lib/rails/railtie.rb#295
  def each_registered_block(type, &block); end

  class << self
    # source://railties/7.0.4/lib/rails/railtie.rb#194
    def <=>(other); end

    # source://railties/7.0.4/lib/rails/railtie.rb#172
    def abstract_railtie?; end

    # source://railties/7.0.4/lib/rails/railtie.rb#146
    def config(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.0.4/lib/rails/railtie.rb#190
    def configure(&block); end

    # source://railties/7.0.4/lib/rails/railtie.rb#156
    def console(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#164
    def generators(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#198
    def inherited(subclass); end

    # source://railties/7.0.4/lib/rails/railtie.rb#183
    def instance; end

    # source://railties/7.0.4/lib/rails/railtie.rb#176
    def railtie_name(name = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/railtie.rb#152
    def rake_tasks(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#160
    def runner(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#168
    def server(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#148
    def subclasses; end

    protected

    # source://railties/7.0.4/lib/rails/railtie.rb#206
    def increment_load_index; end

    # source://railties/7.0.4/lib/rails/railtie.rb#204
    def load_index; end

    private

    # source://railties/7.0.4/lib/rails/railtie.rb#212
    def generate_railtie_name(string); end

    # source://railties/7.0.4/lib/rails/railtie.rb#224
    def method_missing(name, *args, **_arg2, &block); end

    # source://railties/7.0.4/lib/rails/railtie.rb#236
    def register_block_for(type, &blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#216
    def respond_to_missing?(name, _); end
  end
end

# source://railties/7.0.4/lib/rails/railtie.rb#142
Rails::Railtie::ABSTRACT_RAILTIES = T.let(T.unsafe(nil), Array)

class Rails::Railtie::Configuration
  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#8
  def initialize; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#70
  def after_initialize(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#47
  def app_generators; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#39
  def app_middleware; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#54
  def before_configuration(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#60
  def before_eager_load(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#65
  def before_initialize(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#18
  def eager_load_namespaces; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#85
  def respond_to?(name, include_private = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#81
  def to_prepare(&blk); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#75
  def to_prepare_blocks; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#30
  def watchable_dirs; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#23
  def watchable_files; end

  private

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#90
  def method_missing(name, *args, &blk); end

  class << self
    # source://railties/7.0.4/lib/rails/railtie/configuration.rb#13
    def eager_load_namespaces; end
  end
end

class Rails::Secrets
  class << self
    # source://railties/7.0.4/lib/rails/secrets.rb#45
    def decrypt(data); end

    # source://railties/7.0.4/lib/rails/secrets.rb#41
    def encrypt(data); end

    # source://railties/7.0.4/lib/rails/secrets.rb#37
    def key; end

    # source://railties/7.0.4/lib/rails/secrets.rb#24
    def parse(paths, env:); end

    # source://railties/7.0.4/lib/rails/secrets.rb#49
    def read; end

    # source://railties/7.0.4/lib/rails/secrets.rb#58
    def read_for_editing(&block); end

    # source://railties/7.0.4/lib/rails/secrets.rb#22
    def root=(_arg0); end

    # source://railties/7.0.4/lib/rails/secrets.rb#53
    def write(contents); end

    private

    # source://railties/7.0.4/lib/rails/secrets.rb#103
    def encryptor; end

    # source://railties/7.0.4/lib/rails/secrets.rb#63
    def handle_missing_key; end

    # source://railties/7.0.4/lib/rails/secrets.rb#73
    def key_path; end

    # source://railties/7.0.4/lib/rails/secrets.rb#77
    def path; end

    # source://railties/7.0.4/lib/rails/secrets.rb#81
    def preprocess(path); end

    # source://railties/7.0.4/lib/rails/secrets.rb#67
    def read_key_file; end

    # source://railties/7.0.4/lib/rails/secrets.rb#89
    def writing(contents); end
  end
end

class Rails::Secrets::MissingKeyError < ::RuntimeError
  # source://railties/7.0.4/lib/rails/secrets.rb#10
  def initialize; end
end

class Rails::SourceAnnotationExtractor
  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#85
  def initialize(tag); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#137
  def display(results, options = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#125
  def extract_annotations_from(file, pattern); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#91
  def find(dirs); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#99
  def find_in(dir); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#83
  def tag; end

  class << self
    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#76
    def enumerate(tag = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

class Rails::SourceAnnotationExtractor::Annotation < ::Struct
  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#55
  def to_s(options = T.unsafe(nil)); end

  class << self
    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#15
    def directories; end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#35
    def extensions; end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#21
    def register_directories(*dirs); end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#41
    def register_extensions(*exts, &block); end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#31
    def register_tags(*additional_tags); end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#25
    def tags; end
  end
end

module Rails::VERSION; end

# source://railties/7.0.4/lib/rails/gem_version.rb#10
Rails::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://railties/7.0.4/lib/rails/gem_version.rb#11
Rails::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://railties/7.0.4/lib/rails/gem_version.rb#13
Rails::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)

# source://railties/7.0.4/lib/rails/gem_version.rb#15
Rails::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://railties/7.0.4/lib/rails/gem_version.rb#12
Rails::VERSION::TINY = T.let(T.unsafe(nil), Integer)

class Rails::WelcomeController < ::Rails::ApplicationController
  # source://railties/7.0.4/lib/rails/welcome_controller.rb#9
  def index; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end
