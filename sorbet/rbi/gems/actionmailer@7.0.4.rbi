# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `actionmailer` gem.
# Please instead update this file by running `bin/tapioca gem actionmailer`.

module AbstractController::AssetPaths
  extend ::ActiveSupport::Concern
end

class AbstractController::Base
  include ::ActiveSupport::Configurable
  extend ::ActiveSupport::Configurable::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#161
  def action_methods; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def action_name; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def action_name=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#175
  def available_action?(action_name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#156
  def controller_path; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def formats; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def formats=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#194
  def inspect; end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#182
  def performed?; end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#142
  def process(action, *args, **_arg2); end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def response_body; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def response_body=(_arg0); end

  def send_action(*_arg0); end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#246
  def _find_action_name(action_name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#228
  def _handle_action_missing(*args); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#282
  def _valid_action_name?(action_name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#204
  def action_method?(name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#273
  def method_for_action(action_name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#214
  def process_action(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#50
    def abstract; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#55
    def abstract!; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#50
    def abstract?; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#89
    def action_methods; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#107
    def clear_action_methods!; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#121
    def controller_path; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#59
    def inherited(klass); end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#74
    def internal_methods; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#126
    def method_added(name); end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#190
    def supports_path?; end
  end
end

module AbstractController::Caching
  include ::AbstractController::Caching::ConfigMethods
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Autoload
  include GeneratedInstanceMethods
  include ::AbstractController::Caching::Fragments

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Caching::Fragments::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ConfigMethods

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#52
  def view_cache_dependencies; end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#58
  def cache(key, options = T.unsafe(nil), &block); end

  module GeneratedClassMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end

  module GeneratedInstanceMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end
end

module AbstractController::Caching::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#47
  def view_cache_dependency(&dependency); end
end

module AbstractController::Caching::ConfigMethods
  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#13
  def cache_store; end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#17
  def cache_store=(store); end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#22
  def cache_configured?; end
end

module AbstractController::Caching::Fragments
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Caching::Fragments::ClassMethods

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#68
  def combined_fragment_cache_key(key); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#132
  def expire_fragment(key, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#105
  def fragment_exist?(key, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#145
  def instrument_fragment_cache(name, key, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#93
  def read_fragment(key, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#80
  def write_fragment(key, content, options = T.unsafe(nil)); end

  module GeneratedClassMethods
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end

  module GeneratedInstanceMethods
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end
end

module AbstractController::Caching::Fragments::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#57
  def fragment_cache_key(value = T.unsafe(nil), &key); end
end

module AbstractController::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::AbstractController::Callbacks::ClassMethods

  private

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#232
  def process_action(*_arg0, **_arg1, &_arg2); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

class AbstractController::Callbacks::ActionFilter
  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#39
  def initialize(actions); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#43
  def after(controller); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#43
  def around(controller); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#43
  def before(controller); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#43
  def match?(controller); end
end

module AbstractController::Callbacks::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#96
  def _insert_callbacks(callbacks, block = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#77
  def _normalize_callback_option(options, from, to); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#72
  def _normalize_callback_options(options); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def after_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def append_after_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def append_around_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def append_before_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def around_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def before_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#210
  def prepend_after_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#210
  def prepend_around_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#210
  def prepend_before_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#218
  def skip_after_action(*names); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#218
  def skip_around_action(*names); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#218
  def skip_before_action(*names); end
end

module AbstractController::Collector
  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def atom(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def bmp(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def css(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def csv(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def gif(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def gzip(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def html(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def ics(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def jpeg(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def js(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def json(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def m4a(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def mp3(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def mp4(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def mpeg(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def multipart_form(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def ogg(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def otf(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def pdf(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def png(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def rss(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def svg(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def text(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def tiff(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def ttf(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def url_encoded_form(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def vcf(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def vtt(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def webm(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def woff(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def woff2(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def xml(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def yaml(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def zip(*args, **_arg1, &block); end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#26
  def method_missing(symbol, *args, **_arg2, &block); end

  class << self
    # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#7
    def generate_method_for_mime(mime); end
  end
end

module AbstractController::Helpers
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#40
  def _helpers; end

  module GeneratedClassMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end

  module GeneratedInstanceMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end
end

module AbstractController::Helpers::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#56
  def _helpers=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#184
  def _helpers_for_modification; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#158
  def clear_helpers; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#147
  def helper(*args, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#79
  def helper_method(*methods); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#48
  def inherited(klass); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#169
  def modules_for_helpers(modules_or_helper_prefixes); end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#203
  def default_helper_module!; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#192
  def define_helpers_module(klass, helpers = T.unsafe(nil)); end
end

class AbstractController::Helpers::MissingHelperError < ::LoadError
  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#27
  def initialize(error, path); end
end

module AbstractController::Logger
  extend ::ActiveSupport::Concern
  include ::ActiveSupport::Benchmarkable
end

module AbstractController::Rendering
  extend ::ActiveSupport::Concern
  include ::ActionView::ViewPaths

  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#23
  def render(*args, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#51
  def render_to_body(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#45
  def render_to_string(*args, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#55
  def rendered_format; end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#63
  def view_assigns; end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#75
  def _normalize_args(action = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#90
  def _normalize_options(options); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#116
  def _normalize_render(*args, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#100
  def _process_format(format); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#95
  def _process_options(options); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#103
  def _process_variant(options); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#123
  def _protected_ivars; end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#106
  def _set_html_content_type; end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#112
  def _set_rendered_content_type(format); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#109
  def _set_vary_header; end
end

# source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#59
AbstractController::Rendering::DEFAULT_PROTECTED_INSTANCE_VARIABLES = T.let(T.unsafe(nil), Array)

module AbstractController::Translation
  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#33
  def l(object, **options); end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#33
  def localize(object, **options); end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#7
  def raise_on_missing_translations; end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#7
  def raise_on_missing_translations=(val); end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#17
  def t(key, **options); end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#17
  def translate(key, **options); end

  class << self
    # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#7
    def raise_on_missing_translations; end

    # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#7
    def raise_on_missing_translations=(val); end
  end
end

module AbstractController::UrlFor
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionDispatch::Routing::UrlFor

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::UrlFor::ClassMethods

  # source://actionpack/7.0.4/lib/abstract_controller/url_for.rb#14
  def _routes; end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

module AbstractController::UrlFor::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/url_for.rb#20
  def _routes; end

  # source://actionpack/7.0.4/lib/abstract_controller/url_for.rb#24
  def action_methods; end
end

class ActionController::Base < ::ActionController::Metal
  include ::ActionView::ViewPaths
  include ::AbstractController::Rendering
  include ::AbstractController::Translation
  include ::AbstractController::AssetPaths
  include ::AbstractController::Helpers
  include ::ActionController::Helpers
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor
  include ::AbstractController::Logger
  include ::ActiveSupport::Benchmarkable
  include ::ActionController::Redirecting
  include ::ActionView::Rendering
  include ::ActionView::Layouts
  include ::ActionController::Rendering
  include ::ActionController::Renderers
  include ::ActionController::Renderers::All
  include ::ActionController::Head
  include ::ActionController::ConditionalGet
  include ::ActionController::EtagWithTemplateDigest
  include ::ActionController::EtagWithFlash
  include ::ActionController::Caching
  include ::AbstractController::Caching::Fragments
  include ::AbstractController::Caching::ConfigMethods
  include ::AbstractController::Caching
  include ::ActionController::MimeResponds
  include ::ActionController::BasicImplicitRender
  include ::ActionController::ImplicitRender
  include ::ActionController::StrongParameters
  include ::ActionController::ParameterEncoding
  include ::ActionController::Cookies
  include ::ActionController::Flash
  include ::ActionController::FormBuilder
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks
  include ::ActionController::RequestForgeryProtection
  include ::ActionController::ContentSecurityPolicy
  include ::ActionController::PermissionsPolicy
  include ::ActionController::Streaming
  include ::ActionController::DataStreaming
  include ::ActionController::HttpAuthentication::Basic::ControllerMethods
  include ::ActionController::HttpAuthentication::Digest::ControllerMethods
  include ::ActionController::HttpAuthentication::Token::ControllerMethods
  include ::ActionController::DefaultHeaders
  include ::ActionController::Logging
  include ::ActiveSupport::Rescuable
  include ::ActionController::Rescue
  include ::ActionController::Instrumentation
  include ::ActionController::ParamsWrapper
  extend ::ActionView::ViewPaths::ClassMethods
  extend ::AbstractController::Helpers::ClassMethods
  extend ::ActionController::Helpers::ClassMethods
  extend ::AbstractController::UrlFor::ClassMethods
  extend ::ActionView::Rendering::ClassMethods
  extend ::ActionView::Layouts::ClassMethods
  extend ::ActionController::Rendering::ClassMethods
  extend ::ActionController::Renderers::ClassMethods
  extend ::ActionController::ConditionalGet::ClassMethods
  extend ::AbstractController::Caching::Fragments::ClassMethods
  extend ::AbstractController::Caching::ClassMethods
  extend ::AbstractController::Caching::ConfigMethods
  extend ::ActionController::ParameterEncoding::ClassMethods
  extend ::ActionController::Flash::ClassMethods
  extend ::ActionController::FormBuilder::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::AbstractController::Callbacks::ClassMethods
  extend ::ActionController::RequestForgeryProtection::ClassMethods
  extend ::ActionController::ContentSecurityPolicy::ClassMethods
  extend ::ActionController::PermissionsPolicy::ClassMethods
  extend ::ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods
  extend ::ActionController::DefaultHeaders::ClassMethods
  extend ::ActionController::Logging::ClassMethods
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::ActionController::Instrumentation::ClassMethods
  extend ::ActionController::ParamsWrapper::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _process_action_callbacks; end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_process_action_callbacks(&block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies; end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#36
  def alert; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def allow_forgery_protection; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def allow_forgery_protection=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def asset_host; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def asset_host=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def assets_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def assets_dir=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def default_asset_host_protocol; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def default_asset_host_protocol=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def default_protect_from_forgery; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def default_protect_from_forgery=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def default_static_extension; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def default_static_extension=(value); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def enable_fragment_cache_logging; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def enable_fragment_cache_logging=(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest; end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#10
  def flash(*_arg0, **_arg1, &_arg2); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def forgery_protection_origin_check; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def forgery_protection_origin_check=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def forgery_protection_strategy; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def forgery_protection_strategy=(value); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys; end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
  def helpers_path; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
  def helpers_path=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
  def helpers_path?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def javascripts_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def javascripts_dir=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def log_warning_on_csrf_failure; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def log_warning_on_csrf_failure=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def logger; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def logger=(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#36
  def notice; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def per_form_csrf_tokens; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def per_form_csrf_tokens=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def perform_caching; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def perform_caching=(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects; end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects=(val); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def relative_url_root; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def relative_url_root=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def request_forgery_protection_token; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def request_forgery_protection_token=(value); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def stylesheets_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def stylesheets_dir=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def urlsafe_csrf_tokens; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://actionpack/7.0.4/lib/action_controller/base.rb#266
  def _protected_ivars; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#31
    def _default_form_builder; end

    # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#31
    def _default_form_builder=(value); end

    # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#31
    def _default_form_builder?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#8
    def _flash_types; end

    # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#8
    def _flash_types=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#8
    def _flash_types?; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods?; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#15
    def _helpers; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout=(value); end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout?; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions=(value); end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _process_action_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _process_action_callbacks=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers?; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options; end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def allow_forgery_protection; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def allow_forgery_protection=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def asset_host; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def asset_host=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def assets_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def assets_dir=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def default_asset_host_protocol; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def default_asset_host_protocol=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def default_protect_from_forgery; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def default_protect_from_forgery=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def default_static_extension; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def default_static_extension=(value); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def enable_fragment_cache_logging; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def enable_fragment_cache_logging=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest; end

    # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def forgery_protection_origin_check; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def forgery_protection_origin_check=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def forgery_protection_strategy; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def forgery_protection_strategy=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
    def helpers_path; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
    def helpers_path=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
    def helpers_path?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def javascripts_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def javascripts_dir=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def log_warning_on_csrf_failure; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def log_warning_on_csrf_failure=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def logger; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def logger=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def per_form_csrf_tokens; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def per_form_csrf_tokens=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def perform_caching; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def perform_caching=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects; end

    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects=(val); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def relative_url_root; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def relative_url_root=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def request_forgery_protection_token; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def request_forgery_protection_token=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def stylesheets_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def stylesheets_dir=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def urlsafe_csrf_tokens; end

    # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#97
    def urlsafe_csrf_tokens=(urlsafe_csrf_tokens); end

    # source://actionpack/7.0.4/lib/action_controller/base.rb#198
    def without_modules(*modules); end
  end
end

module ActionController::Base::HelperMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#39
  def alert(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#31
  def combined_fragment_cache_key(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#11
  def content_security_policy?(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#12
  def content_security_policy_nonce(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/cookies.rb#8
  def cookies(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#106
  def form_authenticity_token(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#39
  def notice(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#107
  def protect_against_forgery?(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#43
  def view_cache_dependencies(*args, **_arg1, &block); end
end

# source://actionpack/7.0.4/lib/action_controller/base.rb#206
ActionController::Base::MODULES = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.4/lib/action_controller/base.rb#261
ActionController::Base::PROTECTED_IVARS = T.let(T.unsafe(nil), Array)

module ActionController::BasicImplicitRender
  # source://actionpack/7.0.4/lib/action_controller/metal/basic_implicit_render.rb#9
  def default_render; end

  # source://actionpack/7.0.4/lib/action_controller/metal/basic_implicit_render.rb#5
  def send_action(method, *args); end
end

module ActionController::Caching
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Caching::Fragments
  include ::AbstractController::Caching

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Caching::Fragments::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ConfigMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/caching.rb#40
  def instrument_name; end

  # source://actionpack/7.0.4/lib/action_controller/caching.rb#32
  def instrument_payload(key); end

  module GeneratedClassMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end

  module GeneratedInstanceMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end
end

module ActionController::ConditionalGet
  include ::ActionController::Head
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ConditionalGet::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#276
  def expires_in(seconds, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#294
  def expires_now; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#117
  def fresh_when(object = T.unsafe(nil), etag: T.unsafe(nil), weak_etag: T.unsafe(nil), strong_etag: T.unsafe(nil), last_modified: T.unsafe(nil), public: T.unsafe(nil), cache_control: T.unsafe(nil), template: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#306
  def http_cache_forever(public: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#316
  def no_store; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#249
  def stale?(object = T.unsafe(nil), **freshness_kwargs); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#321
  def combine_etags(validator, options); end

  module GeneratedClassMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end

  module GeneratedInstanceMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end
end

module ActionController::ConditionalGet::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#31
  def etag(&etagger); end
end

module ActionController::ContentSecurityPolicy
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Helpers
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::AbstractController::Callbacks::ClassMethods
  mixes_in_class_methods ::ActionController::ContentSecurityPolicy::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#73
  def content_security_policy?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#77
  def content_security_policy_nonce; end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#81
  def current_content_security_policy; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end
end

module ActionController::ContentSecurityPolicy::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#39
  def content_security_policy(enabled = T.unsafe(nil), **options, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#65
  def content_security_policy_report_only(report_only = T.unsafe(nil), **options); end
end

module ActionController::Cookies
  extend ::ActiveSupport::Concern

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/cookies.rb#14
  def cookies; end
end

module ActionController::DataStreaming
  extend ::ActiveSupport::Concern
  include ::ActionController::Rendering

  mixes_in_class_methods ::ActionController::Rendering::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#109
  def send_data(data, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#69
  def send_file(path, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#114
  def send_file_headers!(options); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#15
ActionController::DataStreaming::DEFAULT_SEND_FILE_DISPOSITION = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#14
ActionController::DataStreaming::DEFAULT_SEND_FILE_TYPE = T.let(T.unsafe(nil), String)

module ActionController::DefaultHeaders
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::DefaultHeaders::ClassMethods
end

module ActionController::DefaultHeaders::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/default_headers.rb#10
  def make_response!(request); end
end

module ActionController::EtagWithFlash
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionController::ConditionalGet

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ConditionalGet::ClassMethods

  module GeneratedClassMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end

  module GeneratedInstanceMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end
end

module ActionController::EtagWithTemplateDigest
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionController::ConditionalGet

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ConditionalGet::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#35
  def determine_template_etag(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#51
  def lookup_and_digest_template(template); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#45
  def pick_template_for_etag(options); end

  module GeneratedClassMethods
    def etag_with_template_digest; end
    def etag_with_template_digest=(value); end
    def etag_with_template_digest?; end
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end

  module GeneratedInstanceMethods
    def etag_with_template_digest; end
    def etag_with_template_digest=(value); end
    def etag_with_template_digest?; end
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end
end

module ActionController::Flash
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::Flash::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#51
  def redirect_to(options = T.unsafe(nil), response_options_and_flash = T.unsafe(nil)); end

  module GeneratedClassMethods
    def _flash_types; end
    def _flash_types=(value); end
    def _flash_types?; end
  end

  module GeneratedInstanceMethods; end
end

module ActionController::Flash::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#45
  def action_methods; end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#32
  def add_flash_types(*types); end
end

module ActionController::FormBuilder
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::FormBuilder::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#46
  def default_form_builder; end

  module GeneratedClassMethods
    def _default_form_builder; end
    def _default_form_builder=(value); end
    def _default_form_builder?; end
  end

  module GeneratedInstanceMethods; end
end

module ActionController::FormBuilder::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#40
  def default_form_builder(builder); end
end

module ActionController::Head
  # source://actionpack/7.0.4/lib/action_controller/metal/head.rb#21
  def head(status, options = T.unsafe(nil)); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/head.rb#52
  def include_content?(status); end
end

module ActionController::Helpers
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Helpers

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods
  mixes_in_class_methods ::ActionController::Helpers::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#128
  def helpers; end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#59
    def helpers_path; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#59
    def helpers_path=(_arg0); end
  end

  module GeneratedClassMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
    def helpers_path; end
    def helpers_path=(value); end
    def helpers_path?; end
    def include_all_helpers; end
    def include_all_helpers=(value); end
    def include_all_helpers?; end
  end

  module GeneratedInstanceMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
    def helpers_path; end
    def helpers_path=(value); end
    def helpers_path?; end
    def include_all_helpers; end
    def include_all_helpers=(value); end
    def include_all_helpers?; end
  end
end

module ActionController::Helpers::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#111
  def all_helpers_from_path(path); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#76
  def helper_attr(*attrs); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#86
  def helpers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#102
  def modules_for_helpers(args); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#122
  def all_application_helpers; end
end

module ActionController::HttpAuthentication::Basic::ControllerMethods
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#92
  def authenticate_or_request_with_http_basic(realm = T.unsafe(nil), message = T.unsafe(nil), &login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#96
  def authenticate_with_http_basic(&login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#83
  def http_basic_authenticate_or_request_with(name:, password:, realm: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#100
  def request_http_basic_authentication(realm = T.unsafe(nil), message = T.unsafe(nil)); end
end

module ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#76
  def http_basic_authenticate_with(name:, password:, realm: T.unsafe(nil), **options); end
end

module ActionController::HttpAuthentication::Digest::ControllerMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#193
  def authenticate_or_request_with_http_digest(realm = T.unsafe(nil), message = T.unsafe(nil), &password_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#199
  def authenticate_with_http_digest(realm = T.unsafe(nil), &password_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#205
  def request_http_digest_authentication(realm = T.unsafe(nil), message = T.unsafe(nil)); end
end

module ActionController::HttpAuthentication::Token::ControllerMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#430
  def authenticate_or_request_with_http_token(realm = T.unsafe(nil), message = T.unsafe(nil), &login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#436
  def authenticate_with_http_token(&login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#442
  def request_http_token_authentication(realm = T.unsafe(nil), message = T.unsafe(nil)); end
end

module ActionController::ImplicitRender
  include ::ActionController::BasicImplicitRender

  # source://actionpack/7.0.4/lib/action_controller/metal/implicit_render.rb#33
  def default_render; end

  # source://actionpack/7.0.4/lib/action_controller/metal/implicit_render.rb#52
  def method_for_action(action_name); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/implicit_render.rb#59
  def interactive_browser_request?; end
end

module ActionController::Instrumentation
  extend ::ActiveSupport::Concern
  include ::ActiveSupport::Benchmarkable
  include ::AbstractController::Logger

  mixes_in_class_methods ::ActionController::Instrumentation::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#40
  def redirect_to(*_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#19
  def render(*_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#34
  def send_data(data, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#27
  def send_file(path, options = T.unsafe(nil)); end

  def view_runtime; end
  def view_runtime=(_arg0); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#96
  def append_info_to_payload(payload); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#90
  def cleanup_view_runtime; end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#80
  def halted_callback_hook(filter, _); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#50
  def process_action(*_arg0); end
end

module ActionController::Instrumentation::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#104
  def log_process_action(payload); end
end

module ActionController::Logging
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::Logging::ClassMethods
end

module ActionController::Logging::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/logging.rb#15
  def log_at(level, **options); end
end

class ActionController::Metal < ::AbstractController::Base
  # source://actionpack/7.0.4/lib/action_controller/metal.rb#150
  def initialize; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def content_type(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def content_type=(arg); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#141
  def controller_name; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#185
  def dispatch(name, request, response); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def headers(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def location(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def location=(arg); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def media_type(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
  def middleware_stack; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
  def middleware_stack=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
  def middleware_stack?; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#157
  def params; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#161
  def params=(val); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#181
  def performed?; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def request; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def request=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#206
  def reset_session; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def response; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def response=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#172
  def response_body=(body); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def response_code(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#146
  def session(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#197
  def set_request!(request); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#193
  def set_response!(response); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def status(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def status=(arg); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#202
  def to_a; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#168
  def url_for(string); end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal.rb#231
    def action(name); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#136
    def action_encoding_template(action); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#126
    def controller_name; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#247
    def dispatch(name, req, res); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#212
    def inherited(base); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#130
    def make_response!(request); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#226
    def middleware; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack?; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#220
    def use(*_arg0, **_arg1, &_arg2); end
  end
end

module ActionController::MimeResponds
  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#201
  def respond_to(*mimes); end
end

class ActionController::MimeResponds::Collector
  include ::AbstractController::Collector

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#246
  def initialize(mimes, variant = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#253
  def all(*args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#253
  def any(*args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#271
  def any_response?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#262
  def custom(mime_type, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#244
  def format; end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#244
  def format=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#288
  def negotiate_format(request); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#275
  def response; end
end

class ActionController::MimeResponds::Collector::VariantCollector
  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#293
  def initialize(variant = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#298
  def all(*args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#298
  def any(*args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#309
  def method_missing(name, *args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#313
  def variant; end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#322
  def variant_key; end
end

module ActionController::ParameterEncoding
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::ParameterEncoding::ClassMethods
end

module ActionController::ParameterEncoding::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#18
  def action_encoding_template(action); end

  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#9
  def inherited(klass); end

  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#77
  def param_encoding(action, param, encoding); end

  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#14
  def setup_param_encode; end

  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#48
  def skip_parameter_encoding(action); end
end

module ActionController::ParamsWrapper
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ParamsWrapper::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#277
  def _extract_parameters(parameters); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#299
  def _perform_parameter_wrapping; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#273
  def _wrap_parameters(parameters); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#289
  def _wrapper_enabled?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#268
  def _wrapper_formats; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#263
  def _wrapper_key; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#257
  def process_action(*_arg0); end

  module GeneratedClassMethods
    def _wrapper_options; end
    def _wrapper_options=(value); end
    def _wrapper_options?; end
  end

  module GeneratedInstanceMethods
    def _wrapper_options; end
    def _wrapper_options=(value); end
    def _wrapper_options?; end
  end
end

module ActionController::ParamsWrapper::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#189
  def _set_wrapper_options(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#244
  def inherited(klass); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#220
  def wrap_parameters(name_or_model_or_options, options = T.unsafe(nil)); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#83
ActionController::ParamsWrapper::EXCLUDE_PARAMETERS = T.let(T.unsafe(nil), Array)

class ActionController::ParamsWrapper::Options < ::Struct
  include ::Mutex_m

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#98
  def initialize(name, format, include, exclude, klass, model); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#108
  def include; end

  # source://mutex_m/0.1.1/mutex_m.rb#93
  def lock; end

  # source://mutex_m/0.1.1/mutex_m.rb#83
  def locked?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#104
  def model; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#141
  def name; end

  # source://mutex_m/0.1.1/mutex_m.rb#78
  def synchronize(&block); end

  # source://mutex_m/0.1.1/mutex_m.rb#88
  def try_lock; end

  # source://mutex_m/0.1.1/mutex_m.rb#98
  def unlock; end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#165
  def _default_wrap_model; end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#90
    def from_hash(hash); end
  end
end

module ActionController::PermissionsPolicy
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::PermissionsPolicy::ClassMethods
end

module ActionController::PermissionsPolicy::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/permissions_policy.rb#26
  def permissions_policy(**options, &block); end
end

module ActionController::Redirecting
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Benchmarkable
  include ::AbstractController::Logger
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::UrlFor::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#130
  def _compute_redirect_to_location(request, options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#95
  def redirect_back(fallback_location:, allow_other_host: T.unsafe(nil), **args); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#121
  def redirect_back_or_to(fallback_location, allow_other_host: T.unsafe(nil), **options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#82
  def redirect_to(options = T.unsafe(nil), response_options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#169
  def url_from(location); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#175
  def _allow_other_host; end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#189
  def _enforce_open_redirect_protection(location, allow_other_host:); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#179
  def _extract_redirect_to_status(options, response_options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#197
  def _url_host_allowed?(url); end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#130
    def _compute_redirect_to_location(request, options); end
  end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

class ActionController::Redirecting::UnsafeRedirectError < ::StandardError; end

module ActionController::Renderers
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::Renderers::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#144
  def _render_to_body_with_renderer(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#170
  def _render_with_renderer_js(js, options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#155
  def _render_with_renderer_json(json, options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#175
  def _render_with_renderer_xml(xml, options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#140
  def render_to_body(options); end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#90
    def _render_with_renderer_method_name(key); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#74
    def add(key, &block); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#84
    def remove(key); end
  end

  module GeneratedClassMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end

  module GeneratedInstanceMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end
end

module ActionController::Renderers::All
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionController::Renderers

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::Renderers::ClassMethods

  module GeneratedClassMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end

  module GeneratedInstanceMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end
end

module ActionController::Renderers::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#128
  def use_renderer(*args); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#128
  def use_renderers(*args); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#28
ActionController::Renderers::RENDERERS = T.let(T.unsafe(nil), Set)

module ActionController::Rendering
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::Rendering::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#28
  def render(*args); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#45
  def render_to_body(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#34
  def render_to_string(*_arg0); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#87
  def _normalize_args(action = T.unsafe(nil), options = T.unsafe(nil), &blk); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#94
  def _normalize_options(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#108
  def _normalize_text(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#117
  def _process_options(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#56
  def _process_variant(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#62
  def _render_in_priorities(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#70
  def _set_html_content_type; end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#74
  def _set_rendered_content_type(format); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#80
  def _set_vary_header; end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#51
  def process_action(*_arg0); end
end

module ActionController::Rendering::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#21
  def inherited(klass); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#11
  def render(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#15
  def renderer; end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#17
  def setup_renderer!; end
end

# source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#7
ActionController::Rendering::RENDER_FORMATS_IN_PRIORITY = T.let(T.unsafe(nil), Array)

module ActionController::RequestForgeryProtection
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Helpers
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::AbstractController::Callbacks::ClassMethods
  mixes_in_class_methods ::ActionController::RequestForgeryProtection::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#344
  def any_authenticity_token_valid?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#430
  def compare_with_global_token(token, session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#426
  def compare_with_real_token(token, session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#464
  def csrf_token_hmac(session, identifier); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#535
  def decode_csrf_token(encoded_csrf_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#527
  def encode_csrf_token(csrf_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#484
  def form_authenticity_param; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#356
  def form_authenticity_token(form_options: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#519
  def generate_csrf_token; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#460
  def global_csrf_token(session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#277
  def handle_unverified_request; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#316
  def mark_for_same_origin_verification!; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#322
  def marked_for_same_origin_verification?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#419
  def mask_token(raw_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#363
  def masked_authenticity_token(session, form_options: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#327
  def non_xhr_javascript_response?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#514
  def normalize_action_path(action_path); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#453
  def per_form_csrf_token(session, action_path, method); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#489
  def protect_against_forgery?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#448
  def real_csrf_token(session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#351
  def request_authenticity_tokens; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#411
  def unmask_token(masked_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#287
  def unverified_request_warning_message; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#379
  def valid_authenticity_token?(session, encoded_masked_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#434
  def valid_per_form_csrf_token?(token, session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#504
  def valid_request_origin?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#338
  def verified_request?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#267
  def verify_authenticity_token; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#306
  def verify_same_origin_request; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#472
  def xor_byte_strings(s1, s2); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end
end

# source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#331
ActionController::RequestForgeryProtection::AUTHENTICITY_TOKEN_LENGTH = T.let(T.unsafe(nil), Integer)

module ActionController::RequestForgeryProtection::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#156
  def protect_from_forgery(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#170
  def skip_forgery_protection(options = T.unsafe(nil)); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#175
  def protection_method_class(name); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#493
ActionController::RequestForgeryProtection::NULL_ORIGIN_MESSAGE = T.let(T.unsafe(nil), String)

module ActionController::RequestForgeryProtection::ProtectionMethods; end

class ActionController::RequestForgeryProtection::ProtectionMethods::Exception
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#246
  def initialize(controller); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#250
  def handle_unverified_request; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#244
  def warning_message; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#244
  def warning_message=(_arg0); end
end

class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#193
  def initialize(controller); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#198
  def handle_unverified_request; end
end

class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession::NullCookieJar < ::ActionDispatch::Cookies::CookieJar
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#227
  def write(*_arg0); end
end

class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession::NullSessionHash < ::Rack::Session::Abstract::SessionHash
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#208
  def initialize(req); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#215
  def destroy; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#221
  def enabled?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#217
  def exists?; end
end

class ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#234
  def initialize(controller); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#238
  def handle_unverified_request; end
end

module ActionController::Rescue
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Rescuable

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/rescue.rb#16
  def show_detailed_exceptions?; end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/rescue.rb#21
  def process_action(*_arg0); end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

module ActionController::Streaming
  private

  # source://actionpack/7.0.4/lib/action_controller/metal/streaming.rb#198
  def _process_options(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/streaming.rb#212
  def _render_template(options); end
end

module ActionController::StrongParameters
  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1224
  def params; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1239
  def params=(value); end
end

module ActionController::UrlFor
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::UrlFor::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/url_for.rb#30
  def url_options; end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

module ActionDispatch::Cookies::ChainedCookieJars
  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#252
  def encrypted; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#218
  def permanent; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#234
  def signed; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#258
  def signed_or_encrypted; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#281
  def encrypted_cookie_cipher; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#275
  def prepare_upgrade_legacy_hmac_aes_cbc_cookies?; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#285
  def signed_cookie_digest; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#268
  def upgrade_legacy_hmac_aes_cbc_cookies?; end
end

class ActionDispatch::Cookies::CookieJar
  include ::ActionDispatch::Cookies::ChainedCookieJars
  include ::Enumerable

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#315
  def initialize(request); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#336
  def [](name); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#370
  def []=(name, options); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#424
  def always_write_cookie; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#424
  def always_write_cookie=(val); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#414
  def clear(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#325
  def commit!; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#323
  def committed?; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#393
  def delete(name, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#407
  def deleted?(name, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#331
  def each(&block); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#340
  def fetch(name, *args, &block); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#344
  def has_key?(name); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#344
  def key?(name); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#313
  def request; end

  def to_hash(*_arg0); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#364
  def to_header; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#352
  def update(other_hash); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#357
  def update_cookies_from_jar; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#418
  def write(headers); end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#427
  def escape(string); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#448
  def handle_options(options); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#431
  def make_set_cookie_header(header); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#444
  def write_cookie?(cookie); end

  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#424
    def always_write_cookie; end

    # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#424
    def always_write_cookie=(val); end

    # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#307
    def build(req, cookies); end
  end
end

# source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#305
ActionDispatch::Cookies::CookieJar::DOMAIN_REGEXP = T.let(T.unsafe(nil), Regexp)

module ActionDispatch::Routing::PolymorphicRoutes
  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#153
  def edit_polymorphic_path(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#149
  def edit_polymorphic_url(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#153
  def new_polymorphic_path(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#149
  def new_polymorphic_url(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#124
  def polymorphic_path(record_or_hash_or_array, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#101
  def polymorphic_url(record_or_hash_or_array, options = T.unsafe(nil)); end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#168
  def polymorphic_mapping(record); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#164
  def polymorphic_path_for_action(action, record_or_hash, options); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#160
  def polymorphic_url_for_action(action, record_or_hash, options); end
end

class ActionDispatch::Routing::PolymorphicRoutes::HelperMethodBuilder
  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#239
  def initialize(key_strategy, prefix, suffix); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#253
  def handle_class(klass); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#257
  def handle_class_call(target, klass); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#284
  def handle_list(list); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#261
  def handle_model(record); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#275
  def handle_model_call(target, record); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#245
  def handle_string(record); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#249
  def handle_string_call(target, str); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#237
  def prefix; end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#237
  def suffix; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#338
  def get_method_for_class(klass); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#343
  def get_method_for_string(str); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#330
  def polymorphic_mapping(target, record); end

  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#187
    def build(action, type); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#179
    def get(action, type); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#185
    def path; end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#201
    def plural(prefix, suffix); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#205
    def polymorphic_method(recipient, record_or_hash_or_array, action, type, options); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#197
    def singular(prefix, suffix); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#184
    def url; end
  end
end

# source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#177
ActionDispatch::Routing::PolymorphicRoutes::HelperMethodBuilder::CACHE = T.let(T.unsafe(nil), Hash)

module ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#106
  def initialize(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#173
  def full_url_for(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#213
  def route_for(name, *args); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#169
  def url_for(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#114
  def url_options; end

  protected

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#218
  def optimize_routes_generation?; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#230
  def _routes_context; end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#223
  def _with_routes(routes); end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

module ActionMailer
  extend ::ActiveSupport::Autoload

  class << self
    # source://actionmailer//lib/action_mailer.rb#56
    def eager_load!; end

    # Returns the currently loaded version of Action Mailer as a <tt>Gem::Version</tt>.
    #
    # source://actionmailer//lib/action_mailer/gem_version.rb#5
    def gem_version; end

    # Returns the currently loaded version of Action Mailer as a
    # <tt>Gem::Version</tt>.
    #
    # source://actionmailer//lib/action_mailer/version.rb#8
    def version; end
  end
end

# Action Mailer allows you to send email from your application using a mailer model and views.
#
# = Mailer Models
#
# To use Action Mailer, you need to create a mailer model.
#
#   $ bin/rails generate mailer Notifier
#
# The generated model inherits from <tt>ApplicationMailer</tt> which in turn
# inherits from <tt>ActionMailer::Base</tt>. A mailer model defines methods
# used to generate an email message. In these methods, you can set up variables to be used in
# the mailer views, options on the mail itself such as the <tt>:from</tt> address, and attachments.
#
#   class ApplicationMailer < ActionMailer::Base
#     default from: 'from@example.com'
#     layout 'mailer'
#   end
#
#   class NotifierMailer < ApplicationMailer
#     default from: 'no-reply@example.com',
#             return_path: 'system@example.com'
#
#     def welcome(recipient)
#       @account = recipient
#       mail(to: recipient.email_address_with_name,
#            bcc: ["bcc@example.com", "Order Watcher <watcher@example.com>"])
#     end
#   end
#
# Within the mailer method, you have access to the following methods:
#
# * <tt>attachments[]=</tt> - Allows you to add attachments to your email in an intuitive
#   manner; <tt>attachments['filename.png'] = File.read('path/to/filename.png')</tt>
#
# * <tt>attachments.inline[]=</tt> - Allows you to add an inline attachment to your email
#   in the same manner as <tt>attachments[]=</tt>
#
# * <tt>headers[]=</tt> - Allows you to specify any header field in your email such
#   as <tt>headers['X-No-Spam'] = 'True'</tt>. Note that declaring a header multiple times
#   will add many fields of the same name. Read #headers doc for more information.
#
# * <tt>headers(hash)</tt> - Allows you to specify multiple headers in your email such
#   as <tt>headers({'X-No-Spam' => 'True', 'In-Reply-To' => '1234@message.id'})</tt>
#
# * <tt>mail</tt> - Allows you to specify email to be sent.
#
# The hash passed to the mail method allows you to specify any header that a <tt>Mail::Message</tt>
# will accept (any valid email header including optional fields).
#
# The +mail+ method, if not passed a block, will inspect your views and send all the views with
# the same name as the method, so the above action would send the +welcome.text.erb+ view
# file as well as the +welcome.html.erb+ view file in a +multipart/alternative+ email.
#
# If you want to explicitly render only certain templates, pass a block:
#
#   mail(to: user.email) do |format|
#     format.text
#     format.html
#   end
#
# The block syntax is also useful in providing information specific to a part:
#
#   mail(to: user.email) do |format|
#     format.html
#   end
#
# Or even to render a special view:
#
#   mail(to: user.email) do |format|
#     format.text
#     format.html { render "some_other_template" }
#   end
#
# = Mailer views
#
# Like Action Controller, each mailer class has a corresponding view directory in which each
# method of the class looks for a template with its name.
#
# To define a template to be used with a mailer, create an <tt>.erb</tt> file with the same
# name as the method in your mailer model. For example, in the mailer defined above, the template at
# <tt>app/views/notifier_mailer/welcome.text.erb</tt> would be used to generate the email.
#
# Variables defined in the methods of your mailer model are accessible as instance variables in their
# corresponding view.
#
# Emails by default are sent in plain text, so a sample view for our model example might look like this:
#
#   Hi <%= @account.name %>,
#   Thanks for joining our service! Please check back often.
#
# You can even use Action View helpers in these views. For example:
#
#   You got a new note!
#   <%= truncate(@note.body, length: 25) %>
#
# If you need to access the subject, from, or the recipients in the view, you can do that through message object:
#
#   You got a new note from <%= message.from %>!
#   <%= truncate(@note.body, length: 25) %>
#
#
# = Generating URLs
#
# URLs can be generated in mailer views using <tt>url_for</tt> or named routes. Unlike controllers from
# Action Pack, the mailer instance doesn't have any context about the incoming request, so you'll need
# to provide all of the details needed to generate a URL.
#
# When using <tt>url_for</tt> you'll need to provide the <tt>:host</tt>, <tt>:controller</tt>, and <tt>:action</tt>:
#
#   <%= url_for(host: "example.com", controller: "welcome", action: "greeting") %>
#
# When using named routes you only need to supply the <tt>:host</tt>:
#
#   <%= users_url(host: "example.com") %>
#
# You should use the <tt>named_route_url</tt> style (which generates absolute URLs) and avoid using the
# <tt>named_route_path</tt> style (which generates relative URLs), since clients reading the mail will
# have no concept of a current URL from which to determine a relative path.
#
# It is also possible to set a default host that will be used in all mailers by setting the <tt>:host</tt>
# option as a configuration option in <tt>config/application.rb</tt>:
#
#   config.action_mailer.default_url_options = { host: "example.com" }
#
# You can also define a <tt>default_url_options</tt> method on individual mailers to override these
# default settings per-mailer.
#
# By default when <tt>config.force_ssl</tt> is +true+, URLs generated for hosts will use the HTTPS protocol.
#
# = Sending mail
#
# Once a mailer action and template are defined, you can deliver your message or defer its creation and
# delivery for later:
#
#   NotifierMailer.welcome(User.first).deliver_now # sends the email
#   mail = NotifierMailer.welcome(User.first)      # => an ActionMailer::MessageDelivery object
#   mail.deliver_now                               # generates and sends the email now
#
# The ActionMailer::MessageDelivery class is a wrapper around a delegate that will call
# your method to generate the mail. If you want direct access to the delegator, or <tt>Mail::Message</tt>,
# you can call the <tt>message</tt> method on the ActionMailer::MessageDelivery object.
#
#   NotifierMailer.welcome(User.first).message     # => a Mail::Message object
#
# Action Mailer is nicely integrated with Active Job so you can generate and send emails in the background
# (example: outside of the request-response cycle, so the user doesn't have to wait on it):
#
#   NotifierMailer.welcome(User.first).deliver_later # enqueue the email sending to Active Job
#
# Note that <tt>deliver_later</tt> will execute your method from the background job.
#
# You never instantiate your mailer class. Rather, you just call the method you defined on the class itself.
# All instance methods are expected to return a message object to be sent.
#
# = Multipart Emails
#
# Multipart messages can also be used implicitly because Action Mailer will automatically detect and use
# multipart templates, where each template is named after the name of the action, followed by the content
# type. Each such detected template will be added to the message, as a separate part.
#
# For example, if the following templates exist:
# * signup_notification.text.erb
# * signup_notification.html.erb
# * signup_notification.xml.builder
# * signup_notification.yml.erb
#
# Each would be rendered and added as a separate part to the message, with the corresponding content
# type. The content type for the entire message is automatically set to <tt>multipart/alternative</tt>,
# which indicates that the email contains multiple different representations of the same email
# body. The same instance variables defined in the action are passed to all email templates.
#
# Implicit template rendering is not performed if any attachments or parts have been added to the email.
# This means that you'll have to manually add each part to the email and set the content type of the email
# to <tt>multipart/alternative</tt>.
#
# = Attachments
#
# Sending attachment in emails is easy:
#
#   class NotifierMailer < ApplicationMailer
#     def welcome(recipient)
#       attachments['free_book.pdf'] = File.read('path/to/file.pdf')
#       mail(to: recipient, subject: "New account information")
#     end
#   end
#
# Which will (if it had both a <tt>welcome.text.erb</tt> and <tt>welcome.html.erb</tt>
# template in the view directory), send a complete <tt>multipart/mixed</tt> email with two parts,
# the first part being a <tt>multipart/alternative</tt> with the text and HTML email parts inside,
# and the second being a <tt>application/pdf</tt> with a Base64 encoded copy of the file.pdf book
# with the filename +free_book.pdf+.
#
# If you need to send attachments with no content, you need to create an empty view for it,
# or add an empty body parameter like this:
#
#     class NotifierMailer < ApplicationMailer
#       def welcome(recipient)
#         attachments['free_book.pdf'] = File.read('path/to/file.pdf')
#         mail(to: recipient, subject: "New account information", body: "")
#       end
#     end
#
# You can also send attachments with html template, in this case you need to add body, attachments,
# and custom content type like this:
#
#     class NotifierMailer < ApplicationMailer
#       def welcome(recipient)
#         attachments["free_book.pdf"] = File.read("path/to/file.pdf")
#         mail(to: recipient,
#              subject: "New account information",
#              content_type: "text/html",
#              body: "<html><body>Hello there</body></html>")
#       end
#     end
#
# = Inline Attachments
#
# You can also specify that a file should be displayed inline with other HTML. This is useful
# if you want to display a corporate logo or a photo.
#
#   class NotifierMailer < ApplicationMailer
#     def welcome(recipient)
#       attachments.inline['photo.png'] = File.read('path/to/photo.png')
#       mail(to: recipient, subject: "Here is what we look like")
#     end
#   end
#
# And then to reference the image in the view, you create a <tt>welcome.html.erb</tt> file and
# make a call to +image_tag+ passing in the attachment you want to display and then call
# +url+ on the attachment to get the relative content id path for the image source:
#
#   <h1>Please Don't Cringe</h1>
#
#   <%= image_tag attachments['photo.png'].url -%>
#
# As we are using Action View's +image_tag+ method, you can pass in any other options you want:
#
#   <h1>Please Don't Cringe</h1>
#
#   <%= image_tag attachments['photo.png'].url, alt: 'Our Photo', class: 'photo' -%>
#
# = Observing and Intercepting Mails
#
# Action Mailer provides hooks into the Mail observer and interceptor methods. These allow you to
# register classes that are called during the mail delivery life cycle.
#
# An observer class must implement the <tt>:delivered_email(message)</tt> method which will be
# called once for every email sent after the email has been sent.
#
# An interceptor class must implement the <tt>:delivering_email(message)</tt> method which will be
# called before the email is sent, allowing you to make modifications to the email before it hits
# the delivery agents. Your class should make any needed modifications directly to the passed
# in <tt>Mail::Message</tt> instance.
#
# = Default Hash
#
# Action Mailer provides some intelligent defaults for your emails, these are usually specified in a
# default method inside the class definition:
#
#   class NotifierMailer < ApplicationMailer
#     default sender: 'system@example.com'
#   end
#
# You can pass in any header value that a <tt>Mail::Message</tt> accepts. Out of the box,
# <tt>ActionMailer::Base</tt> sets the following:
#
# * <tt>mime_version: "1.0"</tt>
# * <tt>charset:      "UTF-8"</tt>
# * <tt>content_type: "text/plain"</tt>
# * <tt>parts_order:  [ "text/plain", "text/enriched", "text/html" ]</tt>
#
# <tt>parts_order</tt> and <tt>charset</tt> are not actually valid <tt>Mail::Message</tt> header fields,
# but Action Mailer translates them appropriately and sets the correct values.
#
# As you can pass in any header, you need to either quote the header as a string, or pass it in as
# an underscored symbol, so the following will work:
#
#   class NotifierMailer < ApplicationMailer
#     default 'Content-Transfer-Encoding' => '7bit',
#             content_description: 'This is a description'
#   end
#
# Finally, Action Mailer also supports passing <tt>Proc</tt> and <tt>Lambda</tt> objects into the default hash,
# so you can define methods that evaluate as the message is being generated:
#
#   class NotifierMailer < ApplicationMailer
#     default 'X-Special-Header' => Proc.new { my_method }, to: -> { @inviter.email_address }
#
#     private
#       def my_method
#         'some complex call'
#       end
#   end
#
# Note that the proc/lambda is evaluated right at the start of the mail message generation, so if you
# set something in the default hash using a proc, and then set the same thing inside of your
# mailer method, it will get overwritten by the mailer method.
#
# It is also possible to set these default options that will be used in all mailers through
# the <tt>default_options=</tt> configuration in <tt>config/application.rb</tt>:
#
#    config.action_mailer.default_options = { from: "no-reply@example.org" }
#
# = Callbacks
#
# You can specify callbacks using <tt>before_action</tt> and <tt>after_action</tt> for configuring your messages.
# This may be useful, for example, when you want to add default inline attachments for all
# messages sent out by a certain mailer class:
#
#   class NotifierMailer < ApplicationMailer
#     before_action :add_inline_attachment!
#
#     def welcome
#       mail
#     end
#
#     private
#       def add_inline_attachment!
#         attachments.inline["footer.jpg"] = File.read('/path/to/filename.jpg')
#       end
#   end
#
# Callbacks in Action Mailer are implemented using
# AbstractController::Callbacks, so you can define and configure
# callbacks in the same manner that you would use callbacks in classes that
# inherit from ActionController::Base.
#
# Note that unless you have a specific reason to do so, you should prefer
# using <tt>before_action</tt> rather than <tt>after_action</tt> in your
# Action Mailer classes so that headers are parsed properly.
#
# = Rescuing Errors
#
# +rescue+ blocks inside of a mailer method cannot rescue errors that occur
# outside of rendering -- for example, record deserialization errors in a
# background job, or errors from a third-party mail delivery service.
#
# To rescue errors that occur during any part of the mailing process, use
# {rescue_from}[rdoc-ref:ActiveSupport::Rescuable::ClassMethods#rescue_from]:
#
#   class NotifierMailer < ApplicationMailer
#     rescue_from ActiveJob::DeserializationError do
#       # ...
#     end
#
#     rescue_from "SomeThirdPartyService::ApiError" do
#       # ...
#     end
#
#     def notify(recipient)
#       mail(to: recipient, subject: "Notification")
#     end
#   end
#
# = Previewing emails
#
# You can preview your email templates visually by adding a mailer preview file to the
# <tt>ActionMailer::Base.preview_path</tt>. Since most emails do something interesting
# with database data, you'll need to write some scenarios to load messages with fake data:
#
#   class NotifierMailerPreview < ActionMailer::Preview
#     def welcome
#       NotifierMailer.welcome(User.first)
#     end
#   end
#
# Methods must return a <tt>Mail::Message</tt> object which can be generated by calling the mailer
# method without the additional <tt>deliver_now</tt> / <tt>deliver_later</tt>. The location of the
# mailer previews directory can be configured using the <tt>preview_path</tt> option which has a default
# of <tt>test/mailers/previews</tt>:
#
#   config.action_mailer.preview_path = "#{Rails.root}/lib/mailer_previews"
#
# An overview of all previews is accessible at <tt>http://localhost:3000/rails/mailers</tt>
# on a running development server instance.
#
# Previews can also be intercepted in a similar manner as deliveries can be by registering
# a preview interceptor that has a <tt>previewing_email</tt> method:
#
#   class CssInlineStyler
#     def self.previewing_email(message)
#       # inline CSS styles
#     end
#   end
#
#   config.action_mailer.preview_interceptors :css_inline_styler
#
# Note that interceptors need to be registered both with <tt>register_interceptor</tt>
# and <tt>register_preview_interceptor</tt> if they should operate on both sending and
# previewing emails.
#
# = Configuration options
#
# These options are specified on the class level, like
# <tt>ActionMailer::Base.raise_delivery_errors = true</tt>
#
# * <tt>default_options</tt> - You can pass this in at a class level as well as within the class itself as
#   per the above section.
#
# * <tt>logger</tt> - the logger is used for generating information on the mailing run if available.
#   Can be set to +nil+ for no logging. Compatible with both Ruby's own +Logger+ and Log4r loggers.
#
# * <tt>smtp_settings</tt> - Allows detailed configuration for <tt>:smtp</tt> delivery method:
#   * <tt>:address</tt> - Allows you to use a remote mail server. Just change it from its default
#     "localhost" setting.
#   * <tt>:port</tt> - On the off chance that your mail server doesn't run on port 25, you can change it.
#   * <tt>:domain</tt> - If you need to specify a HELO domain, you can do it here.
#   * <tt>:user_name</tt> - If your mail server requires authentication, set the username in this setting.
#   * <tt>:password</tt> - If your mail server requires authentication, set the password in this setting.
#   * <tt>:authentication</tt> - If your mail server requires authentication, you need to specify the
#     authentication type here.
#     This is a symbol and one of <tt>:plain</tt> (will send the password Base64 encoded), <tt>:login</tt> (will
#     send the password Base64 encoded) or <tt>:cram_md5</tt> (combines a Challenge/Response mechanism to exchange
#     information and a cryptographic Message Digest 5 algorithm to hash important information)
#   * <tt>:enable_starttls</tt> - Use STARTTLS when connecting to your SMTP server and fail if unsupported. Defaults to <tt>false</tt>.
#   * <tt>:enable_starttls_auto</tt> - Detects if STARTTLS is enabled in your SMTP server and starts
#     to use it. Defaults to <tt>true</tt>.
#   * <tt>:openssl_verify_mode</tt> - When using TLS, you can set how OpenSSL checks the certificate. This is
#     really useful if you need to validate a self-signed and/or a wildcard certificate. You can use the name
#     of an OpenSSL verify constant (<tt>'none'</tt> or <tt>'peer'</tt>) or directly the constant
#     (<tt>OpenSSL::SSL::VERIFY_NONE</tt> or <tt>OpenSSL::SSL::VERIFY_PEER</tt>).
#   * <tt>:ssl/:tls</tt> Enables the SMTP connection to use SMTP/TLS (SMTPS: SMTP over direct TLS connection)
#   * <tt>:open_timeout</tt> Number of seconds to wait while attempting to open a connection.
#   * <tt>:read_timeout</tt> Number of seconds to wait until timing-out a read(2) call.
#
# * <tt>sendmail_settings</tt> - Allows you to override options for the <tt>:sendmail</tt> delivery method.
#   * <tt>:location</tt> - The location of the sendmail executable. Defaults to <tt>/usr/sbin/sendmail</tt>.
#   * <tt>:arguments</tt> - The command line arguments. Defaults to <tt>-i</tt> with <tt>-f sender@address</tt>
#     added automatically before the message is sent.
#
# * <tt>file_settings</tt> - Allows you to override options for the <tt>:file</tt> delivery method.
#   * <tt>:location</tt> - The directory into which emails will be written. Defaults to the application
#     <tt>tmp/mails</tt>.
#
# * <tt>raise_delivery_errors</tt> - Whether or not errors should be raised if the email fails to be delivered.
#
# * <tt>delivery_method</tt> - Defines a delivery method. Possible values are <tt>:smtp</tt> (default),
#   <tt>:sendmail</tt>, <tt>:test</tt>, and <tt>:file</tt>. Or you may provide a custom delivery method
#   object e.g. +MyOwnDeliveryMethodClass+. See the Mail gem documentation on the interface you need to
#   implement for a custom delivery agent.
#
# * <tt>perform_deliveries</tt> - Determines whether emails are actually sent from Action Mailer when you
#   call <tt>.deliver</tt> on an email message or on an Action Mailer method. This is on by default but can
#   be turned off to aid in functional testing.
#
# * <tt>deliveries</tt> - Keeps an array of all the emails sent out through the Action Mailer with
#   <tt>delivery_method :test</tt>. Most useful for unit and functional testing.
#
# * <tt>delivery_job</tt> - The job class used with <tt>deliver_later</tt>. Defaults to
#   +ActionMailer::MailDeliveryJob+.
#
# * <tt>deliver_later_queue_name</tt> - The name of the queue used with <tt>deliver_later</tt>.
#
# @abstract It cannot be directly instantiated. Subclasses must implement the `abstract` methods below.
class ActionMailer::Base < ::AbstractController::Base
  include ::ActionMailer::DeliveryMethods
  include ::ActiveSupport::Rescuable
  include ::ActionMailer::Rescuable
  include ::ActionMailer::Parameterized
  include ::ActionMailer::Previews
  include ::ActionView::ViewPaths
  include ::AbstractController::Rendering
  include ::AbstractController::Logger
  include ::ActiveSupport::Benchmarkable
  include ::AbstractController::Helpers
  include ::AbstractController::Translation
  include ::AbstractController::AssetPaths
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks
  include ::AbstractController::Caching::Fragments
  include ::AbstractController::Caching::ConfigMethods
  include ::AbstractController::Caching
  include ::ActionView::Rendering
  include ::ActionView::Layouts
  extend ::ActionMailer::DeliveryMethods::ClassMethods
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::ActionMailer::Rescuable::ClassMethods
  extend ::ActionMailer::Parameterized::ClassMethods
  extend ::ActionMailer::Previews::ClassMethods
  extend ::ActionView::ViewPaths::ClassMethods
  extend ::AbstractController::Helpers::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::AbstractController::Callbacks::ClassMethods
  extend ::AbstractController::Caching::Fragments::ClassMethods
  extend ::AbstractController::Caching::ClassMethods
  extend ::AbstractController::Caching::ConfigMethods
  extend ::ActionView::Rendering::ClassMethods
  extend ::ActionView::Layouts::ClassMethods

  # @return [Base] a new instance of Base
  #
  # source://actionmailer//lib/action_mailer/base.rb#632
  def initialize; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _process_action_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_process_action_callbacks(&block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies; end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def asset_host; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def asset_host=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def assets_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def assets_dir=(value); end

  # Allows you to add attachments to an email, like so:
  #
  #  mail.attachments['filename.jpg'] = File.read('/path/to/filename.jpg')
  #
  # If you do this, then Mail will take the file name and work out the mime type.
  # It will also set the Content-Type, Content-Disposition, Content-Transfer-Encoding
  # and encode the contents of the attachment in Base64.
  #
  # You can also specify overrides if you want by passing a hash instead of a string:
  #
  #  mail.attachments['filename.jpg'] = {mime_type: 'application/gzip',
  #                                      content: File.read('/path/to/filename.jpg')}
  #
  # If you want to use encoding other than Base64 then you will need to pass encoding
  # type along with the pre-encoded content as Mail doesn't know how to decode the
  # data:
  #
  #  file_content = SpecialEncode(File.read('/path/to/filename.jpg'))
  #  mail.attachments['filename.jpg'] = {mime_type: 'application/gzip',
  #                                      content: file_content }
  #
  # You can also search for specific attachments:
  #
  #  # By Filename
  #  mail.attachments['filename.jpg']   # => Mail::Part object or nil
  #
  #  # or by index
  #  mail.attachments[0]                # => Mail::Part (first attachment)
  #
  # source://actionmailer//lib/action_mailer/base.rb#749
  def attachments; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def default_asset_host_protocol; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def default_asset_host_protocol=(value); end

  # source://actionmailer//lib/action_mailer/base.rb#490
  def default_params; end

  # source://actionmailer//lib/action_mailer/base.rb#490
  def default_params=(_arg0); end

  # source://actionmailer//lib/action_mailer/base.rb#490
  def default_params?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def default_static_extension; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def default_static_extension=(value); end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#15
  def deliver_later_queue_name; end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#15
  def deliver_later_queue_name=(val); end

  # source://actionmailer//lib/action_mailer/base.rb#489
  def delivery_job; end

  # source://actionmailer//lib/action_mailer/base.rb#489
  def delivery_job=(_arg0); end

  # source://actionmailer//lib/action_mailer/base.rb#489
  def delivery_job?; end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#18
  def delivery_method; end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#18
  def delivery_method=(_arg0); end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#18
  def delivery_method?; end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#17
  def delivery_methods; end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#17
  def delivery_methods=(_arg0); end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#17
  def delivery_methods?; end

  # Returns an email in the format "Name <email@example.com>".
  #
  # If the name is a blank string, it returns just the address.
  #
  # source://actionmailer//lib/action_mailer/base.rb#673
  def email_address_with_name(address, name); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def enable_fragment_cache_logging; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def enable_fragment_cache_logging=(value); end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
  def file_settings; end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
  def file_settings=(_arg0); end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
  def file_settings?; end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys; end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys?; end

  # Allows you to pass random and unusual headers to the new <tt>Mail::Message</tt>
  # object which will add them to itself.
  #
  #   headers['X-Special-Domain-Specific-Header'] = "SecretValue"
  #
  # You can also pass a hash into headers of header field names and values,
  # which will then be set on the <tt>Mail::Message</tt> object:
  #
  #   headers 'X-Special-Domain-Specific-Header' => "SecretValue",
  #           'In-Reply-To' => incoming.message_id
  #
  # The resulting <tt>Mail::Message</tt> will have the following in its header:
  #
  #   X-Special-Domain-Specific-Header: SecretValue
  #
  # Note about replacing already defined headers:
  #
  # * +subject+
  # * +sender+
  # * +from+
  # * +to+
  # * +cc+
  # * +bcc+
  # * +reply-to+
  # * +orig-date+
  # * +message-id+
  # * +references+
  #
  # Fields can only appear once in email headers while other fields such as
  # <tt>X-Anything</tt> can appear multiple times.
  #
  # If you want to replace any header which already exists, first set it to
  # +nil+ in order to reset the value otherwise another field will be added
  # for the same header.
  #
  # source://actionmailer//lib/action_mailer/base.rb#711
  def headers(args = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def javascripts_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def javascripts_dir=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def logger; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def logger=(value); end

  # The main method that creates the message and renders the email templates. There are
  # two ways to call this method, with a block, or without a block.
  #
  # It accepts a headers hash. This hash allows you to specify
  # the most used headers in an email message, these are:
  #
  # * +:subject+ - The subject of the message, if this is omitted, Action Mailer will
  #   ask the Rails I18n class for a translated +:subject+ in the scope of
  #   <tt>[mailer_scope, action_name]</tt> or if this is missing, will translate the
  #   humanized version of the +action_name+
  # * +:to+ - Who the message is destined for, can be a string of addresses, or an array
  #   of addresses.
  # * +:from+ - Who the message is from
  # * +:cc+ - Who you would like to Carbon-Copy on this email, can be a string of addresses,
  #   or an array of addresses.
  # * +:bcc+ - Who you would like to Blind-Carbon-Copy on this email, can be a string of
  #   addresses, or an array of addresses.
  # * +:reply_to+ - Who to set the Reply-To header of the email to.
  # * +:date+ - The date to say the email was sent on.
  #
  # You can set default values for any of the above headers (except +:date+)
  # by using the ::default class method:
  #
  #  class Notifier < ActionMailer::Base
  #    default from: 'no-reply@test.lindsaar.net',
  #            bcc: 'email_logger@test.lindsaar.net',
  #            reply_to: 'bounces@test.lindsaar.net'
  #  end
  #
  # If you need other headers not listed above, you can either pass them in
  # as part of the headers hash or use the <tt>headers['name'] = value</tt>
  # method.
  #
  # When a +:return_path+ is specified as header, that value will be used as
  # the 'envelope from' address for the Mail message. Setting this is useful
  # when you want delivery notifications sent to a different address than the
  # one in +:from+. Mail will actually use the +:return_path+ in preference
  # to the +:sender+ in preference to the +:from+ field for the 'envelope
  # from' value.
  #
  # If you do not pass a block to the +mail+ method, it will find all
  # templates in the view paths using by default the mailer name and the
  # method name that it is being called from, it will then create parts for
  # each of these templates intelligently, making educated guesses on correct
  # content type and sequence, and return a fully prepared <tt>Mail::Message</tt>
  # ready to call <tt>:deliver</tt> on to send.
  #
  # For example:
  #
  #   class Notifier < ActionMailer::Base
  #     default from: 'no-reply@test.lindsaar.net'
  #
  #     def welcome
  #       mail(to: 'mikel@test.lindsaar.net')
  #     end
  #   end
  #
  # Will look for all templates at "app/views/notifier" with name "welcome".
  # If no welcome template exists, it will raise an ActionView::MissingTemplate error.
  #
  # However, those can be customized:
  #
  #   mail(template_path: 'notifications', template_name: 'another')
  #
  # And now it will look for all templates at "app/views/notifications" with name "another".
  #
  # If you do pass a block, you can render specific templates of your choice:
  #
  #   mail(to: 'mikel@test.lindsaar.net') do |format|
  #     format.text
  #     format.html
  #   end
  #
  # You can even render plain text directly without using a template:
  #
  #   mail(to: 'mikel@test.lindsaar.net') do |format|
  #     format.text { render plain: "Hello Mikel!" }
  #     format.html { render html: "<h1>Hello Mikel!</h1>".html_safe }
  #   end
  #
  # Which will render a +multipart/alternative+ email with +text/plain+ and
  # +text/html+ parts.
  #
  # The block syntax also allows you to customize the part headers if desired:
  #
  #   mail(to: 'mikel@test.lindsaar.net') do |format|
  #     format.html
  #   end
  #
  # source://actionmailer//lib/action_mailer/base.rb#858
  def mail(headers = T.unsafe(nil), &block); end

  # Returns the name of the mailer object.
  #
  # source://actionmailer//lib/action_mailer/base.rb#666
  def mailer_name; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def message; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def message=(_arg0); end

  # source://actionmailer//lib/action_mailer/parameterized.rb#91
  def params; end

  # source://actionmailer//lib/action_mailer/parameterized.rb#91
  def params=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def perform_caching; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def perform_caching=(value); end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#14
  def perform_deliveries; end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#14
  def perform_deliveries=(val); end

  # source://actionmailer//lib/action_mailer/preview.rb#25
  def preview_interceptors; end

  # source://actionmailer//lib/action_mailer/preview.rb#14
  def preview_path; end

  # source://actionmailer//lib/action_mailer/base.rb#638
  def process(method_name, *args, **_arg2); end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#13
  def raise_delivery_errors; end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#13
  def raise_delivery_errors=(val); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def relative_url_root; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def relative_url_root=(value); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers?; end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
  def sendmail_settings; end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
  def sendmail_settings=(_arg0); end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
  def sendmail_settings?; end

  # source://actionmailer//lib/action_mailer/preview.rb#22
  def show_previews; end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
  def smtp_settings; end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
  def smtp_settings=(_arg0); end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
  def smtp_settings?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def stylesheets_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def stylesheets_dir=(value); end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
  def test_settings; end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
  def test_settings=(_arg0); end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
  def test_settings?; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://actionmailer//lib/action_mailer/base.rb#1059
  def _protected_ivars; end

  # source://actionmailer//lib/action_mailer/base.rb#935
  def apply_defaults(headers); end

  # source://actionmailer//lib/action_mailer/base.rb#955
  def assign_headers_to_message(message, headers); end

  # source://actionmailer//lib/action_mailer/base.rb#961
  def collect_responses(headers, &block); end

  # @yield [collector]
  #
  # source://actionmailer//lib/action_mailer/base.rb#971
  def collect_responses_from_block(headers); end

  # source://actionmailer//lib/action_mailer/base.rb#985
  def collect_responses_from_templates(headers); end

  # source://actionmailer//lib/action_mailer/base.rb#978
  def collect_responses_from_text(headers); end

  # source://actionmailer//lib/action_mailer/base.rb#945
  def compute_default(value); end

  # source://actionmailer//lib/action_mailer/base.rb#1028
  def create_parts_from_responses(m, responses); end

  # Translates the +subject+ using Rails I18n class under <tt>[mailer_scope, action_name]</tt> scope.
  # If it does not find a translation for the +subject+ under the specified scope it will default to a
  # humanized version of the <tt>action_name</tt>.
  # If the subject has interpolations, you can pass them through the +interpolations+ parameter.
  #
  # source://actionmailer//lib/action_mailer/base.rb#925
  def default_i18n_subject(interpolations = T.unsafe(nil)); end

  # source://actionmailer//lib/action_mailer/base.rb#998
  def each_template(paths, name, &block); end

  # source://actionmailer//lib/action_mailer/base.rb#1041
  def insert_part(container, response, charset); end

  # source://actionmailer//lib/action_mailer/base.rb#1055
  def instrument_name; end

  # This and #instrument_name is for caching instrument
  #
  # source://actionmailer//lib/action_mailer/base.rb#1048
  def instrument_payload(key); end

  # Used by #mail to set the content type of the message.
  #
  # It will use the given +user_content_type+, or multipart if the mail
  # message has any attachments. If the attachments are inline, the content
  # type will be "multipart/related", otherwise "multipart/mixed".
  #
  # If there is no content type passed in via headers, and there are no
  # attachments, or the message is multipart, then the default content type is
  # used.
  #
  # source://actionmailer//lib/action_mailer/base.rb#903
  def set_content_type(m, user_content_type, class_default); end

  # source://actionmailer//lib/action_mailer/base.rb#1007
  def wrap_inline_attachments(message); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods?; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#15
    def _helpers; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout=(value); end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout?; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions=(value); end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _process_action_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _process_action_callbacks=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def asset_host; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def asset_host=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def assets_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def assets_dir=(value); end

    # Returns the name of the current mailer. This method is also being used as a path for a view lookup.
    # If this is an anonymous mailer, this method will return +anonymous+ instead.
    #
    # source://actionmailer//lib/action_mailer/base.rb#558
    def controller_path; end

    # Sets the defaults through app configuration:
    #
    #     config.action_mailer.default(from: "no-reply@example.org")
    #
    # Aliased by ::default_options=
    #
    # source://actionmailer//lib/action_mailer/base.rb#570
    def default(value = T.unsafe(nil)); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def default_asset_host_protocol; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def default_asset_host_protocol=(value); end

    # Sets the defaults through app configuration:
    #
    #     config.action_mailer.default(from: "no-reply@example.org")
    #
    # Aliased by ::default_options=
    # Allows to set defaults through app configuration:
    #
    #    config.action_mailer.default_options = { from: "no-reply@example.org" }
    #
    # source://actionmailer//lib/action_mailer/base.rb#570
    def default_options=(value = T.unsafe(nil)); end

    # source://actionmailer//lib/action_mailer/base.rb#490
    def default_params; end

    # source://actionmailer//lib/action_mailer/base.rb#490
    def default_params=(value); end

    # source://actionmailer//lib/action_mailer/base.rb#490
    def default_params?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def default_static_extension; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def default_static_extension=(value); end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#15
    def deliver_later_queue_name; end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#15
    def deliver_later_queue_name=(val); end

    # Wraps an email delivery inside of <tt>ActiveSupport::Notifications</tt> instrumentation.
    #
    # This method is actually called by the <tt>Mail::Message</tt> object itself
    # through a callback when you call <tt>:deliver</tt> on the <tt>Mail::Message</tt>,
    # calling +deliver_mail+ directly and passing a <tt>Mail::Message</tt> will do
    # nothing except tell the logger you sent the email.
    #
    # source://actionmailer//lib/action_mailer/base.rb#585
    def deliver_mail(mail); end

    # source://actionmailer//lib/action_mailer/base.rb#489
    def delivery_job; end

    # source://actionmailer//lib/action_mailer/base.rb#489
    def delivery_job=(value); end

    # source://actionmailer//lib/action_mailer/base.rb#489
    def delivery_job?; end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#18
    def delivery_method; end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#18
    def delivery_method=(value); end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#18
    def delivery_method?; end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#17
    def delivery_methods; end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#17
    def delivery_methods=(value); end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#17
    def delivery_methods?; end

    # Returns an email in the format "Name <email@example.com>".
    #
    # If the name is a blank string, it returns just the address.
    #
    # source://actionmailer//lib/action_mailer/base.rb#595
    def email_address_with_name(address, name); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def enable_fragment_cache_logging; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def enable_fragment_cache_logging=(value); end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
    def file_settings; end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
    def file_settings=(value); end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
    def file_settings?; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def javascripts_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def javascripts_dir=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def logger; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def logger=(value); end

    # Returns the name of the current mailer. This method is also being used as a path for a view lookup.
    # If this is an anonymous mailer, this method will return +anonymous+ instead.
    #
    # source://actionmailer//lib/action_mailer/base.rb#558
    def mailer_name; end

    # Allows to set the name of current mailer.
    #
    # source://actionmailer//lib/action_mailer/base.rb#562
    def mailer_name=(_arg0); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def perform_caching; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def perform_caching=(value); end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#14
    def perform_deliveries; end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#14
    def perform_deliveries=(val); end

    # source://actionmailer//lib/action_mailer/preview.rb#25
    def preview_interceptors; end

    # source://actionmailer//lib/action_mailer/preview.rb#25
    def preview_interceptors=(val); end

    # source://actionmailer//lib/action_mailer/preview.rb#14
    def preview_path; end

    # source://actionmailer//lib/action_mailer/preview.rb#14
    def preview_path=(val); end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#13
    def raise_delivery_errors; end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#13
    def raise_delivery_errors=(val); end

    # Register an Interceptor which will be called before mail is sent.
    # Either a class, string, or symbol can be passed in as the Interceptor.
    # If a string or symbol is passed in it will be camelized and constantized.
    #
    # source://actionmailer//lib/action_mailer/base.rb#535
    def register_interceptor(interceptor); end

    # Register one or more Interceptors which will be called before mail is sent.
    #
    # source://actionmailer//lib/action_mailer/base.rb#509
    def register_interceptors(*interceptors); end

    # Register an Observer which will be notified when mail is delivered.
    # Either a class, string, or symbol can be passed in as the Observer.
    # If a string or symbol is passed in it will be camelized and constantized.
    #
    # source://actionmailer//lib/action_mailer/base.rb#521
    def register_observer(observer); end

    # Register one or more Observers which will be notified when mail is delivered.
    #
    # source://actionmailer//lib/action_mailer/base.rb#499
    def register_observers(*observers); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def relative_url_root; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def relative_url_root=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers?; end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
    def sendmail_settings; end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
    def sendmail_settings=(value); end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
    def sendmail_settings?; end

    # source://actionmailer//lib/action_mailer/preview.rb#22
    def show_previews; end

    # source://actionmailer//lib/action_mailer/preview.rb#22
    def show_previews=(val); end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
    def smtp_settings; end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
    def smtp_settings=(value); end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
    def smtp_settings?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def stylesheets_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def stylesheets_dir=(value); end

    # Emails do not support relative path links.
    #
    # @return [Boolean]
    #
    # source://actionmailer//lib/action_mailer/base.rb#931
    def supports_path?; end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
    def test_settings; end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
    def test_settings=(value); end

    # source://actionmailer//lib/action_mailer/delivery_methods.rb#51
    def test_settings?; end

    # Unregister a previously registered Interceptor.
    # Either a class, string, or symbol can be passed in as the Interceptor.
    # If a string or symbol is passed in it will be camelized and constantized.
    #
    # source://actionmailer//lib/action_mailer/base.rb#542
    def unregister_interceptor(interceptor); end

    # Unregister one or more previously registered Interceptors.
    #
    # source://actionmailer//lib/action_mailer/base.rb#514
    def unregister_interceptors(*interceptors); end

    # Unregister a previously registered Observer.
    # Either a class, string, or symbol can be passed in as the Observer.
    # If a string or symbol is passed in it will be camelized and constantized.
    #
    # source://actionmailer//lib/action_mailer/base.rb#528
    def unregister_observer(observer); end

    # Unregister one or more previously registered Observers.
    #
    # source://actionmailer//lib/action_mailer/base.rb#504
    def unregister_observers(*observers); end

    private

    # source://actionmailer//lib/action_mailer/base.rb#616
    def method_missing(method_name, *args, **_arg2); end

    # source://actionmailer//lib/action_mailer/base.rb#546
    def observer_class_for(value); end

    # @return [Boolean]
    #
    # source://actionmailer//lib/action_mailer/base.rb#625
    def respond_to_missing?(method, include_all = T.unsafe(nil)); end

    # source://actionmailer//lib/action_mailer/base.rb#603
    def set_payload_for_mail(payload, mail); end
  end
end

module ActionMailer::Base::HelperMethods
  include ::ActionMailer::MailHelper

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#31
  def combined_fragment_cache_key(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#43
  def view_cache_dependencies(*args, **_arg1, &block); end
end

class ActionMailer::Base::LateAttachmentsProxy < ::SimpleDelegator
  # source://actionmailer//lib/action_mailer/base.rb#759
  def []=(_name, _content); end

  # source://actionmailer//lib/action_mailer/base.rb#758
  def inline; end

  private

  # @raise [RuntimeError]
  #
  # source://actionmailer//lib/action_mailer/base.rb#762
  def _raise_error; end
end

class ActionMailer::Base::NullMail
  # source://actionmailer//lib/action_mailer/base.rb#653
  def body; end

  # source://actionmailer//lib/action_mailer/base.rb#654
  def header; end

  # source://actionmailer//lib/action_mailer/base.rb#660
  def method_missing(*args); end

  # @return [Boolean]
  #
  # source://actionmailer//lib/action_mailer/base.rb#656
  def respond_to?(string, include_all = T.unsafe(nil)); end
end

# source://actionmailer//lib/action_mailer/base.rb#485
ActionMailer::Base::PROTECTED_IVARS = T.let(T.unsafe(nil), Array)

class ActionMailer::Collector
  include ::AbstractController::Collector

  # @return [Collector] a new instance of Collector
  #
  # source://actionmailer//lib/action_mailer/collector.rb#12
  def initialize(context, &block); end

  # @raise [ArgumentError]
  #
  # source://actionmailer//lib/action_mailer/collector.rb#18
  def all(*args, &block); end

  # @raise [ArgumentError]
  #
  # source://actionmailer//lib/action_mailer/collector.rb#18
  def any(*args, &block); end

  # source://actionmailer//lib/action_mailer/collector.rb#25
  def custom(mime, options = T.unsafe(nil)); end

  # Returns the value of attribute responses.
  #
  # source://actionmailer//lib/action_mailer/collector.rb#10
  def responses; end
end

# This module handles everything related to mail delivery, from registering
# new delivery methods to configuring the mail object to be sent.
module ActionMailer::DeliveryMethods
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionMailer::DeliveryMethods::ClassMethods

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#78
  def wrap_delivery_behavior!(*args); end

  module GeneratedClassMethods
    def delivery_method; end
    def delivery_method=(value); end
    def delivery_method?; end
    def delivery_methods; end
    def delivery_methods=(value); end
    def delivery_methods?; end
    def file_settings; end
    def file_settings=(value); end
    def file_settings?; end
    def sendmail_settings; end
    def sendmail_settings=(value); end
    def sendmail_settings?; end
    def smtp_settings; end
    def smtp_settings=(value); end
    def smtp_settings?; end
    def test_settings; end
    def test_settings=(value); end
    def test_settings?; end
  end

  module GeneratedInstanceMethods
    def delivery_method; end
    def delivery_method=(value); end
    def delivery_method?; end
    def delivery_methods; end
    def delivery_methods=(value); end
    def delivery_methods?; end
    def file_settings; end
    def file_settings=(value); end
    def file_settings?; end
    def sendmail_settings; end
    def sendmail_settings=(value); end
    def sendmail_settings?; end
    def smtp_settings; end
    def smtp_settings=(value); end
    def smtp_settings?; end
    def test_settings; end
    def test_settings=(value); end
    def test_settings?; end
  end
end

# Helpers for creating and wrapping delivery behavior, used by DeliveryMethods.
module ActionMailer::DeliveryMethods::ClassMethods
  # Adds a new delivery method through the given class using the given
  # symbol as alias and the default options supplied.
  #
  #   add_delivery_method :sendmail, Mail::Sendmail,
  #     location:  '/usr/sbin/sendmail',
  #     arguments: '-i'
  #
  # source://actionmailer//lib/action_mailer/delivery_methods.rb#50
  def add_delivery_method(symbol, klass, default_options = T.unsafe(nil)); end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#42
  def deliveries(*_arg0, **_arg1, &_arg2); end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#42
  def deliveries=(arg); end

  # source://actionmailer//lib/action_mailer/delivery_methods.rb#56
  def wrap_delivery_behavior(mail, method = T.unsafe(nil), options = T.unsafe(nil)); end
end

# Implements a mailer preview interceptor that converts image tag src attributes
# that use inline cid: style URLs to data: style URLs so that they are visible
# when previewing an HTML email in a web browser.
#
# This interceptor is enabled by default. To disable it, delete it from the
# <tt>ActionMailer::Base.preview_interceptors</tt> array:
#
#   ActionMailer::Base.preview_interceptors.delete(ActionMailer::InlinePreviewInterceptor)
class ActionMailer::InlinePreviewInterceptor
  include ::Base64

  # @return [InlinePreviewInterceptor] a new instance of InlinePreviewInterceptor
  #
  # source://actionmailer//lib/action_mailer/inline_preview_interceptor.rb#24
  def initialize(message); end

  # source://actionmailer//lib/action_mailer/inline_preview_interceptor.rb#28
  def transform!; end

  private

  # source://actionmailer//lib/action_mailer/inline_preview_interceptor.rb#49
  def data_url(part); end

  # source://actionmailer//lib/action_mailer/inline_preview_interceptor.rb#53
  def find_part(cid); end

  # source://actionmailer//lib/action_mailer/inline_preview_interceptor.rb#45
  def html_part; end

  # Returns the value of attribute message.
  #
  # source://actionmailer//lib/action_mailer/inline_preview_interceptor.rb#43
  def message; end

  class << self
    # source://actionmailer//lib/action_mailer/inline_preview_interceptor.rb#20
    def previewing_email(message); end
  end
end

# source://actionmailer//lib/action_mailer/inline_preview_interceptor.rb#16
ActionMailer::InlinePreviewInterceptor::PATTERN = T.let(T.unsafe(nil), Regexp)

# Implements the ActiveSupport::LogSubscriber for logging notifications when
# email is delivered or received.
class ActionMailer::LogSubscriber < ::ActiveSupport::LogSubscriber
  # An email was delivered.
  #
  # source://actionmailer//lib/action_mailer/log_subscriber.rb#10
  def deliver(event); end

  # Use the logger configured for ActionMailer::Base.
  #
  # source://actionmailer//lib/action_mailer/log_subscriber.rb#33
  def logger; end

  # An email was generated.
  #
  # source://actionmailer//lib/action_mailer/log_subscriber.rb#24
  def process(event); end
end

# The <tt>ActionMailer::MailDeliveryJob</tt> class is used when you
# want to send emails outside of the request-response cycle. It supports
# sending either parameterized or normal mail.
#
# Exceptions are rescued and handled by the mailer class.
class ActionMailer::MailDeliveryJob < ::ActiveJob::Base
  # source://actionmailer//lib/action_mailer/mail_delivery_job.rb#16
  def perform(mailer, mail_method, delivery_method, args:, kwargs: T.unsafe(nil), params: T.unsafe(nil)); end

  private

  # source://actionmailer//lib/action_mailer/mail_delivery_job.rb#35
  def handle_exception_with_mailer_class(exception); end

  # "Deserialize" the mailer class name by hand in case another argument
  # (like a Global ID reference) raised DeserializationError.
  #
  # source://actionmailer//lib/action_mailer/mail_delivery_job.rb#29
  def mailer_class; end

  class << self
    # source://activejob/7.0.4/lib/active_job/queue_name.rb#56
    def queue_name; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers; end
  end
end

# Provides helper methods for ActionMailer::Base that can be used for easily
# formatting messages, accessing mailer or message instances, and the
# attachments list.
module ActionMailer::MailHelper
  # Access the message attachments list.
  #
  # source://actionmailer//lib/action_mailer/mail_helper.rb#43
  def attachments; end

  # Take the text and format it, indented two spaces for each line, and
  # wrapped at 72 columns:
  #
  #   text = <<-TEXT
  #     This is
  #     the      paragraph.
  #
  #     * item1 * item2
  #   TEXT
  #
  #   block_format text
  #   # => "  This is the paragraph.\n\n  * item1\n  * item2\n"
  #
  # source://actionmailer//lib/action_mailer/mail_helper.rb#20
  def block_format(text); end

  # Returns +text+ wrapped at +len+ columns and indented +indent+ spaces.
  # By default column length +len+ equals 72 characters and indent
  # +indent+ equal two spaces.
  #
  #   my_text = 'Here is a sample text with more than 40 characters'
  #
  #   format_paragraph(my_text, 25, 4)
  #   # => "    Here is a sample text with\n    more than 40 characters"
  #
  # source://actionmailer//lib/action_mailer/mail_helper.rb#55
  def format_paragraph(text, len = T.unsafe(nil), indent = T.unsafe(nil)); end

  # Access the mailer instance.
  #
  # source://actionmailer//lib/action_mailer/mail_helper.rb#33
  def mailer; end

  # Access the message instance.
  #
  # source://actionmailer//lib/action_mailer/mail_helper.rb#38
  def message; end
end

# The <tt>ActionMailer::MessageDelivery</tt> class is used by
# ActionMailer::Base when creating a new mailer.
# <tt>MessageDelivery</tt> is a wrapper (+Delegator+ subclass) around a lazy
# created <tt>Mail::Message</tt>. You can get direct access to the
# <tt>Mail::Message</tt>, deliver the email or schedule the email to be sent
# through Active Job.
#
#   Notifier.welcome(User.first)               # an ActionMailer::MessageDelivery object
#   Notifier.welcome(User.first).deliver_now   # sends the email
#   Notifier.welcome(User.first).deliver_later # enqueue email delivery as a job through Active Job
#   Notifier.welcome(User.first).message       # a Mail::Message object
class ActionMailer::MessageDelivery
  # @return [MessageDelivery] a new instance of MessageDelivery
  #
  # source://actionmailer//lib/action_mailer/message_delivery.rb#18
  def initialize(mailer_class, action, *args, **_arg3); end

  # Method calls are delegated to the Mail::Message that's ready to deliver.
  #
  # source://actionmailer//lib/action_mailer/message_delivery.rb#29
  def __getobj__; end

  # Unused except for delegator internals (dup, marshalling).
  #
  # source://actionmailer//lib/action_mailer/message_delivery.rb#34
  def __setobj__(mail_message); end

  # Enqueues the email to be delivered through Active Job. When the
  # job runs it will send the email using +deliver_now+.
  #
  #   Notifier.welcome(User.first).deliver_later
  #   Notifier.welcome(User.first).deliver_later(wait: 1.hour)
  #   Notifier.welcome(User.first).deliver_later(wait_until: 10.hours.from_now)
  #   Notifier.welcome(User.first).deliver_later(priority: 10)
  #
  # Options:
  #
  # * <tt>:wait</tt> - Enqueue the email to be delivered with a delay.
  # * <tt>:wait_until</tt> - Enqueue the email to be delivered at (after) a specific date / time.
  # * <tt>:queue</tt> - Enqueue the email on the specified queue.
  # * <tt>:priority</tt> - Enqueues the email with the specified priority
  #
  # By default, the email will be enqueued using <tt>ActionMailer::MailDeliveryJob</tt>. Each
  # ActionMailer::Base class can specify the job to use by setting the class variable
  # +delivery_job+.
  #
  #   class AccountRegistrationMailer < ApplicationMailer
  #     self.delivery_job = RegistrationDeliveryJob
  #   end
  #
  # source://actionmailer//lib/action_mailer/message_delivery.rb#98
  def deliver_later(options = T.unsafe(nil)); end

  # Enqueues the email to be delivered through Active Job. When the
  # job runs it will send the email using +deliver_now!+. That means
  # that the message will be sent bypassing checking +perform_deliveries+
  # and +raise_delivery_errors+, so use with caution.
  #
  #   Notifier.welcome(User.first).deliver_later!
  #   Notifier.welcome(User.first).deliver_later!(wait: 1.hour)
  #   Notifier.welcome(User.first).deliver_later!(wait_until: 10.hours.from_now)
  #   Notifier.welcome(User.first).deliver_later!(priority: 10)
  #
  # Options:
  #
  # * <tt>:wait</tt> - Enqueue the email to be delivered with a delay
  # * <tt>:wait_until</tt> - Enqueue the email to be delivered at (after) a specific date / time
  # * <tt>:queue</tt> - Enqueue the email on the specified queue
  # * <tt>:priority</tt> - Enqueues the email with the specified priority
  #
  # By default, the email will be enqueued using <tt>ActionMailer::MailDeliveryJob</tt>. Each
  # ActionMailer::Base class can specify the job to use by setting the class variable
  # +delivery_job+.
  #
  #   class AccountRegistrationMailer < ApplicationMailer
  #     self.delivery_job = RegistrationDeliveryJob
  #   end
  #
  # source://actionmailer//lib/action_mailer/message_delivery.rb#72
  def deliver_later!(options = T.unsafe(nil)); end

  # Delivers an email:
  #
  #   Notifier.welcome(User.first).deliver_now
  #
  # source://actionmailer//lib/action_mailer/message_delivery.rb#117
  def deliver_now; end

  # Delivers an email without checking +perform_deliveries+ and +raise_delivery_errors+,
  # so use with caution.
  #
  #   Notifier.welcome(User.first).deliver_now!
  #
  # source://actionmailer//lib/action_mailer/message_delivery.rb#107
  def deliver_now!; end

  # Returns the resulting Mail::Message
  #
  # source://actionmailer//lib/action_mailer/message_delivery.rb#39
  def message; end

  # Was the delegate loaded, causing the mailer action to be processed?
  #
  # @return [Boolean]
  #
  # source://actionmailer//lib/action_mailer/message_delivery.rb#44
  def processed?; end

  private

  # source://actionmailer//lib/action_mailer/message_delivery.rb#132
  def enqueue_delivery(delivery_method, options = T.unsafe(nil)); end

  # Returns the processed Mailer instance. We keep this instance
  # on hand so we can delegate exception handling to it.
  #
  # source://actionmailer//lib/action_mailer/message_delivery.rb#126
  def processed_mailer; end
end

class ActionMailer::NonInferrableMailerError < ::StandardError
  # @return [NonInferrableMailerError] a new instance of NonInferrableMailerError
  #
  # source://actionmailer//lib/action_mailer/test_case.rb#8
  def initialize(name); end
end

# Provides the option to parameterize mailers in order to share instance variable
# setup, processing, and common headers.
#
# Consider this example that does not use parameterization:
#
#   class InvitationsMailer < ApplicationMailer
#     def account_invitation(inviter, invitee)
#       @account = inviter.account
#       @inviter = inviter
#       @invitee = invitee
#
#       subject = "#{@inviter.name} invited you to their Basecamp (#{@account.name})"
#
#       mail \
#         subject:   subject,
#         to:        invitee.email_address,
#         from:      common_address(inviter),
#         reply_to:  inviter.email_address_with_name
#     end
#
#     def project_invitation(project, inviter, invitee)
#       @account = inviter.account
#       @project = project
#       @inviter = inviter
#       @invitee = invitee
#       @summarizer = ProjectInvitationSummarizer.new(@project.bucket)
#
#       subject = "#{@inviter.name.familiar} added you to a project in Basecamp (#{@account.name})"
#
#       mail \
#         subject:   subject,
#         to:        invitee.email_address,
#         from:      common_address(inviter),
#         reply_to:  inviter.email_address_with_name
#     end
#
#     def bulk_project_invitation(projects, inviter, invitee)
#       @account  = inviter.account
#       @projects = projects.sort_by(&:name)
#       @inviter  = inviter
#       @invitee  = invitee
#
#       subject = "#{@inviter.name.familiar} added you to some new stuff in Basecamp (#{@account.name})"
#
#       mail \
#         subject:   subject,
#         to:        invitee.email_address,
#         from:      common_address(inviter),
#         reply_to:  inviter.email_address_with_name
#     end
#   end
#
#   InvitationsMailer.account_invitation(person_a, person_b).deliver_later
#
# Using parameterized mailers, this can be rewritten as:
#
#   class InvitationsMailer < ApplicationMailer
#     before_action { @inviter, @invitee = params[:inviter], params[:invitee] }
#     before_action { @account = params[:inviter].account }
#
#     default to:       -> { @invitee.email_address },
#             from:     -> { common_address(@inviter) },
#             reply_to: -> { @inviter.email_address_with_name }
#
#     def account_invitation
#       mail subject: "#{@inviter.name} invited you to their Basecamp (#{@account.name})"
#     end
#
#     def project_invitation
#       @project    = params[:project]
#       @summarizer = ProjectInvitationSummarizer.new(@project.bucket)
#
#       mail subject: "#{@inviter.name.familiar} added you to a project in Basecamp (#{@account.name})"
#     end
#
#     def bulk_project_invitation
#       @projects = params[:projects].sort_by(&:name)
#
#       mail subject: "#{@inviter.name.familiar} added you to some new stuff in Basecamp (#{@account.name})"
#     end
#   end
#
#   InvitationsMailer.with(inviter: person_a, invitee: person_b).account_invitation.deliver_later
module ActionMailer::Parameterized
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionMailer::Parameterized::ClassMethods
end

module ActionMailer::Parameterized::ClassMethods
  # Provide the parameters to the mailer in order to use them in the instance methods and callbacks.
  #
  #   InvitationsMailer.with(inviter: person_a, invitee: person_b).account_invitation.deliver_later
  #
  # See Parameterized documentation for full example.
  #
  # source://actionmailer//lib/action_mailer/parameterized.rb#100
  def with(params); end
end

class ActionMailer::Parameterized::Mailer
  # @return [Mailer] a new instance of Mailer
  #
  # source://actionmailer//lib/action_mailer/parameterized.rb#106
  def initialize(mailer, params); end

  private

  # source://actionmailer//lib/action_mailer/parameterized.rb#111
  def method_missing(method_name, *args, **_arg2); end

  # @return [Boolean]
  #
  # source://actionmailer//lib/action_mailer/parameterized.rb#120
  def respond_to_missing?(method, include_all = T.unsafe(nil)); end
end

class ActionMailer::Parameterized::MessageDelivery < ::ActionMailer::MessageDelivery
  # @return [MessageDelivery] a new instance of MessageDelivery
  #
  # source://actionmailer//lib/action_mailer/parameterized.rb#126
  def initialize(mailer_class, action, params, *args, **_arg4); end

  private

  # source://actionmailer//lib/action_mailer/parameterized.rb#140
  def enqueue_delivery(delivery_method, options = T.unsafe(nil)); end

  # source://actionmailer//lib/action_mailer/parameterized.rb#133
  def processed_mailer; end
end

class ActionMailer::Preview
  extend ::ActiveSupport::DescendantsTracker

  # @return [Preview] a new instance of Preview
  #
  # source://actionmailer//lib/action_mailer/preview.rb#74
  def initialize(params = T.unsafe(nil)); end

  # Returns the value of attribute params.
  #
  # source://actionmailer//lib/action_mailer/preview.rb#72
  def params; end

  class << self
    # Returns all mailer preview classes.
    #
    # source://actionmailer//lib/action_mailer/preview.rb#80
    def all; end

    # Returns the mail object for the given email name. The registered preview
    # interceptors will be informed so that they can transform the message
    # as they would if the mail was actually being delivered.
    #
    # source://actionmailer//lib/action_mailer/preview.rb#88
    def call(email, params = T.unsafe(nil)); end

    # Returns +true+ if the email exists.
    #
    # @return [Boolean]
    #
    # source://actionmailer//lib/action_mailer/preview.rb#101
    def email_exists?(email); end

    # Returns all of the available email previews.
    #
    # source://actionmailer//lib/action_mailer/preview.rb#96
    def emails; end

    # Returns +true+ if the preview exists.
    #
    # @return [Boolean]
    #
    # source://actionmailer//lib/action_mailer/preview.rb#106
    def exists?(preview); end

    # Find a mailer preview by its underscored class name.
    #
    # source://actionmailer//lib/action_mailer/preview.rb#111
    def find(preview); end

    # Returns the underscored name of the mailer preview without the suffix.
    #
    # source://actionmailer//lib/action_mailer/preview.rb#116
    def preview_name; end

    private

    # source://actionmailer//lib/action_mailer/preview.rb#135
    def inform_preview_interceptors(message); end

    # source://actionmailer//lib/action_mailer/preview.rb#121
    def load_previews; end

    # source://actionmailer//lib/action_mailer/preview.rb#127
    def preview_path; end

    # source://actionmailer//lib/action_mailer/preview.rb#131
    def show_previews; end
  end
end

module ActionMailer::Previews
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionMailer::Previews::ClassMethods
end

module ActionMailer::Previews::ClassMethods
  # Register an Interceptor which will be called before mail is previewed.
  # Either a class or a string can be passed in as the Interceptor. If a
  # string is passed in it will be constantized.
  #
  # source://actionmailer//lib/action_mailer/preview.rb#42
  def register_preview_interceptor(interceptor); end

  # Register one or more Interceptors which will be called before mail is previewed.
  #
  # source://actionmailer//lib/action_mailer/preview.rb#30
  def register_preview_interceptors(*interceptors); end

  # Unregister a previously registered Interceptor.
  # Either a class or a string can be passed in as the Interceptor. If a
  # string is passed in it will be constantized.
  #
  # source://actionmailer//lib/action_mailer/preview.rb#53
  def unregister_preview_interceptor(interceptor); end

  # Unregister one or more previously registered Interceptors.
  #
  # source://actionmailer//lib/action_mailer/preview.rb#35
  def unregister_preview_interceptors(*interceptors); end

  private

  # source://actionmailer//lib/action_mailer/preview.rb#58
  def interceptor_class_for(interceptor); end
end

class ActionMailer::Railtie < ::Rails::Railtie; end

# Provides +rescue_from+ for mailers. Wraps mailer action processing,
# mail job processing, and mail delivery.
module ActionMailer::Rescuable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Rescuable

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods
  mixes_in_class_methods ::ActionMailer::Rescuable::ClassMethods

  # source://actionmailer//lib/action_mailer/rescuable.rb#16
  def handle_exceptions; end

  private

  # source://actionmailer//lib/action_mailer/rescuable.rb#23
  def process(*_arg0, **_arg1, &_arg2); end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

module ActionMailer::Rescuable::ClassMethods
  # source://actionmailer//lib/action_mailer/rescuable.rb#11
  def handle_exception(exception); end
end

class ActionMailer::TestCase < ::ActiveSupport::TestCase
  include ::ActiveSupport::Testing::ConstantLookup
  include ::ActiveJob::TestHelper
  include ::ActionMailer::TestHelper
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::ActionMailer::TestCase::Behavior
  extend ::ActiveSupport::Testing::ConstantLookup::ClassMethods
  extend ::ActionMailer::TestCase::Behavior::ClassMethods

  # source://actionmailer//lib/action_mailer/test_case.rb#41
  def _mailer_class; end

  # source://actionmailer//lib/action_mailer/test_case.rb#41
  def _mailer_class=(_arg0); end

  # source://actionmailer//lib/action_mailer/test_case.rb#41
  def _mailer_class?; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionmailer//lib/action_mailer/test_case.rb#41
    def _mailer_class; end

    # source://actionmailer//lib/action_mailer/test_case.rb#41
    def _mailer_class=(value); end

    # source://actionmailer//lib/action_mailer/test_case.rb#41
    def _mailer_class?; end
  end
end

module ActionMailer::TestCase::Behavior
  include ::ActiveSupport::Testing::Assertions
  include ::ActiveJob::TestHelper
  include ::ActionMailer::TestHelper
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Testing::ConstantLookup

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Testing::ConstantLookup::ClassMethods
  mixes_in_class_methods ::ActionMailer::TestCase::Behavior::ClassMethods

  private

  # source://actionmailer//lib/action_mailer/test_case.rb#106
  def charset; end

  # source://actionmailer//lib/action_mailer/test_case.rb#110
  def encode(subject); end

  # source://actionmailer//lib/action_mailer/test_case.rb#78
  def initialize_test_deliveries; end

  # source://actionmailer//lib/action_mailer/test_case.rb#114
  def read_fixture(action); end

  # source://actionmailer//lib/action_mailer/test_case.rb#95
  def restore_delivery_method; end

  # source://actionmailer//lib/action_mailer/test_case.rb#85
  def restore_test_deliveries; end

  # source://actionmailer//lib/action_mailer/test_case.rb#90
  def set_delivery_method(method); end

  # source://actionmailer//lib/action_mailer/test_case.rb#100
  def set_expected_mail; end

  module GeneratedClassMethods
    def _mailer_class; end
    def _mailer_class=(value); end
    def _mailer_class?; end
  end

  module GeneratedInstanceMethods
    def _mailer_class; end
    def _mailer_class=(value); end
    def _mailer_class?; end
  end
end

module ActionMailer::TestCase::Behavior::ClassMethods
  # @raise [NonInferrableMailerError]
  #
  # source://actionmailer//lib/action_mailer/test_case.rb#68
  def determine_default_mailer(name); end

  # source://actionmailer//lib/action_mailer/test_case.rb#60
  def mailer_class; end

  # source://actionmailer//lib/action_mailer/test_case.rb#49
  def tests(mailer); end
end

module ActionMailer::TestCase::ClearTestDeliveries
  extend ::ActiveSupport::Concern

  private

  # source://actionmailer//lib/action_mailer/test_case.rb#25
  def clear_test_deliveries; end
end

# Provides helper methods for testing Action Mailer, including #assert_emails
# and #assert_no_emails.
module ActionMailer::TestHelper
  include ::ActiveSupport::Testing::Assertions
  include ::ActiveJob::TestHelper

  # Asserts that the number of emails sent matches the given number.
  #
  #   def test_emails
  #     assert_emails 0
  #     ContactMailer.welcome.deliver_now
  #     assert_emails 1
  #     ContactMailer.welcome.deliver_now
  #     assert_emails 2
  #   end
  #
  # If a block is passed, that block should cause the specified number of
  # emails to be sent.
  #
  #   def test_emails_again
  #     assert_emails 1 do
  #       ContactMailer.welcome.deliver_now
  #     end
  #
  #     assert_emails 2 do
  #       ContactMailer.welcome.deliver_now
  #       ContactMailer.welcome.deliver_later
  #     end
  #   end
  #
  # source://actionmailer//lib/action_mailer/test_helper.rb#34
  def assert_emails(number, &block); end

  # Asserts that a specific email has been enqueued, optionally
  # matching arguments.
  #
  #   def test_email
  #     ContactMailer.welcome.deliver_later
  #     assert_enqueued_email_with ContactMailer, :welcome
  #   end
  #
  #   def test_email_with_arguments
  #     ContactMailer.welcome("Hello", "Goodbye").deliver_later
  #     assert_enqueued_email_with ContactMailer, :welcome, args: ["Hello", "Goodbye"]
  #   end
  #
  # If a block is passed, that block should cause the specified email
  # to be enqueued.
  #
  #   def test_email_in_block
  #     assert_enqueued_email_with ContactMailer, :welcome do
  #       ContactMailer.welcome.deliver_later
  #     end
  #   end
  #
  # If +args+ is provided as a Hash, a parameterized email is matched.
  #
  #   def test_parameterized_email
  #     assert_enqueued_email_with ContactMailer, :welcome,
  #       args: {email: 'user@example.com'} do
  #       ContactMailer.with(email: 'user@example.com').welcome.deliver_later
  #     end
  #   end
  #
  # source://actionmailer//lib/action_mailer/test_helper.rb#126
  def assert_enqueued_email_with(mailer, method, args: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  # Asserts that the number of emails enqueued for later delivery matches
  # the given number.
  #
  #   def test_emails
  #     assert_enqueued_emails 0
  #     ContactMailer.welcome.deliver_later
  #     assert_enqueued_emails 1
  #     ContactMailer.welcome.deliver_later
  #     assert_enqueued_emails 2
  #   end
  #
  # If a block is passed, that block should cause the specified number of
  # emails to be enqueued.
  #
  #   def test_emails_again
  #     assert_enqueued_emails 1 do
  #       ContactMailer.welcome.deliver_later
  #     end
  #
  #     assert_enqueued_emails 2 do
  #       ContactMailer.welcome.deliver_later
  #       ContactMailer.welcome.deliver_later
  #     end
  #   end
  #
  # source://actionmailer//lib/action_mailer/test_helper.rb#92
  def assert_enqueued_emails(number, &block); end

  # Asserts that no emails have been sent.
  #
  #   def test_emails
  #     assert_no_emails
  #     ContactMailer.welcome.deliver_now
  #     assert_emails 1
  #   end
  #
  # If a block is passed, that block should not cause any emails to be sent.
  #
  #   def test_emails_again
  #     assert_no_emails do
  #       # No emails should be sent from this block
  #     end
  #   end
  #
  # Note: This assertion is simply a shortcut for:
  #
  #   assert_emails 0, &block
  #
  # source://actionmailer//lib/action_mailer/test_helper.rb#64
  def assert_no_emails(&block); end

  # Asserts that no emails are enqueued for later delivery.
  #
  #   def test_no_emails
  #     assert_no_enqueued_emails
  #     ContactMailer.welcome.deliver_later
  #     assert_enqueued_emails 1
  #   end
  #
  # If a block is provided, it should not cause any emails to be enqueued.
  #
  #   def test_no_emails
  #     assert_no_enqueued_emails do
  #       # No emails should be enqueued from this block
  #     end
  #   end
  #
  # source://actionmailer//lib/action_mailer/test_helper.rb#150
  def assert_no_enqueued_emails(&block); end

  private

  # source://actionmailer//lib/action_mailer/test_helper.rb#155
  def delivery_job_filter(job); end
end

module ActionMailer::VERSION; end

# source://actionmailer//lib/action_mailer/gem_version.rb#10
ActionMailer::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://actionmailer//lib/action_mailer/gem_version.rb#11
ActionMailer::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://actionmailer//lib/action_mailer/gem_version.rb#13
ActionMailer::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)

# source://actionmailer//lib/action_mailer/gem_version.rb#15
ActionMailer::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://actionmailer//lib/action_mailer/gem_version.rb#12
ActionMailer::VERSION::TINY = T.let(T.unsafe(nil), Integer)

module ActionView::Layouts
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionView::ViewPaths
  include ::ActionView::Rendering

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods
  mixes_in_class_methods ::ActionView::Rendering::ClassMethods
  mixes_in_class_methods ::ActionView::Layouts::ClassMethods

  # source://actionview/7.0.4/lib/action_view/layouts.rb#361
  def initialize(*_arg0); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#215
  def _layout_conditions(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#350
  def _normalize_options(options); end

  def action_has_layout=(_arg0); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#372
  def action_has_layout?; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#377
  def _conditional_layout?; end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#415
  def _default_layout(lookup_context, formats, require_layout = T.unsafe(nil)); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#430
  def _include_layout?(options); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#382
  def _layout(*_arg0); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#388
  def _layout_for_option(name); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#401
  def _normalize_layout(value); end

  module GeneratedClassMethods
    def _layout; end
    def _layout=(value); end
    def _layout?; end
    def _layout_conditions; end
    def _layout_conditions=(value); end
    def _layout_conditions?; end
  end

  module GeneratedInstanceMethods; end
end

module ActionView::Layouts::ClassMethods
  # source://actionview/7.0.4/lib/action_view/layouts.rb#283
  def _write_layout_method; end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#218
  def inherited(klass); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#269
  def layout(layout, conditions = T.unsafe(nil)); end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#345
  def _implied_layout_name; end
end

module ActionView::Layouts::ClassMethods::LayoutConditions
  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#233
  def _conditional_layout?; end
end

module ActionView::Rendering
  extend ::ActiveSupport::Concern
  include ::ActionView::ViewPaths

  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods
  mixes_in_class_methods ::ActionView::Rendering::ClassMethods

  # source://actionview/7.0.4/lib/action_view/rendering.rb#31
  def initialize; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#37
  def process(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#101
  def render_to_body(options = T.unsafe(nil)); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#29
  def rendered_format; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#91
  def view_context; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#77
  def view_context_class; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#96
  def view_renderer; end

  private

  # source://actionview/7.0.4/lib/action_view/rendering.rb#134
  def _normalize_args(action = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#158
  def _normalize_options(options); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#127
  def _process_format(format); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#108
  def _render_template(options); end
end

module ActionView::Rendering::ClassMethods
  # source://actionview/7.0.4/lib/action_view/rendering.rb#48
  def _helpers; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#45
  def _routes; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#51
  def build_view_context_class(klass, supports_path, routes, helpers); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#64
  def view_context_class; end
end

module ActionView::ViewPaths
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#90
  def _prefixes; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def any_templates?(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#112
  def append_view_path(path); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#102
  def details_for_lookup; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def formats(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def formats=(arg); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def locale(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def locale=(arg); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#97
  def lookup_context; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#122
  def prepend_view_path(path); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def template_exists?(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def view_paths(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://actionview/7.0.4/lib/action_view/view_paths.rb#84
    def all_view_paths; end

    # source://actionview/7.0.4/lib/action_view/view_paths.rb#76
    def get_view_paths(klass); end

    # source://actionview/7.0.4/lib/action_view/view_paths.rb#80
    def set_view_paths(klass, paths); end
  end
end

module ActionView::ViewPaths::ClassMethods
  # source://actionview/7.0.4/lib/action_view/view_paths.rb#23
  def _prefixes; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#15
  def _view_paths; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#19
  def _view_paths=(paths); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#37
  def append_view_path(path); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#47
  def prepend_view_path(path); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#52
  def view_paths; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#61
  def view_paths=(paths); end

  private

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#68
  def local_prefixes; end
end

class ActiveJob::Base
  include ::ActiveJob::Core
  include ::ActiveJob::QueueAdapter
  include ::ActiveJob::QueueName
  include ::ActiveJob::QueuePriority
  include ::ActiveJob::Enqueuing
  include ::ActiveSupport::Rescuable
  include ::ActiveJob::Execution
  include ::ActiveSupport::Callbacks
  include ::ActiveJob::Callbacks
  include ::ActiveJob::Exceptions
  include ::ActiveJob::Instrumentation
  include ::ActiveJob::Logging
  include ::ActiveJob::Timezones
  include ::ActiveJob::Translation
  include ::ActiveJob::TestHelper::TestQueueAdapter
  extend ::ActiveJob::Core::ClassMethods
  extend ::ActiveJob::QueueAdapter::ClassMethods
  extend ::ActiveJob::QueueName::ClassMethods
  extend ::ActiveJob::QueuePriority::ClassMethods
  extend ::ActiveJob::Enqueuing::ClassMethods
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::ActiveJob::Execution::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveJob::Callbacks::ClassMethods
  extend ::ActiveJob::Exceptions::ClassMethods
  extend ::ActiveJob::TestHelper::TestQueueAdapter::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _enqueue_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _perform_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_enqueue_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_perform_callbacks(&block); end

  # source://activejob/7.0.4/lib/active_job/logging.rb#11
  def logger; end

  # source://activejob/7.0.4/lib/active_job/logging.rb#11
  def logger=(val); end

  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#15
  def queue_adapter(*_arg0, **_arg1, &_arg2); end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
  def queue_name_prefix; end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
  def queue_name_prefix=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
  def queue_name_prefix?; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers?; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _enqueue_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _enqueue_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _perform_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _perform_callbacks=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#13
    def _queue_adapter; end

    # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#13
    def _queue_adapter=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#12
    def _queue_adapter_name; end

    # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#12
    def _queue_adapter_name=(value); end

    # source://activejob/7.0.4/lib/active_job/test_helper.rb#19
    def _test_adapter; end

    # source://activejob/7.0.4/lib/active_job/test_helper.rb#19
    def _test_adapter=(value); end

    # source://activejob/7.0.4/lib/active_job/logging.rb#12
    def log_arguments; end

    # source://activejob/7.0.4/lib/active_job/logging.rb#12
    def log_arguments=(value); end

    # source://activejob/7.0.4/lib/active_job/logging.rb#12
    def log_arguments?; end

    # source://activejob/7.0.4/lib/active_job/logging.rb#11
    def logger; end

    # source://activejob/7.0.4/lib/active_job/logging.rb#11
    def logger=(val); end

    # source://activejob/7.0.4/lib/active_job/queue_priority.rb#32
    def priority; end

    # source://activejob/7.0.4/lib/active_job/queue_priority.rb#32
    def priority=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_priority.rb#32
    def priority?; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#56
    def queue_name; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#56
    def queue_name=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#56
    def queue_name?; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#57
    def queue_name_delimiter; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#57
    def queue_name_delimiter=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#57
    def queue_name_delimiter?; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
    def queue_name_prefix; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
    def queue_name_prefix=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
    def queue_name_prefix?; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers?; end

    # source://activejob/7.0.4/lib/active_job/exceptions.rb#11
    def retry_jitter; end

    # source://activejob/7.0.4/lib/active_job/exceptions.rb#11
    def retry_jitter=(value); end

    # source://activesupport/7.0.4/lib/active_support/deprecation/method_wrappers.rb#63
    def skip_after_callbacks_if_terminated(*args, **_arg1, &block); end

    # source://activesupport/7.0.4/lib/active_support/deprecation/method_wrappers.rb#63
    def skip_after_callbacks_if_terminated=(*args, **_arg1, &block); end
  end
end

module ActiveJob::Callbacks
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Callbacks
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveJob::Callbacks::ClassMethods

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
    def _execute_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
    def _run_execute_callbacks(&block); end
  end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

module ActiveJob::Callbacks::ClassMethods
  # source://activejob/7.0.4/lib/active_job/callbacks.rb#146
  def after_enqueue(*filters, &blk); end

  # source://activejob/7.0.4/lib/active_job/callbacks.rb#75
  def after_perform(*filters, &blk); end

  # source://activejob/7.0.4/lib/active_job/callbacks.rb#167
  def around_enqueue(*filters, &blk); end

  # source://activejob/7.0.4/lib/active_job/callbacks.rb#108
  def around_perform(*filters, &blk); end

  # source://activejob/7.0.4/lib/active_job/callbacks.rb#127
  def before_enqueue(*filters, &blk); end

  # source://activejob/7.0.4/lib/active_job/callbacks.rb#56
  def before_perform(*filters, &blk); end
end

module ActiveJob::Core
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::Core::ClassMethods

  # source://activejob/7.0.4/lib/active_job/core.rb#91
  def initialize(*arguments, **_arg1); end

  # source://activejob/7.0.4/lib/active_job/core.rb#10
  def arguments; end

  # source://activejob/7.0.4/lib/active_job/core.rb#10
  def arguments=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#146
  def deserialize(job_data); end

  # source://activejob/7.0.4/lib/active_job/core.rb#54
  def enqueue_error; end

  # source://activejob/7.0.4/lib/active_job/core.rb#54
  def enqueue_error=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#44
  def enqueued_at; end

  # source://activejob/7.0.4/lib/active_job/core.rb#44
  def enqueued_at=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#35
  def exception_executions; end

  # source://activejob/7.0.4/lib/active_job/core.rb#35
  def exception_executions=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#29
  def executions; end

  # source://activejob/7.0.4/lib/active_job/core.rb#29
  def executions=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#17
  def job_id; end

  # source://activejob/7.0.4/lib/active_job/core.rb#17
  def job_id=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#38
  def locale; end

  # source://activejob/7.0.4/lib/active_job/core.rb#38
  def locale=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#23
  def priority=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#26
  def provider_job_id; end

  # source://activejob/7.0.4/lib/active_job/core.rb#26
  def provider_job_id=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#20
  def queue_name=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#14
  def scheduled_at; end

  # source://activejob/7.0.4/lib/active_job/core.rb#14
  def scheduled_at=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#104
  def serialize; end

  # source://activejob/7.0.4/lib/active_job/core.rb#11
  def serialized_arguments=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#160
  def set(options = T.unsafe(nil)); end

  # source://activejob/7.0.4/lib/active_job/core.rb#47
  def successfully_enqueued=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#49
  def successfully_enqueued?; end

  # source://activejob/7.0.4/lib/active_job/core.rb#41
  def timezone; end

  # source://activejob/7.0.4/lib/active_job/core.rb#41
  def timezone=(_arg0); end

  private

  # source://activejob/7.0.4/lib/active_job/core.rb#193
  def arguments_serialized?; end

  # source://activejob/7.0.4/lib/active_job/core.rb#189
  def deserialize_arguments(serialized_args); end

  # source://activejob/7.0.4/lib/active_job/core.rb#178
  def deserialize_arguments_if_needed; end

  # source://activejob/7.0.4/lib/active_job/core.rb#185
  def serialize_arguments(arguments); end

  # source://activejob/7.0.4/lib/active_job/core.rb#170
  def serialize_arguments_if_needed(arguments); end
end

module ActiveJob::Core::ClassMethods
  # source://activejob/7.0.4/lib/active_job/core.rb#60
  def deserialize(job_data); end

  # source://activejob/7.0.4/lib/active_job/core.rb#84
  def set(options = T.unsafe(nil)); end
end

module ActiveJob::Enqueuing
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::Enqueuing::ClassMethods

  # source://activejob/7.0.4/lib/active_job/enqueuing.rb#59
  def enqueue(options = T.unsafe(nil)); end
end

module ActiveJob::Enqueuing::ClassMethods
  # source://activejob/7.0.4/lib/active_job/enqueuing.rb#28
  def perform_later(*_arg0, **_arg1, &_arg2); end

  private

  # source://activejob/7.0.4/lib/active_job/enqueuing.rb#38
  def job_or_instantiate(*args, **_arg1); end
end

module ActiveJob::Exceptions
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::Exceptions::ClassMethods

  # source://activejob/7.0.4/lib/active_job/exceptions.rb#124
  def retry_job(options = T.unsafe(nil)); end

  private

  # source://activejob/7.0.4/lib/active_job/exceptions.rb#134
  def determine_delay(seconds_or_duration_or_algorithm:, executions:, jitter: T.unsafe(nil)); end

  # source://activejob/7.0.4/lib/active_job/exceptions.rb#154
  def determine_jitter_for_delay(delay, jitter); end

  # source://activejob/7.0.4/lib/active_job/exceptions.rb#159
  def executions_for(exceptions); end

  module GeneratedClassMethods
    def retry_jitter; end
    def retry_jitter=(value); end
  end

  module GeneratedInstanceMethods; end
end

module ActiveJob::Exceptions::ClassMethods
  # source://activejob/7.0.4/lib/active_job/exceptions.rb#94
  def discard_on(*exceptions); end

  # source://activejob/7.0.4/lib/active_job/exceptions.rb#58
  def retry_on(*exceptions, wait: T.unsafe(nil), attempts: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil), jitter: T.unsafe(nil)); end
end

module ActiveJob::Execution
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Rescuable

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods
  mixes_in_class_methods ::ActiveJob::Execution::ClassMethods

  # source://activejob/7.0.4/lib/active_job/execution.rb#51
  def perform(*_arg0); end

  # source://activejob/7.0.4/lib/active_job/execution.rb#40
  def perform_now; end

  private

  # source://activejob/7.0.4/lib/active_job/execution.rb#56
  def _perform_job; end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

module ActiveJob::Execution::ClassMethods
  # source://activejob/7.0.4/lib/active_job/execution.rb#21
  def execute(job_data); end

  # source://activejob/7.0.4/lib/active_job/execution.rb#17
  def perform_now(*_arg0, **_arg1, &_arg2); end
end

module ActiveJob::Instrumentation
  extend ::ActiveSupport::Concern

  # source://activejob/7.0.4/lib/active_job/instrumentation.rb#13
  def perform_now; end

  private

  # source://activejob/7.0.4/lib/active_job/instrumentation.rb#18
  def _perform_job; end

  # source://activejob/7.0.4/lib/active_job/instrumentation.rb#39
  def halted_callback_hook(*_arg0); end

  # source://activejob/7.0.4/lib/active_job/instrumentation.rb#23
  def instrument(operation, payload = T.unsafe(nil), &block); end
end

module ActiveJob::Logging
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://activejob/7.0.4/lib/active_job/logging.rb#17
  def perform_now; end

  private

  # source://activejob/7.0.4/lib/active_job/logging.rb#31
  def logger_tagged_by_active_job?; end

  # source://activejob/7.0.4/lib/active_job/logging.rb#22
  def tag_logger(*tags, &block); end

  module GeneratedClassMethods
    def log_arguments; end
    def log_arguments=(value); end
    def log_arguments?; end
  end

  module GeneratedInstanceMethods; end
end

module ActiveJob::QueueAdapter
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueueAdapter::ClassMethods

  module GeneratedClassMethods
    def _queue_adapter; end
    def _queue_adapter=(value); end
    def _queue_adapter_name; end
    def _queue_adapter_name=(value); end
  end

  module GeneratedInstanceMethods; end
end

module ActiveJob::QueueAdapter::ClassMethods
  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#24
  def queue_adapter; end

  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#37
  def queue_adapter=(name_or_adapter); end

  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#30
  def queue_adapter_name; end

  private

  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#53
  def assign_adapter(adapter_name, queue_adapter); end

  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#60
  def queue_adapter?(object); end
end

# source://activejob/7.0.4/lib/active_job/queue_adapter.rb#58
ActiveJob::QueueAdapter::ClassMethods::QUEUE_ADAPTER_METHODS = T.let(T.unsafe(nil), Array)

module ActiveJob::QueueName
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueueName::ClassMethods

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#62
  def queue_name; end

  module GeneratedClassMethods
    def queue_name; end
    def queue_name=(value); end
    def queue_name?; end
    def queue_name_delimiter; end
    def queue_name_delimiter=(value); end
    def queue_name_delimiter?; end
    def queue_name_prefix; end
    def queue_name_prefix=(value); end
    def queue_name_prefix?; end
  end

  module GeneratedInstanceMethods
    def queue_name_prefix; end
    def queue_name_prefix=(value); end
    def queue_name_prefix?; end
  end
end

module ActiveJob::QueueName::ClassMethods
  # source://activejob/7.0.4/lib/active_job/queue_name.rb#9
  def default_queue_name; end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#9
  def default_queue_name=(val); end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#40
  def queue_as(part_name = T.unsafe(nil), &block); end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#48
  def queue_name_from_part(part_name); end

  class << self
    # source://activejob/7.0.4/lib/active_job/queue_name.rb#9
    def default_queue_name; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#9
    def default_queue_name=(val); end
  end
end

module ActiveJob::QueuePriority
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueuePriority::ClassMethods

  # source://activejob/7.0.4/lib/active_job/queue_priority.rb#36
  def priority; end

  module GeneratedClassMethods
    def priority; end
    def priority=(value); end
    def priority?; end
  end

  module GeneratedInstanceMethods; end
end

module ActiveJob::QueuePriority::ClassMethods
  # source://activejob/7.0.4/lib/active_job/queue_priority.rb#9
  def default_priority; end

  # source://activejob/7.0.4/lib/active_job/queue_priority.rb#9
  def default_priority=(val); end

  # source://activejob/7.0.4/lib/active_job/queue_priority.rb#22
  def queue_with_priority(priority = T.unsafe(nil), &block); end

  class << self
    # source://activejob/7.0.4/lib/active_job/queue_priority.rb#9
    def default_priority; end

    # source://activejob/7.0.4/lib/active_job/queue_priority.rb#9
    def default_priority=(val); end
  end
end

module ActiveJob::TestHelper
  include ::ActiveSupport::Testing::Assertions

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#51
  def after_teardown; end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#123
  def assert_enqueued_jobs(number, only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#392
  def assert_enqueued_with(job: T.unsafe(nil), args: T.unsafe(nil), at: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil), &block); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#185
  def assert_no_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#343
  def assert_no_performed_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#275
  def assert_performed_jobs(number, only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#494
  def assert_performed_with(job: T.unsafe(nil), args: T.unsafe(nil), at: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil), &block); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#39
  def before_setup; end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#9
  def enqueued_jobs(*_arg0, **_arg1, &_arg2); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#9
  def enqueued_jobs=(arg); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#598
  def perform_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), at: T.unsafe(nil), &block); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#9
  def performed_jobs(*_arg0, **_arg1, &_arg2); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#9
  def performed_jobs=(arg); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#634
  def queue_adapter; end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#66
  def queue_adapter_for_test; end

  private

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#639
  def clear_enqueued_jobs; end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#643
  def clear_performed_jobs; end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#704
  def deserialize_args_for_assertion(job); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#679
  def enqueued_jobs_with(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), at: T.unsafe(nil), &block); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#673
  def filter_as_proc(filter); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#687
  def flush_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), at: T.unsafe(nil)); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#711
  def instantiate_job(payload, skip_deserialize_arguments: T.unsafe(nil)); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#647
  def jobs_with(jobs, only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), at: T.unsafe(nil)); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#683
  def performed_jobs_with(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#695
  def prepare_args_for_assertion(args); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#718
  def queue_adapter_changed_jobs; end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#725
  def validate_option(only: T.unsafe(nil), except: T.unsafe(nil)); end
end

module ActiveJob::TestHelper::TestQueueAdapter
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::TestHelper::TestQueueAdapter::ClassMethods

  module GeneratedClassMethods
    def _test_adapter; end
    def _test_adapter=(value); end
  end

  module GeneratedInstanceMethods; end
end

module ActiveJob::TestHelper::TestQueueAdapter::ClassMethods
  # source://activejob/7.0.4/lib/active_job/test_helper.rb#27
  def disable_test_adapter; end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#31
  def enable_test_adapter(test_adapter); end

  # source://activejob/7.0.4/lib/active_job/test_helper.rb#23
  def queue_adapter; end
end

module ActiveJob::Timezones
  extend ::ActiveSupport::Concern
end

module ActiveJob::Translation
  extend ::ActiveSupport::Concern
end

module ActiveSupport::Autoload
  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#37
  def autoload(const_name, path = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#57
  def autoload_at(path); end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#50
  def autoload_under(path); end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#75
  def autoloads; end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#64
  def eager_autoload; end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#71
  def eager_load!; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#28
    def extended(base); end
  end
end

module ActiveSupport::Benchmarkable
  # source://activesupport/7.0.4/lib/active_support/benchmarkable.rb#37
  def benchmark(message = T.unsafe(nil), options = T.unsafe(nil), &block); end
end

module ActiveSupport::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#95
  def run_callbacks(kind); end

  private

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#147
  def halted_callback_hook(filter, name); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://activesupport/7.0.4/lib/active_support/callbacks.rb#71
ActiveSupport::Callbacks::CALLBACK_FILTER_TYPES = T.let(T.unsafe(nil), Array)

module ActiveSupport::Callbacks::CallTemplate
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#533
    def build(filter, callback); end
  end
end

class ActiveSupport::Callbacks::CallTemplate::InstanceExec0
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#435
  def initialize(block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#439
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#449
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#443
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::InstanceExec1
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#457
  def initialize(block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#461
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#471
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#465
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::InstanceExec2
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#479
  def initialize(block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#483
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#495
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#488
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::MethodCall
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#377
  def initialize(method); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#394
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#404
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#398
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::ObjectCall
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#412
  def initialize(target, method); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#417
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#427
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#421
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::ProcCall
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#504
  def initialize(target); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#508
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#518
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#512
  def make_lambda; end
end

class ActiveSupport::Callbacks::Callback
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#295
  def initialize(name, filter, kind, options, chain_config); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#330
  def apply(callback_sequence); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#293
  def chain_config; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#344
  def current_scopes; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#320
  def duplicates?(other); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#293
  def filter; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def kind; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def kind=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#316
  def matches?(_kind, _filter); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#304
  def merge_conditional_options(chain, if_option:, unless_option:); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def name; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def name=(_arg0); end

  private

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#352
  def check_conditionals(conditionals); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#367
  def conditions_lambdas; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#281
    def build(chain, filter, kind, options); end
  end
end

class ActiveSupport::Callbacks::CallbackChain
  include ::Enumerable

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#608
  def initialize(name, config); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#654
  def append(*callbacks); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#633
  def clear; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#645
  def compile; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#606
  def config; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#628
  def delete(o); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#619
  def each(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#621
  def empty?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#620
  def index(o); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#623
  def insert(index, o); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#606
  def name; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#658
  def prepend(*callbacks); end

  protected

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#663
  def chain; end

  private

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#666
  def append_one(callback); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#683
  def default_terminator; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#639
  def initialize_copy(other); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#672
  def prepend_one(callback); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#678
  def remove_duplicates(callback); end
end

class ActiveSupport::Callbacks::CallbackSequence
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#557
  def initialize(nested = T.unsafe(nil), call_template = T.unsafe(nil), user_conditions = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#571
  def after(&after); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#576
  def around(call_template, user_conditions); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#566
  def before(&before); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#590
  def expand_call_template(arg, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#586
  def final?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#598
  def invoke_after(arg); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#594
  def invoke_before(arg); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#584
  def nested; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#580
  def skip?(arg); end
end

module ActiveSupport::Callbacks::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#705
  def __update_callbacks(name); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#917
  def define_callbacks(*names); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#696
  def normalize_callback_params(filters, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#827
  def reset_callbacks(name); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#756
  def set_callback(name, *filter_list, &block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#802
  def skip_callback(name, *filter_list, &block); end

  protected

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#948
  def get_callbacks(name); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#952
  def set_callbacks(name, callbacks); end
end

module ActiveSupport::Callbacks::Conditionals; end

class ActiveSupport::Callbacks::Conditionals::Value
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#152
  def initialize(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#155
  def call(target, value); end
end

module ActiveSupport::Callbacks::Filters; end

class ActiveSupport::Callbacks::Filters::After
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#213
    def build(callback_sequence, user_callback, user_conditions, chain_config); end

    private

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#255
    def conditional(callback_sequence, user_callback, user_conditions); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#244
    def halting(callback_sequence, user_callback); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#229
    def halting_and_conditional(callback_sequence, user_callback, user_conditions); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#269
    def simple(callback_sequence, user_callback); end
  end
end

class ActiveSupport::Callbacks::Filters::Before
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#163
    def build(callback_sequence, user_callback, user_conditions, chain_config, filter, name); end

    private

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#192
    def halting(callback_sequence, user_callback, halted_lambda, filter, name); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#173
    def halting_and_conditional(callback_sequence, user_callback, user_conditions, halted_lambda, filter, name); end
  end
end

class ActiveSupport::Callbacks::Filters::Environment < ::Struct
  def halted; end
  def halted=(_); end
  def target; end
  def target=(_); end
  def value; end
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module ActiveSupport::Concern
  # source://activesupport/7.0.4/lib/active_support/concern.rb#127
  def append_features(base); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#207
  def class_methods(&class_methods_module_definition); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#156
  def included(base = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#140
  def prepend_features(base); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#173
  def prepended(base = T.unsafe(nil), &block); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/concern.rb#123
    def extended(base); end
  end
end

class ActiveSupport::Concern::MultipleIncludedBlocks < ::StandardError
  # source://activesupport/7.0.4/lib/active_support/concern.rb#112
  def initialize; end
end

class ActiveSupport::Concern::MultiplePrependBlocks < ::StandardError
  # source://activesupport/7.0.4/lib/active_support/concern.rb#118
  def initialize; end
end

module ActiveSupport::Configurable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveSupport::Configurable::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#145
  def config; end
end

module ActiveSupport::Configurable::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/configurable.rb#28
  def config; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#37
  def configure; end

  private

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#109
  def config_accessor(*names, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil)); end
end

class ActiveSupport::Configurable::Configuration < ::ActiveSupport::InheritableOptions
  # source://activesupport/7.0.4/lib/active_support/configurable.rb#13
  def compile_methods!; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/configurable.rb#18
    def compile_methods!(keys); end
  end
end

module ActiveSupport::DescendantsTracker
  # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#88
  def descendants; end

  # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#92
  def direct_descendants; end

  # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#82
  def subclasses; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#66
    def clear(classes); end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#62
    def descendants(klass); end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#11
    def direct_descendants(klass); end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#50
    def disable_clear!; end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#77
    def native?; end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#58
    def subclasses(klass); end
  end
end

class ActiveSupport::InheritableOptions < ::ActiveSupport::OrderedOptions
  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#80
  def initialize(parent = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#91
  def inheritable_copy; end
end

class ActiveSupport::LogSubscriber < ::ActiveSupport::Subscriber
  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
  def colorize_logging; end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
  def colorize_logging=(val); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def debug(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def error(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def fatal(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#114
  def finish(name, id, payload); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def info(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#106
  def logger; end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#120
  def publish_event(event); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#110
  def start(name, id, payload); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def unknown(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def warn(progname = T.unsafe(nil), &block); end

  private

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#139
  def color(text, color, bold = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#146
  def log_exception(name, e); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
    def colorize_logging; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
    def colorize_logging=(val); end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#96
    def flush_all!; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#91
    def log_subscribers; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#83
    def logger; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#89
    def logger=(_arg0); end

    private

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#101
    def fetch_public_methods(subscriber, inherit_all); end
  end
end

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#71
ActiveSupport::LogSubscriber::BLACK = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#75
ActiveSupport::LogSubscriber::BLUE = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#68
ActiveSupport::LogSubscriber::BOLD = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#67
ActiveSupport::LogSubscriber::CLEAR = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#77
ActiveSupport::LogSubscriber::CYAN = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#73
ActiveSupport::LogSubscriber::GREEN = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#76
ActiveSupport::LogSubscriber::MAGENTA = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#72
ActiveSupport::LogSubscriber::RED = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#78
ActiveSupport::LogSubscriber::WHITE = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#74
ActiveSupport::LogSubscriber::YELLOW = T.let(T.unsafe(nil), String)

class ActiveSupport::OrderedOptions < ::Hash
  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#39
  def [](key); end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#35
  def []=(key, value); end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#62
  def extractable_options?; end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#66
  def inspect; end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#43
  def method_missing(name, *args); end

  protected

  def _get(_arg0); end

  private

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#58
  def respond_to_missing?(name, include_private); end
end

module ActiveSupport::Rescuable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#170
  def handler_for_rescue(exception); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#164
  def rescue_with_handler(exception); end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

module ActiveSupport::Rescuable::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#103
  def handler_for_rescue(exception, object: T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#51
  def rescue_from(*klasses, with: T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#88
  def rescue_with_handler(exception, object: T.unsafe(nil), visited_exceptions: T.unsafe(nil)); end

  private

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#137
  def constantize_rescue_handler_class(class_or_name); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#122
  def find_rescue_handler(exception); end
end

class ActiveSupport::Subscriber
  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#128
  def initialize; end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#143
  def finish(name, id, payload); end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#126
  def patterns; end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#152
  def publish_event(event); end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#134
  def start(name, id, payload); end

  private

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#158
  def event_stack; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#33
    def attach_to(namespace, subscriber = T.unsafe(nil), notifier = T.unsafe(nil), inherit_all: T.unsafe(nil)); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#48
    def detach_from(namespace, notifier = T.unsafe(nil)); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#67
    def method_added(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#76
    def subscribers; end

    private

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#83
    def add_event_subscriber(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#121
    def fetch_public_methods(subscriber, inherit_all); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#105
    def find_attached_subscriber; end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#109
    def invalid_event?(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#81
    def namespace; end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#81
    def notifier; end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#117
    def pattern_subscribed?(pattern); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#113
    def prepare_pattern(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#94
    def remove_event_subscriber(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#81
    def subscriber; end
  end
end

class ActiveSupport::TestCase < ::Minitest::Test
  include ::ActiveSupport::Testing::SetupAndTeardown
  include ::ActiveSupport::Testing::TaggedLogging
  include ::ActiveSupport::Callbacks
  include ::ActiveSupport::Testing::Assertions
  include ::ActiveSupport::Testing::Deprecation
  include ::ActiveSupport::Testing::TimeHelpers
  include ::ActiveSupport::Testing::FileFixtures
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveSupport::Testing::SetupAndTeardown::ClassMethods
  extend ::ActiveSupport::Testing::Declarative

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_setup_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_teardown_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _setup_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _teardown_callbacks; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#709
  def assert_no_match(matcher, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#638
  def assert_not_empty(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#649
  def assert_not_equal(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#661
  def assert_not_in_delta(exp, act, delta = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#673
  def assert_not_in_epsilon(a, b, epsilon = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#680
  def assert_not_includes(collection, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#691
  def assert_not_instance_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#701
  def assert_not_kind_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#719
  def assert_not_nil(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#730
  def assert_not_operator(o1, op, o2 = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#753
  def assert_not_predicate(o1, op, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#761
  def assert_not_respond_to(obj, meth, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#770
  def assert_not_same(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#396
  def assert_raise(*exp); end

  # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
  def file_fixture_path; end

  # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
  def file_fixture_path?; end

  # source://activesupport/7.0.4/lib/active_support/test_case.rb#151
  def inspect; end

  # source://minitest/5.16.3/lib/minitest.rb#304
  def method_name; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _setup_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _setup_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _teardown_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _teardown_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path; end

    # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path=(value); end

    # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path?; end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#79
    def parallelize(workers: T.unsafe(nil), with: T.unsafe(nil), threshold: T.unsafe(nil)); end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#101
    def parallelize_setup(&block); end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#118
    def parallelize_teardown(&block); end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#42
    def test_order; end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#32
    def test_order=(new_order); end
  end
end

# source://activesupport/7.0.4/lib/active_support/test_case.rb#20
ActiveSupport::TestCase::Assertion = Minitest::Assertion

module ActiveSupport::Testing::Assertions
  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#175
  def assert_changes(expression, message = T.unsafe(nil), from: T.unsafe(nil), to: T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#86
  def assert_difference(expression, *args, &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#222
  def assert_no_changes(expression, message = T.unsafe(nil), from: T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#137
  def assert_no_difference(expression, message = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#21
  def assert_not(object, message = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#33
  def assert_nothing_raised; end

  private

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#249
  def _assert_nothing_raised_or_warn(assertion, &block); end
end

# source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#8
ActiveSupport::Testing::Assertions::UNTRACKED = T.let(T.unsafe(nil), Object)

module ActiveSupport::Testing::ConstantLookup
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveSupport::Testing::ConstantLookup::ClassMethods
end

module ActiveSupport::Testing::ConstantLookup::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/testing/constant_lookup.rb#36
  def determine_constant_from_test_name(test_name); end
end

module ActiveSupport::Testing::Declarative
  # source://activesupport/7.0.4/lib/active_support/testing/declarative.rb#13
  def test(name, &block); end
end

module ActiveSupport::Testing::Deprecation
  # source://activesupport/7.0.4/lib/active_support/testing/deprecation.rb#31
  def assert_deprecated(match = T.unsafe(nil), deprecator = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/deprecation.rb#56
  def assert_not_deprecated(deprecator = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/deprecation.rb#75
  def collect_deprecations(deprecator = T.unsafe(nil)); end
end

module ActiveSupport::Testing::FileFixtures
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#26
  def file_fixture(fixture_name); end

  module GeneratedClassMethods
    def file_fixture_path; end
    def file_fixture_path=(value); end
    def file_fixture_path?; end
  end

  module GeneratedInstanceMethods
    def file_fixture_path; end
    def file_fixture_path?; end
  end
end

module ActiveSupport::Testing::SetupAndTeardown
  # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#44
  def after_teardown; end

  # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#39
  def before_setup; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#21
    def prepended(klass); end
  end
end

module ActiveSupport::Testing::SetupAndTeardown::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#29
  def setup(*args, &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#34
  def teardown(*args, &block); end
end

module ActiveSupport::Testing::TaggedLogging
  # source://activesupport/7.0.4/lib/active_support/testing/tagged_logging.rb#10
  def before_setup; end

  # source://activesupport/7.0.4/lib/active_support/testing/tagged_logging.rb#8
  def tagged_logger=(_arg0); end

  private

  # source://activesupport/7.0.4/lib/active_support/testing/tagged_logging.rb#22
  def tagged_logger; end
end

module ActiveSupport::Testing::TimeHelpers
  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#70
  def after_teardown; end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#234
  def freeze_time(&block); end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#93
  def travel(duration, &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#208
  def travel_back; end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#128
  def travel_to(date_or_time); end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#208
  def unfreeze_time; end

  private

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#243
  def in_block; end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#243
  def in_block=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#239
  def simple_stubs; end
end

class Loofah::Scrubber
  # source://loofah/2.19.0/lib/loofah/scrubber.rb#65
  def initialize(options = T.unsafe(nil), &block); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#94
  def append_attribute(node, attribute, value); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#49
  def block; end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#44
  def direction; end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#86
  def scrub(node); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#78
  def traverse(node); end

  private

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#103
  def html5lib_sanitize(node); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#125
  def traverse_conditionally_bottom_up(node); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#116
  def traverse_conditionally_top_down(node); end
end

# source://loofah/2.19.0/lib/loofah/scrubber.rb#37
Loofah::Scrubber::CONTINUE = T.let(T.unsafe(nil), Object)

# source://loofah/2.19.0/lib/loofah/scrubber.rb#40
Loofah::Scrubber::STOP = T.let(T.unsafe(nil), Object)

module Minitest::Assertions
  # source://minitest/5.16.3/lib/minitest/assertions.rb#188
  def _synchronize; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#178
  def assert(test, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#195
  def assert_empty(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#216
  def assert_equal(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#240
  def assert_in_delta(exp, act, delta = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#252
  def assert_in_epsilon(exp, act, epsilon = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#259
  def assert_includes(collection, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#270
  def assert_instance_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#281
  def assert_kind_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#291
  def assert_match(matcher, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#303
  def assert_nil(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#313
  def assert_operator(o1, op, o2 = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#331
  def assert_output(stdout = T.unsafe(nil), stderr = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#355
  def assert_path_exists(path, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#369
  def assert_predicate(o1, op, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#396
  def assert_raises(*exp); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#427
  def assert_respond_to(obj, meth, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#437
  def assert_same(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#450
  def assert_send(send_ary, m = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#466
  def assert_silent; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#475
  def assert_throws(sym, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#516
  def capture_io; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#549
  def capture_subprocess_io; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#59
  def diff(exp, act); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#581
  def exception_details(e, msg); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#597
  def fail_after(y, m, d, msg); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#604
  def flunk(msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#612
  def message(msg = T.unsafe(nil), ending = T.unsafe(nil), &default); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#129
  def mu_pp(obj); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#152
  def mu_pp_for_diff(obj); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#623
  def pass(_msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#630
  def refute(test, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#638
  def refute_empty(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#649
  def refute_equal(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#661
  def refute_in_delta(exp, act, delta = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#673
  def refute_in_epsilon(a, b, epsilon = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#680
  def refute_includes(collection, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#691
  def refute_instance_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#701
  def refute_kind_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#709
  def refute_match(matcher, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#719
  def refute_nil(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#730
  def refute_operator(o1, op, o2 = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#739
  def refute_path_exists(path, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#753
  def refute_predicate(o1, op, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#761
  def refute_respond_to(obj, meth, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#770
  def refute_same(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#783
  def skip(msg = T.unsafe(nil), bt = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#795
  def skip_until(y, m, d, msg); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#804
  def skipped?; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#104
  def things_to_diff(exp, act); end

  class << self
    # source://minitest/5.16.3/lib/minitest/assertions.rb#29
    def diff; end

    # source://minitest/5.16.3/lib/minitest/assertions.rb#47
    def diff=(o); end
  end
end

# source://minitest/5.16.3/lib/minitest/assertions.rb#201
Minitest::Assertions::E = T.let(T.unsafe(nil), String)

# source://minitest/5.16.3/lib/minitest/assertions.rb#19
Minitest::Assertions::UNDEFINED = T.let(T.unsafe(nil), Object)

module Minitest::Guard
  # source://minitest/5.16.3/lib/minitest.rb#984
  def jruby?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#991
  def maglev?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#1001
  def mri?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#1008
  def osx?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#1015
  def rubinius?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#1025
  def windows?(platform = T.unsafe(nil)); end
end

module Minitest::Reportable
  # source://minitest/5.16.3/lib/minitest.rb#495
  def class_name; end

  # source://minitest/5.16.3/lib/minitest.rb#516
  def error?; end

  # source://minitest/5.16.3/lib/minitest.rb#490
  def location; end

  # source://minitest/5.16.3/lib/minitest.rb#482
  def passed?; end

  # source://minitest/5.16.3/lib/minitest.rb#502
  def result_code; end

  # source://minitest/5.16.3/lib/minitest.rb#509
  def skipped?; end
end

class Minitest::Runnable
  # source://minitest/5.16.3/lib/minitest.rb#431
  def initialize(name); end

  # source://minitest/5.16.3/lib/minitest.rb#281
  def assertions; end

  # source://minitest/5.16.3/lib/minitest.rb#281
  def assertions=(_arg0); end

  # source://minitest/5.16.3/lib/minitest.rb#427
  def failure; end

  # source://minitest/5.16.3/lib/minitest.rb#286
  def failures; end

  # source://minitest/5.16.3/lib/minitest.rb#286
  def failures=(_arg0); end

  # source://minitest/5.16.3/lib/minitest.rb#413
  def marshal_dump; end

  # source://minitest/5.16.3/lib/minitest.rb#423
  def marshal_load(ary); end

  # source://minitest/5.16.3/lib/minitest.rb#304
  def name; end

  # source://minitest/5.16.3/lib/minitest.rb#311
  def name=(o); end

  # source://minitest/5.16.3/lib/minitest.rb#450
  def passed?; end

  # source://minitest/5.16.3/lib/minitest.rb#459
  def result_code; end

  # source://minitest/5.16.3/lib/minitest.rb#440
  def run; end

  # source://minitest/5.16.3/lib/minitest.rb#466
  def skipped?; end

  # source://minitest/5.16.3/lib/minitest.rb#291
  def time; end

  # source://minitest/5.16.3/lib/minitest.rb#291
  def time=(_arg0); end

  # source://minitest/5.16.3/lib/minitest.rb#293
  def time_it; end

  class << self
    # source://minitest/5.16.3/lib/minitest.rb#1077
    def inherited(klass); end

    # source://minitest/5.16.3/lib/minitest.rb#318
    def methods_matching(re); end

    # source://minitest/5.16.3/lib/minitest.rb#383
    def on_signal(name, action); end

    # source://minitest/5.16.3/lib/minitest.rb#322
    def reset; end

    # source://minitest/5.16.3/lib/minitest.rb#333
    def run(reporter, options = T.unsafe(nil)); end

    # source://minitest/5.16.3/lib/minitest.rb#363
    def run_one_method(klass, method_name, reporter); end

    # source://minitest/5.16.3/lib/minitest.rb#400
    def runnable_methods; end

    # source://minitest/5.16.3/lib/minitest.rb#407
    def runnables; end

    # source://minitest/5.16.3/lib/minitest.rb#368
    def with_info_handler(reporter, &block); end
  end
end

# source://minitest/5.16.3/lib/minitest.rb#381
Minitest::Runnable::SIGNALS = T.let(T.unsafe(nil), Hash)

class Minitest::Test < ::Minitest::Runnable
  include ::Minitest::Assertions
  include ::Minitest::Reportable
  include ::Minitest::Test::LifecycleHooks
  include ::Minitest::Guard
  extend ::Minitest::Guard

  # source://minitest/5.16.3/lib/minitest/test.rb#194
  def capture_exceptions; end

  # source://minitest/5.16.3/lib/minitest/test.rb#15
  def class_name; end

  # source://minitest/5.16.3/lib/minitest/test.rb#211
  def neuter_exception(e); end

  # source://minitest/5.16.3/lib/minitest/test.rb#222
  def new_exception(klass, msg, bt, kill = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/test.rb#92
  def run; end

  # source://minitest/5.16.3/lib/minitest/test.rb#204
  def sanitize_exception(e); end

  # source://minitest/5.16.3/lib/minitest/test.rb#236
  def with_info_handler(&block); end

  class << self
    # source://minitest/5.16.3/lib/minitest/test.rb#31
    def i_suck_and_my_tests_are_order_dependent!; end

    # source://minitest/5.16.3/lib/minitest/test.rb#22
    def io_lock; end

    # source://minitest/5.16.3/lib/minitest/test.rb#22
    def io_lock=(_arg0); end

    # source://minitest/5.16.3/lib/minitest/test.rb#44
    def make_my_diffs_pretty!; end

    # source://minitest/5.16.3/lib/minitest/test.rb#55
    def parallelize_me!; end

    # source://minitest/5.16.3/lib/minitest/test.rb#65
    def runnable_methods; end

    # source://minitest/5.16.3/lib/minitest/test.rb#83
    def test_order; end
  end
end

module Minitest::Test::LifecycleHooks
  # source://minitest/5.16.3/lib/minitest/test.rb#167
  def after_setup; end

  # source://minitest/5.16.3/lib/minitest/test.rb#191
  def after_teardown; end

  # source://minitest/5.16.3/lib/minitest/test.rb#152
  def before_setup; end

  # source://minitest/5.16.3/lib/minitest/test.rb#176
  def before_teardown; end

  # source://minitest/5.16.3/lib/minitest/test.rb#158
  def setup; end

  # source://minitest/5.16.3/lib/minitest/test.rb#182
  def teardown; end
end

# source://minitest/5.16.3/lib/minitest/test.rb#19
Minitest::Test::PASSTHROUGH_EXCEPTIONS = T.let(T.unsafe(nil), Array)

# source://minitest/5.16.3/lib/minitest/test.rb#87
Minitest::Test::TEARDOWN_METHODS = T.let(T.unsafe(nil), Array)

class Rack::Session::Abstract::SessionHash
  include ::Enumerable

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#62
  def initialize(store, req); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#82
  def [](key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#108
  def []=(key, value); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#114
  def clear; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#140
  def delete(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#119
  def destroy; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#87
  def dig(key, *keys); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#77
  def each(&block); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#163
  def empty?; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#153
  def exists?; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#92
  def fetch(key, default = T.unsafe(nil), &block); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#101
  def has_key?(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#68
  def id; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#46
  def id=(_arg0); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#101
  def include?(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#145
  def inspect; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#101
  def key?(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#168
  def keys; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#159
  def loaded?; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#129
  def merge!(hash); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#73
  def options; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#135
  def replace(hash); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#108
  def store(key, value); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#124
  def to_hash; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#129
  def update(hash); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#173
  def values; end

  private

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#188
  def load!; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#180
  def load_for_read!; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#184
  def load_for_write!; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#194
  def stringify_keys(other); end

  class << self
    # source://rack/2.2.4/lib/rack/session/abstract/id.rb#50
    def find(req); end

    # source://rack/2.2.4/lib/rack/session/abstract/id.rb#54
    def set(req, session); end

    # source://rack/2.2.4/lib/rack/session/abstract/id.rb#58
    def set_options(req, options); end
  end
end

# source://rack/2.2.4/lib/rack/session/abstract/id.rb#48
Rack::Session::Abstract::SessionHash::Unspecified = T.let(T.unsafe(nil), Object)

module Rails
  extend ::ActiveSupport::Autoload
  extend ::ActiveSupport::Benchmarkable

  class << self
    # source://railties/7.0.4/lib/rails.rb#38
    def app_class; end

    # source://railties/7.0.4/lib/rails.rb#38
    def app_class=(_arg0); end

    # source://railties/7.0.4/lib/rails.rb#39
    def application; end

    # source://railties/7.0.4/lib/rails.rb#37
    def application=(_arg0); end

    # source://railties/7.0.4/lib/rails.rb#123
    def autoloaders; end

    # source://railties/7.0.4/lib/rails.rb#50
    def backtrace_cleaner; end

    # source://railties/7.0.4/lib/rails.rb#38
    def cache; end

    # source://railties/7.0.4/lib/rails.rb#38
    def cache=(_arg0); end

    # source://railties/7.0.4/lib/rails.rb#46
    def configuration; end

    # source://railties/7.0.4/lib/rails.rb#72
    def env; end

    # source://railties/7.0.4/lib/rails.rb#79
    def env=(environment); end

    # source://railties/7.0.4/lib/rails.rb#90
    def error; end

    # source://railties/7.0.4/lib/rails/gem_version.rb#5
    def gem_version; end

    # source://railties/7.0.4/lib/rails.rb#103
    def groups(*groups); end

    # source://railties/7.0.4/lib/rails.rb#43
    def initialize!(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.0.4/lib/rails.rb#43
    def initialized?(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.0.4/lib/rails.rb#38
    def logger; end

    # source://railties/7.0.4/lib/rails.rb#38
    def logger=(_arg0); end

    # source://railties/7.0.4/lib/rails.rb#119
    def public_path; end

    # source://railties/7.0.4/lib/rails.rb#63
    def root; end

    # source://railties/7.0.4/lib/rails/version.rb#7
    def version; end
  end
end

class Rails::Application < ::Rails::Engine
  # source://railties/7.0.4/lib/rails/application.rb#106
  def initialize(initial_variable_values = T.unsafe(nil), &block); end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def assets; end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def assets=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def autoloaders; end

  # source://railties/7.0.4/lib/rails/engine.rb#511
  def build_middleware_stack; end

  # source://railties/7.0.4/lib/rails/application.rb#383
  def config; end

  # source://railties/7.0.4/lib/rails/application.rb#387
  def config=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#221
  def config_for(name, env: T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application.rb#303
  def console(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#432
  def credentials; end

  # source://railties/7.0.4/lib/rails/application.rb#403
  def credentials=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#101
  def default_url_options(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/application.rb#101
  def default_url_options=(arg); end

  # source://railties/7.0.4/lib/rails/application.rb#497
  def eager_load!; end

  # source://railties/7.0.4/lib/rails/application.rb#463
  def encrypted(path, key_path: T.unsafe(nil), env_key: T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application.rb#250
  def env_config; end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def executor; end

  # source://railties/7.0.4/lib/rails/application.rb#309
  def generators(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#476
  def helpers_paths; end

  # source://importmap-rails/1.1.5/lib/importmap/engine.rb#4
  def importmap; end

  # source://importmap-rails/1.1.5/lib/importmap/engine.rb#4
  def importmap=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#370
  def initialize!(group = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application.rb#129
  def initialized?; end

  # source://railties/7.0.4/lib/rails/application.rb#291
  def initializer(name, opts = T.unsafe(nil), &block); end

  # source://railties/7.0.4/lib/rails/application.rb#377
  def initializers; end

  # source://railties/7.0.4/lib/rails/application.rb#320
  def isolate_namespace(mod); end

  # source://railties/7.0.4/lib/rails/application.rb#153
  def key_generator; end

  # source://railties/7.0.4/lib/rails/application.rb#179
  def message_verifier(verifier_name); end

  # source://railties/7.0.4/lib/rails/application.rb#492
  def migration_railties; end

  # source://railties/7.0.4/lib/rails/application.rb#284
  def rake_tasks(&block); end

  # source://railties/7.0.4/lib/rails/application.rb#148
  def reload_routes!; end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def reloader; end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def reloaders; end

  # source://railties/7.0.4/lib/rails/application.rb#346
  def require_environment!; end

  # source://railties/7.0.4/lib/rails/application.rb#351
  def routes_reloader; end

  # source://railties/7.0.4/lib/rails/application.rb#133
  def run_load_hooks!; end

  # source://railties/7.0.4/lib/rails/application.rb#297
  def runner(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def sandbox; end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def sandbox=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def sandbox?; end

  # source://railties/7.0.4/lib/rails/application.rb#415
  def secret_key_base; end

  # source://railties/7.0.4/lib/rails/application.rb#389
  def secrets; end

  # source://railties/7.0.4/lib/rails/application.rb#403
  def secrets=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#315
  def server(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#472
  def to_app; end

  # source://railties/7.0.4/lib/rails/application.rb#358
  def watchable_args; end

  protected

  # source://railties/7.0.4/lib/rails/application.rb#570
  def default_middleware_stack; end

  # source://railties/7.0.4/lib/rails/application.rb#536
  def ordered_railties; end

  # source://railties/7.0.4/lib/rails/application.rb#558
  def railties_initializers(current); end

  # source://railties/7.0.4/lib/rails/application.rb#525
  def run_console_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#515
  def run_generators_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#520
  def run_runner_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#530
  def run_server_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#504
  def run_tasks_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#575
  def validate_secret_key_base(secret_key_base); end

  private

  # source://railties/7.0.4/lib/rails/application.rb#609
  def build_middleware; end

  # source://railties/7.0.4/lib/rails/application.rb#602
  def build_request(env); end

  # source://railties/7.0.4/lib/rails/application.rb#613
  def coerce_same_site_protection(protection); end

  # source://railties/7.0.4/lib/rails/application.rb#586
  def generate_development_secret; end

  class << self
    # source://railties/7.0.4/lib/rails/application.rb#339
    def add_lib_to_load_path!(root); end

    # source://railties/7.0.4/lib/rails/application.rb#81
    def create(initial_variable_values = T.unsafe(nil), &block); end

    # source://railties/7.0.4/lib/rails/application.rb#85
    def find_root(from); end

    # source://railties/7.0.4/lib/rails/application.rb#70
    def inherited(base); end

    # source://railties/7.0.4/lib/rails/application.rb#77
    def instance; end
  end
end

module Rails::Application::Bootstrap
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

class Rails::Application::Configuration < ::Rails::Engine::Configuration
  # source://railties/7.0.4/lib/rails/application/configuration.rb#28
  def initialize(*_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def add_autoload_paths_to_load_path; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def add_autoload_paths_to_load_path=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def allow_concurrency; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def allow_concurrency=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#415
  def annotations; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#26
  def api_only; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#276
  def api_only=(value); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def asset_host; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def asset_host=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def autoflush_log; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def autoflush_log=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def beginning_of_week; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def beginning_of_week=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def cache_classes; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def cache_classes=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def cache_store; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def cache_store=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#361
  def colorize_logging; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#365
  def colorize_logging=(val); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def consider_all_requests_local; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def consider_all_requests_local=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def console; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def console=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#420
  def content_security_policy(&block); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_nonce_directives; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_nonce_directives=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_nonce_generator; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_nonce_generator=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_report_only; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_report_only=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def credentials; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def credentials=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#330
  def database_configuration; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#283
  def debug_exception_response_format; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#287
  def debug_exception_response_format=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#437
  def default_log_file; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def disable_sandbox; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def disable_sandbox=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def eager_load; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def eager_load=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def enable_dependency_loading; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def enable_dependency_loading=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#26
  def encoding; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#268
  def encoding=(value); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def exceptions_app; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def exceptions_app=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def file_watcher; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def file_watcher=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def filter_parameters; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def filter_parameters=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def filter_redirect; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def filter_redirect=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def force_ssl; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def force_ssl=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def helpers_paths; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def helpers_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def host_authorization; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def host_authorization=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def hosts; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def hosts=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#312
  def load_database_yaml; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#88
  def load_defaults(target_version); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#26
  def loaded_config_version; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_formatter; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_formatter=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_level; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_level=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_tags; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_tags=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def logger; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def logger=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#289
  def paths; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#429
  def permissions_policy(&block); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def public_file_server; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def public_file_server=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def railties_order; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def railties_order=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def rake_eager_load; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def rake_eager_load=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def read_encrypted_secrets; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def read_encrypted_secrets=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def relative_url_root; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def relative_url_root=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def reload_classes_only_on_change; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def reload_classes_only_on_change=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def require_master_key; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def require_master_key=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def secret_key_base; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def secret_key_base=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def server_timing; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def server_timing=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def session_options; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def session_options=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#384
  def session_store(new_session_store = T.unsafe(nil), **options); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#411
  def session_store?; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def ssl_options; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def ssl_options=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def time_zone; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def time_zone=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def x; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def x=(_arg0); end

  private

  # source://railties/7.0.4/lib/rails/application/configuration.rb#486
  def credentials_available_for_current_env?; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#470
  def default_credentials_content_path; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#478
  def default_credentials_key_path; end
end

class Rails::Application::Configuration::Custom
  # source://railties/7.0.4/lib/rails/application/configuration.rb#450
  def initialize; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#454
  def method_missing(method, *args); end

  private

  # source://railties/7.0.4/lib/rails/application/configuration.rb#464
  def respond_to_missing?(symbol, *_arg1); end
end

class Rails::Application::DefaultMiddlewareStack
  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#8
  def initialize(app, config, paths); end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#6
  def app; end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#14
  def build_stack; end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#6
  def config; end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#6
  def paths; end

  private

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#103
  def load_rack_cache; end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#125
  def show_exceptions_app; end
end

module Rails::Application::Finisher
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

module Rails::Application::Finisher::InterlockHook
  class << self
    # source://railties/7.0.4/lib/rails/application/finisher.rb#109
    def complete(_state); end

    # source://railties/7.0.4/lib/rails/application/finisher.rb#105
    def run; end
  end
end

class Rails::Application::Finisher::MonitorHook
  # source://railties/7.0.4/lib/rails/application/finisher.rb#91
  def initialize(monitor = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application/finisher.rb#99
  def complete(_state); end

  # source://railties/7.0.4/lib/rails/application/finisher.rb#95
  def run; end
end

# source://railties/7.0.4/lib/rails/application.rb#103
Rails::Application::INITIAL_VARIABLES = T.let(T.unsafe(nil), Array)

class Rails::Application::RoutesReloader
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#15
  def initialize; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#11
  def eager_load; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#11
  def eager_load=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#13
  def execute(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#13
  def execute_if_updated(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#10
  def external_routes; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#10
  def paths; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#22
  def reload!; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#10
  def route_sets; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#12
  def run_after_load_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#13
  def updated?(*_arg0, **_arg1, &_arg2); end

  private

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#42
  def clear!; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#58
  def finalize!; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#49
  def load_paths; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#62
  def revert; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#54
  def run_after_load_paths; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#32
  def updater; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end
  end
end

class Rails::ApplicationController < ::ActionController::Base
  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://railties/7.0.4/lib/rails/application_controller.rb#25
  def disable_content_security_policy_nonce!; end

  # source://railties/7.0.4/lib/rails/application_controller.rb#21
  def local_request?; end

  # source://railties/7.0.4/lib/rails/application_controller.rb#15
  def require_local!; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

class Rails::Autoloaders
  include ::Enumerable

  # source://railties/7.0.4/lib/rails/autoloaders.rb#11
  def initialize; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#31
  def each; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#40
  def log!; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#36
  def logger=(logger); end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#9
  def main; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#9
  def once; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#44
  def zeitwerk_enabled?; end
end

module Rails::Autoloaders::Inflector
  class << self
    # source://railties/7.0.4/lib/rails/autoloaders/inflector.rb#12
    def camelize(basename, _abspath); end

    # source://railties/7.0.4/lib/rails/autoloaders/inflector.rb#16
    def inflect(overrides); end
  end
end

module Rails::Configuration; end

class Rails::Configuration::Generators
  # source://railties/7.0.4/lib/rails/configuration.rb#108
  def initialize; end

  # source://railties/7.0.4/lib/rails/configuration.rb#130
  def after_generate(&block); end

  # source://railties/7.0.4/lib/rails/configuration.rb#106
  def after_generate_callbacks; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def aliases; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def aliases=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def api_only; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def api_only=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def colorize_logging; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def colorize_logging=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def fallbacks; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def fallbacks=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#106
  def hidden_namespaces; end

  # source://railties/7.0.4/lib/rails/configuration.rb#126
  def hide_namespace(namespace); end

  # source://railties/7.0.4/lib/rails/configuration.rb#134
  def method_missing(method, *args); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def options; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def options=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def templates; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def templates=(_arg0); end

  private

  # source://railties/7.0.4/lib/rails/configuration.rb#119
  def initialize_copy(source); end
end

class Rails::Configuration::MiddlewareStackProxy
  # source://railties/7.0.4/lib/rails/configuration.rb#47
  def initialize(operations = T.unsafe(nil), delete_operations = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/configuration.rb#96
  def +(other); end

  # source://railties/7.0.4/lib/rails/configuration.rb#70
  def delete(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#52
  def insert(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#58
  def insert_after(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#52
  def insert_before(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#88
  def merge_into(other); end

  # source://railties/7.0.4/lib/rails/configuration.rb#74
  def move(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#80
  def move_after(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#74
  def move_before(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#62
  def swap(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#84
  def unshift(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#66
  def use(*_arg0, **_arg1, &_arg2); end

  protected

  # source://railties/7.0.4/lib/rails/configuration.rb#101
  def delete_operations; end

  # source://railties/7.0.4/lib/rails/configuration.rb#101
  def operations; end
end

module Rails::Dom; end
module Rails::Dom::Testing; end

module Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  extend ::ActiveSupport::Concern
end

module Rails::Dom::Testing::Assertions::DomAssertions
  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/dom_assertions.rb#10
  def assert_dom_equal(expected, actual, message = T.unsafe(nil)); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/dom_assertions.rb#20
  def assert_dom_not_equal(expected, actual, message = T.unsafe(nil)); end

  protected

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/dom_assertions.rb#28
  def compare_doms(expected, actual); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/dom_assertions.rb#63
  def equal_attribute?(attr, other_attr); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/dom_assertions.rb#50
  def equal_attribute_nodes?(nodes, other_nodes); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/dom_assertions.rb#38
  def equal_children?(child, other_child); end

  private

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/dom_assertions.rb#69
  def fragment(text); end
end

module Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions.rb#161
  def assert_select(*args, &block); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions.rb#247
  def assert_select_email(&block); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions.rb#211
  def assert_select_encoded(element = T.unsafe(nil), &block); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions.rb#59
  def css_select(*args); end

  private

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions.rb#270
  def assert_size_match!(size, equals, css_selector, message = T.unsafe(nil)); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions.rb#264
  def document_root_element; end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions.rb#282
  def nest_selection(selection); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions.rb#291
  def nodeset(node); end
end

module Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  extend ::ActiveSupport::Concern

  private

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions/count_describable.rb#12
  def count_description(min, max, count); end

  # source://rails-dom-testing/2.0.3/lib/rails/dom/testing/assertions/selector_assertions/count_describable.rb#24
  def pluralize_element(quantity); end
end

class Rails::Engine < ::Rails::Railtie
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods

  # source://railties/7.0.4/lib/rails/engine.rb#432
  def initialize; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _load_seed_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_load_seed_callbacks(&block); end

  # source://railties/7.0.4/lib/rails/engine.rb#511
  def app; end

  # source://railties/7.0.4/lib/rails/engine.rb#528
  def call(env); end

  # source://railties/7.0.4/lib/rails/engine.rb#547
  def config; end

  # source://railties/7.0.4/lib/rails/engine.rb#484
  def eager_load!; end

  # source://railties/7.0.4/lib/rails/engine.rb#523
  def endpoint; end

  # source://railties/7.0.4/lib/rails/engine.rb#430
  def engine_name(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#534
  def env_config; end

  # source://railties/7.0.4/lib/rails/engine.rb#494
  def helpers; end

  # source://railties/7.0.4/lib/rails/engine.rb#506
  def helpers_paths; end

  # source://railties/7.0.4/lib/rails/engine.rb#430
  def isolated?(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#446
  def load_console(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#470
  def load_generators(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#455
  def load_runner(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#555
  def load_seed; end

  # source://railties/7.0.4/lib/rails/engine.rb#479
  def load_server(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#462
  def load_tasks(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#429
  def middleware(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#429
  def paths(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#489
  def railties; end

  # source://railties/7.0.4/lib/rails/engine.rb#429
  def root(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#540
  def routes(&block); end

  # source://railties/7.0.4/lib/rails/engine.rb#654
  def routes?; end

  protected

  # source://railties/7.0.4/lib/rails/engine.rb#659
  def run_tasks_blocks(*_arg0); end

  private

  # source://railties/7.0.4/lib/rails/engine.rb#691
  def _all_autoload_once_paths; end

  # source://railties/7.0.4/lib/rails/engine.rb#695
  def _all_autoload_paths; end

  # source://railties/7.0.4/lib/rails/engine.rb#704
  def _all_load_paths(add_autoload_paths_to_load_path); end

  # source://railties/7.0.4/lib/rails/engine.rb#723
  def build_middleware; end

  # source://railties/7.0.4/lib/rails/engine.rb#715
  def build_request(env); end

  # source://railties/7.0.4/lib/rails/engine.rb#687
  def default_middleware_stack; end

  # source://railties/7.0.4/lib/rails/engine.rb#671
  def has_migrations?; end

  # source://railties/7.0.4/lib/rails/engine.rb#665
  def load_config_initializer(initializer); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _load_seed_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _load_seed_callbacks=(value); end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def called_from; end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def called_from=(_arg0); end

    # source://railties/7.0.4/lib/rails/engine.rb#358
    def eager_load!(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.0.4/lib/rails/engine.rb#378
    def endpoint(endpoint = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/railtie.rb#176
    def engine_name(name = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/engine.rb#416
    def find(path); end

    # source://railties/7.0.4/lib/rails/engine.rb#374
    def find_root(from); end

    # source://railties/7.0.4/lib/rails/engine.rb#675
    def find_root_with_flag(flag, root_path, default = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/engine.rb#360
    def inherited(base); end

    # source://railties/7.0.4/lib/rails/engine.rb#384
    def isolate_namespace(mod); end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def isolated; end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def isolated=(_arg0); end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def isolated?; end
  end
end

class Rails::Engine::Configuration < ::Rails::Railtie::Configuration
  # source://railties/7.0.4/lib/rails/engine/configuration.rb#12
  def initialize(root = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#83
  def autoload_once_paths; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#10
  def autoload_once_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#87
  def autoload_paths; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#10
  def autoload_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#79
  def eager_load_paths; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#10
  def eager_load_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#32
  def generators; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#9
  def javascript_path; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#9
  def javascript_path=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#9
  def middleware; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#9
  def middleware=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#38
  def paths; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#8
  def root; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#75
  def root=(value); end
end

class Rails::Engine::Railties
  include ::Enumerable

  # source://railties/7.0.4/lib/rails/engine/railties.rb#9
  def initialize; end

  # source://railties/7.0.4/lib/rails/engine/railties.rb#18
  def -(others); end

  # source://railties/7.0.4/lib/rails/engine/railties.rb#7
  def _all; end

  # source://railties/7.0.4/lib/rails/engine/railties.rb#14
  def each(*args, &block); end
end

module Rails::Html; end

class Rails::Html::FullSanitizer < ::Rails::Html::Sanitizer
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#29
  def sanitize(html, options = T.unsafe(nil)); end
end

class Rails::Html::LinkSanitizer < ::Rails::Html::Sanitizer
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#50
  def initialize; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#56
  def sanitize(html, options = T.unsafe(nil)); end
end

class Rails::Html::PermitScrubber < ::Loofah::Scrubber
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#50
  def initialize; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#48
  def attributes; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#59
  def attributes=(attributes); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#63
  def scrub(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#48
  def tags; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#55
  def tags=(tags); end

  protected

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#80
  def allowed_node?(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#92
  def keep_node?(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#134
  def scrub_attribute(node, attr_node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#88
  def scrub_attribute?(name); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#105
  def scrub_attributes(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#118
  def scrub_css_attribute(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#100
  def scrub_node(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#84
  def skip_node?(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#127
  def validate!(var, name); end
end

class Rails::Html::SafeListSanitizer < ::Rails::Html::Sanitizer
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#113
  def initialize; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#117
  def sanitize(html, options = T.unsafe(nil)); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#138
  def sanitize_css(style_string); end

  private

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#165
  def allowed_attributes(options); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#157
  def allowed_tags(options); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#144
  def loofah_using_html5?; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#149
  def remove_safelist_tag_combinations(tags); end

  class << self
    # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#106
    def allowed_attributes; end

    # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#106
    def allowed_attributes=(_arg0); end

    # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#105
    def allowed_tags; end

    # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#105
    def allowed_tags=(_arg0); end
  end
end

class Rails::Html::Sanitizer
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#6
  def sanitize(html, options = T.unsafe(nil)); end

  private

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#17
  def properly_encode(fragment, options); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#12
  def remove_xpaths(node, xpaths); end

  class << self
    # source://rails-html-sanitizer/1.4.3/lib/rails-html-sanitizer.rb#10
    def full_sanitizer; end

    # source://rails-html-sanitizer/1.4.3/lib/rails-html-sanitizer.rb#14
    def link_sanitizer; end

    # source://rails-html-sanitizer/1.4.3/lib/rails-html-sanitizer.rb#18
    def safe_list_sanitizer; end

    # source://rails-html-sanitizer/1.4.3/lib/rails-html-sanitizer.rb#22
    def white_list_sanitizer; end
  end
end

# source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer/version.rb#4
Rails::Html::Sanitizer::VERSION = T.let(T.unsafe(nil), String)

class Rails::Html::TargetScrubber < ::Rails::Html::PermitScrubber
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#172
  def allowed_node?(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#176
  def scrub_attribute?(name); end
end

class Rails::Html::TextOnlyScrubber < ::Loofah::Scrubber
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#187
  def initialize; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#191
  def scrub(node); end
end

# source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#170
Rails::Html::WhiteListSanitizer = Rails::Html::SafeListSanitizer

# source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#3
Rails::Html::XPATHS_TO_REMOVE = T.let(T.unsafe(nil), Array)

module Rails::Info
  # source://railties/7.0.4/lib/rails/info.rb#10
  def properties; end

  # source://railties/7.0.4/lib/rails/info.rb#10
  def properties=(val); end

  class << self
    # source://railties/7.0.4/lib/rails/info.rb#31
    def inspect; end

    # source://railties/7.0.4/lib/rails/info.rb#10
    def properties; end

    # source://railties/7.0.4/lib/rails/info.rb#10
    def properties=(val); end

    # source://railties/7.0.4/lib/rails/info.rb#25
    def property(name, value = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/info.rb#43
    def to_html; end

    # source://railties/7.0.4/lib/rails/info.rb#31
    def to_s; end
  end
end

class Rails::InfoController < ::Rails::ApplicationController
  # source://railties/7.0.4/lib/rails/info_controller.rb#12
  def index; end

  # source://railties/7.0.4/lib/rails/info_controller.rb#16
  def properties; end

  # source://railties/7.0.4/lib/rails/info_controller.rb#21
  def routes; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://railties/7.0.4/lib/rails/info_controller.rb#8
  def _layout_from_proc; end

  # source://railties/7.0.4/lib/rails/info_controller.rb#36
  def match_route; end

  # source://railties/7.0.4/lib/rails/info_controller.rb#40
  def with_leading_slash(path); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

module Rails::Initializable
  mixes_in_class_methods ::Rails::Initializable::ClassMethods

  # source://railties/7.0.4/lib/rails/initializable.rb#66
  def initializers; end

  # source://railties/7.0.4/lib/rails/initializable.rb#58
  def run_initializers(group = T.unsafe(nil), *args); end

  class << self
    # source://railties/7.0.4/lib/rails/initializable.rb#7
    def included(base); end
  end
end

module Rails::Initializable::ClassMethods
  # source://railties/7.0.4/lib/rails/initializable.rb#88
  def initializer(name, opts = T.unsafe(nil), &blk); end

  # source://railties/7.0.4/lib/rails/initializable.rb#71
  def initializers; end

  # source://railties/7.0.4/lib/rails/initializable.rb#75
  def initializers_chain; end

  # source://railties/7.0.4/lib/rails/initializable.rb#84
  def initializers_for(binding); end
end

class Rails::Initializable::Collection < ::Array
  include ::TSort

  # source://railties/7.0.4/lib/rails/initializable.rb#53
  def +(other); end

  # source://railties/7.0.4/lib/rails/initializable.rb#49
  def tsort_each_child(initializer, &block); end

  def tsort_each_node; end
end

class Rails::Initializable::Initializer
  # source://railties/7.0.4/lib/rails/initializable.rb#14
  def initialize(name, context, options, &block); end

  # source://railties/7.0.4/lib/rails/initializable.rb#23
  def after; end

  # source://railties/7.0.4/lib/rails/initializable.rb#19
  def before; end

  # source://railties/7.0.4/lib/rails/initializable.rb#27
  def belongs_to?(group); end

  # source://railties/7.0.4/lib/rails/initializable.rb#35
  def bind(context); end

  # source://railties/7.0.4/lib/rails/initializable.rb#12
  def block; end

  # source://railties/7.0.4/lib/rails/initializable.rb#40
  def context_class; end

  # source://railties/7.0.4/lib/rails/initializable.rb#12
  def name; end

  # source://railties/7.0.4/lib/rails/initializable.rb#31
  def run(*args); end
end

class Rails::MailersController < ::Rails::ApplicationController
  # source://railties/7.0.4/lib/rails/mailers_controller.rb#16
  def index; end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#21
  def preview; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#80
  def find_part(format); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#68
  def find_preferred_part(*formats); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#56
  def find_preview; end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#92
  def locale_query(locale); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#88
  def part_query(mime_type); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#96
  def set_locale(&block); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#52
  def show_previews?; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

module Rails::MailersController::HelperMethods
  include ::ActionController::Base::HelperMethods

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#12
  def locale_query(*args, **_arg1, &block); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#12
  def part_query(*args, **_arg1, &block); end
end

module Rails::Paths; end

class Rails::Paths::Path
  include ::Enumerable

  # source://railties/7.0.4/lib/rails/paths.rb#116
  def initialize(root, current, paths, options = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/paths.rb#168
  def <<(path); end

  # source://railties/7.0.4/lib/rails/paths.rb#129
  def absolute_current; end

  # source://railties/7.0.4/lib/rails/paths.rb#150
  def autoload!; end

  # source://railties/7.0.4/lib/rails/paths.rb#158
  def autoload?; end

  # source://railties/7.0.4/lib/rails/paths.rb#150
  def autoload_once!; end

  # source://railties/7.0.4/lib/rails/paths.rb#158
  def autoload_once?; end

  # source://railties/7.0.4/lib/rails/paths.rb#133
  def children; end

  # source://railties/7.0.4/lib/rails/paths.rb#173
  def concat(paths); end

  # source://railties/7.0.4/lib/rails/paths.rb#164
  def each(&block); end

  # source://railties/7.0.4/lib/rails/paths.rb#150
  def eager_load!; end

  # source://railties/7.0.4/lib/rails/paths.rb#158
  def eager_load?; end

  # source://railties/7.0.4/lib/rails/paths.rb#217
  def existent; end

  # source://railties/7.0.4/lib/rails/paths.rb#228
  def existent_directories; end

  # source://railties/7.0.4/lib/rails/paths.rb#198
  def expanded; end

  # source://railties/7.0.4/lib/rails/paths.rb#193
  def extensions; end

  # source://railties/7.0.4/lib/rails/paths.rb#140
  def first; end

  # source://railties/7.0.4/lib/rails/paths.rb#114
  def glob; end

  # source://railties/7.0.4/lib/rails/paths.rb#114
  def glob=(_arg0); end

  # source://railties/7.0.4/lib/rails/paths.rb#144
  def last; end

  # source://railties/7.0.4/lib/rails/paths.rb#150
  def load_path!; end

  # source://railties/7.0.4/lib/rails/paths.rb#158
  def load_path?; end

  # source://railties/7.0.4/lib/rails/paths.rb#185
  def paths; end

  # source://railties/7.0.4/lib/rails/paths.rb#168
  def push(path); end

  # source://railties/7.0.4/lib/rails/paths.rb#154
  def skip_autoload!; end

  # source://railties/7.0.4/lib/rails/paths.rb#154
  def skip_autoload_once!; end

  # source://railties/7.0.4/lib/rails/paths.rb#154
  def skip_eager_load!; end

  # source://railties/7.0.4/lib/rails/paths.rb#154
  def skip_load_path!; end

  # source://railties/7.0.4/lib/rails/paths.rb#198
  def to_a; end

  # source://railties/7.0.4/lib/rails/paths.rb#181
  def to_ary; end

  # source://railties/7.0.4/lib/rails/paths.rb#177
  def unshift(*paths); end

  private

  # source://railties/7.0.4/lib/rails/paths.rb#235
  def files_in(path); end
end

class Rails::Paths::Root
  # source://railties/7.0.4/lib/rails/paths.rb#51
  def initialize(path); end

  # source://railties/7.0.4/lib/rails/paths.rb#66
  def [](path); end

  # source://railties/7.0.4/lib/rails/paths.rb#56
  def []=(path, value); end

  # source://railties/7.0.4/lib/rails/paths.rb#61
  def add(path, options = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/paths.rb#82
  def all_paths; end

  # source://railties/7.0.4/lib/rails/paths.rb#86
  def autoload_once; end

  # source://railties/7.0.4/lib/rails/paths.rb#94
  def autoload_paths; end

  # source://railties/7.0.4/lib/rails/paths.rb#90
  def eager_load; end

  # source://railties/7.0.4/lib/rails/paths.rb#74
  def keys; end

  # source://railties/7.0.4/lib/rails/paths.rb#98
  def load_paths; end

  # source://railties/7.0.4/lib/rails/paths.rb#49
  def path; end

  # source://railties/7.0.4/lib/rails/paths.rb#49
  def path=(_arg0); end

  # source://railties/7.0.4/lib/rails/paths.rb#70
  def values; end

  # source://railties/7.0.4/lib/rails/paths.rb#78
  def values_at(*list); end

  private

  # source://railties/7.0.4/lib/rails/paths.rb#103
  def filter_by(&block); end
end

module Rails::Rack; end

class Rails::Rack::Logger < ::ActiveSupport::LogSubscriber
  # source://railties/7.0.4/lib/rails/rack/logger.rb#16
  def initialize(app, taggers = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/rack/logger.rb#21
  def call(env); end

  private

  # source://railties/7.0.4/lib/rails/rack/logger.rb#32
  def call_app(request, env); end

  # source://railties/7.0.4/lib/rails/rack/logger.rb#59
  def compute_tags(request); end

  # source://railties/7.0.4/lib/rails/rack/logger.rb#72
  def logger; end

  # source://railties/7.0.4/lib/rails/rack/logger.rb#51
  def started_request_message(request); end
end

class Rails::Railtie
  include ::Rails::Initializable
  extend ::ActiveSupport::DescendantsTracker
  extend ::Rails::Initializable::ClassMethods

  # source://railties/7.0.4/lib/rails/railtie.rb#246
  def initialize; end

  # source://railties/7.0.4/lib/rails/railtie.rb#263
  def config; end

  # source://railties/7.0.4/lib/rails/railtie.rb#256
  def configure(&block); end

  # source://railties/7.0.4/lib/rails/railtie.rb#252
  def inspect; end

  # source://railties/7.0.4/lib/rails/railtie.rb#244
  def railtie_name(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/railtie.rb#267
  def railtie_namespace; end

  protected

  # source://railties/7.0.4/lib/rails/railtie.rb#272
  def run_console_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#276
  def run_generators_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#280
  def run_runner_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#289
  def run_server_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#284
  def run_tasks_blocks(app); end

  private

  # source://railties/7.0.4/lib/rails/railtie.rb#295
  def each_registered_block(type, &block); end

  class << self
    # source://railties/7.0.4/lib/rails/railtie.rb#194
    def <=>(other); end

    # source://railties/7.0.4/lib/rails/railtie.rb#172
    def abstract_railtie?; end

    # source://railties/7.0.4/lib/rails/railtie.rb#146
    def config(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.0.4/lib/rails/railtie.rb#190
    def configure(&block); end

    # source://railties/7.0.4/lib/rails/railtie.rb#156
    def console(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#164
    def generators(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#198
    def inherited(subclass); end

    # source://railties/7.0.4/lib/rails/railtie.rb#183
    def instance; end

    # source://railties/7.0.4/lib/rails/railtie.rb#176
    def railtie_name(name = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/railtie.rb#152
    def rake_tasks(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#160
    def runner(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#168
    def server(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#148
    def subclasses; end

    protected

    # source://railties/7.0.4/lib/rails/railtie.rb#206
    def increment_load_index; end

    # source://railties/7.0.4/lib/rails/railtie.rb#204
    def load_index; end

    private

    # source://railties/7.0.4/lib/rails/railtie.rb#212
    def generate_railtie_name(string); end

    # source://railties/7.0.4/lib/rails/railtie.rb#224
    def method_missing(name, *args, **_arg2, &block); end

    # source://railties/7.0.4/lib/rails/railtie.rb#236
    def register_block_for(type, &blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#216
    def respond_to_missing?(name, _); end
  end
end

# source://railties/7.0.4/lib/rails/railtie.rb#142
Rails::Railtie::ABSTRACT_RAILTIES = T.let(T.unsafe(nil), Array)

class Rails::Railtie::Configuration
  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#8
  def initialize; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#70
  def after_initialize(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#47
  def app_generators; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#39
  def app_middleware; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#54
  def before_configuration(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#60
  def before_eager_load(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#65
  def before_initialize(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#18
  def eager_load_namespaces; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#85
  def respond_to?(name, include_private = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#81
  def to_prepare(&blk); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#75
  def to_prepare_blocks; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#30
  def watchable_dirs; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#23
  def watchable_files; end

  private

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#90
  def method_missing(name, *args, &blk); end

  class << self
    # source://railties/7.0.4/lib/rails/railtie/configuration.rb#13
    def eager_load_namespaces; end
  end
end

class Rails::Secrets
  class << self
    # source://railties/7.0.4/lib/rails/secrets.rb#45
    def decrypt(data); end

    # source://railties/7.0.4/lib/rails/secrets.rb#41
    def encrypt(data); end

    # source://railties/7.0.4/lib/rails/secrets.rb#37
    def key; end

    # source://railties/7.0.4/lib/rails/secrets.rb#24
    def parse(paths, env:); end

    # source://railties/7.0.4/lib/rails/secrets.rb#49
    def read; end

    # source://railties/7.0.4/lib/rails/secrets.rb#58
    def read_for_editing(&block); end

    # source://railties/7.0.4/lib/rails/secrets.rb#22
    def root=(_arg0); end

    # source://railties/7.0.4/lib/rails/secrets.rb#53
    def write(contents); end

    private

    # source://railties/7.0.4/lib/rails/secrets.rb#103
    def encryptor; end

    # source://railties/7.0.4/lib/rails/secrets.rb#63
    def handle_missing_key; end

    # source://railties/7.0.4/lib/rails/secrets.rb#73
    def key_path; end

    # source://railties/7.0.4/lib/rails/secrets.rb#77
    def path; end

    # source://railties/7.0.4/lib/rails/secrets.rb#81
    def preprocess(path); end

    # source://railties/7.0.4/lib/rails/secrets.rb#67
    def read_key_file; end

    # source://railties/7.0.4/lib/rails/secrets.rb#89
    def writing(contents); end
  end
end

class Rails::Secrets::MissingKeyError < ::RuntimeError
  # source://railties/7.0.4/lib/rails/secrets.rb#10
  def initialize; end
end

class Rails::SourceAnnotationExtractor
  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#85
  def initialize(tag); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#137
  def display(results, options = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#125
  def extract_annotations_from(file, pattern); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#91
  def find(dirs); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#99
  def find_in(dir); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#83
  def tag; end

  class << self
    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#76
    def enumerate(tag = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

class Rails::SourceAnnotationExtractor::Annotation < ::Struct
  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#55
  def to_s(options = T.unsafe(nil)); end

  class << self
    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#15
    def directories; end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#35
    def extensions; end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#21
    def register_directories(*dirs); end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#41
    def register_extensions(*exts, &block); end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#31
    def register_tags(*additional_tags); end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#25
    def tags; end
  end
end

module Rails::VERSION; end

# source://railties/7.0.4/lib/rails/gem_version.rb#10
Rails::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://railties/7.0.4/lib/rails/gem_version.rb#11
Rails::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://railties/7.0.4/lib/rails/gem_version.rb#13
Rails::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)

# source://railties/7.0.4/lib/rails/gem_version.rb#15
Rails::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://railties/7.0.4/lib/rails/gem_version.rb#12
Rails::VERSION::TINY = T.let(T.unsafe(nil), Integer)

class Rails::WelcomeController < ::Rails::ApplicationController
  # source://railties/7.0.4/lib/rails/welcome_controller.rb#9
  def index; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end
