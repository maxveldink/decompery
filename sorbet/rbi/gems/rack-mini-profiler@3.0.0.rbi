# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rack-mini-profiler` gem.
# Please instead update this file by running `bin/tapioca gem rack-mini-profiler`.

class ActiveJob::Base
  include ::ActiveJob::Core
  include ::ActiveJob::QueueAdapter
  include ::ActiveJob::QueueName
  include ::ActiveJob::QueuePriority
  include ::ActiveJob::Enqueuing
  include ::ActiveSupport::Rescuable
  include ::ActiveJob::Execution
  include ::ActiveSupport::Callbacks
  include ::ActiveJob::Callbacks
  include ::ActiveJob::Exceptions
  include ::ActiveJob::Instrumentation
  include ::ActiveJob::Logging
  include ::ActiveJob::Timezones
  include ::ActiveJob::Translation
  extend ::ActiveJob::Core::ClassMethods
  extend ::ActiveJob::QueueAdapter::ClassMethods
  extend ::ActiveJob::QueueName::ClassMethods
  extend ::ActiveJob::QueuePriority::ClassMethods
  extend ::ActiveJob::Enqueuing::ClassMethods
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::ActiveJob::Execution::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveJob::Callbacks::ClassMethods
  extend ::ActiveJob::Exceptions::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _enqueue_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _perform_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_enqueue_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_perform_callbacks(&block); end

  # source://activejob/7.0.4/lib/active_job/logging.rb#11
  def logger; end

  # source://activejob/7.0.4/lib/active_job/logging.rb#11
  def logger=(val); end

  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#15
  def queue_adapter(*_arg0, **_arg1, &_arg2); end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
  def queue_name_prefix; end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
  def queue_name_prefix=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
  def queue_name_prefix?; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers?; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _enqueue_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _enqueue_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _perform_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _perform_callbacks=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#13
    def _queue_adapter; end

    # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#13
    def _queue_adapter=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#12
    def _queue_adapter_name; end

    # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#12
    def _queue_adapter_name=(value); end

    # source://activejob/7.0.4/lib/active_job/logging.rb#12
    def log_arguments; end

    # source://activejob/7.0.4/lib/active_job/logging.rb#12
    def log_arguments=(value); end

    # source://activejob/7.0.4/lib/active_job/logging.rb#12
    def log_arguments?; end

    # source://activejob/7.0.4/lib/active_job/logging.rb#11
    def logger; end

    # source://activejob/7.0.4/lib/active_job/logging.rb#11
    def logger=(val); end

    # source://activejob/7.0.4/lib/active_job/queue_priority.rb#32
    def priority; end

    # source://activejob/7.0.4/lib/active_job/queue_priority.rb#32
    def priority=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_priority.rb#32
    def priority?; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#56
    def queue_name; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#56
    def queue_name=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#56
    def queue_name?; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#57
    def queue_name_delimiter; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#57
    def queue_name_delimiter=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#57
    def queue_name_delimiter?; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
    def queue_name_prefix; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
    def queue_name_prefix=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
    def queue_name_prefix?; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers?; end

    # source://activejob/7.0.4/lib/active_job/exceptions.rb#11
    def retry_jitter; end

    # source://activejob/7.0.4/lib/active_job/exceptions.rb#11
    def retry_jitter=(value); end

    # source://activesupport/7.0.4/lib/active_support/deprecation/method_wrappers.rb#63
    def skip_after_callbacks_if_terminated(*args, **_arg1, &block); end

    # source://activesupport/7.0.4/lib/active_support/deprecation/method_wrappers.rb#63
    def skip_after_callbacks_if_terminated=(*args, **_arg1, &block); end
  end
end

module ActiveJob::Callbacks
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Callbacks
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveJob::Callbacks::ClassMethods

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
    def _execute_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
    def _run_execute_callbacks(&block); end
  end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

module ActiveJob::Callbacks::ClassMethods
  # source://activejob/7.0.4/lib/active_job/callbacks.rb#146
  def after_enqueue(*filters, &blk); end

  # source://activejob/7.0.4/lib/active_job/callbacks.rb#75
  def after_perform(*filters, &blk); end

  # source://activejob/7.0.4/lib/active_job/callbacks.rb#167
  def around_enqueue(*filters, &blk); end

  # source://activejob/7.0.4/lib/active_job/callbacks.rb#108
  def around_perform(*filters, &blk); end

  # source://activejob/7.0.4/lib/active_job/callbacks.rb#127
  def before_enqueue(*filters, &blk); end

  # source://activejob/7.0.4/lib/active_job/callbacks.rb#56
  def before_perform(*filters, &blk); end
end

module ActiveJob::Core
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::Core::ClassMethods

  # source://activejob/7.0.4/lib/active_job/core.rb#91
  def initialize(*arguments, **_arg1); end

  # source://activejob/7.0.4/lib/active_job/core.rb#10
  def arguments; end

  # source://activejob/7.0.4/lib/active_job/core.rb#10
  def arguments=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#146
  def deserialize(job_data); end

  # source://activejob/7.0.4/lib/active_job/core.rb#54
  def enqueue_error; end

  # source://activejob/7.0.4/lib/active_job/core.rb#54
  def enqueue_error=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#44
  def enqueued_at; end

  # source://activejob/7.0.4/lib/active_job/core.rb#44
  def enqueued_at=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#35
  def exception_executions; end

  # source://activejob/7.0.4/lib/active_job/core.rb#35
  def exception_executions=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#29
  def executions; end

  # source://activejob/7.0.4/lib/active_job/core.rb#29
  def executions=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#17
  def job_id; end

  # source://activejob/7.0.4/lib/active_job/core.rb#17
  def job_id=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#38
  def locale; end

  # source://activejob/7.0.4/lib/active_job/core.rb#38
  def locale=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#23
  def priority=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#26
  def provider_job_id; end

  # source://activejob/7.0.4/lib/active_job/core.rb#26
  def provider_job_id=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#20
  def queue_name=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#14
  def scheduled_at; end

  # source://activejob/7.0.4/lib/active_job/core.rb#14
  def scheduled_at=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#104
  def serialize; end

  # source://activejob/7.0.4/lib/active_job/core.rb#11
  def serialized_arguments=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#160
  def set(options = T.unsafe(nil)); end

  # source://activejob/7.0.4/lib/active_job/core.rb#47
  def successfully_enqueued=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#49
  def successfully_enqueued?; end

  # source://activejob/7.0.4/lib/active_job/core.rb#41
  def timezone; end

  # source://activejob/7.0.4/lib/active_job/core.rb#41
  def timezone=(_arg0); end

  private

  # source://activejob/7.0.4/lib/active_job/core.rb#193
  def arguments_serialized?; end

  # source://activejob/7.0.4/lib/active_job/core.rb#189
  def deserialize_arguments(serialized_args); end

  # source://activejob/7.0.4/lib/active_job/core.rb#178
  def deserialize_arguments_if_needed; end

  # source://activejob/7.0.4/lib/active_job/core.rb#185
  def serialize_arguments(arguments); end

  # source://activejob/7.0.4/lib/active_job/core.rb#170
  def serialize_arguments_if_needed(arguments); end
end

module ActiveJob::Core::ClassMethods
  # source://activejob/7.0.4/lib/active_job/core.rb#60
  def deserialize(job_data); end

  # source://activejob/7.0.4/lib/active_job/core.rb#84
  def set(options = T.unsafe(nil)); end
end

module ActiveJob::Enqueuing
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::Enqueuing::ClassMethods

  # source://activejob/7.0.4/lib/active_job/enqueuing.rb#59
  def enqueue(options = T.unsafe(nil)); end
end

module ActiveJob::Enqueuing::ClassMethods
  # source://activejob/7.0.4/lib/active_job/enqueuing.rb#28
  def perform_later(*_arg0, **_arg1, &_arg2); end

  private

  # source://activejob/7.0.4/lib/active_job/enqueuing.rb#38
  def job_or_instantiate(*args, **_arg1); end
end

module ActiveJob::Exceptions
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::Exceptions::ClassMethods

  # source://activejob/7.0.4/lib/active_job/exceptions.rb#124
  def retry_job(options = T.unsafe(nil)); end

  private

  # source://activejob/7.0.4/lib/active_job/exceptions.rb#134
  def determine_delay(seconds_or_duration_or_algorithm:, executions:, jitter: T.unsafe(nil)); end

  # source://activejob/7.0.4/lib/active_job/exceptions.rb#154
  def determine_jitter_for_delay(delay, jitter); end

  # source://activejob/7.0.4/lib/active_job/exceptions.rb#159
  def executions_for(exceptions); end

  module GeneratedClassMethods
    def retry_jitter; end
    def retry_jitter=(value); end
  end

  module GeneratedInstanceMethods; end
end

module ActiveJob::Exceptions::ClassMethods
  # source://activejob/7.0.4/lib/active_job/exceptions.rb#94
  def discard_on(*exceptions); end

  # source://activejob/7.0.4/lib/active_job/exceptions.rb#58
  def retry_on(*exceptions, wait: T.unsafe(nil), attempts: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil), jitter: T.unsafe(nil)); end
end

module ActiveJob::Execution
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Rescuable

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods
  mixes_in_class_methods ::ActiveJob::Execution::ClassMethods

  # source://activejob/7.0.4/lib/active_job/execution.rb#51
  def perform(*_arg0); end

  # source://activejob/7.0.4/lib/active_job/execution.rb#40
  def perform_now; end

  private

  # source://activejob/7.0.4/lib/active_job/execution.rb#56
  def _perform_job; end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

module ActiveJob::Execution::ClassMethods
  # source://activejob/7.0.4/lib/active_job/execution.rb#21
  def execute(job_data); end

  # source://activejob/7.0.4/lib/active_job/execution.rb#17
  def perform_now(*_arg0, **_arg1, &_arg2); end
end

module ActiveJob::Instrumentation
  extend ::ActiveSupport::Concern

  # source://activejob/7.0.4/lib/active_job/instrumentation.rb#13
  def perform_now; end

  private

  # source://activejob/7.0.4/lib/active_job/instrumentation.rb#18
  def _perform_job; end

  # source://activejob/7.0.4/lib/active_job/instrumentation.rb#39
  def halted_callback_hook(*_arg0); end

  # source://activejob/7.0.4/lib/active_job/instrumentation.rb#23
  def instrument(operation, payload = T.unsafe(nil), &block); end
end

module ActiveJob::Logging
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://activejob/7.0.4/lib/active_job/logging.rb#17
  def perform_now; end

  private

  # source://activejob/7.0.4/lib/active_job/logging.rb#31
  def logger_tagged_by_active_job?; end

  # source://activejob/7.0.4/lib/active_job/logging.rb#22
  def tag_logger(*tags, &block); end

  module GeneratedClassMethods
    def log_arguments; end
    def log_arguments=(value); end
    def log_arguments?; end
  end

  module GeneratedInstanceMethods; end
end

module ActiveJob::QueueAdapter
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueueAdapter::ClassMethods

  module GeneratedClassMethods
    def _queue_adapter; end
    def _queue_adapter=(value); end
    def _queue_adapter_name; end
    def _queue_adapter_name=(value); end
  end

  module GeneratedInstanceMethods; end
end

module ActiveJob::QueueAdapter::ClassMethods
  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#24
  def queue_adapter; end

  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#37
  def queue_adapter=(name_or_adapter); end

  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#30
  def queue_adapter_name; end

  private

  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#53
  def assign_adapter(adapter_name, queue_adapter); end

  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#60
  def queue_adapter?(object); end
end

# source://activejob/7.0.4/lib/active_job/queue_adapter.rb#58
ActiveJob::QueueAdapter::ClassMethods::QUEUE_ADAPTER_METHODS = T.let(T.unsafe(nil), Array)

module ActiveJob::QueueName
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueueName::ClassMethods

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#62
  def queue_name; end

  module GeneratedClassMethods
    def queue_name; end
    def queue_name=(value); end
    def queue_name?; end
    def queue_name_delimiter; end
    def queue_name_delimiter=(value); end
    def queue_name_delimiter?; end
    def queue_name_prefix; end
    def queue_name_prefix=(value); end
    def queue_name_prefix?; end
  end

  module GeneratedInstanceMethods
    def queue_name_prefix; end
    def queue_name_prefix=(value); end
    def queue_name_prefix?; end
  end
end

module ActiveJob::QueueName::ClassMethods
  # source://activejob/7.0.4/lib/active_job/queue_name.rb#9
  def default_queue_name; end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#9
  def default_queue_name=(val); end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#40
  def queue_as(part_name = T.unsafe(nil), &block); end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#48
  def queue_name_from_part(part_name); end

  class << self
    # source://activejob/7.0.4/lib/active_job/queue_name.rb#9
    def default_queue_name; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#9
    def default_queue_name=(val); end
  end
end

module ActiveJob::QueuePriority
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueuePriority::ClassMethods

  # source://activejob/7.0.4/lib/active_job/queue_priority.rb#36
  def priority; end

  module GeneratedClassMethods
    def priority; end
    def priority=(value); end
    def priority?; end
  end

  module GeneratedInstanceMethods; end
end

module ActiveJob::QueuePriority::ClassMethods
  # source://activejob/7.0.4/lib/active_job/queue_priority.rb#9
  def default_priority; end

  # source://activejob/7.0.4/lib/active_job/queue_priority.rb#9
  def default_priority=(val); end

  # source://activejob/7.0.4/lib/active_job/queue_priority.rb#22
  def queue_with_priority(priority = T.unsafe(nil), &block); end

  class << self
    # source://activejob/7.0.4/lib/active_job/queue_priority.rb#9
    def default_priority; end

    # source://activejob/7.0.4/lib/active_job/queue_priority.rb#9
    def default_priority=(val); end
  end
end

module ActiveJob::Timezones
  extend ::ActiveSupport::Concern
end

module ActiveJob::Translation
  extend ::ActiveSupport::Concern
end

class ActiveModel::Attribute
  # source://activemodel/7.0.4/lib/active_model/attribute.rb#33
  def initialize(name, value_before_type_cast, type, original_attribute = T.unsafe(nil), value = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#112
  def ==(other); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#104
  def came_from_user?; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#63
  def changed?; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#67
  def changed_in_place?; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#132
  def encode_with(coder); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#112
  def eql?(other); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#71
  def forgetting_assignment; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#108
  def has_been_read?; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#120
  def hash; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#124
  def init_with(coder); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#100
  def initialized?; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#29
  def name; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#47
  def original_value; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#140
  def original_value_for_database; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#59
  def serializable?(&block); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#29
  def type; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#96
  def type_cast(*_arg0); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#41
  def value; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#29
  def value_before_type_cast; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#55
  def value_for_database; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#84
  def with_cast_value(value); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#88
  def with_type(type); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#80
  def with_value_from_database(value); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#75
  def with_value_from_user(value); end

  private

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#162
  def _original_value_for_database; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#149
  def assigned?; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#158
  def changed_from_assignment?; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#152
  def initialize_dup(other); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#149
  def original_attribute; end

  class << self
    # source://activemodel/7.0.4/lib/active_model/attribute.rb#8
    def from_database(name, value_before_type_cast, type, value = T.unsafe(nil)); end

    # source://activemodel/7.0.4/lib/active_model/attribute.rb#12
    def from_user(name, value_before_type_cast, type, original_attribute = T.unsafe(nil)); end

    # source://activemodel/7.0.4/lib/active_model/attribute.rb#20
    def null(name); end

    # source://activemodel/7.0.4/lib/active_model/attribute.rb#24
    def uninitialized(name, type); end

    # source://activemodel/7.0.4/lib/active_model/attribute.rb#16
    def with_cast_value(name, value_before_type_cast, type); end
  end
end

class ActiveModel::Attribute::FromUser < ::ActiveModel::Attribute
  # source://activemodel/7.0.4/lib/active_model/attribute.rb#182
  def came_from_user?; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#178
  def type_cast(value); end
end

class ActiveModel::Attribute::UserProvidedDefault < ::ActiveModel::Attribute::FromUser
  # source://activemodel/7.0.4/lib/active_model/attribute/user_provided_default.rb#8
  def initialize(name, value, type, database_default); end

  # source://activemodel/7.0.4/lib/active_model/attribute/user_provided_default.rb#25
  def marshal_dump; end

  # source://activemodel/7.0.4/lib/active_model/attribute/user_provided_default.rb#36
  def marshal_load(values); end

  # source://activemodel/7.0.4/lib/active_model/attribute/user_provided_default.rb#13
  def value_before_type_cast; end

  # source://activemodel/7.0.4/lib/active_model/attribute/user_provided_default.rb#21
  def with_type(type); end

  private

  # source://activemodel/7.0.4/lib/active_model/attribute/user_provided_default.rb#48
  def user_provided_value; end
end

module ActiveModel::AttributeAssignment
  include ::ActiveModel::ForbiddenAttributesProtection

  # source://activemodel/7.0.4/lib/active_model/attribute_assignment.rb#28
  def assign_attributes(new_attributes); end

  # source://activemodel/7.0.4/lib/active_model/attribute_assignment.rb#28
  def attributes=(new_attributes); end

  private

  # source://activemodel/7.0.4/lib/active_model/attribute_assignment.rb#46
  def _assign_attribute(k, v); end

  # source://activemodel/7.0.4/lib/active_model/attribute_assignment.rb#40
  def _assign_attributes(attributes); end
end

module ActiveModel::AttributeMethods
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#467
  def attribute_missing(match, *args, **_arg2, &block); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#453
  def method_missing(method, *args, **_arg2, &block); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#476
  def respond_to?(method, include_private_methods = T.unsafe(nil)); end

  def respond_to_without_attributes?(*_arg0); end

  private

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#504
  def _read_attribute(attr); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#489
  def attribute_method?(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#495
  def matched_attribute_method(method_name); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#500
  def missing_attribute(attr_name, stack); end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(value); end
    def attribute_method_matchers?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers?; end
  end
end

module ActiveModel::AttributeMethods::AttrNames
  class << self
    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#525
    def define_attribute_accessor_method(owner, attr_name, writer: T.unsafe(nil)); end
  end
end

# source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#509
ActiveModel::AttributeMethods::AttrNames::DEF_SAFE_NAME = T.let(T.unsafe(nil), Regexp)

# source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#69
ActiveModel::AttributeMethods::CALL_COMPILABLE_REGEXP = T.let(T.unsafe(nil), Regexp)

module ActiveModel::AttributeMethods::ClassMethods
  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#209
  def alias_attribute(new_name, old_name); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#248
  def attribute_alias(name); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#243
  def attribute_alias?(new_name); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#180
  def attribute_method_affix(*affixes); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#109
  def attribute_method_prefix(*prefixes, parameters: T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#144
  def attribute_method_suffix(*suffixes, parameters: T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#311
  def define_attribute_method(attr_name, _owner: T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#276
  def define_attribute_methods(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#353
  def undefine_attribute_methods; end

  private

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#378
  def attribute_method_matchers_cache; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#382
  def attribute_method_matchers_matching(method_name); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#391
  def define_proxy_call(code_generator, name, target, parameters, *call_args, namespace:); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#361
  def generated_attribute_methods; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#365
  def instance_method_already_implemented?(method_name); end
end

class ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher
  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#422
  def initialize(prefix: T.unsafe(nil), suffix: T.unsafe(nil), parameters: T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#431
  def match(method_name); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#437
  def method_name(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#418
  def parameters; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#418
  def prefix; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#418
  def suffix; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#418
  def target; end
end

class ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher::AttributeMethodMatch < ::Struct
  def attr_name; end
  def attr_name=(_); end
  def target; end
  def target=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#70
ActiveModel::AttributeMethods::FORWARD_PARAMETERS = T.let(T.unsafe(nil), String)

# source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#68
ActiveModel::AttributeMethods::NAME_COMPILABLE_REGEXP = T.let(T.unsafe(nil), Regexp)

module ActiveModel::Callbacks
  # source://activemodel/7.0.4/lib/active_model/callbacks.rb#109
  def define_model_callbacks(*callbacks); end

  private

  # source://activemodel/7.0.4/lib/active_model/callbacks.rb#143
  def _define_after_model_callback(klass, callback); end

  # source://activemodel/7.0.4/lib/active_model/callbacks.rb#136
  def _define_around_model_callback(klass, callback); end

  # source://activemodel/7.0.4/lib/active_model/callbacks.rb#129
  def _define_before_model_callback(klass, callback); end

  class << self
    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#66
    def extended(base); end
  end
end

module ActiveModel::Conversion
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveModel::Conversion::ClassMethods

  # source://activemodel/7.0.4/lib/active_model/conversion.rb#59
  def to_key; end

  # source://activemodel/7.0.4/lib/active_model/conversion.rb#41
  def to_model; end

  # source://activemodel/7.0.4/lib/active_model/conversion.rb#82
  def to_param; end

  # source://activemodel/7.0.4/lib/active_model/conversion.rb#95
  def to_partial_path; end
end

module ActiveModel::Conversion::ClassMethods
  # source://activemodel/7.0.4/lib/active_model/conversion.rb#102
  def _to_partial_path; end
end

module ActiveModel::Dirty
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#143
  def as_json(options = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#178
  def attribute_changed?(attr_name, **options); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#245
  def attribute_changed_in_place?(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#188
  def attribute_previously_changed?(attr_name, **options); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#193
  def attribute_previously_was(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#183
  def attribute_was(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#173
  def changed; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#164
  def changed?; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#221
  def changed_attributes; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#231
  def changes; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#150
  def changes_applied; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#209
  def clear_attribute_changes(attr_names); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#203
  def clear_changes_information; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#241
  def previous_changes; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#198
  def restore_attributes(attr_names = T.unsafe(nil)); end

  private

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#271
  def attribute_change(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#276
  def attribute_previous_change(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#281
  def attribute_will_change!(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#250
  def clear_attribute_change(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#262
  def forget_attribute_assignments; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#133
  def initialize_dup(other); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#266
  def mutations_before_last_save; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#254
  def mutations_from_database; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#286
  def restore_attribute!(attr_name); end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(value); end
    def attribute_method_matchers?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers?; end
  end
end

class ActiveModel::EachValidator < ::ActiveModel::Validator
  # source://activemodel/7.0.4/lib/active_model/validator.rb#138
  def initialize(options); end

  # source://activemodel/7.0.4/lib/active_model/validator.rb#133
  def attributes; end

  # source://activemodel/7.0.4/lib/active_model/validator.rb#166
  def check_validity!; end

  # source://activemodel/7.0.4/lib/active_model/validator.rb#148
  def validate(record); end

  # source://activemodel/7.0.4/lib/active_model/validator.rb#159
  def validate_each(record, attribute, value); end

  private

  # source://activemodel/7.0.4/lib/active_model/validator.rb#170
  def prepare_value_for_validation(value, record, attr_name); end
end

module ActiveModel::ForbiddenAttributesProtection
  private

  # source://activemodel/7.0.4/lib/active_model/forbidden_attributes_protection.rb#21
  def sanitize_for_mass_assignment(attributes); end

  # source://activemodel/7.0.4/lib/active_model/forbidden_attributes_protection.rb#21
  def sanitize_forbidden_attributes(attributes); end
end

module ActiveModel::Naming
  # source://activemodel/7.0.4/lib/active_model/naming.rb#259
  def model_name; end

  class << self
    # source://activemodel/7.0.4/lib/active_model/naming.rb#242
    def extended(base); end

    # source://activemodel/7.0.4/lib/active_model/naming.rb#327
    def param_key(record_or_class); end

    # source://activemodel/7.0.4/lib/active_model/naming.rb#272
    def plural(record_or_class); end

    # source://activemodel/7.0.4/lib/active_model/naming.rb#315
    def route_key(record_or_class); end

    # source://activemodel/7.0.4/lib/active_model/naming.rb#280
    def singular(record_or_class); end

    # source://activemodel/7.0.4/lib/active_model/naming.rb#300
    def singular_route_key(record_or_class); end

    # source://activemodel/7.0.4/lib/active_model/naming.rb#288
    def uncountable?(record_or_class); end

    private

    # source://activemodel/7.0.4/lib/active_model/naming.rb#331
    def model_name_from_record_or_class(record_or_class); end
  end
end

module ActiveModel::SecurePassword
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveModel::SecurePassword::ClassMethods

  class << self
    # source://activemodel/7.0.4/lib/active_model/secure_password.rb#13
    def min_cost; end

    # source://activemodel/7.0.4/lib/active_model/secure_password.rb#13
    def min_cost=(_arg0); end
  end
end

module ActiveModel::SecurePassword::ClassMethods
  # source://activemodel/7.0.4/lib/active_model/secure_password.rb#84
  def has_secure_password(attribute = T.unsafe(nil), validations: T.unsafe(nil)); end
end

class ActiveModel::SecurePassword::InstanceMethodsOnActivation < ::Module
  # source://activemodel/7.0.4/lib/active_model/secure_password.rb#115
  def initialize(attribute); end
end

# source://activemodel/7.0.4/lib/active_model/secure_password.rb#10
ActiveModel::SecurePassword::MAX_PASSWORD_LENGTH_ALLOWED = T.let(T.unsafe(nil), Integer)

module ActiveModel::Serialization
  def read_attribute_for_serialization(*_arg0); end

  # source://activemodel/7.0.4/lib/active_model/serialization.rb#125
  def serializable_hash(options = T.unsafe(nil)); end

  private

  # source://activemodel/7.0.4/lib/active_model/serialization.rb#152
  def attribute_names_for_serialization; end

  # source://activemodel/7.0.4/lib/active_model/serialization.rb#184
  def serializable_add_includes(options = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/serialization.rb#174
  def serializable_attributes(attribute_names); end
end

module ActiveModel::Serializers::JSON
  include ::ActiveModel::Serialization
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Naming

  # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#96
  def as_json(options = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#146
  def from_json(json, include_root = T.unsafe(nil)); end

  module GeneratedClassMethods
    def include_root_in_json; end
    def include_root_in_json=(value); end
    def include_root_in_json?; end
  end

  module GeneratedInstanceMethods
    def include_root_in_json; end
    def include_root_in_json?; end
  end
end

module ActiveModel::Translation
  include ::ActiveModel::Naming

  # source://activemodel/7.0.4/lib/active_model/translation.rb#44
  def human_attribute_name(attribute, options = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/translation.rb#26
  def i18n_scope; end

  # source://activemodel/7.0.4/lib/active_model/translation.rb#34
  def lookup_ancestors; end
end

class ActiveModel::Type::BigInteger < ::ActiveModel::Type::Integer
  private

  # source://activemodel/7.0.4/lib/active_model/type/big_integer.rb#9
  def max_value; end
end

class ActiveModel::Type::Date < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Timezone
  include ::ActiveModel::Type::Helpers::AcceptsMultiparameterTime::InstanceMethods

  # source://activemodel/7.0.4/lib/active_model/type/date.rb#9
  def type; end

  # source://activemodel/7.0.4/lib/active_model/type/date.rb#13
  def type_cast_for_schema(value); end

  private

  # source://activemodel/7.0.4/lib/active_model/type/date.rb#18
  def cast_value(value); end

  # source://activemodel/7.0.4/lib/active_model/type/date.rb#36
  def fallback_string_to_date(string); end

  # source://activemodel/7.0.4/lib/active_model/type/date.rb#30
  def fast_string_to_date(string); end

  # source://activemodel/7.0.4/lib/active_model/type/date.rb#40
  def new_date(year, mon, mday); end

  # source://activemodel/7.0.4/lib/active_model/type/date.rb#46
  def value_from_multiparameter_assignment(*_arg0); end
end

# source://activemodel/7.0.4/lib/active_model/type/date.rb#29
ActiveModel::Type::Date::ISO_DATE = T.let(T.unsafe(nil), Regexp)

class ActiveModel::Type::DateTime < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Timezone
  include ::ActiveModel::Type::Helpers::TimeValue
  include ::ActiveModel::Type::Helpers::AcceptsMultiparameterTime::InstanceMethods

  # source://activemodel/7.0.4/lib/active_model/type/date_time.rb#12
  def type; end

  private

  # source://activemodel/7.0.4/lib/active_model/type/date_time.rb#17
  def cast_value(value); end

  # source://activemodel/7.0.4/lib/active_model/type/date_time.rb#30
  def fallback_string_to_time(string); end

  # source://activemodel/7.0.4/lib/active_model/type/date_time.rb#26
  def microseconds(time); end

  # source://activemodel/7.0.4/lib/active_model/type/date_time.rb#37
  def value_from_multiparameter_assignment(values_hash); end
end

module ActiveModel::Type::Helpers::AcceptsMultiparameterTime::InstanceMethods
  # source://activemodel/7.0.4/lib/active_model/type/helpers/accepts_multiparameter_time.rb#20
  def assert_valid_value(value); end

  # source://activemodel/7.0.4/lib/active_model/type/helpers/accepts_multiparameter_time.rb#12
  def cast(value); end

  # source://activemodel/7.0.4/lib/active_model/type/helpers/accepts_multiparameter_time.rb#8
  def serialize(value); end

  # source://activemodel/7.0.4/lib/active_model/type/helpers/accepts_multiparameter_time.rb#28
  def value_constructed_by_mass_assignment?(value); end
end

module ActiveModel::Type::Helpers::Mutable
  # source://activemodel/7.0.4/lib/active_model/type/helpers/mutable.rb#7
  def cast(value); end

  # source://activemodel/7.0.4/lib/active_model/type/helpers/mutable.rb#14
  def changed_in_place?(raw_old_value, new_value); end
end

module ActiveModel::Type::Helpers::Numeric
  # source://activemodel/7.0.4/lib/active_model/type/helpers/numeric.rb#11
  def cast(value); end

  # source://activemodel/7.0.4/lib/active_model/type/helpers/numeric.rb#27
  def changed?(old_value, _new_value, new_value_before_type_cast); end

  # source://activemodel/7.0.4/lib/active_model/type/helpers/numeric.rb#7
  def serialize(value); end

  private

  # source://activemodel/7.0.4/lib/active_model/type/helpers/numeric.rb#33
  def equal_nan?(old_value, new_value); end

  # source://activemodel/7.0.4/lib/active_model/type/helpers/numeric.rb#44
  def non_numeric_string?(value); end

  # source://activemodel/7.0.4/lib/active_model/type/helpers/numeric.rb#40
  def number_to_non_number?(old_value, new_value_before_type_cast); end
end

module ActiveModel::Type::Helpers::TimeValue
  # source://activemodel/7.0.4/lib/active_model/type/helpers/time_value.rb#24
  def apply_seconds_precision(value); end

  # source://activemodel/7.0.4/lib/active_model/type/helpers/time_value.rb#10
  def serialize(value); end

  # source://activemodel/7.0.4/lib/active_model/type/helpers/time_value.rb#38
  def type_cast_for_schema(value); end

  # source://activemodel/7.0.4/lib/active_model/type/helpers/time_value.rb#42
  def user_input_in_time_zone(value); end

  private

  # source://activemodel/7.0.4/lib/active_model/type/helpers/time_value.rb#72
  def fast_string_to_time(string); end

  # source://activemodel/7.0.4/lib/active_model/type/helpers/time_value.rb#47
  def new_time(year, mon, mday, hour, min, sec, microsec, offset = T.unsafe(nil)); end
end

# source://activemodel/7.0.4/lib/active_model/type/helpers/time_value.rb#64
ActiveModel::Type::Helpers::TimeValue::ISO_DATETIME = T.let(T.unsafe(nil), Regexp)

module ActiveModel::Type::Helpers::Timezone
  # source://activemodel/7.0.4/lib/active_model/type/helpers/timezone.rb#13
  def default_timezone; end

  # source://activemodel/7.0.4/lib/active_model/type/helpers/timezone.rb#9
  def is_utc?; end
end

class ActiveModel::Type::ImmutableString < ::ActiveModel::Type::Value
  # source://activemodel/7.0.4/lib/active_model/type/immutable_string.rb#6
  def initialize(**args); end

  # source://activemodel/7.0.4/lib/active_model/type/immutable_string.rb#16
  def serialize(value); end

  # source://activemodel/7.0.4/lib/active_model/type/immutable_string.rb#12
  def type; end

  private

  # source://activemodel/7.0.4/lib/active_model/type/immutable_string.rb#26
  def cast_value(value); end
end

class ActiveModel::Type::Integer < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Numeric

  # source://activemodel/7.0.4/lib/active_model/type/integer.rb#12
  def initialize(**_arg0); end

  # source://activemodel/7.0.4/lib/active_model/type/integer.rb#21
  def deserialize(value); end

  # source://activemodel/7.0.4/lib/active_model/type/integer.rb#31
  def serializable?(value); end

  # source://activemodel/7.0.4/lib/active_model/type/integer.rb#26
  def serialize(value); end

  # source://activemodel/7.0.4/lib/active_model/type/integer.rb#17
  def type; end

  private

  # source://activemodel/7.0.4/lib/active_model/type/integer.rb#65
  def _limit; end

  # source://activemodel/7.0.4/lib/active_model/type/integer.rb#46
  def cast_value(value); end

  # source://activemodel/7.0.4/lib/active_model/type/integer.rb#50
  def ensure_in_range(value); end

  # source://activemodel/7.0.4/lib/active_model/type/integer.rb#42
  def in_range?(value); end

  # source://activemodel/7.0.4/lib/active_model/type/integer.rb#57
  def max_value; end

  # source://activemodel/7.0.4/lib/active_model/type/integer.rb#61
  def min_value; end

  # source://activemodel/7.0.4/lib/active_model/type/integer.rb#40
  def range; end
end

# source://activemodel/7.0.4/lib/active_model/type/integer.rb#10
ActiveModel::Type::Integer::DEFAULT_LIMIT = T.let(T.unsafe(nil), Integer)

class ActiveModel::Type::String < ::ActiveModel::Type::ImmutableString
  # source://activemodel/7.0.4/lib/active_model/type/string.rb#8
  def changed_in_place?(raw_old_value, new_value); end

  # source://activemodel/7.0.4/lib/active_model/type/string.rb#14
  def to_immutable_string; end

  private

  # source://activemodel/7.0.4/lib/active_model/type/string.rb#25
  def cast_value(value); end
end

class ActiveModel::Type::Time < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Timezone
  include ::ActiveModel::Type::Helpers::TimeValue
  include ::ActiveModel::Type::Helpers::AcceptsMultiparameterTime::InstanceMethods

  # source://activemodel/7.0.4/lib/active_model/type/time.rb#12
  def type; end

  # source://activemodel/7.0.4/lib/active_model/type/time.rb#16
  def user_input_in_time_zone(value); end

  private

  # source://activemodel/7.0.4/lib/active_model/type/time.rb#32
  def cast_value(value); end
end

class ActiveModel::Type::Value
  # source://activemodel/7.0.4/lib/active_model/type/value.rb#8
  def initialize(precision: T.unsafe(nil), limit: T.unsafe(nil), scale: T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#109
  def ==(other); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#121
  def assert_valid_value(_); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#65
  def binary?; end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#45
  def cast(value); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#72
  def changed?(old_value, new_value, _new_value_before_type_cast); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#93
  def changed_in_place?(raw_old_value, new_value); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#31
  def deserialize(value); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#109
  def eql?(other); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#101
  def force_equality?(_value); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#117
  def hash; end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#6
  def limit; end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#105
  def map(value); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#6
  def precision; end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#6
  def scale; end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#18
  def serializable?(value); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#53
  def serialize(value); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#22
  def type; end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#59
  def type_cast_for_schema(value); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#97
  def value_constructed_by_mass_assignment?(_value); end

  private

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#128
  def cast_value(value); end
end

module ActiveModel::Validations
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods

  # source://activemodel/7.0.4/lib/active_model/validations.rb#301
  def errors; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#373
  def invalid?(context = T.unsafe(nil)); end

  def read_attribute_for_validation(*_arg0); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#334
  def valid?(context = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#334
  def validate(context = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#382
  def validate!(context = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/validations/with.rb#137
  def validates_with(*args, &block); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations.rb#283
  def initialize_dup(other); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#410
  def raise_validation_error; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#405
  def run_validations!; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
  end
end

class ActiveModel::Validations::AbsenceValidator < ::ActiveModel::EachValidator
  # source://activemodel/7.0.4/lib/active_model/validations/absence.rb#7
  def validate_each(record, attr_name, value); end
end

class ActiveModel::Validations::AcceptanceValidator < ::ActiveModel::EachValidator
  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#6
  def initialize(options); end

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#11
  def validate_each(record, attribute, value); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#23
  def acceptable_option?(value); end

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#18
  def setup!(klass); end
end

class ActiveModel::Validations::AcceptanceValidator::LazilyDefineAttributes < ::Module
  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#28
  def initialize(attributes); end

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#73
  def ==(other); end

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#56
  def define_on(klass); end

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#32
  def included(klass); end

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#51
  def matches?(method_name); end

  protected

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#78
  def attributes; end
end

module ActiveModel::Validations::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  private

  # source://activemodel/7.0.4/lib/active_model/validations/callbacks.rb#116
  def run_validations!; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

module ActiveModel::Validations::Callbacks::ClassMethods
  # source://activemodel/7.0.4/lib/active_model/validations/callbacks.rb#90
  def after_validation(*args, &block); end

  # source://activemodel/7.0.4/lib/active_model/validations/callbacks.rb#56
  def before_validation(*args, &block); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/callbacks.rb#101
  def set_options_for_callback(options); end
end

module ActiveModel::Validations::ClassMethods
  # source://activemodel/7.0.4/lib/active_model/validations.rb#270
  def attribute_method?(attribute); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#234
  def clear_validators!; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#275
  def inherited(base); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#152
  def validate(*args, &block); end

  # source://activemodel/7.0.4/lib/active_model/validations/validates.rb#106
  def validates(*attributes); end

  # source://activemodel/7.0.4/lib/active_model/validations/validates.rb#148
  def validates!(*attributes); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#85
  def validates_each(*attr_names, &block); end

  # source://activemodel/7.0.4/lib/active_model/validations/with.rb#81
  def validates_with(*args, &block); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#192
  def validators; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#254
  def validators_on(*attributes); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/validates.rb#161
  def _parse_validates_options(options); end

  # source://activemodel/7.0.4/lib/active_model/validations/validates.rb#157
  def _validates_default_keys; end
end

# source://activemodel/7.0.4/lib/active_model/validations.rb#89
ActiveModel::Validations::ClassMethods::VALID_OPTIONS_FOR_VALIDATE = T.let(T.unsafe(nil), Array)

module ActiveModel::Validations::Clusivity
  # source://activemodel/7.0.4/lib/active_model/validations/clusivity.rb#11
  def check_validity!; end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/clusivity.rb#34
  def delimiter; end

  # source://activemodel/7.0.4/lib/active_model/validations/clusivity.rb#18
  def include?(record, value); end

  # source://activemodel/7.0.4/lib/active_model/validations/clusivity.rb#43
  def inclusion_method(enumerable); end
end

# source://activemodel/7.0.4/lib/active_model/validations/clusivity.rb#8
ActiveModel::Validations::Clusivity::ERROR_MESSAGE = T.let(T.unsafe(nil), String)

module ActiveModel::Validations::Comparability
  # source://activemodel/7.0.4/lib/active_model/validations/comparability.rb#21
  def error_options(value, option_value); end

  # source://activemodel/7.0.4/lib/active_model/validations/comparability.rb#10
  def option_value(record, option_value); end
end

# source://activemodel/7.0.4/lib/active_model/validations/comparability.rb#6
ActiveModel::Validations::Comparability::COMPARE_CHECKS = T.let(T.unsafe(nil), Hash)

class ActiveModel::Validations::ComparisonValidator < ::ActiveModel::EachValidator
  include ::ActiveModel::Validations::Comparability

  # source://activemodel/7.0.4/lib/active_model/validations/comparison.rb#10
  def check_validity!; end

  # source://activemodel/7.0.4/lib/active_model/validations/comparison.rb#17
  def validate_each(record, attr_name, value); end
end

class ActiveModel::Validations::ConfirmationValidator < ::ActiveModel::EachValidator
  # source://activemodel/7.0.4/lib/active_model/validations/confirmation.rb#6
  def initialize(options); end

  # source://activemodel/7.0.4/lib/active_model/validations/confirmation.rb#11
  def validate_each(record, attribute, value); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/confirmation.rb#31
  def confirmation_value_equal?(record, attribute, value, confirmed); end

  # source://activemodel/7.0.4/lib/active_model/validations/confirmation.rb#21
  def setup!(klass); end
end

class ActiveModel::Validations::ExclusionValidator < ::ActiveModel::EachValidator
  include ::ActiveModel::Validations::Clusivity

  # source://activemodel/7.0.4/lib/active_model/validations/exclusion.rb#10
  def validate_each(record, attribute, value); end
end

class ActiveModel::Validations::FormatValidator < ::ActiveModel::EachValidator
  # source://activemodel/7.0.4/lib/active_model/validations/format.rb#16
  def check_validity!; end

  # source://activemodel/7.0.4/lib/active_model/validations/format.rb#6
  def validate_each(record, attribute, value); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/format.rb#35
  def check_options_validity(name); end

  # source://activemodel/7.0.4/lib/active_model/validations/format.rb#26
  def option_call(record, name); end

  # source://activemodel/7.0.4/lib/active_model/validations/format.rb#31
  def record_error(record, attribute, name, value); end

  # source://activemodel/7.0.4/lib/active_model/validations/format.rb#49
  def regexp_using_multiline_anchors?(regexp); end
end

module ActiveModel::Validations::HelperMethods
  # source://activemodel/7.0.4/lib/active_model/validations/absence.rb#28
  def validates_absence_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#108
  def validates_acceptance_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/comparison.rb#77
  def validates_comparison_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/confirmation.rb#75
  def validates_confirmation_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/exclusion.rb#44
  def validates_exclusion_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/format.rb#108
  def validates_format_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/inclusion.rb#42
  def validates_inclusion_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/length.rb#122
  def validates_length_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#205
  def validates_numericality_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/presence.rb#34
  def validates_presence_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/length.rb#122
  def validates_size_of(*attr_names); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/helper_methods.rb#7
  def _merge_attributes(attr_names); end
end

class ActiveModel::Validations::InclusionValidator < ::ActiveModel::EachValidator
  include ::ActiveModel::Validations::Clusivity

  # source://activemodel/7.0.4/lib/active_model/validations/inclusion.rb#10
  def validate_each(record, attribute, value); end
end

class ActiveModel::Validations::LengthValidator < ::ActiveModel::EachValidator
  # source://activemodel/7.0.4/lib/active_model/validations/length.rb#11
  def initialize(options); end

  # source://activemodel/7.0.4/lib/active_model/validations/length.rb#24
  def check_validity!; end

  # source://activemodel/7.0.4/lib/active_model/validations/length.rb#40
  def validate_each(record, attribute, value); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/length.rb#67
  def skip_nil_check?(key); end
end

# source://activemodel/7.0.4/lib/active_model/validations/length.rb#7
ActiveModel::Validations::LengthValidator::CHECKS = T.let(T.unsafe(nil), Hash)

# source://activemodel/7.0.4/lib/active_model/validations/length.rb#6
ActiveModel::Validations::LengthValidator::MESSAGES = T.let(T.unsafe(nil), Hash)

# source://activemodel/7.0.4/lib/active_model/validations/length.rb#9
ActiveModel::Validations::LengthValidator::RESERVED_OPTIONS = T.let(T.unsafe(nil), Array)

class ActiveModel::Validations::NumericalityValidator < ::ActiveModel::EachValidator
  include ::ActiveModel::Validations::Comparability

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#20
  def check_validity!; end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#34
  def validate_each(record, attr_name, value, precision: T.unsafe(nil), scale: T.unsafe(nil)); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#112
  def allow_only_integer?(record); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#106
  def filtered_options(value); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#102
  def is_hexadecimal_literal?(raw_value); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#98
  def is_integer?(raw_value); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#92
  def is_number?(raw_value, precision, scale); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#66
  def option_as_number(record, option_value, precision, scale); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#70
  def parse_as_number(raw_value, precision, scale); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#84
  def parse_float(raw_value, precision, scale); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#123
  def prepare_value_for_validation(value, record, attr_name); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#144
  def record_attribute_changed_in_place?(record, attr_name); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#88
  def round(raw_value, scale); end
end

# source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#18
ActiveModel::Validations::NumericalityValidator::HEXADECIMAL_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#16
ActiveModel::Validations::NumericalityValidator::INTEGER_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#12
ActiveModel::Validations::NumericalityValidator::NUMBER_CHECKS = T.let(T.unsafe(nil), Hash)

# source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#11
ActiveModel::Validations::NumericalityValidator::RANGE_CHECKS = T.let(T.unsafe(nil), Hash)

# source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#14
ActiveModel::Validations::NumericalityValidator::RESERVED_OPTIONS = T.let(T.unsafe(nil), Array)

class ActiveModel::Validations::PresenceValidator < ::ActiveModel::EachValidator
  # source://activemodel/7.0.4/lib/active_model/validations/presence.rb#6
  def validate_each(record, attr_name, value); end
end

class ActiveModel::Validations::WithValidator < ::ActiveModel::EachValidator
  # source://activemodel/7.0.4/lib/active_model/validations/with.rb#8
  def validate_each(record, attr, val); end
end

class ActiveModel::Validator
  # source://activemodel/7.0.4/lib/active_model/validator.rb#108
  def initialize(options = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/validator.rb#116
  def kind; end

  # source://activemodel/7.0.4/lib/active_model/validator.rb#97
  def options; end

  # source://activemodel/7.0.4/lib/active_model/validator.rb#122
  def validate(record); end

  class << self
    # source://activemodel/7.0.4/lib/active_model/validator.rb#103
    def kind; end
  end
end

module ActiveRecord
  extend ::ActiveSupport::Autoload

  class << self
    # source://activerecord/7.0.4/lib/active_record.rb#277
    def action_on_strict_loading_violation; end

    # source://activerecord/7.0.4/lib/active_record.rb#277
    def action_on_strict_loading_violation=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#270
    def application_record_class; end

    # source://activerecord/7.0.4/lib/active_record.rb#270
    def application_record_class=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#213
    def async_query_executor; end

    # source://activerecord/7.0.4/lib/active_record.rb#213
    def async_query_executor=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#183
    def default_timezone; end

    # source://activerecord/7.0.4/lib/active_record.rb#187
    def default_timezone=(default_timezone); end

    # source://activerecord/7.0.4/lib/active_record.rb#311
    def dump_schema_after_migration; end

    # source://activerecord/7.0.4/lib/active_record.rb#311
    def dump_schema_after_migration=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#321
    def dump_schemas; end

    # source://activerecord/7.0.4/lib/active_record.rb#321
    def dump_schemas=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#357
    def eager_load!; end

    # source://activerecord/7.0.4/lib/active_record.rb#296
    def error_on_ignored_order; end

    # source://activerecord/7.0.4/lib/active_record.rb#296
    def error_on_ignored_order=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record/gem_version.rb#5
    def gem_version; end

    # source://activerecord/7.0.4/lib/active_record.rb#236
    def global_executor_concurrency; end

    # source://activerecord/7.0.4/lib/active_record.rb#228
    def global_executor_concurrency=(global_executor_concurrency); end

    # source://activerecord/7.0.4/lib/active_record.rb#216
    def global_thread_pool_async_query_executor; end

    # source://activerecord/7.0.4/lib/active_record.rb#240
    def index_nested_attribute_errors; end

    # source://activerecord/7.0.4/lib/active_record.rb#240
    def index_nested_attribute_errors=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#171
    def lazily_load_schema_cache; end

    # source://activerecord/7.0.4/lib/active_record.rb#171
    def lazily_load_schema_cache=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#180
    def legacy_connection_handling; end

    # source://activerecord/7.0.4/lib/active_record.rb#180
    def legacy_connection_handling=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#258
    def maintain_test_schema; end

    # source://activerecord/7.0.4/lib/active_record.rb#258
    def maintain_test_schema=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#340
    def query_transformers; end

    # source://activerecord/7.0.4/lib/active_record.rb#340
    def query_transformers=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#255
    def queues; end

    # source://activerecord/7.0.4/lib/active_record.rb#255
    def queues=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#200
    def reading_role; end

    # source://activerecord/7.0.4/lib/active_record.rb#200
    def reading_role=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#177
    def schema_cache_ignored_tables; end

    # source://activerecord/7.0.4/lib/active_record.rb#177
    def schema_cache_ignored_tables=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#288
    def schema_format; end

    # source://activerecord/7.0.4/lib/active_record.rb#288
    def schema_format=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#328
    def suppress_multiple_database_warning; end

    # source://activerecord/7.0.4/lib/active_record.rb#328
    def suppress_multiple_database_warning=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#302
    def timestamped_migrations; end

    # source://activerecord/7.0.4/lib/active_record.rb#302
    def timestamped_migrations=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#347
    def use_yaml_unsafe_load; end

    # source://activerecord/7.0.4/lib/active_record.rb#347
    def use_yaml_unsafe_load=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#248
    def verbose_query_logs; end

    # source://activerecord/7.0.4/lib/active_record.rb#248
    def verbose_query_logs=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#337
    def verify_foreign_keys_for_fixtures; end

    # source://activerecord/7.0.4/lib/active_record.rb#337
    def verify_foreign_keys_for_fixtures=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record/version.rb#7
    def version; end

    # source://activerecord/7.0.4/lib/active_record.rb#267
    def warn_on_records_fetched_greater_than; end

    # source://activerecord/7.0.4/lib/active_record.rb#267
    def warn_on_records_fetched_greater_than=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#197
    def writing_role; end

    # source://activerecord/7.0.4/lib/active_record.rb#197
    def writing_role=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#354
    def yaml_column_permitted_classes; end

    # source://activerecord/7.0.4/lib/active_record.rb#354
    def yaml_column_permitted_classes=(_arg0); end
  end
end

class ActiveRecord::ActiveJobRequiredError < ::ActiveRecord::ActiveRecordError; end
class ActiveRecord::ActiveRecordError < ::StandardError; end
class ActiveRecord::AdapterNotFound < ::ActiveRecord::ActiveRecordError; end
class ActiveRecord::AdapterNotSpecified < ::ActiveRecord::ActiveRecordError; end
class ActiveRecord::AdapterTimeout < ::ActiveRecord::QueryAborted; end

module ActiveRecord::Aggregations
  # source://activerecord/7.0.4/lib/active_record/aggregations.rb#11
  def reload(*_arg0); end

  private

  # source://activerecord/7.0.4/lib/active_record/aggregations.rb#17
  def clear_aggregation_cache; end

  # source://activerecord/7.0.4/lib/active_record/aggregations.rb#21
  def init_internals; end

  # source://activerecord/7.0.4/lib/active_record/aggregations.rb#6
  def initialize_dup(*_arg0); end
end

module ActiveRecord::Aggregations::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/aggregations.rb#222
  def composed_of(part_id, options = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/aggregations.rb#245
  def reader_method(name, class_name, mapping, allow_nil, constructor); end

  # source://activerecord/7.0.4/lib/active_record/aggregations.rb#258
  def writer_method(name, class_name, mapping, allow_nil, converter); end
end

class ActiveRecord::AmbiguousSourceReflectionForThroughAssociation < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/associations.rb#188
  def initialize(klass, macro, association_name, options, possible_sources); end
end

class ActiveRecord::AssociationNotFoundError < ::ActiveRecord::ConfigurationError
  include ::DidYouMean::Correctable

  # source://activerecord/7.0.4/lib/active_record/associations.rb#7
  def initialize(record = T.unsafe(nil), association_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#5
  def association_name; end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#20
  def corrections; end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#5
  def record; end
end

class ActiveRecord::AssociationRelation < ::ActiveRecord::Relation
  # source://activerecord/7.0.4/lib/active_record/association_relation.rb#5
  def initialize(klass, association, **_arg2); end

  # source://activerecord/7.0.4/lib/active_record/association_relation.rb#14
  def ==(other); end

  def insert(attributes, **kwargs); end
  def insert!(attributes, **kwargs); end
  def insert_all(attributes, **kwargs); end
  def insert_all!(attributes, **kwargs); end

  # source://activerecord/7.0.4/lib/active_record/association_relation.rb#10
  def proxy_association; end

  def upsert(attributes, **kwargs); end
  def upsert_all(attributes, **kwargs); end

  private

  # source://activerecord/7.0.4/lib/active_record/association_relation.rb#35
  def _create(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/association_relation.rb#39
  def _create!(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/association_relation.rb#31
  def _new(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/association_relation.rb#43
  def exec_queries; end
end

class ActiveRecord::AssociationTypeMismatch < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::Associations
  extend ::ActiveSupport::Autoload
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Associations::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/associations.rb#297
  def association(name); end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#311
  def association_cached?(name); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations.rb#327
  def association_instance_get(name); end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#332
  def association_instance_set(name, association); end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#321
  def init_internals; end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#315
  def initialize_dup(*_arg0); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/associations.rb#290
    def eager_load!; end
  end
end

class ActiveRecord::Associations::AliasTracker
  # source://activerecord/7.0.4/lib/active_record/associations/alias_tracker.rb#49
  def initialize(connection, aliases); end

  # source://activerecord/7.0.4/lib/active_record/associations/alias_tracker.rb#54
  def aliased_table_for(arel_table, table_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/alias_tracker.rb#76
  def aliases; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/alias_tracker.rb#79
  def truncate(name); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/associations/alias_tracker.rb#9
    def create(connection, initial_table, joins, aliases = T.unsafe(nil)); end

    # source://activerecord/7.0.4/lib/active_record/associations/alias_tracker.rb#26
    def initial_count_for(connection, name, table_joins); end
  end
end

class ActiveRecord::Associations::Association
  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#40
  def initialize(owner, reflection); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#203
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#207
  def create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#36
  def disable_joins; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#152
  def extensions; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#193
  def initialize_attributes(record, except_from_scope_attributes = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#136
  def inversed_from(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#140
  def inversed_from_queries(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#148
  def klass; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#172
  def load_target; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#77
  def loaded!; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#72
  def loaded?; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#182
  def marshal_dump; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#187
  def marshal_load(data); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#38
  def options(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#36
  def owner; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#36
  def reflection; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#63
  def reload(force = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#130
  def remove_inverse_instance(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#51
  def reset; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#57
  def reset_negative_cache; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#110
  def reset_scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#98
  def scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#115
  def set_inverse_instance(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#122
  def set_inverse_instance_from_queries(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#88
  def stale_target?; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#36
  def target; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#93
  def target=(target); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#254
  def association_scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#336
  def build_record(attributes); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#351
  def enqueue_destroy_association(options); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#214
  def ensure_klass_exists!; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#218
  def find_target; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#274
  def find_target?; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#324
  def foreign_key_for?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#286
  def foreign_key_present?; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#359
  def inversable?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#304
  def inverse_association_for(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#313
  def inverse_reflection_for(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#319
  def invertible_for?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#364
  def matches_foreign_key?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#293
  def raise_on_type_mismatch!(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#270
  def scope_for_create; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#344
  def skip_statement_cache?(scope); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#333
  def stale_state; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#266
  def target_scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#242
  def violates_strict_loading?; end
end

class ActiveRecord::Associations::AssociationScope
  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#15
  def initialize(value_transformation); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#21
  def scope(association); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#117
  def add_constraints(scope, owner, chain); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#154
  def apply_scope(scope, table, key, value); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#162
  def eval_scope(reflection, scope, owner); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#105
  def get_chain(reflection, association, tracker); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#54
  def join(table, constraint); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#58
  def last_chain_scope(scope, reflection, owner); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#78
  def next_chain_scope(scope, reflection, next_reflection); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#74
  def transform_value(value); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#52
  def value_transformation; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#10
    def create(&block); end

    # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#34
    def get_bind_values(owner, chain); end

    # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#6
    def scope(association); end
  end
end

# source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#19
ActiveRecord::Associations::AssociationScope::INSTANCE = T.let(T.unsafe(nil), ActiveRecord::Associations::AssociationScope)

class ActiveRecord::Associations::AssociationScope::ReflectionProxy < ::SimpleDelegator
  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#97
  def initialize(reflection, aliased_table); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#95
  def aliased_table; end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#102
  def all_includes; end
end

class ActiveRecord::Associations::BelongsToAssociation < ::ActiveRecord::Associations::SingularAssociation
  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#48
  def decrement_counters; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#56
  def decrement_counters_before_last_save; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#35
  def default(&block); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#7
  def handle_dependency; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#52
  def increment_counters; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#30
  def inversed_from(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#39
  def reset; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#79
  def saved_change_to_target?; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#71
  def target_changed?; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#75
  def target_previously_changed?; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#44
  def updated?; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#113
  def find_target?; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#133
  def foreign_key_present?; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#137
  def invertible_for?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#129
  def primary_key(klass); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#84
  def replace(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#121
  def replace_keys(record, force: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#117
  def require_counter_update?; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#142
  def stale_state; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#98
  def update_counters(by); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#108
  def update_counters_via_scope(klass, foreign_key, by); end
end

class ActiveRecord::Associations::BelongsToPolymorphicAssociation < ::ActiveRecord::Associations::BelongsToAssociation
  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_polymorphic_association.rb#7
  def klass; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_polymorphic_association.rb#20
  def saved_change_to_target?; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_polymorphic_association.rb#12
  def target_changed?; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_polymorphic_association.rb#16
  def target_previously_changed?; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_polymorphic_association.rb#35
  def inverse_reflection_for(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_polymorphic_association.rb#39
  def raise_on_type_mismatch!(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_polymorphic_association.rb#25
  def replace_keys(record, force: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_polymorphic_association.rb#43
  def stale_state; end
end

module ActiveRecord::Associations::Builder; end

class ActiveRecord::Associations::Builder::Association
  class << self
    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#25
    def build(model, name, scope, options, &block); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#40
    def create_reflection(model, name, scope, options, &block); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#17
    def extensions; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#17
    def extensions=(_arg0); end

    private

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#144
    def add_after_commit_jobs_callback(model, dependent); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#139
    def add_destroy_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#53
    def build_scope(scope); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#129
    def check_dependent_options(dependent, model); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#94
    def define_accessors(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#76
    def define_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#121
    def define_change_tracking_methods(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#73
    def define_extensions(model, name); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#101
    def define_readers(mixin, name); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#117
    def define_validations(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#109
    def define_writers(mixin, name); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#61
    def macro; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#125
    def valid_dependent_options; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#65
    def valid_options(options); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#69
    def validate_options(options); end
  end
end

# source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#21
ActiveRecord::Associations::Builder::Association::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Associations::Builder::BelongsTo < ::ActiveRecord::Associations::Builder::SingularAssociation
  class << self
    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#43
    def touch_record(o, changes, foreign_key, name, touch, touch_method); end

    private

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#27
    def add_counter_cache_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#102
    def add_default_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#108
    def add_destroy_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#78
    def add_touch_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#20
    def define_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#130
    def define_change_tracking_methods(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#112
    def define_validations(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#5
    def macro; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#16
    def valid_dependent_options; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#9
    def valid_options(options); end
  end
end

class ActiveRecord::Associations::Builder::CollectionAssociation < ::ActiveRecord::Associations::Builder::Association
  class << self
    # source://activerecord/7.0.4/lib/active_record/associations/builder/collection_association.rb#13
    def define_callbacks(model, reflection); end

    private

    # source://activerecord/7.0.4/lib/active_record/associations/builder/collection_association.rb#30
    def define_callback(model, callback_name, name, options); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/collection_association.rb#22
    def define_extensions(model, name, &block); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/collection_association.rb#58
    def define_readers(mixin, name); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/collection_association.rb#68
    def define_writers(mixin, name); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/collection_association.rb#9
    def valid_options(options); end
  end
end

# source://activerecord/7.0.4/lib/active_record/associations/builder/collection_association.rb#7
ActiveRecord::Associations::Builder::CollectionAssociation::CALLBACKS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Associations::Builder::HasAndBelongsToMany
  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#7
  def initialize(association_name, lhs_model, options); end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#5
  def association_name; end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#5
  def lhs_model; end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#63
  def middle_reflection(join_model); end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#5
  def options; end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#13
  def through_model; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#96
  def belongs_to_options(options); end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#75
  def middle_options(join_model); end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#84
  def table_name; end
end

class ActiveRecord::Associations::Builder::HasMany < ::ActiveRecord::Associations::Builder::CollectionAssociation
  class << self
    private

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_many.rb#5
    def macro; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_many.rb#18
    def valid_dependent_options; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_many.rb#9
    def valid_options(options); end
  end
end

class ActiveRecord::Associations::Builder::HasOne < ::ActiveRecord::Associations::Builder::SingularAssociation
  class << self
    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_one.rb#38
    def touch_record(record, name, touch); end

    private

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_one.rb#27
    def add_destroy_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_one.rb#47
    def add_touch_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_one.rb#22
    def define_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_one.rb#31
    def define_validations(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_one.rb#5
    def macro; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_one.rb#18
    def valid_dependent_options; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_one.rb#9
    def valid_options(options); end
  end
end

class ActiveRecord::Associations::Builder::SingularAssociation < ::ActiveRecord::Associations::Builder::Association
  class << self
    private

    # source://activerecord/7.0.4/lib/active_record/associations/builder/singular_association.rb#11
    def define_accessors(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/singular_association.rb#26
    def define_constructors(mixin, name); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/singular_association.rb#7
    def valid_options(options); end
  end
end

module ActiveRecord::Associations::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/associations.rb#1790
  def belongs_to(name, scope = T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#1962
  def has_and_belongs_to_many(name, scope = T.unsafe(nil), **options, &extension); end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#1466
  def has_many(name, scope = T.unsafe(nil), **options, &extension); end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#1630
  def has_one(name, scope = T.unsafe(nil), **options); end
end

class ActiveRecord::Associations::CollectionAssociation < ::ActiveRecord::Associations::Association
  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#271
  def add_to_target(record, skip_callbacks: T.unsafe(nil), replace: T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#109
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#119
  def concat(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#178
  def delete(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#142
  def delete_all(dependent = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#187
  def destroy(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#164
  def destroy_all; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#224
  def empty?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#86
  def find(*args); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#298
  def find_from_target?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#49
  def ids_reader; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#60
  def ids_writer(ids); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#250
  def include?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#262
  def load_target; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#294
  def null_scope?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#32
  def reader; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#234
  def replace(other_array); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#79
  def reset; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#288
  def scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#201
  def size; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#275
  def target=(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#44
  def writer(records); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#340
  def _create_record(attributes, raise = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#478
  def callback(method, record); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#484
  def callbacks_for(callback_name); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#424
  def concat_records(records, raise = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#371
  def delete_or_destroy(records, method); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#400
  def delete_records(records, method); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#507
  def find_by_scan(*args); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#493
  def include_in_memory?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#363
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#321
  def merge_target_lists(persisted, memory); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#385
  def remove_records(existing_records, records, method); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#416
  def replace_common_records_in_memory(new_target, original_target); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#443
  def replace_on_target(record, skip_callbacks, replace:, inversing: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#404
  def replace_records(new_target, original_target); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#307
  def transaction(&block); end
end

class ActiveRecord::Associations::CollectionProxy < ::ActiveRecord::Relation
  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#30
  def initialize(klass, association, **_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1031
  def <<(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#962
  def ==(other); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def _select!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def and(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def and!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def annotate(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def annotate!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def annotate_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def annotate_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1031
  def append(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def arel(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#316
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#722
  def calculate(operation, column_name); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1048
  def clear; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1031
  def concat(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def construct_join_dependency(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#347
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#363
  def create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def create_with(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def create_with!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def create_with_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def create_with_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#618
  def delete(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#472
  def delete_all(dependent = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#690
  def destroy(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#499
  def destroy_all; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def distinct(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def distinct!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def distinct_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def distinct_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def eager_load(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def eager_load!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def eager_load_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def eager_load_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#829
  def empty?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def except(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def excluding(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def excluding!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extending(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extending!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extending_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extending_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extensions(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extract_associated(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#136
  def find(*args); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def from(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def from!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def from_clause(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def from_clause=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def group(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def group!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def group_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def group_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def having(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def having!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def having_clause(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def having_clause=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def in_order_of(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#925
  def include?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def includes(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def includes!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def includes_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def includes_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def insert(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def insert!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def insert_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def insert_all!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1100
  def inspect; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def invert_where(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def invert_where!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def joins!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def joins_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def joins_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#257
  def last(limit = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def left_joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def left_outer_joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def left_outer_joins!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def left_outer_joins_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def left_outer_joins_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def limit(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def limit!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def limit_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def limit_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def load_async(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#42
  def load_target; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#51
  def loaded; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#51
  def loaded?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def lock(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def lock!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def lock_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def lock_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def merge(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def merge!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#316
  def new(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def none(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def none!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def offset(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def offset!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def offset_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def offset_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def only(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def optimizer_hints(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def optimizer_hints!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def optimizer_hints_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def optimizer_hints_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def or(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def or!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def order(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def order!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def order_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def order_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#726
  def pluck(*column_names); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def preload(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def preload!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def preload_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def preload_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1038
  def prepend(*args); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#929
  def proxy_association; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1031
  def push(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def readonly(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def readonly!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def readonly_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def readonly_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1006
  def records; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def references(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def references!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def references_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def references_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1067
  def reload; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reorder(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reorder!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reordering_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reordering_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#389
  def replace(other_array); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reselect(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reselect!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1088
  def reset; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1094
  def reset_scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reverse_order(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reverse_order!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reverse_order_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reverse_order_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def rewhere(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#934
  def scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def scoping(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def select_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def select_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#780
  def size; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def skip_preloading!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def skip_query_cache!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def skip_query_cache_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def skip_query_cache_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def spawn(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def strict_loading(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def strict_loading!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def strict_loading_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def strict_loading_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def structurally_compatible?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#287
  def take(limit = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#38
  def target; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def uniq!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def unscope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def unscope!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def unscope_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def unscope_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def upsert(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def upsert_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def where(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def where!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def where_clause(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def where_clause=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def without(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1135
  def exec_queries; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1131
  def find_from_target?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1122
  def find_nth_from_last(index); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1117
  def find_nth_with_limit(index, limit); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1127
  def null_scope?; end
end

class ActiveRecord::Associations::DisableJoinsAssociationScope < ::ActiveRecord::Associations::AssociationScope
  # source://activerecord/7.0.4/lib/active_record/associations/disable_joins_association_scope.rb#6
  def scope(association); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/disable_joins_association_scope.rb#33
  def add_constraints(reflection, key, join_ids, owner, ordered); end

  # source://activerecord/7.0.4/lib/active_record/associations/disable_joins_association_scope.rb#18
  def last_scope_chain(reverse_chain, owner); end
end

module ActiveRecord::Associations::ForeignAssociation
  # source://activerecord/7.0.4/lib/active_record/associations/foreign_association.rb#5
  def foreign_key_present?; end

  # source://activerecord/7.0.4/lib/active_record/associations/foreign_association.rb#13
  def nullified_owner_attributes; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/foreign_association.rb#22
  def set_owner_attributes(record); end
end

class ActiveRecord::Associations::HasManyAssociation < ::ActiveRecord::Associations::CollectionAssociation
  include ::ActiveRecord::Associations::ForeignAssociation

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#13
  def handle_dependency; end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#56
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#136
  def _create_record(attributes, *_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#132
  def concat_records(records, *_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#75
  def count_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#107
  def delete_count(method, scope); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#115
  def delete_or_nullify_all_records(method); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#122
  def delete_records(records, method); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#151
  def difference(a, b); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#155
  def intersection(a, b); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#93
  def update_counter(difference, reflection = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#144
  def update_counter_if_success(saved_successfully, difference); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#99
  def update_counter_in_memory(difference, reflection = T.unsafe(nil)); end
end

class ActiveRecord::Associations::HasManyThroughAssociation < ::ActiveRecord::Associations::HasManyAssociation
  include ::ActiveRecord::Associations::ThroughAssociation

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#9
  def initialize(owner, reflection); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#14
  def concat(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#24
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#86
  def build_record(attributes); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#56
  def build_through_record(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#37
  def concat_records(records); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#126
  def delete_or_nullify_all_records(method); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#130
  def delete_records(records, method); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#199
  def delete_through_records(records); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#167
  def difference(a, b); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#183
  def distribution(array); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#215
  def find_target; end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#173
  def intersection(a, b); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#222
  def invertible_for?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#179
  def mark_occurrence(distribution, record); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#106
  def remove_records(existing_records, records, method); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#77
  def save_through_record(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#111
  def target_reflection_has_associated_record?; end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#189
  def through_records_for(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#68
  def through_scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#70
  def through_scope_attributes; end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#115
  def update_through_counter?(method); end
end

class ActiveRecord::Associations::HasOneAssociation < ::ActiveRecord::Associations::SingularAssociation
  include ::ActiveRecord::Associations::ForeignAssociation

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_association.rb#26
  def delete(method = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_association.rb#9
  def handle_dependency; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_association.rb#126
  def _create_record(attributes, raise_error = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_association.rb#114
  def nullify_owner_attributes(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_association.rb#90
  def remove_target!(method); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_association.rb#54
  def replace(record, save = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_association.rb#86
  def set_new_record(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_association.rb#118
  def transaction_if(value, &block); end
end

class ActiveRecord::Associations::HasOneThroughAssociation < ::ActiveRecord::Associations::HasOneAssociation
  include ::ActiveRecord::Associations::ThroughAssociation

  private

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_through_association.rb#15
  def create_through_record(record, save); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_through_association.rb#10
  def replace(record, save = T.unsafe(nil)); end
end

class ActiveRecord::Associations::JoinDependency
  extend ::ActiveSupport::Autoload

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#71
  def initialize(base, table, associations, join_type); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#153
  def apply_column_aliases(relation); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#77
  def base_klass; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#158
  def each(&block); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#105
  def instantiate(result_set, strict_loading_value, &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#85
  def join_constraints(joins_to_add, alias_tracker, references); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#81
  def reflections; end

  protected

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#163
  def join_root; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#163
  def join_type; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#166
  def alias_tracker; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#168
  def aliases; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#228
  def build(associations, base_klass); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#242
  def construct(ar_parent, parent, row, seen, model_cache, strict_loading_value); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#278
  def construct_model(record, node, row, model_cache, id, strict_loading_value); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#223
  def find_reflection(klass, name); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#166
  def join_root_alias; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#190
  def make_constraints(parent, child, join_type); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#184
  def make_join_constraints(join_root, join_type); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#214
  def walk(left, right, join_type); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#47
    def make_tree(associations); end

    # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#53
    def walk_tree(associations, hash); end
  end
end

class ActiveRecord::Associations::JoinDependency::Aliases
  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#14
  def initialize(tables); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#34
  def column_alias(node, column); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#30
  def column_aliases(node); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#26
  def columns; end
end

class ActiveRecord::Associations::JoinDependency::Aliases::Column < ::Struct
  def alias; end
  def alias=(_); end
  def name; end
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::Associations::JoinDependency::Aliases::Table < ::Struct
  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#39
  def column_aliases; end

  def columns; end
  def columns=(_); end
  def node; end
  def node=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::Associations::JoinDependency::JoinAssociation < ::ActiveRecord::Associations::JoinDependency::JoinPart
  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#13
  def initialize(reflection, children); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#24
  def join_constraints(foreign_table, foreign_klass, join_type, alias_tracker); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#19
  def match?(other); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#78
  def readonly?; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#10
  def reflection; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#84
  def strict_loading?; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#11
  def table; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#11
  def table=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#10
  def tables; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#91
  def append_constraints(join, constraints); end
end

class ActiveRecord::Associations::JoinDependency::JoinBase < ::ActiveRecord::Associations::JoinDependency::JoinPart
  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_base.rb#11
  def initialize(base_klass, table, children); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_base.rb#16
  def match?(other); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_base.rb#9
  def table; end
end

class ActiveRecord::Associations::JoinDependency::JoinPart
  include ::Enumerable

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#22
  def initialize(base_klass, children); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#20
  def attribute_types(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#18
  def base_klass; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#18
  def children; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#20
  def column_names(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#31
  def each(&block); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#36
  def each_children(&block); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#48
  def extract_record(row, column_names_with_alias); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#65
  def instantiate(row, aliases, column_types = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#27
  def match?(other); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#20
  def primary_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#44
  def table; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#20
  def table_name(*_arg0, **_arg1, &_arg2); end
end

class ActiveRecord::Associations::Preloader
  extend ::ActiveSupport::Autoload

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#96
  def initialize(records:, associations:, scope: T.unsafe(nil), available_records: T.unsafe(nil), associate_by_default: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#54
  def associate_by_default; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#54
  def associations; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#123
  def branches; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#117
  def call; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#113
  def empty?; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#127
  def loaders; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#54
  def records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#54
  def scope; end
end

class ActiveRecord::Associations::Preloader::Association
  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#87
  def initialize(klass, owners, reflection, preload_scope, reflection_scope, associate_by_default); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#202
  def associate_records_from_unscoped(unscoped_records); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#144
  def association_key_name; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#102
  def future_classes; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#85
  def klass; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#180
  def load_records(raw_records = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#159
  def loaded?(owner); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#148
  def loader_query; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#152
  def owners_by_key; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#137
  def preloaded_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#131
  def records_by_owner; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#118
  def run; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#114
  def run?; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#110
  def runnable_loaders; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#167
  def scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#171
  def set_inverse(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#98
  def table_name; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#163
  def target_for(owner); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#229
  def associate_records_to_owner(owner, records); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#257
  def association_key_type; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#269
  def build_scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#285
  def cascade_strict_loading(scope); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#249
  def convert_key(key); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#241
  def key_conversion_required?; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#222
  def model; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#225
  def owner_key_name; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#261
  def owner_key_type; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#222
  def owners; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#222
  def preload_scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#222
  def reflection; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#265
  def reflection_scope; end
end

class ActiveRecord::Associations::Preloader::Association::LoaderQuery
  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#10
  def initialize(scope, association_key_name); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#8
  def association_key_name; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#15
  def eql?(other); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#21
  def hash; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#38
  def load_records_for_keys(keys, &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#29
  def load_records_in_batch(loaders); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#25
  def records_for(loaders); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#8
  def scope; end
end

class ActiveRecord::Associations::Preloader::Association::LoaderRecords
  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#44
  def initialize(loaders, loader_query); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#53
  def records; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#80
  def already_loaded_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#58
  def already_loaded_records_by_key; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#58
  def keys_to_load; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#74
  def load_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#58
  def loader_query; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#58
  def loaders; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#60
  def populate_keys_to_load_and_already_loaded_records; end
end

class ActiveRecord::Associations::Preloader::Batch
  # source://activerecord/7.0.4/lib/active_record/associations/preloader/batch.rb#7
  def initialize(preloaders, available_records:); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/batch.rb#12
  def call; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/batch.rb#40
  def group_and_load_similar(loaders); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/batch.rb#38
  def loaders; end
end

class ActiveRecord::Associations::Preloader::Branch
  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#11
  def initialize(association:, children:, parent:, associate_by_default:, scope:); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#8
  def associate_by_default; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#7
  def association; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#7
  def children; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#66
  def done?; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#21
  def future_classes; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#74
  def grouped_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#25
  def immediate_future_classes; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#47
  def likely_reflections; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#112
  def loaders; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#7
  def parent; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#102
  def polymorphic?; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#62
  def preloaded_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#9
  def preloaded_records=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#85
  def preloaders_for_reflection(reflection, reflection_records); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#54
  def root?; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#70
  def runnable_loaders; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#8
  def scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#58
  def source_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#37
  def target_classes; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#120
  def build_children(children); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#137
  def preloader_for(reflection); end
end

class ActiveRecord::Associations::Preloader::ThroughAssociation < ::ActiveRecord::Associations::Preloader::Association
  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#51
  def future_classes; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#7
  def preloaded_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#11
  def records_by_owner; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#41
  def runnable_loaders; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#67
  def data_available?; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#76
  def middle_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#100
  def preload_index; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#72
  def source_preloaders; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#92
  def source_records_by_owner; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#88
  def source_reflection; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#80
  def through_preloaders; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#96
  def through_records_by_owner; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#84
  def through_reflection; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#106
  def through_scope; end
end

class ActiveRecord::Associations::SingularAssociation < ::ActiveRecord::Associations::Association
  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#22
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#30
  def force_reload_reader; end

  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#7
  def reader; end

  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#18
  def writer(record); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#56
  def _create_record(attributes, raise_error = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#40
  def find_target; end

  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#48
  def replace(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#36
  def scope_for_create; end

  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#52
  def set_new_record(record); end
end

module ActiveRecord::Associations::ThroughAssociation
  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#7
  def source_reflection(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#109
  def build_record(attributes); end

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#53
  def construct_join_attributes(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#89
  def ensure_mutable; end

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#99
  def ensure_not_nested; end

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#85
  def foreign_key_present?; end

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#79
  def stale_state; end

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#30
  def target_scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#22
  def through_association; end

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#10
  def through_reflection; end
end

class ActiveRecord::AsynchronousQueriesTracker
  # source://activerecord/7.0.4/lib/active_record/asynchronous_queries_tracker.rb#46
  def initialize; end

  # source://activerecord/7.0.4/lib/active_record/asynchronous_queries_tracker.rb#44
  def current_session; end

  # source://activerecord/7.0.4/lib/active_record/asynchronous_queries_tracker.rb#55
  def finalize_session; end

  # source://activerecord/7.0.4/lib/active_record/asynchronous_queries_tracker.rb#50
  def start_session; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/asynchronous_queries_tracker.rb#39
    def complete(asynchronous_queries_tracker); end

    # source://activerecord/7.0.4/lib/active_record/asynchronous_queries_tracker.rb#31
    def install_executor_hooks(executor = T.unsafe(nil)); end

    # source://activerecord/7.0.4/lib/active_record/asynchronous_queries_tracker.rb#35
    def run; end
  end
end

module ActiveRecord::AsynchronousQueriesTracker::NullSession
  class << self
    # source://activerecord/7.0.4/lib/active_record/asynchronous_queries_tracker.rb#7
    def active?; end

    # source://activerecord/7.0.4/lib/active_record/asynchronous_queries_tracker.rb#11
    def finalize; end
  end
end

class ActiveRecord::AsynchronousQueriesTracker::Session
  # source://activerecord/7.0.4/lib/active_record/asynchronous_queries_tracker.rb#17
  def initialize; end

  # source://activerecord/7.0.4/lib/active_record/asynchronous_queries_tracker.rb#21
  def active?; end

  # source://activerecord/7.0.4/lib/active_record/asynchronous_queries_tracker.rb#25
  def finalize; end
end

class ActiveRecord::AsynchronousQueryInsideTransactionError < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::AttributeAssignment
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_assignment.rb#10
  def _assign_attributes(attributes); end

  # source://activerecord/7.0.4/lib/active_record/attribute_assignment.rb#40
  def assign_multiparameter_attributes(pairs); end

  # source://activerecord/7.0.4/lib/active_record/attribute_assignment.rb#30
  def assign_nested_parameter_attributes(pairs); end

  # source://activerecord/7.0.4/lib/active_record/attribute_assignment.rb#46
  def execute_callstack_for_multiparameter_attributes(callstack); end

  # source://activerecord/7.0.4/lib/active_record/attribute_assignment.rb#64
  def extract_callstack_for_multiparameter_attributes(pairs); end

  # source://activerecord/7.0.4/lib/active_record/attribute_assignment.rb#82
  def find_parameter_position(multiparameter_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_assignment.rb#78
  def type_cast_attribute_value(multiparameter_name, value); end
end

class ActiveRecord::AttributeAssignmentError < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/errors.rb#355
  def initialize(message = T.unsafe(nil), exception = T.unsafe(nil), attribute = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/errors.rb#353
  def attribute; end

  # source://activerecord/7.0.4/lib/active_record/errors.rb#353
  def exception; end
end

module ActiveRecord::AttributeMethods
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Autoload
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeMethods
  include ::ActiveRecord::AttributeMethods::Read
  include ::ActiveRecord::AttributeMethods::Write
  include ::ActiveRecord::AttributeMethods::BeforeTypeCast
  include ::ActiveRecord::AttributeMethods::Query
  include ::ActiveRecord::AttributeMethods::PrimaryKey
  include ::ActiveRecord::AttributeMethods::TimeZoneConversion
  include ::ActiveModel::Dirty
  include ::ActiveRecord::AttributeMethods::Dirty
  include ::ActiveRecord::AttributeMethods::Serialization

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Read::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Write::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Dirty::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Serialization::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#329
  def [](attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#343
  def []=(attr_name, value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#240
  def _has_attribute?(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#376
  def accessed_fields; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#283
  def attribute_for_inspect(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#252
  def attribute_names; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#305
  def attribute_present?(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#264
  def attributes; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#234
  def has_attribute?(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#207
  def respond_to?(name, include_private = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#381
  def attribute_method?(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#401
  def attributes_for_create(attribute_names); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#391
  def attributes_for_update(attribute_names); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#386
  def attributes_with_values(attribute_names); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#409
  def format_for_inspect(name, value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#425
  def pk_attribute?(name); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#31
    def dangerous_attribute_methods; end
  end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(value); end
    def attribute_method_matchers?; end
    def partial_inserts; end
    def partial_inserts=(value); end
    def partial_inserts?; end
    def partial_updates; end
    def partial_updates=(value); end
    def partial_updates?; end
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes=(value); end
    def skip_time_zone_conversion_for_attributes?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes=(value); end
    def time_zone_aware_attributes?; end
    def time_zone_aware_types; end
    def time_zone_aware_types=(value); end
    def time_zone_aware_types?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers?; end
    def partial_inserts; end
    def partial_inserts?; end
    def partial_updates; end
    def partial_updates?; end
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes?; end
    def time_zone_aware_types; end
    def time_zone_aware_types?; end
  end
end

module ActiveRecord::AttributeMethods::BeforeTypeCast
  extend ::ActiveSupport::Concern

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/before_type_cast.rb#65
  def attributes_before_type_cast; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/before_type_cast.rb#70
  def attributes_for_database; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/before_type_cast.rb#48
  def read_attribute_before_type_cast(attr_name); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/before_type_cast.rb#76
  def attribute_before_type_cast(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/before_type_cast.rb#84
  def attribute_came_from_user?(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/before_type_cast.rb#80
  def attribute_for_database(attr_name); end
end

module ActiveRecord::AttributeMethods::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#186
  def _has_attribute?(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#150
  def attribute_method?(attribute); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#162
  def attribute_names; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#109
  def dangerous_attribute_method?(name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#127
  def dangerous_class_method?(method_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#58
  def define_attribute_methods; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#180
  def has_attribute?(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#42
  def inherited(child_class); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#47
  def initialize_generated_modules; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#91
  def instance_method_already_implemented?(method_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#113
  def method_defined_within?(name, klass, superklass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#70
  def undefine_attribute_methods; end
end

module ActiveRecord::AttributeMethods::Dirty
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeMethods
  include ::ActiveModel::Dirty

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Dirty::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#100
  def attribute_before_last_save(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#142
  def attribute_change_to_be_saved(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#154
  def attribute_in_database(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#181
  def attributes_in_database; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#171
  def changed_attribute_names_to_save; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#165
  def changes_to_save; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#159
  def has_changes_to_save?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#57
  def reload(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#90
  def saved_change_to_attribute(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#78
  def saved_change_to_attribute?(attr_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#110
  def saved_changes; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#105
  def saved_changes?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#128
  def will_save_change_to_attribute?(attr_name, **options); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#221
  def _create_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#186
  def _touch_row(attribute_names, time); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#215
  def _update_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#231
  def attribute_names_for_partial_inserts; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#227
  def attribute_names_for_partial_updates; end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(value); end
    def attribute_method_matchers?; end
    def partial_inserts; end
    def partial_inserts=(value); end
    def partial_inserts?; end
    def partial_updates; end
    def partial_updates=(value); end
    def partial_updates?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers?; end
    def partial_inserts; end
    def partial_inserts?; end
    def partial_updates; end
    def partial_updates?; end
  end
end

module ActiveRecord::AttributeMethods::Dirty::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#31
  def partial_writes; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#47
  def partial_writes=(value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#39
  def partial_writes?; end
end

class ActiveRecord::AttributeMethods::GeneratedAttributeMethods < ::Module
  include ::Mutex_m

  # source://mutex_m/0.1.1/mutex_m.rb#93
  def lock; end

  # source://mutex_m/0.1.1/mutex_m.rb#83
  def locked?; end

  # source://mutex_m/0.1.1/mutex_m.rb#78
  def synchronize(&block); end

  # source://mutex_m/0.1.1/mutex_m.rb#88
  def try_lock; end

  # source://mutex_m/0.1.1/mutex_m.rb#98
  def unlock; end
end

module ActiveRecord::AttributeMethods::PrimaryKey
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#18
  def id; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#23
  def id=(value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#28
  def id?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#33
  def id_before_type_cast; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#47
  def id_for_database; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#43
  def id_in_database; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#38
  def id_was; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#12
  def to_key; end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#52
  def attribute_method?(attr_name); end
end

module ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#63
  def dangerous_attribute_method?(method_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#89
  def get_primary_key(base_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#59
  def instance_method_already_implemented?(method_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#70
  def primary_key; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#119
  def primary_key=(value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#77
  def quoted_primary_key; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#81
  def reset_primary_key; end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#126
  def suppress_composite_primary_key(pk); end
end

# source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#57
ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods::ID_ATTRIBUTE_METHODS = T.let(T.unsafe(nil), Set)

module ActiveRecord::AttributeMethods::Query
  extend ::ActiveSupport::Concern

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/query.rb#12
  def query_attribute(attr_name); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/query.rb#12
  def attribute?(attr_name); end
end

# source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#24
ActiveRecord::AttributeMethods::RESTRICTED_CLASS_METHODS = T.let(T.unsafe(nil), Array)

module ActiveRecord::AttributeMethods::Read
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Read::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/read.rb#37
  def _read_attribute(attr_name, &block); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/read.rb#27
  def read_attribute(attr_name, &block); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/read.rb#37
  def attribute(attr_name, &block); end
end

module ActiveRecord::AttributeMethods::Read::ClassMethods
  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/read.rb#10
  def define_method_attribute(name, owner:); end
end

module ActiveRecord::AttributeMethods::Serialization
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Serialization::ClassMethods
end

module ActiveRecord::AttributeMethods::Serialization::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/attribute_methods/serialization.rb#103
  def serialize(attr_name, class_name_or_coder = T.unsafe(nil), **options); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/serialization.rb#126
  def type_incompatible_with_serialize?(type, class_name); end
end

class ActiveRecord::AttributeMethods::Serialization::ColumnNotSerializableError < ::StandardError
  # source://activerecord/7.0.4/lib/active_record/attribute_methods/serialization.rb#9
  def initialize(name, type); end
end

module ActiveRecord::AttributeMethods::TimeZoneConversion
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods

  module GeneratedClassMethods
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes=(value); end
    def skip_time_zone_conversion_for_attributes?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes=(value); end
    def time_zone_aware_attributes?; end
    def time_zone_aware_types; end
    def time_zone_aware_types=(value); end
    def time_zone_aware_types?; end
  end

  module GeneratedInstanceMethods
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes?; end
    def time_zone_aware_types; end
    def time_zone_aware_types?; end
  end
end

module ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#76
  def define_attribute(name, cast_type, **_arg2); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#84
  def create_time_zone_conversion_attribute?(name, cast_type); end
end

class ActiveRecord::AttributeMethods::TimeZoneConversion::TimeZoneConverter
  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#17
  def cast(value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#13
  def deserialize(value); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#38
  def convert_time_to_time_zone(value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#56
  def map_avoiding_infinite_recursion(value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#52
  def set_time_zone_without_conversion(value); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#9
    def new(subtype); end
  end
end

module ActiveRecord::AttributeMethods::Write
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Write::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/write.rb#41
  def _write_attribute(attr_name, value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/write.rb#31
  def write_attribute(attr_name, value); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/write.rb#41
  def attribute=(attr_name, value); end
end

module ActiveRecord::AttributeMethods::Write::ClassMethods
  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/write.rb#14
  def define_method_attribute=(name, owner:); end
end

module ActiveRecord::Attributes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Attributes::ClassMethods

  module GeneratedClassMethods
    def attributes_to_define_after_schema_loads; end
    def attributes_to_define_after_schema_loads=(value); end
    def attributes_to_define_after_schema_loads?; end
  end

  module GeneratedInstanceMethods; end
end

module ActiveRecord::Attributes::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/attributes.rb#208
  def attribute(name, cast_type = T.unsafe(nil), default: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/attributes.rb#253
  def define_attribute(name, cast_type, default: T.unsafe(nil), user_provided_default: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/attributes.rb#263
  def load_schema!; end

  private

  # source://activerecord/7.0.4/lib/active_record/attributes.rb#275
  def define_default_attribute(name, value, type, from_user:); end
end

module ActiveRecord::AutosaveAssociation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AutosaveAssociation::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#271
  def changed_for_autosave?; end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#265
  def destroyed_by_association; end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#258
  def destroyed_by_association=(reflection); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#245
  def mark_for_destruction; end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#252
  def marked_for_destruction?; end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#234
  def reload(options = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#508
  def _ensure_no_duplicate_errors; end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#464
  def _record_changed?(reflection, record, key); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#366
  def around_save_collection_association; end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#279
  def associated_records_to_validate_or_save(association, new_record, autosave); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#470
  def association_foreign_key_changed?(reflection, record, key); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#330
  def association_valid?(reflection, record, index = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#504
  def custom_validation_context?; end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#292
  def nested_records_changed_for_autosave?; end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#356
  def normalize_reflection_attribute(indexed_attribute, reflection, index, attribute); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#479
  def save_belongs_to_association(reflection); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#383
  def save_collection_association(reflection); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#437
  def save_has_one_association(reflection); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#319
  def validate_collection_association(reflection); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#310
  def validate_single_association(reflection); end
end

module ActiveRecord::AutosaveAssociation::AssociationBuilderExtension
  class << self
    # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#142
    def build(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#146
    def valid_options; end
  end
end

module ActiveRecord::AutosaveAssociation::ClassMethods
  private

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#187
  def add_autosave_association_callbacks(reflection); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#217
  def define_autosave_validation_callbacks(reflection); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#157
  def define_non_cyclic_method(name, &block); end
end

class ActiveRecord::Base
  include ::ActiveRecord::Core
  include ::ActiveRecord::Persistence
  include ::ActiveRecord::ReadonlyAttributes
  include ::ActiveRecord::ModelSchema
  include ::ActiveRecord::Inheritance
  include ::ActiveRecord::Scoping
  include ::ActiveRecord::Scoping::Default
  include ::ActiveRecord::Scoping::Named
  include ::ActiveRecord::Sanitization
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveRecord::AttributeAssignment
  include ::ActiveModel::Conversion
  include ::ActiveRecord::Integration
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveRecord::Validations
  include ::ActiveRecord::CounterCache
  include ::ActiveRecord::Attributes
  include ::ActiveRecord::Locking::Optimistic
  include ::ActiveRecord::Locking::Pessimistic
  include ::ActiveModel::AttributeMethods
  include ::ActiveRecord::AttributeMethods
  include ::ActiveRecord::Base::GeneratedAttributeMethods
  include ::ActiveRecord::Base::GeneratedAssociationMethods
  include ::ActiveRecord::AttributeMethods::Read
  include ::ActiveRecord::AttributeMethods::Write
  include ::ActiveRecord::AttributeMethods::BeforeTypeCast
  include ::ActiveRecord::AttributeMethods::Query
  include ::ActiveRecord::AttributeMethods::PrimaryKey
  include ::ActiveRecord::AttributeMethods::TimeZoneConversion
  include ::ActiveModel::Dirty
  include ::ActiveRecord::AttributeMethods::Dirty
  include ::ActiveRecord::AttributeMethods::Serialization
  include ::ActiveRecord::Callbacks
  include ::ActiveModel::Validations::Callbacks
  include ::ActiveRecord::Timestamp
  include ::ActiveRecord::Associations
  include ::ActiveModel::SecurePassword
  include ::ActiveRecord::AutosaveAssociation
  include ::ActiveRecord::NestedAttributes
  include ::ActiveRecord::Transactions
  include ::ActiveRecord::TouchLater
  include ::ActiveRecord::NoTouching
  include ::ActiveRecord::Reflection
  include ::ActiveModel::Serialization
  include ::ActiveModel::Serializers::JSON
  include ::ActiveRecord::Serialization
  include ::ActiveRecord::Store
  include ::ActiveRecord::SecureToken
  include ::ActiveRecord::SignedId
  include ::ActiveRecord::Suppressor
  include ::ActiveRecord::Encryption::EncryptableRecord
  extend ::ActiveModel::Naming
  extend ::ActiveSupport::Benchmarkable
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveRecord::ConnectionHandling
  extend ::ActiveRecord::QueryCache::ClassMethods
  extend ::ActiveRecord::Querying
  extend ::ActiveModel::Translation
  extend ::ActiveRecord::Translation
  extend ::ActiveRecord::DynamicMatchers
  extend ::ActiveRecord::DelegatedType
  extend ::ActiveRecord::Explain
  extend ::ActiveRecord::Enum
  extend ::ActiveRecord::Delegation::DelegateCache
  extend ::ActiveRecord::Aggregations::ClassMethods
  extend ::ActiveRecord::Core::ClassMethods
  extend ::ActiveRecord::Persistence::ClassMethods
  extend ::ActiveRecord::ReadonlyAttributes::ClassMethods
  extend ::ActiveRecord::ModelSchema::ClassMethods
  extend ::ActiveRecord::Inheritance::ClassMethods
  extend ::ActiveRecord::Scoping::ClassMethods
  extend ::ActiveRecord::Scoping::Default::ClassMethods
  extend ::ActiveRecord::Scoping::Named::ClassMethods
  extend ::ActiveRecord::Sanitization::ClassMethods
  extend ::ActiveModel::Conversion::ClassMethods
  extend ::ActiveRecord::Integration::ClassMethods
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveRecord::Validations::ClassMethods
  extend ::ActiveRecord::CounterCache::ClassMethods
  extend ::ActiveRecord::Attributes::ClassMethods
  extend ::ActiveRecord::Locking::Optimistic::ClassMethods
  extend ::ActiveModel::AttributeMethods::ClassMethods
  extend ::ActiveRecord::AttributeMethods::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Read::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Write::ClassMethods
  extend ::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  extend ::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Dirty::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Serialization::ClassMethods
  extend ::ActiveRecord::Callbacks::ClassMethods
  extend ::ActiveModel::Validations::Callbacks::ClassMethods
  extend ::ActiveRecord::Timestamp::ClassMethods
  extend ::ActiveRecord::Associations::ClassMethods
  extend ::ActiveModel::SecurePassword::ClassMethods
  extend ::ActiveRecord::AutosaveAssociation::ClassMethods
  extend ::ActiveRecord::NestedAttributes::ClassMethods
  extend ::ActiveRecord::Transactions::ClassMethods
  extend ::ActiveRecord::NoTouching::ClassMethods
  extend ::ActiveRecord::Reflection::ClassMethods
  extend ::ActiveRecord::Store::ClassMethods
  extend ::ActiveRecord::SecureToken::ClassMethods
  extend ::ActiveRecord::SignedId::ClassMethods
  extend ::ActiveRecord::Suppressor::ClassMethods
  extend ::ActiveRecord::Encryption::EncryptableRecord::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _before_commit_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _commit_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _create_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _destroy_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _find_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _initialize_callbacks; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
  def _reflections; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
  def _reflections?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _rollback_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_before_commit_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_commit_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_create_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_destroy_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_find_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_initialize_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_rollback_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_save_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_touch_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_update_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_validate_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_validation_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _save_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _touch_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _update_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _validate_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _validation_callbacks; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#52
  def _validators; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#52
  def _validators?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
  def aggregate_reflections; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
  def aggregate_reflections?; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
  def attribute_aliases; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
  def attribute_aliases?; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
  def attribute_method_matchers; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
  def attribute_method_matchers?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
  def automatic_scope_inversing; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
  def automatic_scope_inversing?; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#16
  def cache_timestamp_format; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#16
  def cache_timestamp_format?; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#24
  def cache_versioning; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#24
  def cache_versioning?; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#32
  def collection_cache_versioning; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#32
  def collection_cache_versioning?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#171
  def column_for_attribute(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#74
  def default_connection_handler; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#74
  def default_connection_handler?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#76
  def default_role; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#76
  def default_role?; end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#20
  def default_scope_override; end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#19
  def default_scopes; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#78
  def default_shard; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#78
  def default_shard?; end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#116
  def defined_enums; end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#116
  def defined_enums?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#26
  def destroy_association_async_job; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes?; end

  # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
  def include_root_in_json; end

  # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
  def include_root_in_json?; end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically; end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#20
  def logger; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#20
  def logger?; end

  # source://activemodel/7.0.4/lib/active_model/naming.rb#244
  def model_name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options; end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
  def partial_inserts; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
  def partial_inserts?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
  def partial_updates; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
  def partial_updates?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
  def pluralize_table_names; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
  def pluralize_table_names?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
  def primary_key_prefix_type; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
  def primary_key_prefix_type?; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
  def record_timestamps; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
  def record_timestamps=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
  def record_timestamps?; end

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret; end

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
  def skip_time_zone_conversion_for_attributes; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
  def skip_time_zone_conversion_for_attributes?; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
  def store_full_class_name; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
  def store_full_class_name?; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
  def store_full_sti_class; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
  def store_full_sti_class?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
  def table_name_prefix; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
  def table_name_prefix?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
  def table_name_suffix; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
  def table_name_suffix?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
  def time_zone_aware_attributes; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
  def time_zone_aware_attributes?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
  def time_zone_aware_types; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
  def time_zone_aware_types?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#171
  def type_for_attribute(*_arg0, **_arg1, &_arg2); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#48
  def validation_context; end

  private

  # source://activemodel/7.0.4/lib/active_model/validations.rb#48
  def validation_context=(_arg0); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly; end

    # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly=(value); end

    # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _before_commit_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _before_commit_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _commit_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _commit_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _create_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _create_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _destroy_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _destroy_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _find_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _find_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _initialize_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _initialize_callbacks=(value); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
    def _reflections=(value); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
    def _reflections?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _rollback_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _rollback_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _save_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _save_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _touch_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _touch_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _update_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _update_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _validate_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _validate_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _validation_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _validation_callbacks=(value); end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators=(value); end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators?; end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_create(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_destroy(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_find(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_initialize(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_save(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_touch(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_update(*args, **options, &block); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
    def aggregate_reflections; end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
    def aggregate_reflections=(value); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
    def aggregate_reflections?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#82
    def application_record_class?; end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#137
    def around_create(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#137
    def around_destroy(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#137
    def around_save(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#137
    def around_update(*args, **options, &block); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#129
    def asynchronous_queries_session; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#133
    def asynchronous_queries_tracker; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
    def attribute_aliases; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
    def attribute_aliases=(value); end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
    def attribute_aliases?; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
    def attribute_method_matchers; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
    def attribute_method_matchers=(value); end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
    def attribute_method_matchers?; end

    # source://activerecord/7.0.4/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads; end

    # source://activerecord/7.0.4/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads=(value); end

    # source://activerecord/7.0.4/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads?; end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
    def automatic_scope_inversing; end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
    def automatic_scope_inversing=(value); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
    def automatic_scope_inversing?; end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#130
    def before_create(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#130
    def before_destroy(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#130
    def before_save(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#130
    def before_update(*args, **options, &block); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#68
    def belongs_to_required_by_default; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#68
    def belongs_to_required_by_default=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#68
    def belongs_to_required_by_default?; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#16
    def cache_timestamp_format; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#16
    def cache_timestamp_format=(value); end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#16
    def cache_timestamp_format?; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#24
    def cache_versioning; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#24
    def cache_versioning=(value); end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#24
    def cache_versioning?; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#32
    def collection_cache_versioning; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#32
    def collection_cache_versioning=(value); end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#32
    def collection_cache_versioning?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#56
    def configurations; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#50
    def configurations=(config); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#201
    def connected_to_stack; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#215
    def connection_class; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#211
    def connection_class=(b); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#219
    def connection_class?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#223
    def connection_class_for_self; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#94
    def connection_handler; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#98
    def connection_handler=(handler); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#102
    def connection_handlers; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#111
    def connection_handlers=(handlers); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#188
    def current_preventing_writes; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#147
    def current_role; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#169
    def current_shard; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#74
    def default_connection_handler; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#74
    def default_connection_handler=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#74
    def default_connection_handler?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#76
    def default_role; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#76
    def default_role=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#76
    def default_role?; end

    # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#20
    def default_scope_override; end

    # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#20
    def default_scope_override=(value); end

    # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#19
    def default_scopes; end

    # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#19
    def default_scopes=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#78
    def default_shard; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#78
    def default_shard=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#78
    def default_shard?; end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums; end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums=(value); end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#26
    def destroy_association_async_job; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#26
    def destroy_association_async_job=(value); end

    # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes; end

    # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes=(value); end

    # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#72
    def has_many_inversing; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#72
    def has_many_inversing=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#72
    def has_many_inversing?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#157
    def implicit_order_column; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#157
    def implicit_order_column=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#157
    def implicit_order_column?; end

    # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
    def include_root_in_json; end

    # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
    def include_root_in_json=(value); end

    # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
    def include_root_in_json?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#160
    def inheritance_column; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#311
    def inheritance_column=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#160
    def inheritance_column?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name?; end

    # source://activerecord/7.0.4/lib/active_record/store.rb#99
    def local_stored_attributes; end

    # source://activerecord/7.0.4/lib/active_record/store.rb#99
    def local_stored_attributes=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically; end

    # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically=(value); end

    # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#20
    def logger; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#20
    def logger=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#20
    def logger?; end

    # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options; end

    # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options=(value); end

    # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
    def pluralize_table_names; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
    def pluralize_table_names=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
    def pluralize_table_names?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type?; end

    # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
    def record_timestamps; end

    # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
    def record_timestamps=(value); end

    # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
    def record_timestamps?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#80
    def shard_selector; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#80
    def shard_selector=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#80
    def shard_selector?; end

    # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret; end

    # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret=(value); end

    # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes?; end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
    def store_full_class_name; end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
    def store_full_class_name=(value); end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
    def store_full_class_name?; end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
    def store_full_sti_class; end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
    def store_full_sti_class=(value); end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
    def store_full_sti_class?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#70
    def strict_loading_by_default; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#70
    def strict_loading_by_default=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#70
    def strict_loading_by_default?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#238
    def strict_loading_violation!(owner:, reflection:); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
    def table_name_prefix; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
    def table_name_prefix=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
    def table_name_prefix?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
    def table_name_suffix; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
    def table_name_suffix=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
    def table_name_suffix?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types?; end

    private

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#160
    def _inheritance_column=(value); end
  end
end

module ActiveRecord::Base::GeneratedAssociationMethods; end
module ActiveRecord::Base::GeneratedAttributeMethods; end

module ActiveRecord::Batches
  # source://activerecord/7.0.4/lib/active_record/relation/batches.rb#68
  def find_each(start: T.unsafe(nil), finish: T.unsafe(nil), batch_size: T.unsafe(nil), error_on_ignore: T.unsafe(nil), order: T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches.rb#128
  def find_in_batches(start: T.unsafe(nil), finish: T.unsafe(nil), batch_size: T.unsafe(nil), error_on_ignore: T.unsafe(nil), order: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches.rb#204
  def in_batches(of: T.unsafe(nil), start: T.unsafe(nil), finish: T.unsafe(nil), load: T.unsafe(nil), error_on_ignore: T.unsafe(nil), order: T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/batches.rb#286
  def act_on_ignored_order(error_on_ignore); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches.rb#278
  def apply_finish_limit(relation, finish, order); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches.rb#268
  def apply_limits(relation, start, finish, order); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches.rb#274
  def apply_start_limit(relation, start, order); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches.rb#282
  def batch_order(order); end
end

class ActiveRecord::Batches::BatchEnumerator
  include ::Enumerable

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#8
  def initialize(relation:, of: T.unsafe(nil), start: T.unsafe(nil), finish: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#25
  def batch_size; end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#63
  def delete_all; end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#83
  def destroy_all; end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#92
  def each(&block); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#50
  def each_record(&block); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#19
  def finish; end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#22
  def relation; end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#16
  def start; end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#72
  def update_all(updates); end
end

# source://activerecord/7.0.4/lib/active_record/relation/batches.rb#7
ActiveRecord::Batches::ORDER_IGNORE_MESSAGE = T.let(T.unsafe(nil), String)

module ActiveRecord::Calculations
  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#59
  def average(column_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#138
  def calculate(operation, column_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#43
  def count(column_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#242
  def ids; end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#77
  def maximum(column_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#68
  def minimum(column_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#230
  def pick(*column_names); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#192
  def pluck(*column_names); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#86
  def sum(identity_or_column = T.unsafe(nil), &block); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#286
  def aggregate_column(column_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#247
  def all_attributes?(column_names); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#475
  def build_count_subquery(relation, column_name, distinct); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#408
  def column_alias_for(field); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#282
  def distinct_select?(column_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#328
  def execute_grouped_calculation(operation, column_name, distinct); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#298
  def execute_simple_calculation(operation, column_name, distinct); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#251
  def has_include?(column_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#423
  def lookup_cast_type_from_join_dependencies(name, join_dependencies = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#294
  def operation_over_aggregate_column(column, operation, distinct); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#255
  def perform_calculation(operation, column_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#466
  def select_for_count; end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#448
  def type_cast_calculated_value(value, operation, type); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#431
  def type_cast_pluck_values(result, columns); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#418
  def type_for(field, &block); end
end

module ActiveRecord::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  # source://activerecord/7.0.4/lib/active_record/callbacks.rb#435
  def destroy; end

  # source://activerecord/7.0.4/lib/active_record/callbacks.rb#451
  def increment!(attribute, by = T.unsafe(nil), touch: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/callbacks.rb#447
  def touch(*_arg0, **_arg1); end

  private

  # source://activerecord/7.0.4/lib/active_record/callbacks.rb#460
  def _create_record; end

  # source://activerecord/7.0.4/lib/active_record/callbacks.rb#464
  def _update_record; end

  # source://activerecord/7.0.4/lib/active_record/callbacks.rb#456
  def create_or_update(**_arg0); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://activerecord/7.0.4/lib/active_record/callbacks.rb#297
ActiveRecord::Callbacks::CALLBACKS = T.let(T.unsafe(nil), Array)

module ActiveRecord::Callbacks::ClassMethods
  include ::ActiveModel::Callbacks
end

module ActiveRecord::Coders; end

class ActiveRecord::Coders::JSON
  class << self
    # source://activerecord/7.0.4/lib/active_record/coders/json.rb#6
    def dump(obj); end

    # source://activerecord/7.0.4/lib/active_record/coders/json.rb#10
    def load(json); end
  end
end

class ActiveRecord::Coders::YAMLColumn
  # source://activerecord/7.0.4/lib/active_record/coders/yaml_column.rb#10
  def initialize(attr_name, object_class = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/coders/yaml_column.rb#34
  def assert_valid_value(obj, action:); end

  # source://activerecord/7.0.4/lib/active_record/coders/yaml_column.rb#16
  def dump(obj); end

  # source://activerecord/7.0.4/lib/active_record/coders/yaml_column.rb#23
  def load(yaml); end

  # source://activerecord/7.0.4/lib/active_record/coders/yaml_column.rb#8
  def object_class; end

  # source://activerecord/7.0.4/lib/active_record/coders/yaml_column.rb#8
  def object_class=(_arg0); end

  private

  # source://activerecord/7.0.4/lib/active_record/coders/yaml_column.rb#42
  def check_arity_of_constructor; end

  # source://activerecord/7.0.4/lib/active_record/coders/yaml_column.rb#49
  def yaml_load(payload); end
end

class ActiveRecord::ConfigurationError < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::ConnectionAdapters
  extend ::ActiveSupport::Autoload
end

class ActiveRecord::ConnectionAdapters::AbstractAdapter
  include ::ActiveSupport::Callbacks
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::ConnectionAdapters::SchemaStatements
  include ::ActiveRecord::ConnectionAdapters::DatabaseStatements
  include ::ActiveRecord::ConnectionAdapters::Quoting
  include ::ActiveRecord::ConnectionAdapters::DatabaseLimits
  include ::ActiveRecord::ConnectionAdapters::QueryCache
  include ::ActiveRecord::ConnectionAdapters::Savepoints
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#82
  def initialize(connection, logger = T.unsafe(nil), config = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _checkin_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _checkout_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_checkin_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_checkout_callbacks(&block); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#523
  def active?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#292
  def adapter_name; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#478
  def advisory_locks_enabled?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#514
  def all_foreign_keys_valid?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#461
  def async_enabled?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#638
  def build_insert_sql(insert); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#609
  def case_insensitive_comparison(attribute, value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#605
  def case_sensitive_comparison(attribute, value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#118
  def check_if_write_query(sql); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#653
  def check_version; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#574
  def clear_cache!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#625
  def close; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#223
  def connection_class; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def create(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#475
  def create_enum(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#649
  def database_version; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#629
  def default_index_type?(index); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#601
  def default_uniqueness_comparison(attribute, value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def delete(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#467
  def disable_extension(name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#509
  def disable_referential_integrity; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#547
  def discard!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#536
  def disconnect!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#471
  def enable_extension(name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def exec_insert_all(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#249
  def expire; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#497
  def extensions; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#664
  def field_ordered_value(column, values); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#486
  def get_advisory_lock(lock_id); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#646
  def get_database_version; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def in_use?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#502
  def index_algorithms; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def insert(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#208
  def lease; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def lock; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def logger; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#153
  def migration_context; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#149
  def migrations_paths; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def owner; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#41
  def pool; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#41
  def pool=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#324
  def prefetch_primary_key?(table_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#175
  def prepared_statements; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#175
  def prepared_statements?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#180
  def prepared_statements_disabled_cache; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#141
  def preventing_writes?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#596
  def raw_connection; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#529
  def reconnect!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#493
  def release_advisory_lock(lock_id); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#124
  def replica?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#579
  def requires_reloading?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#563
  def reset!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#229
  def role; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def rollback_db_transaction(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def rollback_to_savepoint(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#239
  def schema_cache; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#243
  def schema_cache=(cache); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#157
  def schema_migration; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#660
  def schema_version; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#278
  def seconds_idle; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#235
  def shard; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#265
  def steal!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#317
  def supports_advisory_locks?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#307
  def supports_bulk_alter?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#384
  def supports_check_constraints?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#409
  def supports_comments?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#414
  def supports_comments_in_create?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#433
  def supports_common_table_expressions?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#457
  def supports_concurrent_connections?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#399
  def supports_datetime_with_precision?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#303
  def supports_ddl_transactions?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#379
  def supports_deferrable_constraints?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#348
  def supports_explain?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#343
  def supports_expression_index?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#358
  def supports_extensions?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#369
  def supports_foreign_keys?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#424
  def supports_foreign_tables?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#333
  def supports_index_sort_order?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#364
  def supports_indexes_in_create?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#453
  def supports_insert_conflict_target?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#445
  def supports_insert_on_duplicate_skip?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#449
  def supports_insert_on_duplicate_update?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#441
  def supports_insert_returning?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#404
  def supports_json?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#437
  def supports_lazy_transactions?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#394
  def supports_materialized_views?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#429
  def supports_optimizer_hints?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#338
  def supports_partial_index?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#328
  def supports_partitioned_indexes?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#312
  def supports_savepoints?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#353
  def supports_transaction_isolation?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#374
  def supports_validate_constraints?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#389
  def supports_views?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#419
  def supports_virtual_columns?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#568
  def throw_away!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def truncate(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def truncate_tables(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#283
  def unprepared_statement; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def update(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#128
  def use_metadata_table?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#203
  def valid_type?(type); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#586
  def verify!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def visitor; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#108
  def with_instrumenter(instrumenter, &block); end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#817
  def arel_visitor; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#828
  def build_result(columns:, rows:, column_types: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#821
  def build_statement_pool; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#619
  def can_perform_case_insensitive_comparison_for?(column); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#803
  def collector; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#792
  def column_for(table_name, column_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#798
  def column_for_attribute(attribute); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#755
  def log(sql, name = T.unsafe(nil), binds = T.unsafe(nil), type_casted_binds = T.unsafe(nil), statement_name = T.unsafe(nil), async: T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#771
  def transform_query(sql); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#778
  def translate_exception(exception, message:, sql:, binds:); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#745
  def translate_exception_class(e, sql, binds); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#741
  def type_map; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#788
  def without_prepared_statement?(binds); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _checkin_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _checkin_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _checkout_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _checkout_callbacks=(value); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#68
    def build_read_query_regexp(*parts); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#297
    def database_exists?(config); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#74
    def quoted_column_names; end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#78
    def quoted_table_names; end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#57
    def type_cast_config_to_boolean(config); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#47
    def type_cast_config_to_integer(config); end

    private

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#733
    def extract_limit(sql_type); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#729
    def extract_precision(sql_type); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#722
    def extract_scale(sql_type); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#675
    def initialize_type_map(m); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#708
    def register_class_with_limit(mapping, key, klass); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#715
    def register_class_with_precision(mapping, key, klass); end
  end
end

# source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#29
ActiveRecord::ConnectionAdapters::AbstractAdapter::ADAPTER_NAME = T.let(T.unsafe(nil), String)

# source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#39
ActiveRecord::ConnectionAdapters::AbstractAdapter::COMMENT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#38
ActiveRecord::ConnectionAdapters::AbstractAdapter::SIMPLE_INT = T.let(T.unsafe(nil), Regexp)

# source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#738
ActiveRecord::ConnectionAdapters::AbstractAdapter::TYPE_MAP = T.let(T.unsafe(nil), ActiveRecord::Type::TypeMap)

class ActiveRecord::ConnectionAdapters::AbstractAdapter::Version
  include ::Comparable

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#189
  def initialize(version_string, full_version_string = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#194
  def <=>(version_string); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#187
  def full_version_string; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract_adapter.rb#198
  def to_s; end
end

module ActiveRecord::ConnectionAdapters::AbstractPool
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#13
  def get_schema_cache(connection); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#23
  def lazily_set_schema_cache; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#19
  def set_schema_cache(cache); end
end

class ActiveRecord::ConnectionAdapters::AlterTable
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#535
  def initialize(td); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#554
  def add_check_constraint(expression, options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#562
  def add_column(name, type, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#546
  def add_foreign_key(to_table, options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#531
  def adds; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#533
  def check_constraint_adds; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#533
  def check_constraint_drops; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#558
  def drop_check_constraint(constraint_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#550
  def drop_foreign_key(name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#532
  def foreign_key_adds; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#532
  def foreign_key_drops; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#544
  def name; end
end

class ActiveRecord::ConnectionAdapters::ChangeColumnDefinition < ::Struct
  def column; end
  def column=(_); end
  def name; end
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::ConnectionAdapters::CheckConstraintDefinition < ::Struct
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#148
  def export_name_on_schema_dump?; end

  def expression; end
  def expression=(_); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#139
  def name; end

  def options; end
  def options=(_); end
  def table_name; end
  def table_name=(_); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#143
  def validate?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#143
  def validated?; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::ConnectionAdapters::Column
  include ::ActiveRecord::ConnectionAdapters::Deduplicable
  extend ::ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#20
  def initialize(name, default, sql_type_metadata = T.unsafe(nil), null = T.unsafe(nil), default_function = T.unsafe(nil), collation: T.unsafe(nil), comment: T.unsafe(nil), **_arg7); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#66
  def ==(other); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#34
  def bigint?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#10
  def collation; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#10
  def comment; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#10
  def default; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#10
  def default_function; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#56
  def encode_with(coder); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#66
  def eql?(other); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#30
  def has_default?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#78
  def hash; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#42
  def human_name; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#46
  def init_with(coder); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#12
  def limit(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#10
  def name; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#10
  def null; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#12
  def precision(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#12
  def scale(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#12
  def sql_type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#10
  def sql_type_metadata; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#12
  def type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#90
  def virtual?; end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/column.rb#95
  def deduplicated; end
end

class ActiveRecord::ConnectionAdapters::ColumnDefinition < ::Struct
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#75
  def aliased_types(name, fallback); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#65
  def collation; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#69
  def collation=(value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#65
  def comment; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#69
  def comment=(value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#65
  def default; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#69
  def default=(value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#65
  def limit; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#69
  def limit=(value); end

  def name; end
  def name=(_); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#65
  def null; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#69
  def null=(value); end

  def options; end
  def options=(_); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#65
  def precision; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#69
  def precision=(value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#59
  def primary_key?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#65
  def scale; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#69
  def scale=(value); end

  def sql_type; end
  def sql_type=(_); end
  def type; end
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module ActiveRecord::ConnectionAdapters::ColumnMethods
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#245
  def primary_key(name, type = T.unsafe(nil), **options); end
end

module ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods
  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#269
  def define_column_methods(*column_types); end
end

class ActiveRecord::ConnectionAdapters::ConnectionHandler
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#75
  def initialize; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#161
  def active_connections?(role = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#117
  def all_connection_pools; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#168
  def clear_active_connections!(role = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#179
  def clear_all_connections!(role = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#175
  def clear_reloadable_connections!(role = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#216
  def connected?(spec_name, role: T.unsafe(nil), shard: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#121
  def connection_pool_list(role = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#113
  def connection_pool_names; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#121
  def connection_pools(role = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#126
  def establish_connection(config, owner_name: T.unsafe(nil), role: T.unsafe(nil), shard: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#186
  def flush_idle_connections!(role = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#83
  def prevent_writes; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#87
  def prevent_writes=(prevent_writes); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#221
  def remove_connection_pool(owner, role: T.unsafe(nil), shard: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#194
  def retrieve_connection(spec_name, role: T.unsafe(nil), shard: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#235
  def retrieve_connection_pool(owner, role: T.unsafe(nil), shard: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#102
  def while_preventing_writes(enabled = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#244
  def get_pool_manager(owner); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#241
  def owner_to_pool_manager; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#258
  def resolve_pool_config(config, owner_name, role, shard); end
end

class ActiveRecord::ConnectionAdapters::ConnectionHandler::StringConnectionOwner
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#62
  def initialize(name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#70
  def current_preventing_writes; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#60
  def name; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_handler.rb#66
  def primary_class?; end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool
  include ::MonitorMixin
  include ::ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration
  include ::ActiveRecord::ConnectionAdapters::AbstractPool

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#120
  def initialize(pool_config); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#189
  def active_connection?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#108
  def async_executor; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#107
  def automatic_reconnect; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#107
  def automatic_reconnect=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#349
  def checkin(conn); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#340
  def checkout(checkout_timeout = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#107
  def checkout_timeout; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#107
  def checkout_timeout=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#298
  def clear_reloadable_connections(raise_on_acquisition_timeout = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#322
  def clear_reloadable_connections!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#221
  def connected?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#180
  def connection; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#108
  def connection_class; end

  # source://activesupport/7.0.4/lib/active_support/deprecation/method_wrappers.rb#63
  def connection_klass(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#236
  def connections; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#108
  def db_config; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#277
  def discard!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#287
  def discarded?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#246
  def disconnect(raise_on_acquisition_timeout = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#268
  def disconnect!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#420
  def flush(minimum_idle = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#442
  def flush!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#167
  def lock_thread=(lock_thread); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#447
  def num_waiting_in_queue; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#108
  def pool_config; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#397
  def reap; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#108
  def reaper; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#200
  def release_connection(owner_thread = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#365
  def remove(conn); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#108
  def role; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#469
  def schedule_query(future_result); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#112
  def schema_cache(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#112
  def schema_cache=(arg); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#108
  def shard; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#108
  def size; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#455
  def stat; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#210
  def with_connection; end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#633
  def acquire_connection(checkout_timeout); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#693
  def adopt_connection(conn); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#527
  def attempt_to_checkout_all_existing_connections(raise_on_acquisition_timeout = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#475
  def build_async_executor; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#493
  def bulk_make_new_connections(num_new_conns_needed); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#703
  def checkout_and_verify(c); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#573
  def checkout_for_exclusive_access(checkout_timeout); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#698
  def checkout_new_connection; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#508
  def connection_cache_key(thread); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#512
  def current_thread; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#655
  def new_connection; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#650
  def release(conn, owner_thread = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#650
  def remove_connection_from_thread_cache(conn, owner_thread = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#666
  def try_to_checkout_new_connection; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#520
  def with_exclusively_acquired_all_connections(raise_on_acquisition_timeout = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#593
  def with_new_connections_blocked; end
end

module ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#176
  def with_a_bias_for(thread); end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue::BiasedConditionVariable
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#140
  def initialize(lock, other_cond, preferred_thread); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#147
  def broadcast; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#152
  def broadcast_on_biased; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#157
  def signal; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#166
  def wait(timeout); end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::ConnectionLeasingQueue < ::ActiveRecord::ConnectionAdapters::ConnectionPool::Queue
  include ::ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#201
  def internal_poll(timeout); end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::Queue
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#12
  def initialize(lock = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#35
  def add(element); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#20
  def any_waiting?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#50
  def clear; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#43
  def delete(element); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#28
  def num_waiting; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#70
  def poll(timeout = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#84
  def any?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#92
  def can_remove_no_wait?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#75
  def internal_poll(timeout); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#104
  def no_wait_poll; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#97
  def remove; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#79
  def synchronize(&block); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/queue.rb#110
  def wait_poll(timeout); end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb#18
  def initialize(pool, frequency); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb#16
  def frequency; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb#16
  def pool; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb#69
  def run; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb#28
    def register_pool(pool, frequency); end

    private

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb#39
    def spawn_thread(frequency); end
  end
end

module ActiveRecord::ConnectionAdapters::DatabaseLimits
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_limits.rb#16
  def index_name_length; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_limits.rb#6
  def max_identifier_length; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_limits.rb#11
  def table_alias_length; end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_limits.rb#21
  def bind_params_length; end
end

module ActiveRecord::ConnectionAdapters::DatabaseStatements
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#6
  def initialize; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#345
  def add_transaction_record(record, ensure_finalize = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#350
  def begin_db_transaction; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#364
  def begin_isolated_db_transaction(isolation); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def begin_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#49
  def cacheable_query(klass, arel); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#369
  def commit_db_transaction; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def commit_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#165
  def create(arel, name = T.unsafe(nil), pk = T.unsafe(nil), id_value = T.unsafe(nil), sequence_name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def current_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#383
  def default_sequence_name(table, column); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#179
  def delete(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def disable_lazy_transactions!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#415
  def empty_insert_statement_value(primary_key = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def enable_lazy_transactions!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#138
  def exec_delete(sql, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#130
  def exec_insert(sql, name = T.unsafe(nil), binds = T.unsafe(nil), pk = T.unsafe(nil), sequence_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#149
  def exec_insert_all(sql, name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#123
  def exec_query(sql, name = T.unsafe(nil), binds = T.unsafe(nil), prepare: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#377
  def exec_rollback_db_transaction; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#145
  def exec_update(sql, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#116
  def execute(sql, name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#153
  def explain(arel, binds = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#453
  def high_precision_current_timestamp; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#165
  def insert(arel, name = T.unsafe(nil), pk = T.unsafe(nil), id_value = T.unsafe(nil), sequence_name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#397
  def insert_fixture(fixture, table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#401
  def insert_fixtures_set(fixture_set, tables_to_delete = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#328
  def mark_transaction_written_if_write(sql); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def materialize_transactions(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def open_transactions(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#102
  def query(sql, name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#94
  def query_value(sql, name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#98
  def query_values(sql, name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#388
  def reset_sequence!(table, column, sequence = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#339
  def reset_transaction; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#373
  def rollback_db_transaction; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#379
  def rollback_to_savepoint(name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def rollback_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#425
  def sanitize_limit(limit); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#62
  def select_all(arel, name = T.unsafe(nil), binds = T.unsafe(nil), preparable: T.unsafe(nil), async: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#73
  def select_one(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#90
  def select_rows(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#78
  def select_value(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#84
  def select_values(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#12
  def to_sql(arel_or_sql_string, binds = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#309
  def transaction(requires_new: T.unsafe(nil), isolation: T.unsafe(nil), joinable: T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#352
  def transaction_isolation_levels; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#322
  def transaction_manager; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#335
  def transaction_open?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#185
  def truncate(table_name, name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#189
  def truncate_tables(*table_names); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#173
  def update(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#436
  def with_yaml_fallback(value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def within_new_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#107
  def write_query?(sql); end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#576
  def arel_from_relation(relation); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#471
  def build_fixture_sql(fixtures, table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#513
  def build_fixture_statements(fixture_set); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#520
  def build_truncate_statement(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#524
  def build_truncate_statements(table_names); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#534
  def combine_multi_statements(total_sql); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#467
  def default_insert_value(column); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#458
  def execute_batch(statements, name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#567
  def last_inserted_id(result); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#539
  def select(sql, name = T.unsafe(nil), binds = T.unsafe(nil), prepare: T.unsafe(nil), async: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#571
  def single_value_from_rows(rows); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#563
  def sql_for_insert(sql, pk, binds); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#17
  def to_sql_and_binds(arel_or_sql_string, binds = T.unsafe(nil), preparable = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/database_statements.rb#530
  def with_multi_statements; end
end

module ActiveRecord::ConnectionAdapters::Deduplicable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/deduplicable.rb#18
  def -@; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/deduplicable.rb#18
  def deduplicate; end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/deduplicable.rb#24
  def deduplicated; end
end

module ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/deduplicable.rb#13
  def new(*_arg0, **_arg1); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/deduplicable.rb#9
  def registry; end
end

class ActiveRecord::ConnectionAdapters::ForeignKeyDefinition < ::Struct
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#93
  def column; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#113
  def custom_primary_key?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#109
  def deferrable; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#126
  def defined_for?(to_table: T.unsafe(nil), validate: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#122
  def export_name_on_schema_dump?; end

  def from_table; end
  def from_table=(_); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#89
  def name; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#101
  def on_delete; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#105
  def on_update; end

  def options; end
  def options=(_); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#97
  def primary_key; end

  def to_table; end
  def to_table=(_); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#117
  def validate?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#117
  def validated?; end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#133
  def default_primary_key; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::ConnectionAdapters::IndexDefinition
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#11
  def initialize(table, name, unique = T.unsafe(nil), columns = T.unsafe(nil), lengths: T.unsafe(nil), orders: T.unsafe(nil), opclasses: T.unsafe(nil), where: T.unsafe(nil), type: T.unsafe(nil), using: T.unsafe(nil), comment: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#36
  def column_options; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#9
  def columns; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#9
  def comment; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#9
  def lengths; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#9
  def name; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#9
  def opclasses; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#9
  def orders; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#9
  def table; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#9
  def type; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#9
  def unique; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#9
  def using; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#9
  def where; end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#45
  def concise_options(options); end
end

class ActiveRecord::ConnectionAdapters::LegacyPoolManager
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/legacy_pool_manager.rb#6
  def initialize; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/legacy_pool_manager.rb#22
  def get_pool_config(_, shard); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/legacy_pool_manager.rb#14
  def pool_configs(_ = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/legacy_pool_manager.rb#18
  def remove_pool_config(_, shard); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/legacy_pool_manager.rb#26
  def set_pool_config(role, shard, pool_config); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/legacy_pool_manager.rb#10
  def shard_names; end
end

class ActiveRecord::ConnectionAdapters::NullPool
  include ::ActiveRecord::ConnectionAdapters::AbstractPool

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#39
  def async_executor; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#37
  def checkin(_); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#36
  def connection_class; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#38
  def remove(_); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#34
  def schema_cache; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/connection_pool.rb#34
  def schema_cache=(_arg0); end
end

class ActiveRecord::ConnectionAdapters::NullTransaction
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#77
  def initialize; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#82
  def add_record(record, _ = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#79
  def closed?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#81
  def joinable?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#80
  def open?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#78
  def state; end
end

class ActiveRecord::ConnectionAdapters::PoolConfig
  include ::Mutex_m

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_config.rb#20
  def initialize(connection_class, db_config, role, shard); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_config.rb#8
  def connection_class; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_config.rb#30
  def connection_specification_name; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_config.rb#8
  def db_config; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_config.rb#59
  def discard_pool!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_config.rb#38
  def disconnect!; end

  # source://mutex_m/0.1.1/mutex_m.rb#93
  def lock; end

  # source://mutex_m/0.1.1/mutex_m.rb#83
  def locked?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_config.rb#53
  def pool; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_config.rb#8
  def role; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_config.rb#9
  def schema_cache; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_config.rb#9
  def schema_cache=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_config.rb#8
  def shard; end

  # source://mutex_m/0.1.1/mutex_m.rb#78
  def synchronize(&block); end

  # source://mutex_m/0.1.1/mutex_m.rb#88
  def try_lock; end

  # source://mutex_m/0.1.1/mutex_m.rb#98
  def unlock; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_config.rb#15
    def discard_pools!; end
  end
end

class ActiveRecord::ConnectionAdapters::PoolManager
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_manager.rb#6
  def initialize; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_manager.rb#34
  def get_pool_config(role, shard); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_manager.rb#18
  def pool_configs(role = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_manager.rb#30
  def remove_pool_config(role, shard); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_manager.rb#26
  def remove_role(role); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_manager.rb#14
  def role_names; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_manager.rb#38
  def set_pool_config(role, shard, pool_config); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/pool_manager.rb#10
  def shard_names; end
end

module ActiveRecord::ConnectionAdapters::QueryCache
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#52
  def initialize(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#59
  def cache; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#90
  def clear_query_cache; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#71
  def disable_query_cache!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#67
  def enable_query_cache!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#50
  def query_cache; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#50
  def query_cache_enabled; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#96
  def select_all(arel, name = T.unsafe(nil), binds = T.unsafe(nil), preparable: T.unsafe(nil), async: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#77
  def uncached; end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#145
  def cache_notification_info(sql, name, binds); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#127
  def cache_sql(sql, name, binds); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#156
  def configure_query_cache!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#115
  def lookup_sql_cache(sql, name, binds); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#17
    def dirties_query_cache(base, *method_names); end

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#9
    def included(base); end
  end
end

module ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#30
  def initialize(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#40
  def disable_query_cache!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#35
  def enable_query_cache!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/query_cache.rb#45
  def query_cache_enabled; end
end

module ActiveRecord::ConnectionAdapters::Quoting
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#152
  def column_name_matcher; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#156
  def column_name_with_order_matcher; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#63
  def lookup_cast_type_from_column(column); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#11
  def quote(value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#50
  def quote_bound_value(value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#74
  def quote_column_name(column_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#95
  def quote_default_expression(value, column); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#69
  def quote_string(s); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#79
  def quote_table_name(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#91
  def quote_table_name_for_assignment(table, attr); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#144
  def quoted_binary(value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#122
  def quoted_date(value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#112
  def quoted_false; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#139
  def quoted_time(value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#104
  def quoted_true; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#148
  def sanitize_as_sql_comment(value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#32
  def type_cast(value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#116
  def unquoted_false; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#108
  def unquoted_true; end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#216
  def lookup_cast_type(sql_type); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/quoting.rb#206
  def type_casted_binds(binds); end
end

class ActiveRecord::ConnectionAdapters::RealTransaction < ::ActiveRecord::ConnectionAdapters::Transaction
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#218
  def commit; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#203
  def materialize!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#213
  def rollback; end
end

class ActiveRecord::ConnectionAdapters::ReferenceDefinition
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#154
  def initialize(name, polymorphic: T.unsafe(nil), index: T.unsafe(nil), foreign_key: T.unsafe(nil), type: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#174
  def add_to(table); end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#191
  def as_options(value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#225
  def column_name; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#229
  def column_names; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#217
  def columns; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#189
  def foreign_key; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#213
  def foreign_key_options; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#233
  def foreign_table_name; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#189
  def index; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#203
  def index_options(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#189
  def name; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#189
  def options; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#189
  def polymorphic; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#199
  def polymorphic_index_name(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#195
  def polymorphic_options; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#189
  def type; end
end

class ActiveRecord::ConnectionAdapters::SavepointTransaction < ::ActiveRecord::ConnectionAdapters::Transaction
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#172
  def initialize(connection, savepoint_name, parent_transaction, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#194
  def commit; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#199
  def full_rollback?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#184
  def materialize!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#189
  def rollback; end
end

module ActiveRecord::ConnectionAdapters::Savepoints
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/savepoints.rb#10
  def create_savepoint(name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/savepoints.rb#6
  def current_savepoint_name; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/savepoints.rb#14
  def exec_rollback_to_savepoint(name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/savepoints.rb#18
  def release_savepoint(name = T.unsafe(nil)); end
end

class ActiveRecord::ConnectionAdapters::SchemaCache
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#38
  def initialize(conn); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#97
  def add(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#149
  def clear!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#164
  def clear_data_source_cache!(name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#111
  def columns(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#123
  def columns_hash(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#130
  def columns_hash?(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#36
  def connection; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#36
  def connection=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#88
  def data_source_exists?(name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#106
  def data_sources(name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#144
  def database_version; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#172
  def dump_to(filename); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#57
  def encode_with(coder); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#134
  def indexes(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#68
  def init_with(coder); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#184
  def marshal_dump; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#190
  def marshal_load(array); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#79
  def primary_keys(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#159
  def size; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#35
  def version; end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#222
  def deep_deduplicate(value); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#214
  def derive_columns_hash_and_deduplicate_values; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#204
  def ignored_table?(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#48
  def initialize_dup(other); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#241
  def open(filename); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#235
  def prepare_data_sources; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#210
  def reset_version!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#198
  def tables_to_cache; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#8
    def load_from(filename); end

    private

    # source://activerecord/7.0.4/lib/active_record/connection_adapters/schema_cache.rb#24
    def read(filename, &block); end
  end
end

module ActiveRecord::ConnectionAdapters::SchemaStatements
  include ::ActiveRecord::Migration::JoinTable

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#988
  def add_belongs_to(table_name, ref_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1185
  def add_check_constraint(table_name, expression, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#616
  def add_column(table_name, column_name, type, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#630
  def add_columns(table_name, *column_names, type:, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1085
  def add_foreign_key(from_table, to_table, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#851
  def add_index(table_name, column_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1339
  def add_index_options(table_name, column_name, name: T.unsafe(nil), if_not_exists: T.unsafe(nil), internal: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#988
  def add_reference(table_name, ref_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1316
  def add_timestamps(table_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1228
  def assume_migrated_upto_version(version); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#679
  def change_column(table_name, column_name, type, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1398
  def change_column_comment(table_name, column_name, comment_or_changes); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#697
  def change_column_default(table_name, column_name, default_or_changes); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#717
  def change_column_null(table_name, column_name, null, default = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#487
  def change_table(table_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1388
  def change_table_comment(table_name, comment_or_changes); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1195
  def check_constraint_options(table_name, expression, options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1167
  def check_constraints(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#138
  def column_exists?(table_name, column_name, type = T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#114
  def columns(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1288
  def columns_for_distinct(columns, orders); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#384
  def create_join_table(table_1, table_2, column_options: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1402
  def create_schema_dumper(options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#299
  def create_table(table_name, id: T.unsafe(nil), primary_key: T.unsafe(nil), force: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#44
  def data_source_exists?(name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#34
  def data_sources; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1292
  def distinct_relation_for_primary_key(relation); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#404
  def drop_join_table(table_1, table_2, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#517
  def drop_table(table_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1219
  def dump_schema_information; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1153
  def foreign_key_column_for(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1149
  def foreign_key_exists?(from_table, to_table = T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1158
  def foreign_key_options(from_table, to_table, options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1027
  def foreign_keys(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1365
  def index_algorithm(algorithm); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#99
  def index_exists?(table_name, column_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#920
  def index_name(table_name, options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#935
  def index_name_exists?(table_name, index_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#81
  def indexes(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1224
  def internal_string_options_for_primary_key; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#14
  def native_database_types; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1378
  def options_include_default?(options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#151
  def primary_key(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1371
  def quoted_columns_for_index(column_names, options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1008
  def remove_belongs_to(table_name, ref_name, foreign_key: T.unsafe(nil), polymorphic: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1208
  def remove_check_constraint(table_name, expression = T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#667
  def remove_column(table_name, column_name, type = T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#643
  def remove_columns(table_name, *column_names, type: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1126
  def remove_foreign_key(from_table, to_table = T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#894
  def remove_index(table_name, column_name = T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1008
  def remove_reference(table_name, ref_name, foreign_key: T.unsafe(nil), polymorphic: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1331
  def remove_timestamps(table_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#725
  def rename_column(table_name, column_name, new_column_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#908
  def rename_index(table_name, old_name, new_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#501
  def rename_table(table_name, new_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#28
  def table_alias_for(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#23
  def table_comment(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#59
  def table_exists?(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#18
  def table_options(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#51
  def tables; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1248
  def type_to_sql(type, limit: T.unsafe(nil), precision: T.unsafe(nil), scale: T.unsafe(nil), **_arg4); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1335
  def update_table_definition(table_name, base); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#74
  def view_exists?(view_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#66
  def views; end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1636
  def add_column_for_alter(table_name, column_name, type, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1411
  def add_index_sort_order(quoted_columns, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1428
  def add_options_for_index_columns(quoted_columns, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1654
  def add_timestamps_for_alter(table_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1611
  def bulk_change_table(table_name, operations); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1607
  def can_remove_index_by_name?(column_name, options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1581
  def check_constraint_for(table_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1587
  def check_constraint_for!(table_name, expression: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1571
  def check_constraint_name(table_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1407
  def column_options_keys; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1498
  def create_alter_table(name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1494
  def create_table_definition(name, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1684
  def data_source_sql(name = T.unsafe(nil), type: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1534
  def expression_column_name?(column_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1563
  def extract_foreign_key_action(specifier); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1598
  def extract_new_comment_value(default_or_changes); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1598
  def extract_new_default_value(default_or_changes); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1502
  def extract_table_options!(options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1506
  def fetch_type_metadata(sql_type); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1553
  def foreign_key_for(from_table, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1558
  def foreign_key_for!(from_table, to_table: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1544
  def foreign_key_name(table_name, options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1517
  def index_column_names(column_names); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1436
  def index_name_for_remove(table_name, column_name, options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1525
  def index_name_options(column_names); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1671
  def insert_versions_sql(versions); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1418
  def options_for_index_columns(options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1688
  def quoted_scope(name = T.unsafe(nil), type: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1646
  def remove_column_for_alter(table_name, column_name, type = T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1650
  def remove_columns_for_alter(table_name, *column_names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1667
  def remove_timestamps_for_alter(table_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1477
  def rename_column_indexes(table_name, column_name, new_column_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1642
  def rename_column_sql(table_name, column_name, new_column_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1468
  def rename_table_indexes(table_name, new_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1490
  def schema_creation; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1538
  def strip_table_name_prefix_and_suffix(table_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_statements.rb#1592
  def validate_index_length!(table_name, new_name, internal = T.unsafe(nil)); end
end

class ActiveRecord::ConnectionAdapters::Table
  include ::ActiveRecord::ConnectionAdapters::ColumnMethods
  extend ::ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#618
  def initialize(table_name, base); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#763
  def belongs_to(*args, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def bigint(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def binary(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def blob(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def boolean(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#692
  def change(column_name, type, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#703
  def change_default(column_name, default_or_changes); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#713
  def change_null(column_name, null, default = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#817
  def check_constraint(*args, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#628
  def column(column_name, type, index: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#641
  def column_exists?(column_name, type = T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def date(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def datetime(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def decimal(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def float(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#789
  def foreign_key(*args, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#808
  def foreign_key_exists?(*args, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#653
  def index(column_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#664
  def index_exists?(column_name, options = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def integer(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def json(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#616
  def name; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def numeric(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#763
  def references(*args, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#723
  def remove(*column_names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#776
  def remove_belongs_to(*args, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#826
  def remove_check_constraint(*args, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#799
  def remove_foreign_key(*args, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#735
  def remove_index(column_name = T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#776
  def remove_references(*args, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#744
  def remove_timestamps(**options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#753
  def rename(column_name, new_column_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#673
  def rename_index(index_name, new_index_name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def string(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def text(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def time(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def timestamp(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#682
  def timestamps(**options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def virtual(*names, **options); end
end

class ActiveRecord::ConnectionAdapters::TableDefinition
  include ::ActiveRecord::ConnectionAdapters::ColumnMethods
  extend ::ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#306
  def initialize(conn, name, temporary: T.unsafe(nil), if_not_exists: T.unsafe(nil), options: T.unsafe(nil), as: T.unsafe(nil), comment: T.unsafe(nil), **_arg7); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#339
  def [](name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#304
  def as; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#482
  def belongs_to(*args, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def bigint(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def binary(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def blob(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def boolean(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#456
  def check_constraint(expression, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#304
  def check_constraints; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#410
  def column(name, type, index: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#336
  def columns; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#304
  def comment; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def date(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def datetime(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def decimal(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def float(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#452
  def foreign_key(to_table, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#304
  def foreign_keys; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#304
  def if_not_exists; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#448
  def index(column_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#304
  def indexes; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def integer(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def json(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#304
  def name; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#507
  def new_check_constraint_definition(expression, options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#489
  def new_column_definition(name, type, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#499
  def new_foreign_key_definition(to_table, options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def numeric(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#304
  def options; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#330
  def primary_keys(name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#482
  def references(*args, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#440
  def remove_column(name); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def string(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#304
  def temporary; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def text(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def time(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def timestamp(*names, **options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#464
  def timestamps(**options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#272
  def virtual(*names, **options); end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#517
  def aliased_types(name, fallback); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#513
  def create_column_definition(name, type, options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#521
  def integer_like_primary_key?(type, options); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/schema_definitions.rb#525
  def integer_like_primary_key_type(type, options); end
end

class ActiveRecord::ConnectionAdapters::Transaction
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#89
  def initialize(connection, isolation: T.unsafe(nil), joinable: T.unsafe(nil), run_commit_callbacks: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#100
  def add_record(record, ensure_finalize = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#142
  def before_commit_records; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#167
  def closed?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#146
  def commit_records; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#86
  def connection; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#165
  def full_rollback?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#86
  def isolation_level; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#166
  def joinable?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#118
  def materialize!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#122
  def materialized?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#168
  def open?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#110
  def records; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#126
  def rollback_records; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#86
  def savepoint_name; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#86
  def state; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#87
  def written; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#87
  def written=(_arg0); end
end

class ActiveRecord::ConnectionAdapters::TransactionManager
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#225
  def initialize(connection); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#233
  def begin_transaction(isolation: T.unsafe(nil), joinable: T.unsafe(nil), _lazy: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#293
  def commit_transaction; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#359
  def current_transaction; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#265
  def disable_lazy_transactions!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#270
  def enable_lazy_transactions!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#274
  def lazy_transactions_enabled?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#278
  def materialize_transactions; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#355
  def open_transactions; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#308
  def rollback_transaction(transaction = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#316
  def within_new_transaction(isolation: T.unsafe(nil), joinable: T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#367
  def after_failure_actions(transaction, error); end
end

# source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#364
ActiveRecord::ConnectionAdapters::TransactionManager::NULL_TRANSACTION = T.let(T.unsafe(nil), ActiveRecord::ConnectionAdapters::NullTransaction)

class ActiveRecord::ConnectionAdapters::TransactionState
  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#6
  def initialize(state = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#11
  def add_child(state); end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#63
  def commit!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#20
  def committed?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#44
  def completed?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#16
  def finalized?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#67
  def full_commit!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#53
  def full_rollback!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#24
  def fully_committed?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#40
  def fully_completed?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#32
  def fully_rolledback?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#58
  def invalidate!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#36
  def invalidated?; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#71
  def nullify!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#48
  def rollback!; end

  # source://activerecord/7.0.4/lib/active_record/connection_adapters/abstract/transaction.rb#28
  def rolledback?; end
end

module ActiveRecord::ConnectionHandling
  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#337
  def clear_active_connections!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#337
  def clear_all_connections!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#333
  def clear_cache!; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#266
  def clear_query_caches_for_current_thread; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#337
  def clear_reloadable_connections!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#317
  def connected?; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#137
  def connected_to(role: T.unsafe(nil), shard: T.unsafe(nil), prevent_writes: T.unsafe(nil), &blk); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#252
  def connected_to?(role:, shard: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#172
  def connected_to_many(*classes, role:, shard: T.unsafe(nil), prevent_writes: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#198
  def connecting_to(role: T.unsafe(nil), shard: T.unsafe(nil), prevent_writes: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#279
  def connection; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#304
  def connection_db_config; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#308
  def connection_pool; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#286
  def connection_specification_name; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#283
  def connection_specification_name=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#81
  def connects_to(database: T.unsafe(nil), shards: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#49
  def establish_connection(config_or_env = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#337
  def flush_idle_connections!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#256
  def lookup_connection_handler(handler_key); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#293
  def primary_class?; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#214
  def prohibit_shard_swapping(enabled = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#321
  def remove_connection(name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#312
  def retrieve_connection; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#223
  def shard_swapping_prohibited?; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#238
  def while_preventing_writes(enabled = T.unsafe(nil), &block); end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#382
  def append_to_connected_to_stack(entry); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#341
  def clear_on_handler(handler); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#347
  def resolve_config_for_connection(config_or_env); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#390
  def swap_connection_handler(handler, &blk); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#357
  def with_handler(handler_key, &blk); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#362
  def with_role_and_shard(role, shard, prevent_writes); end
end

# source://activerecord/7.0.4/lib/active_record/connection_handling.rb#6
ActiveRecord::ConnectionHandling::DEFAULT_ENV = T.let(T.unsafe(nil), Proc)

# source://activerecord/7.0.4/lib/active_record/connection_handling.rb#5
ActiveRecord::ConnectionHandling::RAILS_ENV = T.let(T.unsafe(nil), Proc)

class ActiveRecord::ConnectionNotEstablished < ::ActiveRecord::ActiveRecordError; end
class ActiveRecord::ConnectionTimeoutError < ::ActiveRecord::ConnectionNotEstablished; end

module ActiveRecord::Core
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Core::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/core.rb#461
  def initialize(attributes = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#614
  def <=>(other_object); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#580
  def ==(comparison_object); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#626
  def blank?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#682
  def connection_handler; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#565
  def encode_with(coder); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#580
  def eql?(comparison_object); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#603
  def freeze; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#609
  def frozen?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#590
  def hash; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#488
  def init_with(coder, &block); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#498
  def init_with_attributes(attributes, new_record = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#687
  def inspect; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#622
  def present?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#705
  def pretty_print(pp); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#678
  def readonly!; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#631
  def readonly?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#729
  def slice(*methods); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#661
  def strict_loading!(value = T.unsafe(nil), mode: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#636
  def strict_loading?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#670
  def strict_loading_mode; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#673
  def strict_loading_n_plus_one_only?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#734
  def values_at(*methods); end

  private

  # source://activerecord/7.0.4/lib/active_record/core.rb#771
  def custom_inspect_method_defined?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#751
  def init_internals; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#539
  def initialize_dup(other); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#768
  def initialize_internals_callback; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#782
  def inspection_filter; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#747
  def to_ary; end

  module GeneratedClassMethods
    def belongs_to_required_by_default; end
    def belongs_to_required_by_default=(value); end
    def belongs_to_required_by_default?; end
    def default_connection_handler; end
    def default_connection_handler=(value); end
    def default_connection_handler?; end
    def default_role; end
    def default_role=(value); end
    def default_role?; end
    def default_shard; end
    def default_shard=(value); end
    def default_shard?; end
    def destroy_association_async_job; end
    def destroy_association_async_job=(value); end
    def enumerate_columns_in_select_statements; end
    def enumerate_columns_in_select_statements=(value); end
    def enumerate_columns_in_select_statements?; end
    def has_many_inversing; end
    def has_many_inversing=(value); end
    def has_many_inversing?; end
    def logger; end
    def logger=(value); end
    def logger?; end
    def shard_selector; end
    def shard_selector=(value); end
    def shard_selector?; end
    def strict_loading_by_default; end
    def strict_loading_by_default=(value); end
    def strict_loading_by_default?; end
  end

  module GeneratedInstanceMethods
    def default_connection_handler; end
    def default_connection_handler?; end
    def default_role; end
    def default_role?; end
    def default_shard; end
    def default_shard?; end
    def destroy_association_async_job; end
    def logger; end
    def logger?; end
  end
end

module ActiveRecord::Core::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/core.rb#415
  def ===(object); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def action_on_strict_loading_violation; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def action_on_strict_loading_violation=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def application_record_class; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def application_record_class=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#420
  def arel_table; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#432
  def cached_find_by_statement(key, &block); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def default_timezone; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def default_timezone=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def dump_schema_after_migration; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def dump_schema_after_migration=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def dump_schemas; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def dump_schemas=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def error_on_ignored_order; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def error_on_ignored_order=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#373
  def filter_attributes; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#382
  def filter_attributes=(filter_attributes); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#268
  def find(*ids); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#287
  def find_by(*args); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#329
  def find_by!(*args); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#362
  def generated_association_methods; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def index_nested_attribute_errors; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def index_nested_attribute_errors=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#255
  def inherited(child_class); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#251
  def initialize_find_by_cache; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#358
  def initialize_generated_modules; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#399
  def inspect; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#387
  def inspection_filter; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def legacy_connection_handling; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def legacy_connection_handling=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def maintain_test_schema; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def maintain_test_schema=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#424
  def predicate_builder; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def queues; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def queues=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def reading_role; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def reading_role=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def schema_format; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def schema_format=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def suppress_multiple_database_warning; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def suppress_multiple_database_warning=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def timestamped_migrations; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def timestamped_migrations=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#428
  def type_caster; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def verbose_query_logs; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def verbose_query_logs=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def warn_on_records_fetched_greater_than; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def warn_on_records_fetched_greater_than=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def writing_role; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def writing_role=(value); end

  private

  # source://activerecord/7.0.4/lib/active_record/core.rb#438
  def relation; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#448
  def table_metadata; end
end

module ActiveRecord::CounterCache
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::CounterCache::ClassMethods

  private

  # source://activerecord/7.0.4/lib/active_record/counter_cache.rb#165
  def _create_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/counter_cache.rb#175
  def destroy_row; end

  # source://activerecord/7.0.4/lib/active_record/counter_cache.rb#190
  def each_counter_cached_associations; end
end

module ActiveRecord::CounterCache::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/counter_cache.rb#159
  def decrement_counter(counter_name, id, touch: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/counter_cache.rb#134
  def increment_counter(counter_name, id, touch: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/counter_cache.rb#29
  def reset_counters(id, *counters, touch: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/counter_cache.rb#107
  def update_counters(id, counters); end
end

class ActiveRecord::DangerousAttributeError < ::ActiveRecord::ActiveRecordError; end
class ActiveRecord::DatabaseAlreadyExists < ::ActiveRecord::StatementInvalid; end

class ActiveRecord::DatabaseConfigurations
  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#19
  def initialize(configurations = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#17
  def any?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#98
  def blank?; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#45
  def configs_for(env_name: T.unsafe(nil), name: T.unsafe(nil), include_replicas: T.unsafe(nil), include_hidden: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#16
  def configurations; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#98
  def empty?; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#73
  def find_db_config(env); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#88
  def primary?(name); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#122
  def resolve(config); end

  private

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#148
  def build_configs(configs); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#187
  def build_configuration_sentence; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#221
  def build_db_config_from_hash(env_name, name, config); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#200
  def build_db_config_from_raw_config(env_name, name, config); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#211
  def build_db_config_from_string(env_name, name, config); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#136
  def default_env; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#140
  def env_with_configs(env = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#242
  def environment_url_config(env, name, config); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#249
  def environment_value_for(name); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#233
  def merge_db_environment_variables(current_env, configs); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#173
  def resolve_symbol_connection(name); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations.rb#167
  def walk_configs(env_name, config); end
end

class ActiveRecord::DatabaseConfigurations::ConnectionUrlResolver
  # source://activerecord/7.0.4/lib/active_record/database_configurations/connection_url_resolver.rb#25
  def initialize(url); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/connection_url_resolver.rb#39
  def to_hash; end

  private

  # source://activerecord/7.0.4/lib/active_record/database_configurations/connection_url_resolver.rb#84
  def database_from_path; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/connection_url_resolver.rb#61
  def query_hash; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/connection_url_resolver.rb#65
  def raw_config; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/connection_url_resolver.rb#46
  def uri; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/connection_url_resolver.rb#48
  def uri_parser; end
end

class ActiveRecord::DatabaseConfigurations::DatabaseConfig
  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#13
  def initialize(env_name, name); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#30
  def _database=(database); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#34
  def adapter; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#18
  def adapter_method; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#54
  def checkout_timeout; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#26
  def database; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#9
  def env_name; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#74
  def for_current_env?; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#22
  def host; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#62
  def idle_timeout; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#50
  def max_queue; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#46
  def max_threads; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#70
  def migrations_paths; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#42
  def min_threads; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#9
  def name; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#11
  def owner_name; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#11
  def owner_name=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#38
  def pool; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#58
  def reaping_frequency; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#66
  def replica?; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/database_config.rb#78
  def schema_cache_path; end
end

class ActiveRecord::DatabaseConfigurations::HashConfig < ::ActiveRecord::DatabaseConfigurations::DatabaseConfig
  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#30
  def initialize(env_name, name, configuration_hash); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#61
  def _database=(database); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#96
  def adapter; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#81
  def checkout_timeout; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#28
  def configuration_hash; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#57
  def database; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#139
  def database_tasks?; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#107
  def default_schema_cache_path; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#49
  def host; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#91
  def idle_timeout; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#111
  def lazy_schema_cache_path; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#77
  def max_queue; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#73
  def max_threads; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#45
  def migrations_paths; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#69
  def min_threads; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#65
  def pool; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#115
  def primary?; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#87
  def reaping_frequency; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#38
  def replica?; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#103
  def schema_cache_path; end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#127
  def schema_dump(format = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#53
  def socket; end

  private

  # source://activerecord/7.0.4/lib/active_record/database_configurations/hash_config.rb#144
  def schema_file_type(format); end
end

class ActiveRecord::DatabaseConfigurations::InvalidConfigurationError < ::StandardError; end

class ActiveRecord::DatabaseConfigurations::UrlConfig < ::ActiveRecord::DatabaseConfigurations::HashConfig
  # source://activerecord/7.0.4/lib/active_record/database_configurations/url_config.rb#34
  def initialize(env_name, name, url, configuration_hash = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/database_configurations/url_config.rb#32
  def url; end

  private

  # source://activerecord/7.0.4/lib/active_record/database_configurations/url_config.rb#44
  def build_url_hash; end
end

class ActiveRecord::DatabaseConnectionError < ::ActiveRecord::ConnectionNotEstablished
  # source://activerecord/7.0.4/lib/active_record/errors.rb#69
  def initialize(message = T.unsafe(nil)); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/errors.rb#74
    def hostname_error(hostname); end

    # source://activerecord/7.0.4/lib/active_record/errors.rb#81
    def username_error(username); end
  end
end

class ActiveRecord::Deadlocked < ::ActiveRecord::TransactionRollbackError; end

module ActiveRecord::DelegatedType
  # source://activerecord/7.0.4/lib/active_record/delegated_type.rb#206
  def delegated_type(role, types:, **options); end

  private

  # source://activerecord/7.0.4/lib/active_record/delegated_type.rb#212
  def define_delegated_type_methods(role, types:, options:); end
end

module ActiveRecord::Delegation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Delegation::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def &(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def +(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def -(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def [](*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def as_json(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def compact(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#93
  def connection(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def each(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def encode_with(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def in_groups(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def in_groups_of(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def index(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def join(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def length(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#93
  def primary_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def reverse(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def rindex(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def rotate(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def sample(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def shuffle(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def slice(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def split(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def to_formatted_s(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def to_fs(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def to_sentence(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def to_xml(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def |(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#128
  def respond_to_missing?(method, _); end
end

module ActiveRecord::Delegation::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#117
  def create(klass, *args, **kwargs); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#122
  def relation_class_for(klass); end
end

module ActiveRecord::Delegation::ClassSpecificRelation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods

  private

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#105
  def method_missing(method, *args, **_arg2, &block); end
end

module ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#99
  def name; end
end

module ActiveRecord::Delegation::DelegateCache
  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#38
  def generate_relation_method(method); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#33
  def inherited(child_class); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#13
  def initialize_relation_delegate_cache; end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#9
  def relation_delegate_class(klass); end

  protected

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#43
  def include_relation_methods(delegate); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#49
  def generated_relation_methods; end
end

class ActiveRecord::DeleteRestrictionError < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/associations.rb#241
  def initialize(name = T.unsafe(nil)); end
end

class ActiveRecord::DestroyAssociationAsyncJob < ::ActiveJob::Base
  # source://activerecord/7.0.4/lib/active_record/destroy_association_async_job.rb#13
  def perform(owner_model_name: T.unsafe(nil), owner_id: T.unsafe(nil), association_class: T.unsafe(nil), association_ids: T.unsafe(nil), association_primary_key_column: T.unsafe(nil), ensuring_owner_was_method: T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/destroy_association_async_job.rb#32
  def owner_destroyed?(owner, ensuring_owner_was_method); end

  class << self
    # source://activejob/7.0.4/lib/active_job/queue_name.rb#56
    def queue_name; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers; end
  end
end

class ActiveRecord::DisableJoinsAssociationRelation < ::ActiveRecord::Relation
  # source://activerecord/7.0.4/lib/active_record/disable_joins_association_relation.rb#7
  def initialize(klass, key, ids); end

  # source://activerecord/7.0.4/lib/active_record/disable_joins_association_relation.rb#17
  def first(limit = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/disable_joins_association_relation.rb#5
  def ids; end

  # source://activerecord/7.0.4/lib/active_record/disable_joins_association_relation.rb#5
  def key; end

  # source://activerecord/7.0.4/lib/active_record/disable_joins_association_relation.rb#13
  def limit(value); end

  # source://activerecord/7.0.4/lib/active_record/disable_joins_association_relation.rb#25
  def load; end
end

module ActiveRecord::DynamicMatchers
  private

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#15
  def method_missing(name, *arguments, &block); end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#6
  def respond_to_missing?(name, _); end
end

class ActiveRecord::DynamicMatchers::FindBy < ::ActiveRecord::DynamicMatchers::Method
  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#100
  def finder; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#96
    def prefix; end
  end
end

class ActiveRecord::DynamicMatchers::FindByBang < ::ActiveRecord::DynamicMatchers::Method
  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#116
  def finder; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#108
    def prefix; end

    # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#112
    def suffix; end
  end
end

class ActiveRecord::DynamicMatchers::Method
  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#52
  def initialize(model, method_name); end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#50
  def attribute_names; end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#63
  def define; end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#50
  def model; end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#50
  def name; end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#59
  def valid?; end

  private

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#84
  def attributes_hash; end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#72
  def body; end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#88
  def finder; end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#78
  def signature; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#32
    def match(model, name); end

    # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#30
    def matchers; end

    # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#37
    def pattern; end

    # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#41
    def prefix; end

    # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#45
    def suffix; end
  end
end

class ActiveRecord::EagerLoadPolymorphicError < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/associations.rb#228
  def initialize(reflection = T.unsafe(nil)); end
end

module ActiveRecord::Encryption
  include ::ActiveRecord::Encryption::Configurable
  include ::ActiveRecord::Encryption::Contexts
  extend ::ActiveSupport::Autoload
  extend ::ActiveRecord::Encryption::Configurable::ClassMethods
  extend ::ActiveRecord::Encryption::Contexts::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/encryption/configurable.rb#10
  def config; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
  def custom_contexts; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#100
  def custom_contexts=(obj); end

  # source://activerecord/7.0.4/lib/active_record/encryption/contexts.rb#17
  def default_context; end

  # source://activerecord/7.0.4/lib/active_record/encryption/configurable.rb#11
  def encrypted_attribute_declaration_listeners; end

  # source://activerecord/7.0.4/lib/active_record/encryption/configurable.rb#11
  def encrypted_attribute_declaration_listeners=(val); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/encryption/configurable.rb#10
    def config; end

    # source://activesupport/7.0.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#48
    def custom_contexts; end

    # source://activesupport/7.0.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#92
    def custom_contexts=(obj); end

    # source://activerecord/7.0.4/lib/active_record/encryption/contexts.rb#17
    def default_context; end

    # source://activerecord/7.0.4/lib/active_record/encryption.rb#49
    def eager_load!; end

    # source://activerecord/7.0.4/lib/active_record/encryption/configurable.rb#11
    def encrypted_attribute_declaration_listeners; end

    # source://activerecord/7.0.4/lib/active_record/encryption/configurable.rb#11
    def encrypted_attribute_declaration_listeners=(val); end
  end
end

class ActiveRecord::Encryption::Cipher
  extend ::ActiveSupport::Autoload

  # source://activerecord/7.0.4/lib/active_record/encryption/cipher.rb#25
  def decrypt(encrypted_message, key:); end

  # source://activerecord/7.0.4/lib/active_record/encryption/cipher.rb#15
  def encrypt(clean_text, key:, deterministic: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/encryption/cipher.rb#35
  def iv_length; end

  # source://activerecord/7.0.4/lib/active_record/encryption/cipher.rb#31
  def key_length; end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/cipher.rb#48
  def cipher_for(secret, deterministic: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/encryption/cipher.rb#40
  def try_to_decrypt_with_each(encrypted_text, keys:); end
end

class ActiveRecord::Encryption::Cipher::Aes256Gcm
  # source://activerecord/7.0.4/lib/active_record/encryption/cipher/aes256_gcm.rb#30
  def initialize(secret, deterministic: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/encryption/cipher/aes256_gcm.rb#56
  def decrypt(encrypted_message); end

  # source://activerecord/7.0.4/lib/active_record/encryption/cipher/aes256_gcm.rb#35
  def encrypt(clear_text); end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/cipher/aes256_gcm.rb#92
  def generate_deterministic_iv(clear_text); end

  # source://activerecord/7.0.4/lib/active_record/encryption/cipher/aes256_gcm.rb#84
  def generate_iv(cipher, clear_text); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/encryption/cipher/aes256_gcm.rb#23
    def iv_length; end

    # source://activerecord/7.0.4/lib/active_record/encryption/cipher/aes256_gcm.rb#19
    def key_length; end
  end
end

# source://activerecord/7.0.4/lib/active_record/encryption/cipher/aes256_gcm.rb#16
ActiveRecord::Encryption::Cipher::Aes256Gcm::CIPHER_TYPE = T.let(T.unsafe(nil), String)

# source://activerecord/7.0.4/lib/active_record/encryption/cipher.rb#12
ActiveRecord::Encryption::Cipher::DEFAULT_ENCODING = T.let(T.unsafe(nil), Encoding)

class ActiveRecord::Encryption::Config
  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#11
  def initialize; end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def add_to_filter_parameters; end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def add_to_filter_parameters=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def deterministic_key; end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def deterministic_key=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def encrypt_fixtures; end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def encrypt_fixtures=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def excluded_from_filter_parameters; end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def excluded_from_filter_parameters=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def extend_queries; end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def extend_queries=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def forced_encoding_for_deterministic_encryption; end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def forced_encoding_for_deterministic_encryption=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def key_derivation_salt; end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def key_derivation_salt=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#18
  def previous=(previous_schemes_properties); end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def previous_schemes; end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def previous_schemes=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def primary_key; end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def primary_key=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def store_key_references; end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def store_key_references=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def support_unencrypted_data; end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def support_unencrypted_data=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def validate_column_size; end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#7
  def validate_column_size=(_arg0); end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#39
  def add_previous_scheme(**properties); end

  # source://activerecord/7.0.4/lib/active_record/encryption/config.rb#25
  def set_defaults; end
end

module ActiveRecord::Encryption::Configurable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Encryption::Configurable::ClassMethods
end

module ActiveRecord::Encryption::Configurable::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/encryption/configurable.rb#17
  def cipher(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/encryption/configurable.rb#20
  def configure(primary_key:, deterministic_key:, key_derivation_salt:, **properties); end

  # source://activerecord/7.0.4/lib/active_record/encryption/configurable.rb#47
  def encrypted_attribute_was_declared(klass, name); end

  # source://activerecord/7.0.4/lib/active_record/encryption/configurable.rb#17
  def encryptor(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/encryption/configurable.rb#17
  def frozen_encryption(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/encryption/configurable.rb#53
  def install_auto_filtered_parameters_hook(application); end

  # source://activerecord/7.0.4/lib/active_record/encryption/configurable.rb#17
  def key_generator(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/encryption/configurable.rb#17
  def key_provider(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/encryption/configurable.rb#17
  def message_serializer(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/encryption/configurable.rb#42
  def on_encrypted_attribute_declared(&block); end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/configurable.rb#61
  def excluded_from_filter_parameters?(filter_parameter); end
end

class ActiveRecord::Encryption::Context
  # source://activerecord/7.0.4/lib/active_record/encryption/context.rb#19
  def initialize; end

  # source://activerecord/7.0.4/lib/active_record/encryption/context.rb#16
  def cipher; end

  # source://activerecord/7.0.4/lib/active_record/encryption/context.rb#16
  def cipher=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/context.rb#16
  def encryptor; end

  # source://activerecord/7.0.4/lib/active_record/encryption/context.rb#16
  def encryptor=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/context.rb#16
  def frozen_encryption; end

  # source://activerecord/7.0.4/lib/active_record/encryption/context.rb#16
  def frozen_encryption=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/context.rb#16
  def frozen_encryption?; end

  # source://activerecord/7.0.4/lib/active_record/encryption/context.rb#16
  def key_generator; end

  # source://activerecord/7.0.4/lib/active_record/encryption/context.rb#16
  def key_generator=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/context.rb#16
  def key_provider; end

  # source://activerecord/7.0.4/lib/active_record/encryption/context.rb#16
  def key_provider=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/context.rb#16
  def message_serializer; end

  # source://activerecord/7.0.4/lib/active_record/encryption/context.rb#16
  def message_serializer=(_arg0); end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/context.rb#26
  def set_defaults; end
end

# source://activerecord/7.0.4/lib/active_record/encryption/context.rb#13
ActiveRecord::Encryption::Context::PROPERTIES = T.let(T.unsafe(nil), Array)

module ActiveRecord::Encryption::Contexts
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Encryption::Contexts::ClassMethods
end

module ActiveRecord::Encryption::Contexts::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/encryption/contexts.rb#62
  def context; end

  # source://activerecord/7.0.4/lib/active_record/encryption/contexts.rb#66
  def current_custom_context; end

  # source://activerecord/7.0.4/lib/active_record/encryption/contexts.rb#57
  def protecting_encrypted_data(&block); end

  # source://activerecord/7.0.4/lib/active_record/encryption/contexts.rb#33
  def with_encryption_context(properties); end

  # source://activerecord/7.0.4/lib/active_record/encryption/contexts.rb#49
  def without_encryption(&block); end
end

class ActiveRecord::Encryption::DerivedSecretKeyProvider < ::ActiveRecord::Encryption::KeyProvider
  # source://activerecord/7.0.4/lib/active_record/encryption/derived_secret_key_provider.rb#7
  def initialize(passwords); end
end

class ActiveRecord::Encryption::DeterministicKeyProvider < ::ActiveRecord::Encryption::DerivedSecretKeyProvider
  # source://activerecord/7.0.4/lib/active_record/encryption/deterministic_key_provider.rb#7
  def initialize(password); end
end

module ActiveRecord::Encryption::EncryptableRecord
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Encryption::EncryptableRecord::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#146
  def ciphertext_for(attribute_name); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#156
  def decrypt; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#151
  def encrypt; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#141
  def encrypted_attribute?(attribute_name); end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#190
  def build_decrypt_attribute_assignments; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#184
  def build_encrypt_attribute_assignments; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#199
  def cant_modify_encrypted_attributes_when_frozen; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#169
  def decrypt_attributes; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#163
  def encrypt_attributes; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#180
  def has_encrypted_attributes?; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#176
  def validate_encryption_allowed; end

  module GeneratedClassMethods
    def encrypted_attributes; end
    def encrypted_attributes=(value); end
    def encrypted_attributes?; end
  end

  module GeneratedInstanceMethods
    def encrypted_attributes; end
    def encrypted_attributes=(value); end
    def encrypted_attributes?; end
  end
end

module ActiveRecord::Encryption::EncryptableRecord::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#56
  def deterministic_encrypted_attributes; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#45
  def encrypts(*names, key_provider: T.unsafe(nil), key: T.unsafe(nil), deterministic: T.unsafe(nil), downcase: T.unsafe(nil), ignore_case: T.unsafe(nil), previous: T.unsafe(nil), **context_properties); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#63
  def source_attribute_from_preserved_attribute(attribute_name); end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#127
  def add_length_validation_for_encrypted_columns; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#82
  def encrypt_attribute(name, attribute_scheme); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#76
  def global_previous_schemes_for(scheme); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#121
  def load_schema!; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#104
  def override_accessors_to_preserve_original(name, original_attribute_name); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#93
  def preserve_original_encrypted(name); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#68
  def scheme_for(key_provider: T.unsafe(nil), key: T.unsafe(nil), deterministic: T.unsafe(nil), downcase: T.unsafe(nil), ignore_case: T.unsafe(nil), previous: T.unsafe(nil), **context_properties); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#133
  def validate_column_size(attribute_name); end
end

# source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#161
ActiveRecord::Encryption::EncryptableRecord::ORIGINAL_ATTRIBUTE_PREFIX = T.let(T.unsafe(nil), String)

class ActiveRecord::Encryption::EncryptedAttributeType < ::ActiveRecord::Type::Text
  include ::ActiveModel::Type::Helpers::Mutable

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#23
  def initialize(scheme:, cast_type: T.unsafe(nil), previous_type: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#16
  def accessor(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#13
  def cast_type; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#42
  def changed_in_place?(raw_old_value, new_value); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#30
  def deserialize(value); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#15
  def deterministic?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#15
  def downcase?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#15
  def fixed?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#15
  def key_provider(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#15
  def previous_schemes(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#47
  def previous_types; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#13
  def scheme; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#34
  def serialize(value); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#15
  def with_context(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#61
  def build_previous_types_for(schemes); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#135
  def clean_text_scheme; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#71
  def decrypt(value); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#131
  def decryption_options; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#113
  def encrypt(value); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#127
  def encryption_options; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#119
  def encryptor; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#91
  def handle_deserialize_error(error, value); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#53
  def previous_schemes_including_clean_text; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#67
  def previous_type?; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#57
  def previous_types_without_clean_text; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#107
  def serialize_with_current(value); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#103
  def serialize_with_oldest(value); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#99
  def serialize_with_oldest?; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#123
  def support_unencrypted_data?; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_attribute_type.rb#83
  def try_to_deserialize_with_previous_encrypted_types(value); end
end

module ActiveRecord::Encryption::EncryptedFixtures
  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_fixtures.rb#6
  def initialize(fixture, model_class); end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_fixtures.rb#14
  def encrypt_fixture_data(fixture, model_class); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encrypted_fixtures.rb#26
  def process_preserved_original_columns(fixture, model_class); end
end

class ActiveRecord::Encryption::EncryptingOnlyEncryptor < ::ActiveRecord::Encryption::Encryptor
  # source://activerecord/7.0.4/lib/active_record/encryption/encrypting_only_encryptor.rb#7
  def decrypt(encrypted_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end
end

class ActiveRecord::Encryption::Encryptor
  # source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#52
  def decrypt(encrypted_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#34
  def encrypt(clear_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#62
  def encrypted?(text); end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#88
  def build_encrypted_message(clear_text, key_provider:, cipher_options:); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#84
  def cipher; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#122
  def compress(data); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#114
  def compress_if_worth_it(string); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#74
  def default_key_provider; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#102
  def deserialize_message(message); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#142
  def force_encoding_if_needed(value); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#150
  def forced_encoding_for_deterministic_encryption; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#98
  def serialize_message(message); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#109
  def serializer; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#136
  def uncompress(data); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#128
  def uncompress_if_needed(data, compressed); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#78
  def validate_payload_type(clear_text); end
end

# source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#70
ActiveRecord::Encryption::Encryptor::DECRYPT_ERRORS = T.let(T.unsafe(nil), Array)

# source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#71
ActiveRecord::Encryption::Encryptor::ENCODING_ERRORS = T.let(T.unsafe(nil), Array)

# source://activerecord/7.0.4/lib/active_record/encryption/encryptor.rb#72
ActiveRecord::Encryption::Encryptor::THRESHOLD_TO_JUSTIFY_COMPRESSION = T.let(T.unsafe(nil), Integer)

class ActiveRecord::Encryption::EnvelopeEncryptionKeyProvider
  # source://activerecord/7.0.4/lib/active_record/encryption/envelope_encryption_key_provider.rb#31
  def active_primary_key; end

  # source://activerecord/7.0.4/lib/active_record/encryption/envelope_encryption_key_provider.rb#26
  def decryption_keys(encrypted_message); end

  # source://activerecord/7.0.4/lib/active_record/encryption/envelope_encryption_key_provider.rb#18
  def encryption_key; end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/envelope_encryption_key_provider.rb#40
  def decrypt_data_key(encrypted_message); end

  # source://activerecord/7.0.4/lib/active_record/encryption/envelope_encryption_key_provider.rb#36
  def encrypt_data_key(random_secret); end

  # source://activerecord/7.0.4/lib/active_record/encryption/envelope_encryption_key_provider.rb#50
  def generate_random_secret; end

  # source://activerecord/7.0.4/lib/active_record/encryption/envelope_encryption_key_provider.rb#46
  def primary_key_provider; end
end

module ActiveRecord::Encryption::Errors; end
class ActiveRecord::Encryption::Errors::Base < ::StandardError; end
class ActiveRecord::Encryption::Errors::Configuration < ::ActiveRecord::Encryption::Errors::Base; end
class ActiveRecord::Encryption::Errors::Decryption < ::ActiveRecord::Encryption::Errors::Base; end
class ActiveRecord::Encryption::Errors::Encoding < ::ActiveRecord::Encryption::Errors::Base; end
class ActiveRecord::Encryption::Errors::EncryptedContentIntegrity < ::ActiveRecord::Encryption::Errors::Base; end
class ActiveRecord::Encryption::Errors::Encryption < ::ActiveRecord::Encryption::Errors::Base; end
class ActiveRecord::Encryption::Errors::ForbiddenClass < ::ActiveRecord::Encryption::Errors::Base; end

module ActiveRecord::Encryption::ExtendedDeterministicQueries
  class << self
    # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_queries.rb#34
    def install_support; end
  end
end

class ActiveRecord::Encryption::ExtendedDeterministicQueries::AdditionalValue
  # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_queries.rb#124
  def initialize(value, type); end

  # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_queries.rb#122
  def type; end

  # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_queries.rb#122
  def value; end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_queries.rb#130
  def process(value); end
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries::ClassMethods
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries::ClassMethods
  include ::ActiveRecord::Encryption::ExtendedDeterministicQueries::EncryptedQueryArgumentProcessor

  # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_queries.rb#114
  def find_by(*args); end
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::EncryptedQueryArgumentProcessor
  extend ::ActiveSupport::Concern

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_queries.rb#74
  def additional_values_for(value, type); end

  # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_queries.rb#56
  def process_encrypted_query_argument(value, check_for_additional_values, type); end

  # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_queries.rb#45
  def process_encrypted_query_arguments(args, check_for_additional_values); end
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::ExtendedEncryptableType
  # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_queries.rb#136
  def serialize(data); end
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::InWithAdditionalValues
  # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_queries.rb#150
  def encryption_aware_type_caster; end

  # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_queries.rb#146
  def proc_for_binds; end
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::RelationQueries
  include ::ActiveRecord::Encryption::ExtendedDeterministicQueries::EncryptedQueryArgumentProcessor

  # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_queries.rb#89
  def exists?(*args); end

  # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_queries.rb#94
  def find_or_create_by(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_queries.rb#98
  def find_or_create_by!(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_queries.rb#84
  def where(*args); end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_queries.rb#103
  def process_encrypted_query_arguments_if_needed(args); end
end

module ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator
  class << self
    # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_uniqueness_validator.rb#6
    def install_support; end
  end
end

module ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator::EncryptedUniquenessValidator
  # source://activerecord/7.0.4/lib/active_record/encryption/extended_deterministic_uniqueness_validator.rb#11
  def validate_each(record, attribute, value); end
end

class ActiveRecord::Encryption::Key
  # source://activerecord/7.0.4/lib/active_record/encryption/key.rb#13
  def initialize(secret); end

  # source://activerecord/7.0.4/lib/active_record/encryption/key.rb#23
  def id; end

  # source://activerecord/7.0.4/lib/active_record/encryption/key.rb#11
  def public_tags; end

  # source://activerecord/7.0.4/lib/active_record/encryption/key.rb#11
  def secret; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/encryption/key.rb#18
    def derive_from(password); end
  end
end

class ActiveRecord::Encryption::KeyGenerator
  # source://activerecord/7.0.4/lib/active_record/encryption/key_generator.rb#32
  def derive_key_from(password, length: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/encryption/key_generator.rb#24
  def generate_random_hex_key(length: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/encryption/key_generator.rb#10
  def generate_random_key(length: T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/key_generator.rb#37
  def key_length; end
end

class ActiveRecord::Encryption::KeyProvider
  # source://activerecord/7.0.4/lib/active_record/encryption/key_provider.rb#11
  def initialize(keys); end

  # source://activerecord/7.0.4/lib/active_record/encryption/key_provider.rb#32
  def decryption_keys(encrypted_message); end

  # source://activerecord/7.0.4/lib/active_record/encryption/key_provider.rb#20
  def encryption_key; end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/key_provider.rb#41
  def keys_grouped_by_id; end
end

class ActiveRecord::Encryption::Message
  # source://activerecord/7.0.4/lib/active_record/encryption/message.rb#14
  def initialize(payload: T.unsafe(nil), headers: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/encryption/message.rb#21
  def ==(other_message); end

  # source://activerecord/7.0.4/lib/active_record/encryption/message.rb#12
  def headers; end

  # source://activerecord/7.0.4/lib/active_record/encryption/message.rb#12
  def headers=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/message.rb#12
  def payload; end

  # source://activerecord/7.0.4/lib/active_record/encryption/message.rb#12
  def payload=(_arg0); end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/message.rb#26
  def validate_payload_type(payload); end
end

class ActiveRecord::Encryption::MessageSerializer
  # source://activerecord/7.0.4/lib/active_record/encryption/message_serializer.rb#29
  def dump(message); end

  # source://activerecord/7.0.4/lib/active_record/encryption/message_serializer.rb#22
  def load(serialized_content); end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/message_serializer.rb#79
  def decode_if_needed(value); end

  # source://activerecord/7.0.4/lib/active_record/encryption/message_serializer.rb#71
  def encode_if_needed(value); end

  # source://activerecord/7.0.4/lib/active_record/encryption/message_serializer.rb#65
  def headers_to_json(headers); end

  # source://activerecord/7.0.4/lib/active_record/encryption/message_serializer.rb#58
  def message_to_json(message); end

  # source://activerecord/7.0.4/lib/active_record/encryption/message_serializer.rb#35
  def parse_message(data, level); end

  # source://activerecord/7.0.4/lib/active_record/encryption/message_serializer.rb#50
  def parse_properties(headers, level); end

  # source://activerecord/7.0.4/lib/active_record/encryption/message_serializer.rb#40
  def validate_message_data_format(data, level); end
end

class ActiveRecord::Encryption::NullEncryptor
  # source://activerecord/7.0.4/lib/active_record/encryption/null_encryptor.rb#12
  def decrypt(encrypted_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/encryption/null_encryptor.rb#8
  def encrypt(clean_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/encryption/null_encryptor.rb#16
  def encrypted?(text); end
end

class ActiveRecord::Encryption::Properties
  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#42
  def initialize(initial_properties = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#20
  def ==(arg); end

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#50
  def []=(key, value); end

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#62
  def add(other_properties); end

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#33
  def auth_tag; end

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#37
  def auth_tag=(value); end

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#33
  def compressed; end

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#37
  def compressed=(value); end

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#33
  def encoding; end

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#37
  def encoding=(value); end

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#33
  def encrypted_data_key; end

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#37
  def encrypted_data_key=(value); end

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#33
  def encrypted_data_key_id; end

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#37
  def encrypted_data_key_id=(value); end

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#33
  def iv; end

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#37
  def iv=(value); end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/delegation.rb#302
  def method_missing(method, *args, **_arg2, &block); end

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#68
  def to_h; end

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#56
  def validate_value_type(value); end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#73
  def data; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/delegation.rb#294
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#17
ActiveRecord::Encryption::Properties::ALLOWED_VALUE_CLASSES = T.let(T.unsafe(nil), Array)

# source://activerecord/7.0.4/lib/active_record/encryption/properties.rb#23
ActiveRecord::Encryption::Properties::DEFAULT_PROPERTIES = T.let(T.unsafe(nil), Hash)

class ActiveRecord::Encryption::ReadOnlyNullEncryptor
  # source://activerecord/7.0.4/lib/active_record/encryption/read_only_null_encryptor.rb#15
  def decrypt(encrypted_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/encryption/read_only_null_encryptor.rb#11
  def encrypt(clean_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/encryption/read_only_null_encryptor.rb#19
  def encrypted?(text); end
end

class ActiveRecord::Encryption::Scheme
  # source://activerecord/7.0.4/lib/active_record/encryption/scheme.rb#13
  def initialize(key_provider: T.unsafe(nil), key: T.unsafe(nil), deterministic: T.unsafe(nil), downcase: T.unsafe(nil), ignore_case: T.unsafe(nil), previous_schemes: T.unsafe(nil), **context_properties); end

  # source://activerecord/7.0.4/lib/active_record/encryption/scheme.rb#38
  def deterministic?; end

  # source://activerecord/7.0.4/lib/active_record/encryption/scheme.rb#34
  def downcase?; end

  # source://activerecord/7.0.4/lib/active_record/encryption/scheme.rb#42
  def fixed?; end

  # source://activerecord/7.0.4/lib/active_record/encryption/scheme.rb#30
  def ignore_case?; end

  # source://activerecord/7.0.4/lib/active_record/encryption/scheme.rb#47
  def key_provider; end

  # source://activerecord/7.0.4/lib/active_record/encryption/scheme.rb#54
  def merge(other_scheme); end

  # source://activerecord/7.0.4/lib/active_record/encryption/scheme.rb#11
  def previous_schemes; end

  # source://activerecord/7.0.4/lib/active_record/encryption/scheme.rb#11
  def previous_schemes=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/scheme.rb#58
  def to_h; end

  # source://activerecord/7.0.4/lib/active_record/encryption/scheme.rb#63
  def with_context(&block); end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/scheme.rb#90
  def build_key_provider; end

  # source://activerecord/7.0.4/lib/active_record/encryption/scheme.rb#72
  def validate_config!; end

  # source://activerecord/7.0.4/lib/active_record/encryption/scheme.rb#83
  def validate_credential(key, error_message = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/encryption/scheme.rb#77
  def validate_keys!; end
end

module ActiveRecord::Enum
  # source://activerecord/7.0.4/lib/active_record/enum.rb#167
  def enum(name = T.unsafe(nil), values = T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#119
  def inherited(base); end

  private

  # source://activerecord/7.0.4/lib/active_record/enum.rb#180
  def _enum(name, values, prefix: T.unsafe(nil), suffix: T.unsafe(nil), scopes: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#261
  def _enum_methods_module; end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#269
  def assert_valid_enum_definition_values(values); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#288
  def detect_enum_conflict!(enum_name, method_name, klass_method = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#310
  def detect_negative_enum_conditions!(method_names); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#300
  def raise_conflict_error(enum_name, method_name, type: T.unsafe(nil), source: T.unsafe(nil)); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/enum.rb#115
    def extended(base); end
  end
end

class ActiveRecord::Enum::EnumType < ::ActiveModel::Type::Value
  # source://activerecord/7.0.4/lib/active_record/enum.rb#127
  def initialize(name, mapping, subtype); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#155
  def assert_valid_value(value); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#133
  def cast(value); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#143
  def deserialize(value); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#151
  def serializable?(value, &block); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#147
  def serialize(value); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#161
  def subtype; end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#125
  def type(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord/7.0.4/lib/active_record/enum.rb#164
  def mapping; end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#164
  def name; end
end

class ActiveRecord::ExclusiveConnectionTimeoutError < ::ActiveRecord::ConnectionTimeoutError; end

module ActiveRecord::Explain
  # source://activerecord/7.0.4/lib/active_record/explain.rb#9
  def collecting_queries_for_explain; end

  # source://activerecord/7.0.4/lib/active_record/explain.rb#19
  def exec_explain(queries); end

  private

  # source://activerecord/7.0.4/lib/active_record/explain.rb#39
  def render_bind(attr); end
end

class ActiveRecord::ExplainRegistry
  # source://activerecord/7.0.4/lib/active_record/explain_registry.rb#24
  def initialize; end

  # source://activerecord/7.0.4/lib/active_record/explain_registry.rb#21
  def collect; end

  # source://activerecord/7.0.4/lib/active_record/explain_registry.rb#21
  def collect=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/explain_registry.rb#28
  def collect?; end

  # source://activerecord/7.0.4/lib/active_record/explain_registry.rb#22
  def queries; end

  # source://activerecord/7.0.4/lib/active_record/explain_registry.rb#32
  def reset; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/explain_registry.rb#13
    def collect(*_arg0, **_arg1, &_arg2); end

    # source://activerecord/7.0.4/lib/active_record/explain_registry.rb#13
    def collect=(arg); end

    # source://activerecord/7.0.4/lib/active_record/explain_registry.rb#13
    def collect?(*_arg0, **_arg1, &_arg2); end

    # source://activerecord/7.0.4/lib/active_record/explain_registry.rb#13
    def queries(*_arg0, **_arg1, &_arg2); end

    # source://activerecord/7.0.4/lib/active_record/explain_registry.rb#13
    def reset(*_arg0, **_arg1, &_arg2); end

    private

    # source://activerecord/7.0.4/lib/active_record/explain_registry.rb#16
    def instance; end
  end
end

class ActiveRecord::ExplainSubscriber
  # source://activerecord/7.0.4/lib/active_record/explain_subscriber.rb#12
  def finish(name, id, payload); end

  # source://activerecord/7.0.4/lib/active_record/explain_subscriber.rb#25
  def ignore_payload?(payload); end

  # source://activerecord/7.0.4/lib/active_record/explain_subscriber.rb#8
  def start(name, id, payload); end
end

# source://activerecord/7.0.4/lib/active_record/explain_subscriber.rb#24
ActiveRecord::ExplainSubscriber::EXPLAINED_SQLS = T.let(T.unsafe(nil), Regexp)

# source://activerecord/7.0.4/lib/active_record/explain_subscriber.rb#23
ActiveRecord::ExplainSubscriber::IGNORED_PAYLOADS = T.let(T.unsafe(nil), Array)

module ActiveRecord::FinderMethods
  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#326
  def exists?(conditions = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#240
  def fifth; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#246
  def fifth!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#67
  def find(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#80
  def find_by(arg, *args); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#86
  def find_by!(arg, *args); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#129
  def find_sole_by(arg, *args); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#142
  def first(limit = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#152
  def first!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#256
  def forty_two; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#262
  def forty_two!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#224
  def fourth; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#230
  def fourth!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#352
  def include?(record); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#171
  def last(limit = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#182
  def last!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#352
  def member?(record); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#370
  def raise_record_not_found_exception!(ids = T.unsafe(nil), result_size = T.unsafe(nil), expected_size = T.unsafe(nil), key = T.unsafe(nil), not_found_ids = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#192
  def second; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#198
  def second!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#288
  def second_to_last; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#294
  def second_to_last!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#112
  def sole; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#97
  def take(limit = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#103
  def take!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#208
  def third; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#214
  def third!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#272
  def third_to_last; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#278
  def third_to_last!; end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#410
  def apply_join_dependency(eager_loading: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#391
  def construct_relation_for_exists(conditions); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#570
  def find_last(limit); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#532
  def find_nth(index); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#556
  def find_nth_from_last(index); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#537
  def find_nth_with_limit(index, limit); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#464
  def find_one(id); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#480
  def find_some(ids); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#504
  def find_some_ordered(ids); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#516
  def find_take; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#524
  def find_take_with_limit(limit); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#442
  def find_with_ids(*ids); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#574
  def ordered_relation; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#438
  def using_limitable_reflections?(reflections); end
end

# source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#7
ActiveRecord::FinderMethods::ONE_AS_ONE = T.let(T.unsafe(nil), String)

class ActiveRecord::FutureResult
  # source://activerecord/7.0.4/lib/active_record/future_result.rb#33
  def initialize(pool, *args, **kwargs); end

  # source://activerecord/7.0.4/lib/active_record/future_result.rb#57
  def cancel; end

  # source://activerecord/7.0.4/lib/active_record/future_result.rb#29
  def empty?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/future_result.rb#53
  def execute!(connection); end

  # source://activerecord/7.0.4/lib/active_record/future_result.rb#63
  def execute_or_skip; end

  # source://activerecord/7.0.4/lib/active_record/future_result.rb#31
  def lock_wait; end

  # source://activerecord/7.0.4/lib/active_record/future_result.rb#94
  def pending?; end

  # source://activerecord/7.0.4/lib/active_record/future_result.rb#81
  def result; end

  # source://activerecord/7.0.4/lib/active_record/future_result.rb#48
  def schedule!(session); end

  # source://activerecord/7.0.4/lib/active_record/future_result.rb#29
  def to_a(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord/7.0.4/lib/active_record/future_result.rb#99
  def canceled?; end

  # source://activerecord/7.0.4/lib/active_record/future_result.rb#126
  def exec_query(connection, *args, **kwargs); end

  # source://activerecord/7.0.4/lib/active_record/future_result.rb#103
  def execute_or_wait; end

  # source://activerecord/7.0.4/lib/active_record/future_result.rb#118
  def execute_query(connection, async: T.unsafe(nil)); end
end

class ActiveRecord::FutureResult::Canceled < ::ActiveRecord::ActiveRecordError; end

class ActiveRecord::FutureResult::EventBuffer
  # source://activerecord/7.0.4/lib/active_record/future_result.rb#6
  def initialize(future_result, instrumenter); end

  # source://activerecord/7.0.4/lib/active_record/future_result.rb#18
  def flush; end

  # source://activerecord/7.0.4/lib/active_record/future_result.rb#12
  def instrument(name, payload = T.unsafe(nil), &block); end
end

class ActiveRecord::FutureResult::SelectAll < ::ActiveRecord::FutureResult
  private

  # source://activerecord/7.0.4/lib/active_record/future_result.rb#132
  def exec_query(*_arg0, **_arg1); end
end

class ActiveRecord::HasManyThroughAssociationNotFoundError < ::ActiveRecord::ActiveRecordError
  include ::DidYouMean::Correctable

  # source://activerecord/7.0.4/lib/active_record/associations.rb#77
  def initialize(owner_class = T.unsafe(nil), reflection = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#90
  def corrections; end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#75
  def owner_class; end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#75
  def reflection; end
end

class ActiveRecord::HasManyThroughAssociationPointlessSourceTypeError < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/associations.rb#125
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil), source_reflection = T.unsafe(nil)); end
end

class ActiveRecord::HasManyThroughAssociationPolymorphicSourceError < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/associations.rb#105
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil), source_reflection = T.unsafe(nil)); end
end

class ActiveRecord::HasManyThroughAssociationPolymorphicThroughError < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/associations.rb#115
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil)); end
end

class ActiveRecord::HasManyThroughCantAssociateThroughHasOneOrManyReflection < ::ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection; end
class ActiveRecord::HasManyThroughNestedAssociationsAreReadonly < ::ActiveRecord::ThroughNestedAssociationsAreReadonly; end

class ActiveRecord::HasManyThroughOrderError < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/associations.rb#168
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil), through_reflection = T.unsafe(nil)); end
end

class ActiveRecord::HasManyThroughSourceAssociationNotFoundError < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/associations.rb#155
  def initialize(reflection = T.unsafe(nil)); end
end

class ActiveRecord::HasOneAssociationPolymorphicThroughError < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/associations.rb#145
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil)); end
end

class ActiveRecord::HasOneThroughCantAssociateThroughCollection < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/associations.rb#135
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil), through_reflection = T.unsafe(nil)); end
end

class ActiveRecord::HasOneThroughCantAssociateThroughHasOneOrManyReflection < ::ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection; end
class ActiveRecord::HasOneThroughNestedAssociationsAreReadonly < ::ActiveRecord::ThroughNestedAssociationsAreReadonly; end
class ActiveRecord::ImmutableRelation < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::Inheritance
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  private

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#343
  def ensure_proper_type; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#327
  def initialize_dup(other); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#333
  def initialize_internals_callback; end

  module GeneratedClassMethods
    def store_full_class_name; end
    def store_full_class_name=(value); end
    def store_full_class_name?; end
    def store_full_sti_class; end
    def store_full_sti_class=(value); end
    def store_full_sti_class?; end
  end

  module GeneratedInstanceMethods
    def store_full_class_name; end
    def store_full_class_name?; end
    def store_full_sti_class; end
    def store_full_sti_class?; end
  end
end

module ActiveRecord::Inheritance::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#153
  def abstract_class; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#153
  def abstract_class=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#156
  def abstract_class?; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#104
  def base_class; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#108
  def base_class?; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#81
  def descends_from_active_record?; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#219
  def dup; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#91
  def finder_needs_type_condition?; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#213
  def inherited(subclass); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#55
  def new(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#205
  def polymorphic_class_for(name); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#198
  def polymorphic_name; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#166
  def primary_abstract_class; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#183
  def sti_class_for(type_name); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#176
  def sti_name; end

  protected

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#235
  def compute_type(type_name); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#263
  def set_base_class; end

  private

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#283
  def discriminate_class_for_record(record); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#295
  def find_sti_class(type_name); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#227
  def initialize_clone(other); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#315
  def subclass_from_attributes(attrs); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#306
  def type_condition(table = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#291
  def using_single_table_inheritance?(record); end
end

class ActiveRecord::InsertAll
  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#10
  def initialize(model, inserts, on_duplicate:, update_only: T.unsafe(nil), returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#7
  def connection; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#37
  def execute; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#7
  def inserts; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#7
  def keys; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#80
  def keys_including_timestamps; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#61
  def map_key_with_value; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#7
  def model; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#8
  def on_duplicate; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#48
  def primary_keys; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#75
  def record_timestamps?; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#8
  def returning; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#53
  def skip_duplicates?; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#8
  def unique_by; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#44
  def updatable_columns; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#57
  def update_duplicates?; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#8
  def update_only; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#8
  def update_sql; end

  private

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#91
  def configure_on_duplicate_update_logic; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#105
  def custom_update_sql_provided?; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#172
  def disallow_raw_sql!(value); end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#133
  def ensure_valid_options_for_connection!; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#109
  def find_unique_index_for(unique_by); end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#157
  def readonly_columns; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#89
  def scope_attributes; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#181
  def timestamps_for_create; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#152
  def to_sql; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#161
  def unique_by_columns; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#128
  def unique_indexes; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#166
  def verify_attributes(attributes); end
end

class ActiveRecord::InsertAll::Builder
  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#190
  def initialize(insert_all); end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#219
  def conflict_target; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#194
  def into; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#188
  def keys(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#188
  def keys_including_timestamps(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#186
  def model; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#243
  def raw_update_sql; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#243
  def raw_update_sql?; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#188
  def record_timestamps?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#209
  def returning; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#188
  def skip_duplicates?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#233
  def touch_model_timestamps_unless(&block); end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#229
  def updatable_columns; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#188
  def update_duplicates?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#198
  def values_list; end

  private

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#256
  def columns_list; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#250
  def connection; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#260
  def extract_types_from_columns_on(table_name, keys:); end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#269
  def format_columns(columns); end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#250
  def insert_all; end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#273
  def quote_columns(columns); end

  # source://activerecord/7.0.4/lib/active_record/insert_all.rb#252
  def touch_timestamp_attribute?(column_name); end
end

module ActiveRecord::Integration
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Integration::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/integration.rb#72
  def cache_key; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#114
  def cache_key_with_version; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#97
  def cache_version; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#57
  def to_param; end

  private

  # source://activerecord/7.0.4/lib/active_record/integration.rb#178
  def can_use_fast_cache_version?(timestamp); end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#197
  def raw_timestamp_to_cache_version(timestamp); end

  module GeneratedClassMethods
    def cache_timestamp_format; end
    def cache_timestamp_format=(value); end
    def cache_timestamp_format?; end
    def cache_versioning; end
    def cache_versioning=(value); end
    def cache_versioning?; end
    def collection_cache_versioning; end
    def collection_cache_versioning=(value); end
    def collection_cache_versioning?; end
  end

  module GeneratedInstanceMethods
    def cache_timestamp_format; end
    def cache_timestamp_format?; end
    def cache_versioning; end
    def cache_versioning?; end
    def collection_cache_versioning; end
    def collection_cache_versioning?; end
  end
end

module ActiveRecord::Integration::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/integration.rb#163
  def collection_cache_key(collection = T.unsafe(nil), timestamp_column = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#147
  def to_param(method_name = T.unsafe(nil)); end
end

class ActiveRecord::InternalMetadata < ::ActiveRecord::Base
  include ::ActiveRecord::InternalMetadata::GeneratedAttributeMethods
  include ::ActiveRecord::InternalMetadata::GeneratedAssociationMethods

  class << self
    # source://activerecord/7.0.4/lib/active_record/internal_metadata.rb#34
    def [](key); end

    # source://activerecord/7.0.4/lib/active_record/internal_metadata.rb#28
    def []=(key, value); end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.4/lib/active_record/internal_metadata.rb#41
    def create_table; end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums; end

    # source://activerecord/7.0.4/lib/active_record/internal_metadata.rb#53
    def drop_table; end

    # source://activerecord/7.0.4/lib/active_record/internal_metadata.rb#16
    def enabled?; end

    # source://activerecord/7.0.4/lib/active_record/internal_metadata.rb#20
    def primary_key; end

    # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
    def record_timestamps; end

    # source://activerecord/7.0.4/lib/active_record/internal_metadata.rb#24
    def table_name; end
  end
end

module ActiveRecord::InternalMetadata::GeneratedAssociationMethods; end
module ActiveRecord::InternalMetadata::GeneratedAttributeMethods; end
class ActiveRecord::InvalidForeignKey < ::ActiveRecord::WrappedDatabaseException; end

class ActiveRecord::InverseOfAssociationNotFoundError < ::ActiveRecord::ActiveRecordError
  include ::DidYouMean::Correctable

  # source://activerecord/7.0.4/lib/active_record/associations.rb#36
  def initialize(reflection = T.unsafe(nil), associated_class = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#34
  def associated_class; end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#49
  def corrections; end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#34
  def reflection; end
end

class ActiveRecord::InverseOfAssociationRecursiveError < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/associations.rb#64
  def initialize(reflection = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#63
  def reflection; end
end

class ActiveRecord::IrreversibleOrderError < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::LegacyYamlAdapter
  class << self
    # source://activerecord/7.0.4/lib/active_record/legacy_yaml_adapter.rb#5
    def convert(coder); end
  end
end

class ActiveRecord::LockWaitTimeout < ::ActiveRecord::StatementInvalid; end

module ActiveRecord::Locking
  extend ::ActiveSupport::Autoload
end

class ActiveRecord::Locking::LockingType
  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#196
  def deserialize(value); end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#208
  def encode_with(coder); end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#204
  def init_with(coder); end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#200
  def serialize(value); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#192
    def new(subtype); end
  end
end

module ActiveRecord::Locking::Optimistic
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Locking::Optimistic::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#63
  def increment!(*_arg0, **_arg1); end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#59
  def locking_enabled?; end

  private

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#73
  def _create_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#137
  def _lock_value_for_database(locking_column); end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#82
  def _touch_row(attribute_names, time); end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#87
  def _update_row(attribute_names, attempted_action = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#120
  def destroy_row; end

  module GeneratedClassMethods
    def lock_optimistically; end
    def lock_optimistically=(value); end
    def lock_optimistically?; end
  end

  module GeneratedInstanceMethods
    def lock_optimistically; end
    def lock_optimistically?; end
  end
end

module ActiveRecord::Locking::Optimistic::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#179
  def define_attribute(name, cast_type, **_arg2); end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#162
  def locking_column; end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#156
  def locking_column=(value); end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#151
  def locking_enabled?; end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#168
  def reset_locking_column; end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#174
  def update_counters(id, counters); end
end

# source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#146
ActiveRecord::Locking::Optimistic::ClassMethods::DEFAULT_LOCKING_COLUMN = T.let(T.unsafe(nil), String)

module ActiveRecord::Locking::Pessimistic
  # source://activerecord/7.0.4/lib/active_record/locking/pessimistic.rb#67
  def lock!(lock = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/locking/pessimistic.rb#89
  def with_lock(*args); end
end

class ActiveRecord::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#7
  def backtrace_cleaner; end

  # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#7
  def backtrace_cleaner=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#7
  def backtrace_cleaner?; end

  # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#30
  def sql(event); end

  # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#22
  def strict_loading_violation(event); end

  private

  # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#94
  def colorize_payload_name(name, payload_name); end

  # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#127
  def debug(progname = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#143
  def extract_query_source_location(locations); end

  # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#147
  def filter(name, value); end

  # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#135
  def log_query_source; end

  # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#123
  def logger; end

  # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#79
  def render_bind(attr, value); end

  # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#102
  def sql_color(sql); end

  # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#75
  def type_casted_binds(casted_binds); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#7
    def backtrace_cleaner; end

    # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#7
    def backtrace_cleaner=(value); end

    # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#7
    def backtrace_cleaner?; end

    # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#17
    def reset_runtime; end

    # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#13
    def runtime; end

    # source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#9
    def runtime=(value); end
  end
end

# source://activerecord/7.0.4/lib/active_record/log_subscriber.rb#5
ActiveRecord::LogSubscriber::IGNORE_PAYLOAD_NAMES = T.let(T.unsafe(nil), Array)

module ActiveRecord::Middleware
  extend ::ActiveSupport::Autoload
end

class ActiveRecord::Middleware::DatabaseSelector
  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector.rb#50
  def initialize(app, resolver_klass = T.unsafe(nil), context_klass = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector.rb#61
  def call(env); end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector.rb#57
  def context_klass; end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector.rb#57
  def options; end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector.rb#57
  def resolver_klass; end

  private

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector.rb#84
  def reading_request?(request); end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector.rb#70
  def select_database(request, &blk); end
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver
  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver.rb#26
  def initialize(context, options = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver.rb#33
  def context; end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver.rb#33
  def delay; end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver.rb#33
  def instrumenter; end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver.rb#35
  def read(&blk); end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver.rb#47
  def update_context(response); end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver.rb#43
  def write(&blk); end

  private

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver.rb#52
  def read_from_primary(&blk); end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver.rb#74
  def read_from_primary?; end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver.rb#58
  def read_from_replica(&blk); end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver.rb#78
  def send_to_replica_delay; end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver.rb#82
  def time_since_last_write_ok?; end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver.rb#64
  def write_to_primary; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver.rb#22
    def call(context, options = T.unsafe(nil)); end
  end
end

# source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver.rb#20
ActiveRecord::Middleware::DatabaseSelector::Resolver::SEND_TO_REPLICA_DELAY = T.let(T.unsafe(nil), ActiveSupport::Duration)

class ActiveRecord::Middleware::DatabaseSelector::Resolver::Session
  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver/session.rb#28
  def initialize(session); end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver/session.rb#34
  def last_write_timestamp; end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver/session.rb#42
  def save(response); end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver/session.rb#32
  def session; end

  # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver/session.rb#38
  def update_last_write_timestamp; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver/session.rb#13
    def call(request); end

    # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver/session.rb#19
    def convert_time_to_timestamp(time); end

    # source://activerecord/7.0.4/lib/active_record/middleware/database_selector/resolver/session.rb#24
    def convert_timestamp_to_time(timestamp); end
  end
end

class ActiveRecord::Middleware::ShardSelector
  # source://activerecord/7.0.4/lib/active_record/middleware/shard_selector.rb#30
  def initialize(app, resolver, options = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/middleware/shard_selector.rb#38
  def call(env); end

  # source://activerecord/7.0.4/lib/active_record/middleware/shard_selector.rb#36
  def options; end

  # source://activerecord/7.0.4/lib/active_record/middleware/shard_selector.rb#36
  def resolver; end

  private

  # source://activerecord/7.0.4/lib/active_record/middleware/shard_selector.rb#49
  def selected_shard(request); end

  # source://activerecord/7.0.4/lib/active_record/middleware/shard_selector.rb#53
  def set_shard(shard, &block); end
end

class ActiveRecord::Migration
  # source://activerecord/7.0.4/lib/active_record/migration.rb#684
  def initialize(name = T.unsafe(nil), version = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#883
  def announce(message); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#914
  def connection; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#937
  def copy(destination, sources, options = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#677
  def disable_ddl_transaction; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#836
  def down; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#864
  def exec_migration(conn, direction); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#918
  def method_missing(method, *arguments, **_arg2, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#843
  def migrate(direction); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#682
  def name; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#682
  def name=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1003
  def next_migration_number(number); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#994
  def proper_table_name(name, options = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#788
  def reversible; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#731
  def revert(*migration_classes, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#748
  def reverting?; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#816
  def run(*migration_classes); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#891
  def say(message, subitem = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#897
  def say_with_time(message); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#907
  def suppress_messages; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1013
  def table_name_options(config = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#830
  def up; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#807
  def up_only(&block); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#681
  def verbose; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#681
  def verbose=(val); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#682
  def version; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#682
  def version=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#879
  def write(text = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1029
  def command_recorder; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1021
  def execute_block; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/migration.rb#568
    def [](version); end

    # source://activerecord/7.0.4/lib/active_record/migration.rb#626
    def check_pending!(connection = T.unsafe(nil)); end

    # source://activerecord/7.0.4/lib/active_record/migration.rb#572
    def current_version; end

    # source://activerecord/7.0.4/lib/active_record/migration.rb#618
    def delegate; end

    # source://activerecord/7.0.4/lib/active_record/migration.rb#618
    def delegate=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record/migration.rb#619
    def disable_ddl_transaction; end

    # source://activerecord/7.0.4/lib/active_record/migration.rb#672
    def disable_ddl_transaction!; end

    # source://activerecord/7.0.4/lib/active_record/migration.rb#619
    def disable_ddl_transaction=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record/migration.rb#556
    def inherited(subclass); end

    # source://activerecord/7.0.4/lib/active_record/migration.rb#630
    def load_schema_if_pending!; end

    # source://activerecord/7.0.4/lib/active_record/migration.rb#653
    def maintain_test_schema!; end

    # source://activerecord/7.0.4/lib/active_record/migration.rb#659
    def method_missing(name, *args, **_arg2, &block); end

    # source://activerecord/7.0.4/lib/active_record/migration.rb#664
    def migrate(direction); end

    # source://activerecord/7.0.4/lib/active_record/migration.rb#621
    def nearest_delegate; end

    # source://activerecord/7.0.4/lib/active_record/migration.rb#681
    def verbose; end

    # source://activerecord/7.0.4/lib/active_record/migration.rb#681
    def verbose=(val); end
  end
end

class ActiveRecord::Migration::CheckPending
  # source://activerecord/7.0.4/lib/active_record/migration.rb#581
  def initialize(app, file_watcher: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#588
  def call(env); end

  private

  # source://activerecord/7.0.4/lib/active_record/migration.rb#607
  def build_watcher(&block); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#612
  def connection; end
end

class ActiveRecord::Migration::CommandRecorder
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::Migration::CommandRecorder::StraightReversions

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#51
  def initialize(delegate = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def add_belongs_to(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def add_check_constraint(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def add_column(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def add_foreign_key(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def add_index(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def add_reference(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def add_timestamps(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def change_column(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def change_column_comment(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def change_column_default(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def change_column_null(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#120
  def change_table(table_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def change_table_comment(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#49
  def commands; end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#49
  def commands=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def create_join_table(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def create_table(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#49
  def delegate; end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#49
  def delegate=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def disable_extension(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def drop_join_table(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def drop_table(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def enable_extension(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def execute(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def execute_block(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#98
  def inverse_of(command, args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_add_belongs_to(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_remove_belongs_to(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#78
  def record(*command, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def remove_belongs_to(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def remove_check_constraint(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def remove_column(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def remove_columns(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def remove_foreign_key(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def remove_index(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def remove_reference(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def remove_timestamps(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def rename_column(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def rename_index(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def rename_table(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#124
  def replay(migration); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#64
  def revert; end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#49
  def reverting; end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#49
  def reverting=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#111
  def transaction(*args, **_arg1, &block); end

  private

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#252
  def invert_change_column_comment(args); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#223
  def invert_change_column_default(args); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#233
  def invert_change_column_null(args); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#262
  def invert_change_table_comment(args); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#168
  def invert_drop_table(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#272
  def invert_remove_check_constraint(args); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#179
  def invert_remove_column(args); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#184
  def invert_remove_columns(args); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#238
  def invert_remove_foreign_key(args); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#202
  def invert_remove_index(args); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#197
  def invert_rename_column(args); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#192
  def invert_rename_index(args); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#175
  def invert_rename_table(args); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#157
  def invert_transaction(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#282
  def method_missing(method, *args, **_arg2, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#277
  def respond_to_missing?(method, _); end
end

# source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#37
ActiveRecord::Migration::CommandRecorder::ReversibleAndIrreversibleMethods = T.let(T.unsafe(nil), Array)

module ActiveRecord::Migration::CommandRecorder::StraightReversions
  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_add_check_constraint(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_add_column(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_add_foreign_key(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_add_index(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_add_reference(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_add_timestamps(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_create_join_table(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_create_table(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_disable_extension(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_drop_join_table(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_drop_table(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_enable_extension(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_execute_block(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_remove_check_constraint(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_remove_column(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_remove_foreign_key(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_remove_index(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_remove_reference(args, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration/command_recorder.rb#147
  def invert_remove_timestamps(args, &block); end
end

module ActiveRecord::Migration::Compatibility
  class << self
    # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#6
    def find(version); end
  end
end

class ActiveRecord::Migration::Compatibility::V4_2 < ::ActiveRecord::Migration::Compatibility::V5_0
  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#324
  def add_belongs_to(table_name, ref_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#324
  def add_reference(table_name, ref_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#330
  def add_timestamps(table_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#335
  def index_exists?(table_name, column_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#346
  def remove_index(table_name, column_name = T.unsafe(nil), **options); end

  private

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#352
  def compatible_table_definition(t); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#359
  def index_name_for_remove(table_name, column_name, options); end
end

module ActiveRecord::Migration::Compatibility::V4_2::TableDefinition
  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#312
  def belongs_to(*_arg0, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#312
  def references(*_arg0, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#318
  def timestamps(**options); end
end

class ActiveRecord::Migration::Compatibility::V5_0 < ::ActiveRecord::Migration::Compatibility::V5_1
  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#296
  def add_belongs_to(table_name, ref_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#286
  def add_column(table_name, column_name, type, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#296
  def add_reference(table_name, ref_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#281
  def create_join_table(table_1, table_2, column_options: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#258
  def create_table(table_name, **options); end

  private

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#302
  def compatible_table_definition(t); end
end

module ActiveRecord::Migration::Compatibility::V5_0::TableDefinition
  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#252
  def belongs_to(*args, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#247
  def primary_key(name, type = T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#252
  def references(*args, **options); end
end

class ActiveRecord::Migration::Compatibility::V5_1 < ::ActiveRecord::Migration::Compatibility::V5_2
  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#225
  def change_column(table_name, column_name, type, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#236
  def create_table(table_name, **options); end
end

class ActiveRecord::Migration::Compatibility::V5_2 < ::ActiveRecord::Migration::Compatibility::V6_0
  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#202
  def add_timestamps(table_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#186
  def change_table(table_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#194
  def create_join_table(table_1, table_2, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#178
  def create_table(table_name, **options); end

  private

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#215
  def command_recorder; end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#208
  def compatible_table_definition(t); end
end

module ActiveRecord::Migration::Compatibility::V5_2::CommandRecorder
  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#169
  def invert_change_column_comment(args); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#173
  def invert_change_table_comment(args); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#165
  def invert_transaction(args, &block); end
end

module ActiveRecord::Migration::Compatibility::V5_2::TableDefinition
  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#158
  def column(name, type, index: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#153
  def timestamps(**options); end
end

class ActiveRecord::Migration::Compatibility::V6_0 < ::ActiveRecord::Migration::Compatibility::V6_1
  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#132
  def add_belongs_to(table_name, ref_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#132
  def add_reference(table_name, ref_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#116
  def change_table(table_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#124
  def create_join_table(table_1, table_2, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#108
  def create_table(table_name, **options); end

  private

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#143
  def compatible_table_definition(t); end
end

class ActiveRecord::Migration::Compatibility::V6_0::ReferenceDefinition < ::ActiveRecord::ConnectionAdapters::ReferenceDefinition
  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#90
  def index_options(table_name); end
end

module ActiveRecord::Migration::Compatibility::V6_0::TableDefinition
  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#96
  def belongs_to(*args, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#102
  def column(name, type, index: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#96
  def references(*args, **options); end
end

class ActiveRecord::Migration::Compatibility::V6_1 < ::ActiveRecord::Migration::Current
  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#50
  def add_column(table_name, column_name, type, **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#59
  def create_table(table_name, **options); end

  private

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#80
  def compatible_table_definition(t); end
end

class ActiveRecord::Migration::Compatibility::V6_1::PostgreSQLCompat
  class << self
    # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#37
    def compatible_timestamp_type(type, connection); end
  end
end

module ActiveRecord::Migration::Compatibility::V6_1::TableDefinition
  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#73
  def column(name, type, index: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#68
  def new_column_definition(name, type, **options); end
end

# source://activerecord/7.0.4/lib/active_record/migration/compatibility.rb#33
ActiveRecord::Migration::Compatibility::V7_0 = ActiveRecord::Migration::Current

class ActiveRecord::Migration::Current < ::ActiveRecord::Migration; end

module ActiveRecord::Migration::JoinTable
  private

  # source://activerecord/7.0.4/lib/active_record/migration/join_table.rb#7
  def find_join_table_name(table_1, table_2, options = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/migration/join_table.rb#11
  def join_table_name(table_1, table_2); end
end

# source://activerecord/7.0.4/lib/active_record/migration.rb#576
ActiveRecord::Migration::MigrationFilenameRegexp = T.let(T.unsafe(nil), Regexp)

class ActiveRecord::Migration::ReversibleBlockHelper < ::Struct
  # source://activerecord/7.0.4/lib/active_record/migration.rb#757
  def down; end

  def reverting; end
  def reverting=(_); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#753
  def up; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::Migrator
  # source://activerecord/7.0.4/lib/active_record/migration.rb#1250
  def initialize(direction, migrations, schema_migration, target_version = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1267
  def current; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1267
  def current_migration; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1263
  def current_version; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1312
  def load_migrated; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1280
  def migrate; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1308
  def migrated; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1299
  def migrations; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1303
  def pending_migrations; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1272
  def run; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1288
  def runnable; end

  private

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1409
  def ddl_transaction(migration, &block); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1404
  def down?; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1353
  def execute_migration_in_transaction(migration); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1374
  def finish; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1453
  def generate_migrator_advisory_lock_id; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1349
  def invalid_target?; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1328
  def migrate_without_lock; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1344
  def ran?(migration); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1339
  def record_environment; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1390
  def record_version_state_after_migrating(version); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1318
  def run_without_lock; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1378
  def start; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1370
  def target; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1400
  def up?; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1421
  def use_advisory_lock?; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1417
  def use_transaction?(migration); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1382
  def validate(migrations); end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1425
  def with_advisory_lock; end

  # source://activerecord/7.0.4/lib/active_record/migration.rb#1442
  def with_advisory_lock_connection(&block); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/migration.rb#1243
    def current_version; end

    # source://activerecord/7.0.4/lib/active_record/migration.rb#1240
    def migrations_paths; end

    # source://activerecord/7.0.4/lib/active_record/migration.rb#1240
    def migrations_paths=(_arg0); end
  end
end

# source://activerecord/7.0.4/lib/active_record/migration.rb#1452
ActiveRecord::Migrator::MIGRATOR_SALT = T.let(T.unsafe(nil), Integer)

class ActiveRecord::MismatchedForeignKey < ::ActiveRecord::StatementInvalid
  # source://activerecord/7.0.4/lib/active_record/errors.rb#184
  def initialize(message: T.unsafe(nil), sql: T.unsafe(nil), binds: T.unsafe(nil), table: T.unsafe(nil), foreign_key: T.unsafe(nil), target_table: T.unsafe(nil), primary_key: T.unsafe(nil), primary_key_column: T.unsafe(nil)); end
end

module ActiveRecord::ModelSchema
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::ModelSchema::ClassMethods

  class << self
    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#183
    def derive_join_table_name(first_table, second_table); end
  end

  module GeneratedClassMethods
    def immutable_strings_by_default; end
    def immutable_strings_by_default=(value); end
    def immutable_strings_by_default?; end
    def implicit_order_column; end
    def implicit_order_column=(value); end
    def implicit_order_column?; end
    def inheritance_column; end
    def inheritance_column=(value); end
    def inheritance_column?; end
    def internal_metadata_table_name; end
    def internal_metadata_table_name=(value); end
    def internal_metadata_table_name?; end
    def pluralize_table_names; end
    def pluralize_table_names=(value); end
    def pluralize_table_names?; end
    def primary_key_prefix_type; end
    def primary_key_prefix_type=(value); end
    def primary_key_prefix_type?; end
    def schema_migrations_table_name; end
    def schema_migrations_table_name=(value); end
    def schema_migrations_table_name?; end
    def table_name_prefix; end
    def table_name_prefix=(value); end
    def table_name_prefix?; end
    def table_name_suffix; end
    def table_name_suffix=(value); end
    def table_name_suffix?; end
  end

  module GeneratedInstanceMethods
    def pluralize_table_names; end
    def pluralize_table_names?; end
    def primary_key_prefix_type; end
    def primary_key_prefix_type?; end
    def table_name_prefix; end
    def table_name_prefix?; end
    def table_name_suffix; end
    def table_name_suffix?; end
  end
end

module ActiveRecord::ModelSchema::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#486
  def _default_attributes; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#428
  def attribute_types; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#410
  def attributes_builder; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#481
  def column_defaults; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#472
  def column_for_attribute(name); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#492
  def column_names; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#423
  def columns; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#418
  def columns_hash; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#503
  def content_columns; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#288
  def full_table_name_prefix; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#292
  def full_table_name_suffix; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#317
  def ignored_columns; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#356
  def ignored_columns=(columns); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#401
  def next_sequence_value; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#395
  def prefetch_primary_key?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#298
  def protected_environments; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#307
  def protected_environments=(environments); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#273
  def quoted_table_name; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#311
  def real_inheritance_column=(value); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#537
  def reset_column_information; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#369
  def reset_sequence_name; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#278
  def reset_table_name; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#361
  def sequence_name; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#388
  def sequence_name=(value); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#496
  def symbol_column_to_string(name_symbol); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#406
  def table_exists?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#247
  def table_name; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#257
  def table_name=(value); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#448
  def type_for_attribute(attr_name, &block); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#433
  def yaml_encoder; end

  protected

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#547
  def initialize_load_schema_monitor; end

  private

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#637
  def _convert_type_from_options(type); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#621
  def compute_table_name; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#552
  def inherited(child_class); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#561
  def load_schema; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#575
  def load_schema!; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#595
  def reload_schema_from_cache; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#557
  def schema_loaded?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#615
  def undecorated_table_name(model_name); end
end

class ActiveRecord::MultiparameterAssignmentErrors < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/errors.rb#369
  def initialize(errors = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/errors.rb#367
  def errors; end
end

module ActiveRecord::NestedAttributes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::NestedAttributes::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#383
  def _destroy; end

  private

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#588
  def allow_destroy?(association_name); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#464
  def assign_nested_attributes_for_collection_association(association_name, attributes_collection); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#405
  def assign_nested_attributes_for_one_to_one_association(association_name, attributes); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#550
  def assign_to_or_mark_for_destruction(record, attributes, allow_destroy); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#572
  def call_reject_if(association_name, attributes); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#530
  def check_record_limit!(limit, attributes_collection); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#556
  def has_destroy_flag?(hash); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#592
  def raise_nested_attributes_record_not_found!(association_name, record_id); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#563
  def reject_new_record?(association_name, attributes); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#584
  def will_be_destroyed?(association_name, attributes); end

  module GeneratedClassMethods
    def nested_attributes_options; end
    def nested_attributes_options=(value); end
    def nested_attributes_options?; end
  end

  module GeneratedInstanceMethods
    def nested_attributes_options; end
    def nested_attributes_options?; end
  end
end

module ActiveRecord::NestedAttributes::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#333
  def accepts_nested_attributes_for(*attr_names); end

  private

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#368
  def generate_association_writer(association_name, type); end
end

# source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#284
ActiveRecord::NestedAttributes::ClassMethods::REJECT_ALL_BLANK_PROC = T.let(T.unsafe(nil), Proc)

class ActiveRecord::NestedAttributes::TooManyRecords < ::ActiveRecord::ActiveRecordError; end

# source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#390
ActiveRecord::NestedAttributes::UNASSIGNABLE_KEYS = T.let(T.unsafe(nil), Array)

class ActiveRecord::NoDatabaseError < ::ActiveRecord::StatementInvalid
  include ::ActiveSupport::ActionableError
  extend ::ActiveSupport::ActionableError::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/errors.rb#245
  def initialize(message = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/actionable_error.rb#15
  def _actions; end

  # source://activesupport/7.0.4/lib/active_support/actionable_error.rb#15
  def _actions=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/actionable_error.rb#15
  def _actions?; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/actionable_error.rb#15
    def _actions; end

    # source://activesupport/7.0.4/lib/active_support/actionable_error.rb#15
    def _actions=(value); end

    # source://activesupport/7.0.4/lib/active_support/actionable_error.rb#15
    def _actions?; end

    # source://activerecord/7.0.4/lib/active_record/errors.rb#250
    def db_error(db_name); end
  end
end

module ActiveRecord::NoTouching
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::NoTouching::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/no_touching.rb#53
  def no_touching?; end

  # source://activerecord/7.0.4/lib/active_record/no_touching.rb#61
  def touch(*_arg0, **_arg1); end

  # source://activerecord/7.0.4/lib/active_record/no_touching.rb#57
  def touch_later(*_arg0); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/no_touching.rb#36
    def applied_to?(klass); end

    # source://activerecord/7.0.4/lib/active_record/no_touching.rb#29
    def apply_to(klass); end

    private

    # source://activerecord/7.0.4/lib/active_record/no_touching.rb#41
    def klasses; end
  end
end

module ActiveRecord::NoTouching::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/no_touching.rb#23
  def no_touching(&block); end
end

class ActiveRecord::NotNullViolation < ::ActiveRecord::StatementInvalid; end

module ActiveRecord::NullRelation
  # source://activerecord/7.0.4/lib/active_record/null_relation.rb#29
  def any?; end

  # source://activerecord/7.0.4/lib/active_record/null_relation.rb#41
  def calculate(operation, _column_name); end

  # source://activerecord/7.0.4/lib/active_record/null_relation.rb#17
  def delete(_id_or_array); end

  # source://activerecord/7.0.4/lib/active_record/null_relation.rb#9
  def delete_all; end

  # source://activerecord/7.0.4/lib/active_record/null_relation.rb#21
  def empty?; end

  # source://activerecord/7.0.4/lib/active_record/null_relation.rb#50
  def exists?(_conditions = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/null_relation.rb#37
  def many?; end

  # source://activerecord/7.0.4/lib/active_record/null_relation.rb#25
  def none?; end

  # source://activerecord/7.0.4/lib/active_record/null_relation.rb#33
  def one?; end

  # source://activerecord/7.0.4/lib/active_record/null_relation.rb#54
  def or(other); end

  # source://activerecord/7.0.4/lib/active_record/null_relation.rb#5
  def pluck(*column_names); end

  # source://activerecord/7.0.4/lib/active_record/null_relation.rb#13
  def update_all(_updates); end

  private

  # source://activerecord/7.0.4/lib/active_record/null_relation.rb#59
  def exec_main_query(async: T.unsafe(nil)); end
end

module ActiveRecord::Persistence
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Persistence::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#711
  def becomes(klass); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#731
  def becomes!(klass); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#856
  def decrement(attribute, by = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#866
  def decrement!(attribute, by = T.unsafe(nil), touch: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#663
  def delete; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#676
  def destroy; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#695
  def destroy!; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#579
  def destroyed?; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#833
  def increment(attribute, by = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#845
  def increment!(attribute, by = T.unsafe(nil), touch: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#562
  def new_record?; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#585
  def persisted?; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#569
  def previously_new_record?; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#574
  def previously_persisted?; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#943
  def reload(options = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#614
  def save(**options, &block); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#647
  def save!(**options, &block); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#882
  def toggle(attribute); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#891
  def toggle!(attribute); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#993
  def touch(*names, time: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#764
  def update(attributes); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#775
  def update!(attributes); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#753
  def update_attribute(name, value); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#785
  def update_column(name, value); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#805
  def update_columns(attributes); end

  private

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1093
  def _create_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1043
  def _delete_row; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1018
  def _find_record(options); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1031
  def _primary_key_constraints_hash; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1122
  def _raise_readonly_record_error; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1114
  def _raise_record_not_destroyed; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1126
  def _raise_record_not_touched_error; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1047
  def _touch_row(attribute_names, time); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1073
  def _update_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1057
  def _update_row(attribute_names, attempted_action = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1026
  def apply_scoping?(options); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1135
  def belongs_to_touch_method; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1064
  def create_or_update(**_arg0, &block); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1036
  def destroy_associations; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1039
  def destroy_row; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1012
  def strict_loaded_associations; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1110
  def verify_readonly_attribute(name); end
end

module ActiveRecord::Persistence::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/persistence.rb#516
  def _delete_record(constraints); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#477
  def _insert_record(values); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#499
  def _update_record(values, constraints); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#33
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#50
  def create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#473
  def delete(id_or_array); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#447
  def destroy(id); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#66
  def insert(attributes, returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#155
  def insert!(attributes, returning: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#145
  def insert_all(attributes, returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#212
  def insert_all!(attributes, returning: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#346
  def instantiate(attributes, column_types = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#378
  def update(id = T.unsafe(nil), attributes); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#404
  def update!(id = T.unsafe(nil), attributes); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#222
  def upsert(attributes, on_duplicate: T.unsafe(nil), returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#332
  def upsert_all(attributes, on_duplicate: T.unsafe(nil), update_only: T.unsafe(nil), returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#552
  def build_default_constraint; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#545
  def discriminate_class_for_record(record); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#535
  def instantiate_instance_of(klass, attributes, column_types = T.unsafe(nil), &block); end
end

class ActiveRecord::PredicateBuilder
  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder.rb#12
  def initialize(table); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder.rb#53
  def [](attr_name, value, operator = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder.rb#57
  def build(attribute, value, operator = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder.rb#67
  def build_bind_attribute(column_name, value); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder.rb#23
  def build_from_hash(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder.rb#49
  def register_handler(klass, handler); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder.rb#71
  def resolve_arel_attribute(table_name, column_name, &block); end

  protected

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder.rb#76
  def expand_from_hash(attributes, &block); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder.rb#144
  def convert_dot_notation_to_hash(attributes); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder.rb#134
  def grouping_queries(queries); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder.rb#160
  def handler_for(object); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder.rb#132
  def table; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder.rb#28
    def references(attributes); end
  end
end

class ActiveRecord::PredicateBuilder::ArrayHandler
  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/array_handler.rb#8
  def initialize(predicate_builder); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/array_handler.rb#12
  def call(attribute, value); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/array_handler.rb#39
  def predicate_builder; end
end

module ActiveRecord::PredicateBuilder::ArrayHandler::NullPredicate
  class << self
    # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/array_handler.rb#42
    def or(other); end
  end
end

class ActiveRecord::PredicateBuilder::AssociationQueryValue
  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/association_query_value.rb#6
  def initialize(associated_table, value); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/association_query_value.rb#11
  def queries; end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/association_query_value.rb#16
  def associated_table; end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/association_query_value.rb#33
  def convert_to_id(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/association_query_value.rb#18
  def ids; end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/association_query_value.rb#29
  def primary_key; end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/association_query_value.rb#16
  def value; end
end

class ActiveRecord::PredicateBuilder::BasicObjectHandler
  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/basic_object_handler.rb#6
  def initialize(predicate_builder); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/basic_object_handler.rb#10
  def call(attribute, value); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/basic_object_handler.rb#16
  def predicate_builder; end
end

class ActiveRecord::PredicateBuilder::PolymorphicArrayValue
  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#6
  def initialize(associated_table, values); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#11
  def queries; end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#23
  def associated_table; end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#45
  def convert_to_id(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#36
  def klass(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#32
  def primary_key(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#25
  def type_to_ids_mapping; end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/polymorphic_array_value.rb#23
  def values; end
end

class ActiveRecord::PredicateBuilder::RangeHandler
  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/range_handler.rb#8
  def initialize(predicate_builder); end

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/range_handler.rb#12
  def call(attribute, value); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/range_handler.rb#19
  def predicate_builder; end
end

class ActiveRecord::PredicateBuilder::RangeHandler::RangeWithBinds < ::Struct
  def begin; end
  def begin=(_); end
  def end; end
  def end=(_); end
  def exclude_end?; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::PredicateBuilder::RelationHandler
  # source://activerecord/7.0.4/lib/active_record/relation/predicate_builder/relation_handler.rb#6
  def call(attribute, value); end
end

class ActiveRecord::PreparedStatementCacheExpired < ::ActiveRecord::StatementInvalid; end
class ActiveRecord::PreparedStatementInvalid < ::ActiveRecord::ActiveRecordError; end
class ActiveRecord::QueryAborted < ::ActiveRecord::StatementInvalid; end

class ActiveRecord::QueryCache
  class << self
    # source://activerecord/7.0.4/lib/active_record/query_cache.rb#42
    def complete(pools); end

    # source://activerecord/7.0.4/lib/active_record/query_cache.rb#58
    def install_executor_hooks(executor = T.unsafe(nil)); end

    # source://activerecord/7.0.4/lib/active_record/query_cache.rb#28
    def run; end
  end
end

module ActiveRecord::QueryCache::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/query_cache.rb#9
  def cache(&block); end

  # source://activerecord/7.0.4/lib/active_record/query_cache.rb#19
  def uncached(&block); end
end

class ActiveRecord::QueryCanceled < ::ActiveRecord::QueryAborted; end

module ActiveRecord::QueryLogs
  class << self
    # source://activerecord/7.0.4/lib/active_record/query_logs.rb#75
    def cache_query_log_tags; end

    # source://activerecord/7.0.4/lib/active_record/query_logs.rb#75
    def cache_query_log_tags=(val); end

    # source://activesupport/7.0.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#48
    def cached_comment; end

    # source://activesupport/7.0.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#92
    def cached_comment=(obj); end

    # source://activerecord/7.0.4/lib/active_record/query_logs.rb#79
    def call(sql); end

    # source://activerecord/7.0.4/lib/active_record/query_logs.rb#87
    def clear_cache; end

    # source://activerecord/7.0.4/lib/active_record/query_logs.rb#74
    def prepend_comment; end

    # source://activerecord/7.0.4/lib/active_record/query_logs.rb#74
    def prepend_comment=(val); end

    # source://activerecord/7.0.4/lib/active_record/query_logs.rb#72
    def taggings; end

    # source://activerecord/7.0.4/lib/active_record/query_logs.rb#72
    def taggings=(val); end

    # source://activerecord/7.0.4/lib/active_record/query_logs.rb#73
    def tags; end

    # source://activerecord/7.0.4/lib/active_record/query_logs.rb#73
    def tags=(val); end

    private

    # source://activerecord/7.0.4/lib/active_record/query_logs.rb#96
    def comment; end

    # source://activerecord/7.0.4/lib/active_record/query_logs.rb#111
    def escape_sql_comment(content); end

    # source://activerecord/7.0.4/lib/active_record/query_logs.rb#115
    def tag_content; end

    # source://activerecord/7.0.4/lib/active_record/query_logs.rb#104
    def uncached_comment; end
  end
end

module ActiveRecord::QueryMethods
  include ::ActiveModel::ForbiddenAttributesProtection

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#317
  def _select!(*fields); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#845
  def and(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#853
  def and!(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1219
  def annotate(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1225
  def annotate!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def annotate_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def annotate_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1280
  def arel(aliases = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1284
  def construct_join_dependency(associations, join_type); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1038
  def create_with(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1042
  def create_with!(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def create_with_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def create_with_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1102
  def distinct(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1107
  def distinct!(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def distinct_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def distinct_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#207
  def eager_load(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#212
  def eager_load!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def eager_load_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def eager_load_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1261
  def excluding(*records); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1273
  def excluding!(records); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1148
  def extending(*modules, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1156
  def extending!(*modules, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def extending_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def extending_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def extensions; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#240
  def extract_associated(association); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1083
  def from(value, subquery_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1087
  def from!(value, subquery_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def from_clause; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def from_clause=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#363
  def group(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#368
  def group!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def group_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def group_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#903
  def having(opts, *rest); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#907
  def having!(opts, *rest); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def having_clause; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def having_clause=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#447
  def in_order_of(column, values); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#191
  def includes(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#196
  def includes!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def includes_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def includes_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#811
  def invert_where; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#815
  def invert_where!; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#586
  def joins(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#591
  def joins!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def joins_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def joins_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#601
  def left_joins(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#601
  def left_outer_joins(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#607
  def left_outer_joins!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def left_outer_joins_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def left_outer_joins_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#917
  def limit(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#921
  def limit!(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def limit_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def limit_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#944
  def lock(locks = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#948
  def lock!(locks = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def lock_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def lock_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#987
  def none; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#991
  def none!; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#933
  def offset(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#937
  def offset!(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def offset_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def offset_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1177
  def optimizer_hints(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1182
  def optimizer_hints!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def optimizer_hints_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def optimizer_hints_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#877
  def or(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#885
  def or!(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#425
  def order(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#433
  def order!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def order_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def order_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#221
  def preload(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#226
  def preload!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def preload_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def preload_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1001
  def readonly(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1005
  def readonly!(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def readonly_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def readonly_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#254
  def references(*table_names); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#259
  def references!(*table_names); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def references_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def references_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#471
  def reorder(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#479
  def reorder!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def reordering_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def reordering_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#332
  def reselect(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#338
  def reselect!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1190
  def reverse_order; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1194
  def reverse_order!; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def reverse_order_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def reverse_order_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#773
  def rewhere(conditions); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#304
  def select(*fields); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def select_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def select_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1205
  def skip_preloading!; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1200
  def skip_query_cache!(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def skip_query_cache_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def skip_query_cache_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1016
  def strict_loading(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1020
  def strict_loading!(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def strict_loading_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def strict_loading_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#831
  def structurally_compatible?(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1231
  def uniq!(name); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#524
  def unscope(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#529
  def unscope!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def unscope_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def unscope_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#745
  def where(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#755
  def where!(opts, *rest); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def where_clause; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def where_clause=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1261
  def without(*records); end

  protected

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1299
  def build_having_clause(opts, rest = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1291
  def build_subquery(subquery_alias, select_value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1299
  def build_where_clause(opts, rest = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1520
  def arel_column(field); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1503
  def arel_columns(columns); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1351
  def assert_mutability!; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1356
  def build_arel(aliases = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1384
  def build_cast_value(name, value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1388
  def build_from; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1421
  def build_join_buckets; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1340
  def build_join_dependencies; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1471
  def build_joins(join_sources, aliases = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1582
  def build_order(arel); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1493
  def build_select(arel); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1702
  def check_if_method_has_arguments!(method_name, args, message = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1639
  def column_references(order_args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1571
  def does_not_support_reverse?(order); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1334
  def each_join_dependencies(join_dependencies = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1327
  def lookup_table_klass_from_join_dependencies(table_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1652
  def order_column(field); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1602
  def preprocess_order_args(order_args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1662
  def resolve_arel_attributes(attrs); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1542
  def reverse_sql_order(order_query); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1633
  def sanitize_order_arguments(order_args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1403
  def select_association_list(associations, stashed_joins = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1718
  def structurally_incompatible_values_for(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1536
  def table_name_matches?(from); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1590
  def validate_order_args(args); end
end

# source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#124
ActiveRecord::QueryMethods::FROZEN_EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#125
ActiveRecord::QueryMethods::FROZEN_EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1713
ActiveRecord::QueryMethods::STRUCTURAL_VALUE_METHODS = T.let(T.unsafe(nil), Array)

# source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1587
ActiveRecord::QueryMethods::VALID_DIRECTIONS = T.let(T.unsafe(nil), Set)

# source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#487
ActiveRecord::QueryMethods::VALID_UNSCOPING_VALUES = T.let(T.unsafe(nil), Set)

class ActiveRecord::QueryMethods::WhereChain
  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#16
  def initialize(scope); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#76
  def associated(*associations); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#104
  def missing(*associations); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#50
  def not(opts, *rest); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#115
  def scope_association_reflection(association); end
end

module ActiveRecord::Querying
  # source://activerecord/7.0.4/lib/active_record/querying.rb#57
  def _load_from_sql(result_set, &block); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#53
  def _query_by_sql(sql, binds = T.unsafe(nil), preparable: T.unsafe(nil), async: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def and(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def annotate(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def any?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def average(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def calculate(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def count(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#93
  def count_by_sql(sql); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def create_or_find_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def create_or_find_by!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def create_with(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def delete_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def delete_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def destroy_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def destroy_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def distinct(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def eager_load(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def except(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def excluding(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def exists?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def extending(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def extract_associated(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def fifth(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def fifth!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find_by!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#49
  def find_by_sql(sql, binds = T.unsafe(nil), preparable: T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find_each(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find_in_batches(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find_or_create_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find_or_create_by!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find_or_initialize_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find_sole_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def first(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def first!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def first_or_create(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def first_or_create!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def first_or_initialize(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def forty_two(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def forty_two!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def fourth(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def fourth!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def from(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def group(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def having(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def ids(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def in_batches(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def in_order_of(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def includes(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def invert_where(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def last(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def last!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def left_joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def left_outer_joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def limit(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def lock(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def many?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def maximum(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def merge(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def minimum(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def none(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def none?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def offset(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def one?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def only(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def optimizer_hints(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def or(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def order(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def pick(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def pluck(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def preload(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def readonly(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def references(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def reorder(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def reselect(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def rewhere(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def second(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def second!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def second_to_last(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def second_to_last!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def select(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def sole(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def strict_loading(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def sum(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def take(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def take!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def third(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def third!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def third_to_last(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def third_to_last!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def touch_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def unscope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def update_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def where(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def without(*_arg0, **_arg1, &_arg2); end
end

# source://activerecord/7.0.4/lib/active_record/querying.rb#5
ActiveRecord::Querying::QUERYING_METHODS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Railtie < ::Rails::Railtie; end

# source://activerecord/7.0.4/lib/active_record/railtie.rb#203
ActiveRecord::Railtie::SQLITE3_PRODUCTION_WARN = T.let(T.unsafe(nil), String)

class ActiveRecord::RangeError < ::ActiveRecord::StatementInvalid; end
class ActiveRecord::ReadOnlyError < ::ActiveRecord::ActiveRecordError; end
class ActiveRecord::ReadOnlyRecord < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::ReadonlyAttributes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::ReadonlyAttributes::ClassMethods

  module GeneratedClassMethods
    def _attr_readonly; end
    def _attr_readonly=(value); end
    def _attr_readonly?; end
  end

  module GeneratedInstanceMethods; end
end

module ActiveRecord::ReadonlyAttributes::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#25
  def attr_readonly(*attributes); end

  # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#34
  def readonly_attribute?(name); end

  # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#30
  def readonly_attributes; end
end

class ActiveRecord::RecordInvalid < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/validations.rb#18
  def initialize(record = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/validations.rb#16
  def record; end
end

class ActiveRecord::RecordNotDestroyed < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/errors.rb#139
  def initialize(message = T.unsafe(nil), record = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/errors.rb#137
  def record; end
end

class ActiveRecord::RecordNotFound < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/errors.rb#105
  def initialize(message = T.unsafe(nil), model = T.unsafe(nil), primary_key = T.unsafe(nil), id = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/errors.rb#103
  def id; end

  # source://activerecord/7.0.4/lib/active_record/errors.rb#103
  def model; end

  # source://activerecord/7.0.4/lib/active_record/errors.rb#103
  def primary_key; end
end

class ActiveRecord::RecordNotSaved < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/errors.rb#120
  def initialize(message = T.unsafe(nil), record = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/errors.rb#118
  def record; end
end

class ActiveRecord::RecordNotUnique < ::ActiveRecord::WrappedDatabaseException; end

module ActiveRecord::Reflection
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Reflection::ClassMethods

  class << self
    # source://activerecord/7.0.4/lib/active_record/reflection.rb#28
    def add_aggregate_reflection(ar, name, reflection); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#22
    def add_reflection(ar, name, reflection); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#17
    def create(macro, name, scope, options, ar); end

    private

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#33
    def reflection_class_for(macro); end
  end

  module GeneratedClassMethods
    def _reflections; end
    def _reflections=(value); end
    def _reflections?; end
    def aggregate_reflections; end
    def aggregate_reflections=(value); end
    def aggregate_reflections?; end
    def automatic_scope_inversing; end
    def automatic_scope_inversing=(value); end
    def automatic_scope_inversing?; end
  end

  module GeneratedInstanceMethods
    def _reflections; end
    def _reflections?; end
    def aggregate_reflections; end
    def aggregate_reflections?; end
    def automatic_scope_inversing; end
    def automatic_scope_inversing?; end
  end
end

class ActiveRecord::Reflection::AbstractReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#280
  def alias_candidate(name); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#157
  def build_association(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#288
  def build_scope(table, predicate_builder = T.unsafe(nil), klass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#284
  def chain; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#233
  def check_validity_of_inverse!; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#165
  def class_name; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#211
  def constraints; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#215
  def counter_cache_column; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#276
  def counter_must_be_updated_by_has_many?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#270
  def has_cached_counter?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#227
  def inverse_of; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#254
  def inverse_updates_counter_cache?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#262
  def inverse_updates_counter_in_memory?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#254
  def inverse_which_updates_counter_cache; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#175
  def join_scope(table, foreign_table, foreign_klass); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#198
  def join_scopes(table, predicate_builder, klass = T.unsafe(nil), record = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#206
  def klass_join_scope(table, predicate_builder); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#171
  def scopes; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#296
  def strict_loading?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#300
  def strict_loading_violation_message(owner); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#151
  def table_name; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#147
  def through_reflection?; end

  protected

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#307
  def actual_source_reflection; end

  private

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#320
  def ensure_option_not_given_as_class!(option_name); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#312
  def predicate_builder(table); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#316
  def primary_key(klass); end
end

class ActiveRecord::Reflection::AggregateReflection < ::ActiveRecord::Reflection::MacroReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#412
  def mapping; end
end

class ActiveRecord::Reflection::AssociationReflection < ::ActiveRecord::Reflection::MacroReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#448
  def initialize(name, scope, options, active_record); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#480
  def active_record_primary_key; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#595
  def add_as_polymorphic_through(reflection, seed); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#591
  def add_as_source(seed); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#599
  def add_as_through(seed); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#585
  def association_class; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#472
  def association_foreign_key; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#476
  def association_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#456
  def association_scope_cache(klass, owner, &block); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#580
  def belongs_to?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#496
  def check_eager_loadable!; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#492
  def check_validity!; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#528
  def clear_association_scope_cache; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#522
  def collect_join_chain; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#562
  def collection?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#421
  def compute_class(name); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#603
  def extensions; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#468
  def foreign_key; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#445
  def foreign_type; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#540
  def has_inverse?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#583
  def has_one?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#536
  def has_scope?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#488
  def join_foreign_key; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#508
  def join_id_for(owner); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#484
  def join_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#464
  def join_table; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#557
  def macro; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#532
  def nested?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#446
  def parent_reflection; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#446
  def parent_reflection=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#587
  def polymorphic?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#544
  def polymorphic_inverse_of(associated_class); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#516
  def source_reflection; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#512
  def through_reflection; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#445
  def type; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#575
  def validate?; end

  private

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#620
  def automatic_inverse_of; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#656
  def can_find_inverse_of_automatically?(reflection, inverse_reflection = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#677
  def derive_class_name; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#683
  def derive_foreign_key; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#693
  def derive_join_table; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#611
  def inverse_name; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#669
  def scope_allows_automatic_inverse_of?(reflection, inverse_reflection); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#642
  def valid_inverse_reflection?(reflection); end
end

class ActiveRecord::Reflection::BelongsToReflection < ::ActiveRecord::Reflection::AssociationReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#731
  def association_class; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#740
  def association_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#729
  def belongs_to?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#752
  def join_foreign_key; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#756
  def join_foreign_type; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#748
  def join_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#727
  def macro; end

  private

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#761
  def can_find_inverse_of_automatically?(*_arg0); end
end

module ActiveRecord::Reflection::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#119
  def _reflect_on_association(association); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#128
  def clear_reflections_cache; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#67
  def reflect_on_aggregation(aggregation); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#59
  def reflect_on_all_aggregations; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#104
  def reflect_on_all_associations(macro = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#124
  def reflect_on_all_autosave_associations; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#115
  def reflect_on_association(association); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#75
  def reflections; end
end

class ActiveRecord::Reflection::HasAndBelongsToManyReflection < ::ActiveRecord::Reflection::AssociationReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#769
  def collection?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#767
  def macro; end
end

class ActiveRecord::Reflection::HasManyReflection < ::ActiveRecord::Reflection::AssociationReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#703
  def association_class; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#701
  def collection?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#699
  def macro; end
end

class ActiveRecord::Reflection::HasOneReflection < ::ActiveRecord::Reflection::AssociationReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#717
  def association_class; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#715
  def has_one?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#713
  def macro; end
end

class ActiveRecord::Reflection::MacroReflection < ::ActiveRecord::Reflection::AbstractReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#348
  def initialize(name, scope, options, active_record); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#391
  def ==(other_aggregation); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#344
  def active_record; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#358
  def autosave=(autosave); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#385
  def compute_class(name); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#381
  def klass; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#334
  def name; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#342
  def options; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#346
  def plural_name; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#336
  def scope; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#399
  def scope_for(relation, owner = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#404
  def derive_class_name; end
end

class ActiveRecord::Reflection::PolymorphicReflection < ::ActiveRecord::Reflection::AbstractReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1034
  def initialize(reflection, previous_reflection); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1044
  def constraints; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1031
  def join_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1031
  def join_primary_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1039
  def join_scopes(table, predicate_builder, klass = T.unsafe(nil), record = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1031
  def klass(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1031
  def name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1031
  def plural_name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1031
  def scope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1031
  def scope_for(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1031
  def type(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1049
  def source_type_scope; end
end

class ActiveRecord::Reflection::RuntimeReflection < ::ActiveRecord::Reflection::AbstractReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1059
  def initialize(reflection, association); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1068
  def aliased_table; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1076
  def all_includes; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1057
  def constraints(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1057
  def join_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1072
  def join_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1064
  def klass; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1057
  def scope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1057
  def type(*_arg0, **_arg1, &_arg2); end
end

class ActiveRecord::Reflection::ThroughReflection < ::ActiveRecord::Reflection::AbstractReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#780
  def initialize(delegate_reflection); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def active_record(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#777
  def active_record_primary_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#992
  def add_as_polymorphic_through(reflection, seed); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#988
  def add_as_source(seed); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#996
  def add_as_through(seed); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def association_class(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#777
  def association_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#884
  def association_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def association_scope_cache(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def autosave=(arg); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def belongs_to?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def check_eager_loadable!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#942
  def check_validity!; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#856
  def clear_association_scope_cache; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#850
  def collect_join_chain; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def collection?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def compute_class(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#982
  def constraints; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def extensions(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#777
  def foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#777
  def foreign_type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def has_inverse?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def has_one?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#870
  def has_scope?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#777
  def join_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#777
  def join_id_for(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#894
  def join_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#866
  def join_scopes(table, predicate_builder, klass = T.unsafe(nil), record = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def join_table(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#792
  def klass; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def macro(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#877
  def nested?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def options(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def parent_reflection(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def parent_reflection=(arg); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def plural_name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def polymorphic?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def polymorphic_inverse_of(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def scope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def scope_for(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#862
  def scopes; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#934
  def source_options; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#813
  def source_reflection; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#913
  def source_reflection_name; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#909
  def source_reflection_names; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#938
  def through_options; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#829
  def through_reflection; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#788
  def through_reflection?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#777
  def type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def validate?(*_arg0, **_arg1, &_arg2); end

  protected

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1001
  def actual_source_reflection; end

  private

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1008
  def collect_join_reflections(seed); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1006
  def delegate_reflection; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1019
  def derive_class_name; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1017
  def inverse_name; end
end

class ActiveRecord::Relation
  include ::Enumerable
  include ::ActiveRecord::Delegation
  include ::ActiveRecord::Explain
  include ::ActiveRecord::Batches
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveRecord::QueryMethods
  include ::ActiveRecord::SpawnMethods
  include ::ActiveRecord::Calculations
  include ::ActiveRecord::FinderMethods
  extend ::ActiveRecord::Delegation::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/relation.rb#27
  def initialize(klass, table: T.unsafe(nil), predicate_builder: T.unsafe(nil), values: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#766
  def ==(other); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#432
  def _exec_scope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#811
  def alias_tracker(joins = T.unsafe(nil), aliases = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#284
  def any?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#43
  def bind_attribute(name, value); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#782
  def blank?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#66
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#320
  def cache_key(timestamp_column = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#399
  def cache_key_with_version; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#347
  def cache_version(timestamp_column = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#95
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#110
  def create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#209
  def create_or_find_by(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#218
  def create_or_find_by!(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#601
  def delete_all; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#642
  def delete_by(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#579
  def destroy_all; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#629
  def destroy_by(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#751
  def eager_loading?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#269
  def empty?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#803
  def empty_scope?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#255
  def encode_with(coder); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#239
  def explain; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#168
  def find_or_create_by(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#175
  def find_or_create_by!(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#226
  def find_or_initialize_by(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#119
  def first_or_create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#123
  def first_or_create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#127
  def first_or_initialize(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#807
  def has_limit_or_offset?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#794
  def inspect; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#761
  def joined_includes_values; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#21
  def klass; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#693
  def load(&block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#664
  def load_async; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#21
  def loaded; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#21
  def loaded?; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def locked?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#297
  def many?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#21
  def model; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#66
  def new(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#278
  def none?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#290
  def one?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#21
  def predicate_builder; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#825
  def preload_associations(records); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#777
  def pretty_print(q); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#249
  def records; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#703
  def reload; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#708
  def reset; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#683
  def scheduled?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#744
  def scope_for_create; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#421
  def scoping(all_queries: T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#260
  def size; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#22
  def skip_preloading_value; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#22
  def skip_preloading_value=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#21
  def table; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#244
  def to_a; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#244
  def to_ary; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#724
  def to_sql; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#559
  def touch_all(*names, time: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#488
  def update(id = T.unsafe(nil), attributes); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#496
  def update!(id = T.unsafe(nil), attributes); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#464
  def update_all(updates); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#516
  def update_counters(counters); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#786
  def values; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#790
  def values_for_queries; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#740
  def where_values_hash(relation_table_name = T.unsafe(nil)); end

  protected

  # source://activerecord/7.0.4/lib/active_record/relation.rb#835
  def load_records(records); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#840
  def null_relation?; end

  private

  # source://activerecord/7.0.4/lib/active_record/relation.rb#865
  def _create(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#869
  def _create!(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#900
  def _increment_attribute(attribute, value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#861
  def _new(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#873
  def _scoping(scope, registry, all_queries = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#889
  def _substitute_values(values); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#845
  def already_in_scope?(registry); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#325
  def compute_cache_key(timestamp_column = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#354
  def compute_cache_version(timestamp_column); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#853
  def current_scope_restoring_block(&block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#927
  def exec_main_query(async: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#907
  def exec_queries(&block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#849
  def global_scope?(registry); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#38
  def initialize_copy(other); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#947
  def instantiate_records(rows, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#990
  def limited_count; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#966
  def references_eager_loaded_tables?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#958
  def skip_query_cache_if_necessary(&block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#983
  def tables_in_string(string); end
end

# source://activerecord/7.0.4/lib/active_record/relation.rb#13
ActiveRecord::Relation::CLAUSE_METHODS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Relation::FromClause
  # source://activerecord/7.0.4/lib/active_record/relation/from_clause.rb#8
  def initialize(value, name); end

  # source://activerecord/7.0.4/lib/active_record/relation/from_clause.rb#21
  def ==(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/from_clause.rb#17
  def empty?; end

  # source://activerecord/7.0.4/lib/active_record/relation/from_clause.rb#13
  def merge(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/from_clause.rb#6
  def name; end

  # source://activerecord/7.0.4/lib/active_record/relation/from_clause.rb#6
  def value; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/relation/from_clause.rb#25
    def empty; end
  end
end

class ActiveRecord::Relation::HashMerger
  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#10
  def initialize(relation, hash, rewhere = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#8
  def hash; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#18
  def merge; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#26
  def other; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#8
  def relation; end
end

# source://activerecord/7.0.4/lib/active_record/relation.rb#14
ActiveRecord::Relation::INVALID_METHODS_FOR_DELETE_ALL = T.let(T.unsafe(nil), Array)

# source://activerecord/7.0.4/lib/active_record/relation.rb#6
ActiveRecord::Relation::MULTI_VALUE_METHODS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Relation::Merger
  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#47
  def initialize(relation, other, rewhere = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#60
  def merge; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#45
  def other; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#45
  def relation; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#45
  def values; end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#176
  def merge_clauses; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#117
  def merge_joins; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#155
  def merge_multi_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#136
  def merge_outer_joins; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#96
  def merge_preloads; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#84
  def merge_select_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#168
  def merge_single_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#186
  def replace_from_clause?; end
end

# source://activerecord/7.0.4/lib/active_record/relation/merger.rb#54
ActiveRecord::Relation::Merger::NORMAL_VALUES = T.let(T.unsafe(nil), Array)

class ActiveRecord::Relation::QueryAttribute < ::ActiveModel::Attribute
  # source://activerecord/7.0.4/lib/active_record/relation/query_attribute.rb#27
  def infinite?; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_attribute.rb#20
  def nil?; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_attribute.rb#8
  def type_cast(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_attribute.rb#31
  def unboundable?; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_attribute.rb#12
  def value_for_database; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_attribute.rb#16
  def with_cast_value(value); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/query_attribute.rb#39
  def infinity?(value); end
end

# source://activerecord/7.0.4/lib/active_record/relation.rb#10
ActiveRecord::Relation::SINGLE_VALUE_METHODS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Relation::StrictLoadingScope
  class << self
    # source://activerecord/7.0.4/lib/active_record/relation.rb#816
    def empty_scope?; end

    # source://activerecord/7.0.4/lib/active_record/relation.rb#820
    def strict_loading_value; end
  end
end

# source://activerecord/7.0.4/lib/active_record/relation.rb#16
ActiveRecord::Relation::VALUE_METHODS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Relation::WhereClause
  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#10
  def initialize(predicates); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#14
  def +(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#18
  def -(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#75
  def ==(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#8
  def any?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#70
  def ast; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#99
  def contradiction?; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#8
  def empty?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#75
  def eql?(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#36
  def except(*columns); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#110
  def extract_attributes; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#81
  def hash; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#85
  def invert; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#26
  def merge(other, rewhere = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#40
  def or(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#61
  def to_h(table_name = T.unsafe(nil), equality_only: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#22
  def |(other); end

  protected

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#117
  def predicates; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#119
  def referenced_columns; end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#126
  def each_attributes; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#145
  def equalities(predicates, equality_only); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#171
  def equality_node?(node); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#186
  def except_predicates(columns); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#136
  def extract_attribute(node); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#221
  def extract_node_value(node); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#175
  def invert_predicate(node); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#210
  def non_empty_predicates; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#159
  def predicates_unreferenced_by(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#199
  def predicates_with_wrapped_sql_literals; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#214
  def wrap_sql_literal(node); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#95
    def empty; end
  end
end

# source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#209
ActiveRecord::Relation::WhereClause::ARRAY_WITH_EMPTY_STRING = T.let(T.unsafe(nil), Array)

class ActiveRecord::Result
  include ::Enumerable

  # source://activerecord/7.0.4/lib/active_record/result.rb#43
  def initialize(columns, rows, column_types = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/result.rb#87
  def [](idx); end

  # source://activerecord/7.0.4/lib/active_record/result.rb#100
  def cancel; end

  # source://activerecord/7.0.4/lib/active_record/result.rb#104
  def cast_values(type_overrides = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/result.rb#37
  def column_types; end

  # source://activerecord/7.0.4/lib/active_record/result.rb#37
  def columns; end

  # source://activerecord/7.0.4/lib/active_record/result.rb#67
  def each(&block); end

  # source://activerecord/7.0.4/lib/active_record/result.rb#76
  def empty?; end

  # source://activerecord/7.0.4/lib/active_record/result.rb#54
  def includes_column?(name); end

  # source://activerecord/7.0.4/lib/active_record/result.rb#92
  def last(n = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/result.rb#59
  def length; end

  # source://activerecord/7.0.4/lib/active_record/result.rb#96
  def result; end

  # source://activerecord/7.0.4/lib/active_record/result.rb#37
  def rows; end

  # source://activerecord/7.0.4/lib/active_record/result.rb#81
  def to_a; end

  # source://activerecord/7.0.4/lib/active_record/result.rb#81
  def to_ary; end

  private

  # source://activerecord/7.0.4/lib/active_record/result.rb#138
  def column_type(name, type_overrides = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/result.rb#144
  def hash_rows; end

  # source://activerecord/7.0.4/lib/active_record/result.rb#130
  def initialize_copy(other); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/result.rb#39
    def empty; end
  end
end

class ActiveRecord::Rollback < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::RuntimeRegistry
  extend ::ActiveRecord::RuntimeRegistry

  # source://activerecord/7.0.4/lib/active_record/runtime_registry.rb#12
  def sql_runtime; end

  # source://activerecord/7.0.4/lib/active_record/runtime_registry.rb#16
  def sql_runtime=(runtime); end
end

module ActiveRecord::Sanitization
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Sanitization::ClassMethods
end

module ActiveRecord::Sanitization::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#138
  def disallow_raw_sql!(args, permit: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#22
  def sanitize_sql(condition); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#125
  def sanitize_sql_array(ary); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#46
  def sanitize_sql_for_assignment(assignments, default_table_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#22
  def sanitize_sql_for_conditions(condition); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#62
  def sanitize_sql_for_order(condition); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#85
  def sanitize_sql_hash_for_assignment(attrs, table); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#109
  def sanitize_sql_like(string, escape_character = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#187
  def quote_bound_value(value, c = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#201
  def raise_if_bind_arity_mismatch(statement, expected, provided); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#167
  def replace_bind_variable(value, c = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#158
  def replace_bind_variables(statement, values); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#175
  def replace_named_bind_variables(statement, bind_vars); end
end

class ActiveRecord::Schema < ::ActiveRecord::Migration::Current
  include ::ActiveRecord::Schema::Definition
  extend ::ActiveRecord::Schema::Definition::ClassMethods

  class << self
    # source://activerecord/7.0.4/lib/active_record/schema.rb#69
    def [](version); end
  end
end

module ActiveRecord::Schema::Definition
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Schema::Definition::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/schema.rb#54
  def define(info, &block); end
end

module ActiveRecord::Schema::Definition::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/schema.rb#49
  def define(info = T.unsafe(nil), &block); end
end

class ActiveRecord::SchemaDumper
  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#59
  def initialize(connection, options = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#30
  def chk_ignore_pattern; end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#30
  def chk_ignore_pattern=(val); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#47
  def dump(stream); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#24
  def fk_ignore_pattern; end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#24
  def fk_ignore_pattern=(val); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#18
  def ignore_tables; end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#18
  def ignore_tables=(val); end

  private

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#227
  def check_constraints_in_create(table, stream); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#72
  def define_params; end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#99
  def extensions(stream); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#245
  def foreign_keys(table, stream); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#276
  def format_colspec(colspec); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#286
  def format_index_parts(options); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#282
  def format_options(options); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#66
  def formatted_version; end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#76
  def header(stream); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#300
  def ignored?(table_name); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#211
  def index_parts(index); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#190
  def indexes(table, stream); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#202
  def indexes_in_create(table, stream); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#294
  def remove_prefix_and_suffix(table); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#121
  def table(table, stream); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#57
  def table_name; end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#57
  def table_name=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#106
  def tables(stream); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#94
  def trailer(stream); end

  # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#103
  def types(stream); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#30
    def chk_ignore_pattern; end

    # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#30
    def chk_ignore_pattern=(val); end

    # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#33
    def dump(connection = T.unsafe(nil), stream = T.unsafe(nil), config = T.unsafe(nil)); end

    # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#24
    def fk_ignore_pattern; end

    # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#24
    def fk_ignore_pattern=(val); end

    # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#18
    def ignore_tables; end

    # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#18
    def ignore_tables=(val); end

    private

    # source://activerecord/7.0.4/lib/active_record/schema_dumper.rb#39
    def generate_options(config); end
  end
end

class ActiveRecord::SchemaMigration < ::ActiveRecord::Base
  include ::ActiveRecord::SchemaMigration::GeneratedAttributeMethods
  include ::ActiveRecord::SchemaMigration::GeneratedAssociationMethods

  # source://activerecord/7.0.4/lib/active_record/schema_migration.rb#50
  def version; end

  class << self
    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.4/lib/active_record/schema_migration.rb#41
    def all_versions; end

    # source://activerecord/7.0.4/lib/active_record/schema_migration.rb#21
    def create_table; end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums; end

    # source://activerecord/7.0.4/lib/active_record/schema_migration.rb#29
    def drop_table; end

    # source://activerecord/7.0.4/lib/active_record/schema_migration.rb#33
    def normalize_migration_number(number); end

    # source://activerecord/7.0.4/lib/active_record/schema_migration.rb#37
    def normalized_versions; end

    # source://activerecord/7.0.4/lib/active_record/schema_migration.rb#13
    def primary_key; end

    # source://activerecord/7.0.4/lib/active_record/schema_migration.rb#45
    def table_exists?; end

    # source://activerecord/7.0.4/lib/active_record/schema_migration.rb#17
    def table_name; end
  end
end

module ActiveRecord::SchemaMigration::GeneratedAssociationMethods; end
module ActiveRecord::SchemaMigration::GeneratedAttributeMethods; end

module ActiveRecord::Scoping
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Autoload
  include GeneratedInstanceMethods
  include ::ActiveRecord::Scoping::Default
  include ::ActiveRecord::Scoping::Named

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Scoping::ClassMethods
  mixes_in_class_methods ::ActiveRecord::Scoping::Default::ClassMethods
  mixes_in_class_methods ::ActiveRecord::Scoping::Named::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#54
  def initialize_internals_callback; end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#47
  def populate_with_current_scope_attributes; end

  module GeneratedClassMethods
    def default_scope_override; end
    def default_scope_override=(value); end
    def default_scopes; end
    def default_scopes=(value); end
  end

  module GeneratedInstanceMethods
    def default_scope_override; end
    def default_scopes; end
  end
end

module ActiveRecord::Scoping::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/scoping.rb#26
  def current_scope(skip_inherited_scope = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#30
  def current_scope=(scope); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#34
  def global_current_scope(skip_inherited_scope = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#38
  def global_current_scope=(scope); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#17
  def scope_attributes; end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#22
  def scope_attributes?; end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#42
  def scope_registry; end
end

module ActiveRecord::Scoping::Default
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Scoping::Default::ClassMethods

  module GeneratedClassMethods
    def default_scope_override; end
    def default_scope_override=(value); end
    def default_scopes; end
    def default_scopes=(value); end
  end

  module GeneratedInstanceMethods
    def default_scope_override; end
    def default_scopes; end
  end
end

module ActiveRecord::Scoping::Default::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#54
  def default_scopes?(all_queries: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#47
  def scope_attributes?; end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#42
  def unscoped(&block); end

  private

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#135
  def build_default_scope(relation = T.unsafe(nil), all_queries: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#119
  def default_scope(scope = T.unsafe(nil), all_queries: T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#182
  def evaluate_default_scope; end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#167
  def execute_scope?(all_queries, default_scope_obj); end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#175
  def ignore_default_scope=(ignore); end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#171
  def ignore_default_scope?; end
end

class ActiveRecord::Scoping::DefaultScope
  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#8
  def initialize(scope, all_queries = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#6
  def all_queries; end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#6
  def scope; end
end

module ActiveRecord::Scoping::Named
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Scoping::Named::ClassMethods
end

module ActiveRecord::Scoping::Named::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/scoping/named.rb#22
  def all; end

  # source://activerecord/7.0.4/lib/active_record/scoping/named.rb#49
  def default_extensions; end

  # source://activerecord/7.0.4/lib/active_record/scoping/named.rb#45
  def default_scoped(scope = T.unsafe(nil), all_queries: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping/named.rb#154
  def scope(name, body, &block); end

  # source://activerecord/7.0.4/lib/active_record/scoping/named.rb#36
  def scope_for_association(scope = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/scoping/named.rb#192
  def singleton_method_added(name); end
end

class ActiveRecord::Scoping::ScopeRegistry
  # source://activerecord/7.0.4/lib/active_record/scoping.rb#86
  def initialize; end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#92
  def current_scope(model, skip_inherited_scope = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#108
  def global_current_scope(model, skip_inherited_scope = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#100
  def ignore_default_scope(model, skip_inherited_scope = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#96
  def set_current_scope(model, value); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#112
  def set_global_current_scope(model, value); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#104
  def set_ignore_default_scope(model, value); end

  private

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#130
  def set_value_for(scope_type, model, value); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#118
  def value_for(scope_type, model, skip_inherited_scope = T.unsafe(nil)); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/scoping.rb#78
    def current_scope(*_arg0, **_arg1, &_arg2); end

    # source://activerecord/7.0.4/lib/active_record/scoping.rb#78
    def global_current_scope(*_arg0, **_arg1, &_arg2); end

    # source://activerecord/7.0.4/lib/active_record/scoping.rb#78
    def ignore_default_scope(*_arg0, **_arg1, &_arg2); end

    # source://activerecord/7.0.4/lib/active_record/scoping.rb#81
    def instance; end

    # source://activerecord/7.0.4/lib/active_record/scoping.rb#78
    def set_current_scope(*_arg0, **_arg1, &_arg2); end

    # source://activerecord/7.0.4/lib/active_record/scoping.rb#78
    def set_global_current_scope(*_arg0, **_arg1, &_arg2); end

    # source://activerecord/7.0.4/lib/active_record/scoping.rb#78
    def set_ignore_default_scope(*_arg0, **_arg1, &_arg2); end
  end
end

module ActiveRecord::SecureToken
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::SecureToken::ClassMethods
end

module ActiveRecord::SecureToken::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/secure_token.rb#43
  def generate_unique_secure_token(length: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/secure_token.rb#32
  def has_secure_token(attribute = T.unsafe(nil), length: T.unsafe(nil)); end
end

# source://activerecord/7.0.4/lib/active_record/secure_token.rb#7
ActiveRecord::SecureToken::MINIMUM_TOKEN_LENGTH = T.let(T.unsafe(nil), Integer)

class ActiveRecord::SecureToken::MinimumLengthError < ::StandardError; end

module ActiveRecord::Serialization
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveModel::Serializers::JSON

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Naming

  # source://activerecord/7.0.4/lib/active_record/serialization.rb#13
  def serializable_hash(options = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/serialization.rb#25
  def attribute_names_for_serialization; end

  module GeneratedClassMethods
    def include_root_in_json; end
    def include_root_in_json=(value); end
    def include_root_in_json?; end
  end

  module GeneratedInstanceMethods
    def include_root_in_json; end
    def include_root_in_json?; end
  end
end

class ActiveRecord::SerializationFailure < ::ActiveRecord::TransactionRollbackError; end
class ActiveRecord::SerializationTypeMismatch < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::SignedId
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::SignedId::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#112
  def signed_id(expires_in: T.unsafe(nil), purpose: T.unsafe(nil)); end

  module GeneratedClassMethods
    def signed_id_verifier_secret; end
    def signed_id_verifier_secret=(value); end
    def signed_id_verifier_secret?; end
  end

  module GeneratedInstanceMethods
    def signed_id_verifier_secret; end
    def signed_id_verifier_secret?; end
  end
end

module ActiveRecord::SignedId::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#92
  def combine_signed_id_purposes(purpose); end

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#42
  def find_signed(signed_id, purpose: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#62
  def find_signed!(signed_id, purpose: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#71
  def signed_id_verifier; end

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#87
  def signed_id_verifier=(verifier); end
end

class ActiveRecord::SoleRecordExceeded < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/errors.rb#149
  def initialize(record = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/errors.rb#147
  def record; end
end

module ActiveRecord::SpawnMethods
  # source://activerecord/7.0.4/lib/active_record/relation/spawn_methods.rb#58
  def except(*skips); end

  # source://activerecord/7.0.4/lib/active_record/relation/spawn_methods.rb#31
  def merge(other, *rest); end

  # source://activerecord/7.0.4/lib/active_record/relation/spawn_methods.rb#41
  def merge!(other, *rest); end

  # source://activerecord/7.0.4/lib/active_record/relation/spawn_methods.rb#66
  def only(*onlies); end

  # source://activerecord/7.0.4/lib/active_record/relation/spawn_methods.rb#10
  def spawn; end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/spawn_methods.rb#71
  def relation_with(values); end
end

class ActiveRecord::StaleObjectError < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/errors.rb#283
  def initialize(record = T.unsafe(nil), attempted_action = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/errors.rb#281
  def attempted_action; end

  # source://activerecord/7.0.4/lib/active_record/errors.rb#281
  def record; end
end

class ActiveRecord::StatementCache
  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#139
  def initialize(query_builder, bind_map, klass); end

  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#145
  def execute(params, connection, &block); end

  private

  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#162
  def bind_map; end

  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#162
  def klass; end

  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#162
  def query_builder; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#132
    def create(connection, callable = T.unsafe(nil), &block); end

    # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#101
    def partial_query(values); end

    # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#105
    def partial_query_collector; end

    # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#97
    def query(sql); end

    # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#155
    def unsupported_value?(value); end
  end
end

class ActiveRecord::StatementCache::BindMap
  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#114
  def initialize(bound_attributes); end

  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#125
  def bind(values); end
end

class ActiveRecord::StatementCache::Params
  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#110
  def bind; end
end

class ActiveRecord::StatementCache::PartialQuery < ::ActiveRecord::StatementCache::Query
  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#44
  def initialize(values); end

  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#51
  def sql_for(binds, connection); end
end

class ActiveRecord::StatementCache::PartialQueryCollector
  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#67
  def initialize; end

  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#72
  def <<(str); end

  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#77
  def add_bind(obj); end

  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#83
  def add_binds(binds, proc_for_binds = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#65
  def preparable; end

  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#65
  def preparable=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#92
  def value; end
end

class ActiveRecord::StatementCache::Query
  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#34
  def initialize(sql); end

  # source://activerecord/7.0.4/lib/active_record/statement_cache.rb#38
  def sql_for(binds, connection); end
end

class ActiveRecord::StatementCache::Substitute; end

class ActiveRecord::StatementInvalid < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/errors.rb#159
  def initialize(message = T.unsafe(nil), sql: T.unsafe(nil), binds: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/errors.rb#165
  def binds; end

  # source://activerecord/7.0.4/lib/active_record/errors.rb#165
  def sql; end
end

class ActiveRecord::StatementTimeout < ::ActiveRecord::QueryAborted; end

module ActiveRecord::Store
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Store::ClassMethods

  private

  # source://activerecord/7.0.4/lib/active_record/store.rb#206
  def read_store_attribute(store_attribute, key); end

  # source://activerecord/7.0.4/lib/active_record/store.rb#216
  def store_accessor_for(store_attribute); end

  # source://activerecord/7.0.4/lib/active_record/store.rb#211
  def write_store_attribute(store_attribute, key, value); end
end

module ActiveRecord::Store::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/store.rb#188
  def _store_accessors_module; end

  # source://activerecord/7.0.4/lib/active_record/store.rb#104
  def store(store_attribute, options = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/store.rb#109
  def store_accessor(store_attribute, *keys, prefix: T.unsafe(nil), suffix: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/store.rb#196
  def stored_attributes; end
end

class ActiveRecord::Store::HashAccessor
  class << self
    # source://activerecord/7.0.4/lib/active_record/store.rb#234
    def prepare(object, attribute); end

    # source://activerecord/7.0.4/lib/active_record/store.rb#221
    def read(object, attribute, key); end

    # source://activerecord/7.0.4/lib/active_record/store.rb#226
    def write(object, attribute, key, value); end
  end
end

class ActiveRecord::Store::IndifferentCoder
  # source://activerecord/7.0.4/lib/active_record/store.rb#261
  def initialize(attr_name, coder_or_class_name); end

  # source://activerecord/7.0.4/lib/active_record/store.rb#270
  def dump(obj); end

  # source://activerecord/7.0.4/lib/active_record/store.rb#274
  def load(yaml); end

  private

  # source://activerecord/7.0.4/lib/active_record/store.rb#290
  def as_regular_hash(obj); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/store.rb#278
    def as_indifferent_hash(obj); end
  end
end

class ActiveRecord::Store::IndifferentHashAccessor < ::ActiveRecord::Store::HashAccessor
  class << self
    # source://activerecord/7.0.4/lib/active_record/store.rb#250
    def prepare(object, store_attribute); end
  end
end

class ActiveRecord::Store::StringKeyedHashAccessor < ::ActiveRecord::Store::HashAccessor
  class << self
    # source://activerecord/7.0.4/lib/active_record/store.rb#240
    def read(object, attribute, key); end

    # source://activerecord/7.0.4/lib/active_record/store.rb#244
    def write(object, attribute, key, value); end
  end
end

class ActiveRecord::StrictLoadingViolationError < ::ActiveRecord::ActiveRecordError; end
class ActiveRecord::SubclassNotFound < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::Suppressor
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Suppressor::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/suppressor.rb#49
  def save(**_arg0); end

  # source://activerecord/7.0.4/lib/active_record/suppressor.rb#53
  def save!(**_arg0); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/suppressor.rb#34
    def registry; end
  end
end

module ActiveRecord::Suppressor::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/suppressor.rb#40
  def suppress(&block); end
end

class ActiveRecord::TableMetadata
  # source://activerecord/7.0.4/lib/active_record/table_metadata.rb#7
  def initialize(klass, arel_table, reflection = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/table_metadata.rb#61
  def aggregated_with?(aggregation_name); end

  # source://activerecord/7.0.4/lib/active_record/table_metadata.rb#76
  def arel_table; end

  # source://activerecord/7.0.4/lib/active_record/table_metadata.rb#29
  def associated_table(table_name); end

  # source://activerecord/7.0.4/lib/active_record/table_metadata.rb#25
  def associated_with?(table_name); end

  # source://activerecord/7.0.4/lib/active_record/table_metadata.rb#21
  def has_column?(column_name); end

  # source://activerecord/7.0.4/lib/active_record/table_metadata.rb#5
  def join_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/table_metadata.rb#5
  def join_foreign_type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/table_metadata.rb#5
  def join_primary_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/table_metadata.rb#53
  def polymorphic_association?; end

  # source://activerecord/7.0.4/lib/active_record/table_metadata.rb#66
  def predicate_builder; end

  # source://activerecord/7.0.4/lib/active_record/table_metadata.rb#13
  def primary_key; end

  # source://activerecord/7.0.4/lib/active_record/table_metadata.rb#61
  def reflect_on_aggregation(aggregation_name); end

  # source://activerecord/7.0.4/lib/active_record/table_metadata.rb#57
  def through_association?; end

  # source://activerecord/7.0.4/lib/active_record/table_metadata.rb#17
  def type(column_name); end

  private

  # source://activerecord/7.0.4/lib/active_record/table_metadata.rb#79
  def klass; end

  # source://activerecord/7.0.4/lib/active_record/table_metadata.rb#79
  def reflection; end
end

class ActiveRecord::TableNotSpecified < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::Tasks
  extend ::ActiveSupport::Autoload
end

module ActiveRecord::Tasks::DatabaseTasks
  extend ::ActiveRecord::Tasks::DatabaseTasks

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#470
  def cache_dump_filename(db_config_name, schema_cache_path: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#324
  def charset(configuration, *arguments); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#319
  def charset_current(env_name = T.unsafe(nil), db_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#63
  def check_protected_environments!; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#487
  def check_schema_file(filename); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#309
  def check_target_version; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#513
  def clear_schema_cache(filename); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#334
  def collation(configuration, *arguments); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#329
  def collation_current(env_name = T.unsafe(nil), db_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#120
  def create(configuration, *arguments); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#132
  def create_all; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#183
  def create_current(environment = T.unsafe(nil), name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#59
  def database_configuration; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#59
  def database_configuration=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#277
  def db_configs_with_versions(db_configs); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#88
  def db_dir; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#58
  def db_dir=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#222
  def drop(configuration, *arguments); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#234
  def drop_all; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#238
  def drop_current(environment = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#423
  def dump_schema(db_config, format = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#509
  def dump_schema_cache(conn, filename); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#108
  def env; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#58
  def env=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#96
  def fixtures_path; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#58
  def fixtures_path=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#154
  def for_each(databases); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#367
  def load_schema(db_config, format = T.unsafe(nil), file = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#480
  def load_schema_current(format = T.unsafe(nil), file = T.unsafe(nil), environment = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#495
  def load_seed; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#256
  def migrate(version = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#294
  def migrate_status; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#92
  def migrations_paths; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#58
  def migrations_paths=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#112
  def name; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#188
  def prepare_all; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#339
  def purge(configuration); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#344
  def purge_all; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#348
  def purge_current(environment = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#169
  def raise_for_multi_db(environment = T.unsafe(nil), command:); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#405
  def reconstruct_from_schema(db_config, format = T.unsafe(nil), file = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#79
  def register_task(pattern, task); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#104
  def root; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#58
  def root=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#457
  def schema_dump_path(db_config, format = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/deprecation/method_wrappers.rb#63
  def schema_file_type(*args, **_arg1, &block); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#390
  def schema_up_to_date?(configuration, format = T.unsafe(nil), file = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#116
  def seed_loader; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#58
  def seed_loader=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#140
  def setup_initial_database_yaml; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#353
  def structure_dump(configuration, *arguments); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#360
  def structure_load(configuration, *arguments); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#315
  def target_version; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#250
  def truncate_all(environment = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#541
  def class_for_adapter(adapter); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#518
  def configs_for(**options); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#533
  def database_adapter_for(db_config, *arguments); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#549
  def each_current_configuration(environment, name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#562
  def each_local_configuration; end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#574
  def local_database?(db_config); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#522
  def resolve_configuration(configuration); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#579
  def schema_sha1(file); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#583
  def structure_dump_flags_for(adapter); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#591
  def structure_load_flags_for(adapter); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#242
  def truncate_tables(db_config); end

  # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#526
  def verbose?; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#48
    def structure_dump_flags; end

    # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#48
    def structure_dump_flags=(val); end

    # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#54
    def structure_load_flags; end

    # source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#54
    def structure_load_flags=(val); end
  end
end

# source://activerecord/7.0.4/lib/active_record/tasks/database_tasks.rb#61
ActiveRecord::Tasks::DatabaseTasks::LOCAL_HOSTS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Tasks::MySQLDatabaseTasks
  # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#14
  def initialize(db_config); end

  # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#35
  def charset; end

  # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#39
  def collation; end

  # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#8
  def connection(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#19
  def create; end

  # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#25
  def drop; end

  # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#8
  def establish_connection(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#30
  def purge; end

  # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#43
  def structure_dump(filename, extra_flags); end

  # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#61
  def structure_load(filename, extra_flags); end

  private

  # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#71
  def configuration_hash; end

  # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#73
  def configuration_hash_without_database; end

  # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#77
  def creation_options; end

  # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#71
  def db_config; end

  # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#84
  def prepare_command_options; end

  # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#102
  def run_cmd(cmd, args, action); end

  # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#106
  def run_cmd_error(cmd, args, action); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#10
    def using_database_configurations?; end
  end
end

# source://activerecord/7.0.4/lib/active_record/tasks/mysql_database_tasks.rb#6
ActiveRecord::Tasks::MySQLDatabaseTasks::ER_DB_CREATE_EXISTS = T.let(T.unsafe(nil), Integer)

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#19
  def initialize(db_config); end

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#35
  def charset; end

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#12
  def clear_active_connections!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#39
  def collation; end

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#12
  def connection(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#24
  def create(master_established = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#30
  def drop; end

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#12
  def establish_connection(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#43
  def purge; end

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#49
  def structure_dump(filename, extra_flags); end

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#82
  def structure_load(filename, extra_flags); end

  private

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#90
  def configuration_hash; end

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#90
  def db_config; end

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#92
  def encoding; end

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#96
  def establish_master_connection; end

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#103
  def psql_env; end

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#127
  def remove_sql_header_comments(filename); end

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#116
  def run_cmd(cmd, args, action); end

  # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#120
  def run_cmd_error(cmd, args, action); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#15
    def using_database_configurations?; end
  end
end

# source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#8
ActiveRecord::Tasks::PostgreSQLDatabaseTasks::DEFAULT_ENCODING = T.let(T.unsafe(nil), String)

# source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#9
ActiveRecord::Tasks::PostgreSQLDatabaseTasks::ON_ERROR_STOP_1 = T.let(T.unsafe(nil), String)

# source://activerecord/7.0.4/lib/active_record/tasks/postgresql_database_tasks.rb#10
ActiveRecord::Tasks::PostgreSQLDatabaseTasks::SQL_COMMENT_BEGIN = T.let(T.unsafe(nil), String)

class ActiveRecord::Tasks::SQLiteDatabaseTasks
  # source://activerecord/7.0.4/lib/active_record/tasks/sqlite_database_tasks.rb#12
  def initialize(db_config, root = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/tasks/sqlite_database_tasks.rb#41
  def charset; end

  # source://activerecord/7.0.4/lib/active_record/tasks/sqlite_database_tasks.rb#6
  def connection(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/tasks/sqlite_database_tasks.rb#17
  def create; end

  # source://activerecord/7.0.4/lib/active_record/tasks/sqlite_database_tasks.rb#24
  def drop; end

  # source://activerecord/7.0.4/lib/active_record/tasks/sqlite_database_tasks.rb#6
  def establish_connection(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/tasks/sqlite_database_tasks.rb#34
  def purge; end

  # source://activerecord/7.0.4/lib/active_record/tasks/sqlite_database_tasks.rb#45
  def structure_dump(filename, extra_flags); end

  # source://activerecord/7.0.4/lib/active_record/tasks/sqlite_database_tasks.rb#60
  def structure_load(filename, extra_flags); end

  private

  # source://activerecord/7.0.4/lib/active_record/tasks/sqlite_database_tasks.rb#66
  def db_config; end

  # source://activerecord/7.0.4/lib/active_record/tasks/sqlite_database_tasks.rb#66
  def root; end

  # source://activerecord/7.0.4/lib/active_record/tasks/sqlite_database_tasks.rb#68
  def run_cmd(cmd, args, out); end

  # source://activerecord/7.0.4/lib/active_record/tasks/sqlite_database_tasks.rb#72
  def run_cmd_error(cmd, args); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/tasks/sqlite_database_tasks.rb#8
    def using_database_configurations?; end
  end
end

module ActiveRecord::TestDatabases
  class << self
    # source://activerecord/7.0.4/lib/active_record/test_databases.rb#11
    def create_and_load_schema(i, env_name:); end
  end
end

module ActiveRecord::TestFixtures
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::TestFixtures::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/test_fixtures.rb#14
  def after_teardown; end

  # source://activerecord/7.0.4/lib/active_record/test_fixtures.rb#9
  def before_setup; end

  # source://activerecord/7.0.4/lib/active_record/test_fixtures.rb#189
  def enlist_fixture_connections; end

  # source://activerecord/7.0.4/lib/active_record/test_fixtures.rb#103
  def run_in_transaction?; end

  # source://activerecord/7.0.4/lib/active_record/test_fixtures.rb#108
  def setup_fixtures(config = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/test_fixtures.rb#172
  def teardown_fixtures; end

  private

  # source://activerecord/7.0.4/lib/active_record/test_fixtures.rb#278
  def instantiate_fixtures; end

  # source://activerecord/7.0.4/lib/active_record/test_fixtures.rb#274
  def load_fixtures(config); end

  # source://activerecord/7.0.4/lib/active_record/test_fixtures.rb#290
  def load_instances?; end

  # source://activerecord/7.0.4/lib/active_record/test_fixtures.rb#202
  def setup_shared_connection_pool; end

  # source://activerecord/7.0.4/lib/active_record/test_fixtures.rb#245
  def teardown_shared_connection_pool; end

  module GeneratedClassMethods
    def fixture_class_names; end
    def fixture_class_names=(value); end
    def fixture_class_names?; end
    def fixture_path; end
    def fixture_path=(value); end
    def fixture_path?; end
    def fixture_table_names; end
    def fixture_table_names=(value); end
    def fixture_table_names?; end
    def lock_threads; end
    def lock_threads=(value); end
    def lock_threads?; end
    def pre_loaded_fixtures; end
    def pre_loaded_fixtures=(value); end
    def pre_loaded_fixtures?; end
    def use_instantiated_fixtures; end
    def use_instantiated_fixtures=(value); end
    def use_instantiated_fixtures?; end
    def use_transactional_tests; end
    def use_transactional_tests=(value); end
    def use_transactional_tests?; end
  end

  module GeneratedInstanceMethods
    def fixture_class_names; end
    def fixture_class_names=(value); end
    def fixture_class_names?; end
    def fixture_path; end
    def fixture_path?; end
    def fixture_table_names; end
    def fixture_table_names=(value); end
    def fixture_table_names?; end
    def lock_threads; end
    def lock_threads=(value); end
    def lock_threads?; end
    def pre_loaded_fixtures; end
    def pre_loaded_fixtures=(value); end
    def pre_loaded_fixtures?; end
    def use_instantiated_fixtures; end
    def use_instantiated_fixtures=(value); end
    def use_instantiated_fixtures?; end
    def use_transactional_tests; end
    def use_transactional_tests=(value); end
    def use_transactional_tests?; end
  end
end

module ActiveRecord::TestFixtures::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/test_fixtures.rb#42
  def fixtures(*fixture_set_names); end

  # source://activerecord/7.0.4/lib/active_record/test_fixtures.rb#38
  def set_fixture_class(class_names = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/test_fixtures.rb#56
  def setup_fixture_accessors(fixture_set_names = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/test_fixtures.rb#92
  def uses_transaction(*methods); end

  # source://activerecord/7.0.4/lib/active_record/test_fixtures.rb#97
  def uses_transaction?(method); end
end

class ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/associations.rb#178
  def initialize(owner = T.unsafe(nil), reflection = T.unsafe(nil)); end
end

class ActiveRecord::ThroughNestedAssociationsAreReadonly < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/associations.rb#209
  def initialize(owner = T.unsafe(nil), reflection = T.unsafe(nil)); end
end

module ActiveRecord::Timestamp
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Timestamp::ClassMethods

  private

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#99
  def _create_record; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#111
  def _update_record; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#141
  def all_timestamp_attributes_in_model; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#156
  def clear_timestamp_attributes; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#124
  def create_or_update(touch: T.unsafe(nil), **_arg1); end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#145
  def current_time_from_proper_timezone; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#50
  def initialize_dup(other); end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#149
  def max_updated_column_timestamp; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#129
  def should_record_timestamps?; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#133
  def timestamp_attributes_for_create_in_model; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#137
  def timestamp_attributes_for_update_in_model; end

  module GeneratedClassMethods
    def record_timestamps; end
    def record_timestamps=(value); end
    def record_timestamps?; end
  end

  module GeneratedInstanceMethods
    def record_timestamps; end
    def record_timestamps=(value); end
    def record_timestamps?; end
  end
end

module ActiveRecord::Timestamp::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#72
  def all_timestamp_attributes_in_model; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#77
  def current_time_from_proper_timezone; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#62
  def timestamp_attributes_for_create_in_model; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#67
  def timestamp_attributes_for_update_in_model; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#56
  def touch_attributes_with_time(*names, time: T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#90
  def reload_schema_from_cache; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#82
  def timestamp_attributes_for_create; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#86
  def timestamp_attributes_for_update; end
end

module ActiveRecord::TouchLater
  # source://activerecord/7.0.4/lib/active_record/touch_later.rb#6
  def before_committed!; end

  # source://activerecord/7.0.4/lib/active_record/touch_later.rb#34
  def touch(*names, time: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/touch_later.rb#11
  def touch_later(*names); end

  private

  # source://activerecord/7.0.4/lib/active_record/touch_later.rb#61
  def belongs_to_touch_method; end

  # source://activerecord/7.0.4/lib/active_record/touch_later.rb#57
  def has_defer_touch_attrs?; end

  # source://activerecord/7.0.4/lib/active_record/touch_later.rb#45
  def surreptitiously_touch(attr_names); end

  # source://activerecord/7.0.4/lib/active_record/touch_later.rb#52
  def touch_deferred_attributes; end
end

class ActiveRecord::TransactionIsolationError < ::ActiveRecord::ActiveRecordError; end
class ActiveRecord::TransactionRollbackError < ::ActiveRecord::StatementInvalid; end

module ActiveRecord::Transactions
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Transactions::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#309
  def before_committed!; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#317
  def committed!(should_run_callbacks: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#293
  def destroy; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#329
  def rolledback!(force_restore_state: T.unsafe(nil), should_run_callbacks: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#297
  def save(**_arg0); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#301
  def save!(**_arg0); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#305
  def touch(*_arg0, **_arg1); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#289
  def transaction(**options, &block); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#360
  def trigger_transactional_callbacks?; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#345
  def with_transaction_returning_status; end

  private

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#366
  def _committed_already_called; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#366
  def _trigger_destroy_callback; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#366
  def _trigger_update_callback; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#433
  def add_to_transaction(ensure_finalize = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#389
  def clear_transaction_record_state; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#437
  def has_transactional_callbacks?; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#369
  def remember_transaction_record_state; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#396
  def restore_transaction_record_state(force_restore_state = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#418
  def transaction_include_any_action?(actions); end
end

# source://activerecord/7.0.4/lib/active_record/transactions.rb#8
ActiveRecord::Transactions::ACTIONS = T.let(T.unsafe(nil), Array)

module ActiveRecord::Transactions::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/transactions.rb#229
  def after_commit(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#241
  def after_create_commit(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#253
  def after_destroy_commit(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#261
  def after_rollback(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#235
  def after_save_commit(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#247
  def after_update_commit(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#212
  def before_commit(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#208
  def transaction(**options, &block); end

  private

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#281
  def assert_valid_transaction_action(actions); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#267
  def set_options_for_callbacks!(args, enforced_options = T.unsafe(nil)); end
end

module ActiveRecord::Translation
  include ::ActiveModel::Naming
  include ::ActiveModel::Translation

  # source://activerecord/7.0.4/lib/active_record/translation.rb#20
  def i18n_scope; end

  # source://activerecord/7.0.4/lib/active_record/translation.rb#8
  def lookup_ancestors; end
end

module ActiveRecord::Type
  class << self
    # source://activerecord/7.0.4/lib/active_record/type.rb#49
    def adapter_name_from(model); end

    # source://activerecord/7.0.4/lib/active_record/type.rb#27
    def add_modifier(*_arg0, **_arg1, &_arg2); end

    # source://activerecord/7.0.4/lib/active_record/type.rb#45
    def default_value; end

    # source://activerecord/7.0.4/lib/active_record/type.rb#41
    def lookup(*args, adapter: T.unsafe(nil), **kwargs); end

    # source://activerecord/7.0.4/lib/active_record/type.rb#37
    def register(type_name, klass = T.unsafe(nil), **options, &block); end

    # source://activerecord/7.0.4/lib/active_record/type.rb#26
    def registry; end

    # source://activerecord/7.0.4/lib/active_record/type.rb#26
    def registry=(_arg0); end

    private

    # source://activerecord/7.0.4/lib/active_record/type.rb#54
    def current_adapter_name; end
  end
end

class ActiveRecord::Type::AdapterSpecificRegistry
  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#9
  def initialize; end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#18
  def add_modifier(options, klass, **args); end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#30
  def lookup(symbol, *args, **kwargs); end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#22
  def register(type_name, klass = T.unsafe(nil), **options, &block); end

  private

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#43
  def find_registration(symbol, *args, **kwargs); end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#13
  def initialize_copy(other); end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#41
  def registrations; end
end

# source://activerecord/7.0.4/lib/active_record/type.rb#59
ActiveRecord::Type::BigInteger = ActiveModel::Type::BigInteger

# source://activerecord/7.0.4/lib/active_record/type.rb#60
ActiveRecord::Type::Binary = ActiveModel::Type::Binary

# source://activerecord/7.0.4/lib/active_record/type.rb#61
ActiveRecord::Type::Boolean = ActiveModel::Type::Boolean

class ActiveRecord::Type::Date < ::ActiveModel::Type::Date
  include ::ActiveRecord::Type::Internal::Timezone
end

class ActiveRecord::Type::DateTime < ::ActiveModel::Type::DateTime
  include ::ActiveRecord::Type::Internal::Timezone
end

# source://activerecord/7.0.4/lib/active_record/type.rb#62
ActiveRecord::Type::Decimal = ActiveModel::Type::Decimal

class ActiveRecord::Type::DecimalWithoutScale < ::ActiveModel::Type::BigInteger
  # source://activerecord/7.0.4/lib/active_record/type/decimal_without_scale.rb#6
  def type; end

  # source://activerecord/7.0.4/lib/active_record/type/decimal_without_scale.rb#10
  def type_cast_for_schema(value); end
end

class ActiveRecord::Type::DecorationRegistration < ::ActiveRecord::Type::Registration
  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#118
  def initialize(options, klass, adapter: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#124
  def call(registry, *args, **kwargs); end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#129
  def matches?(*args, **kwargs); end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#133
  def priority; end

  private

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#138
  def klass; end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#140
  def matches_options?(**kwargs); end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#138
  def options; end
end

# source://activerecord/7.0.4/lib/active_record/type.rb#63
ActiveRecord::Type::Float = ActiveModel::Type::Float

class ActiveRecord::Type::HashLookupTypeMap
  # source://activerecord/7.0.4/lib/active_record/type/hash_lookup_type_map.rb#6
  def initialize(parent = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/type/hash_lookup_type_map.rb#39
  def alias_type(type, alias_type); end

  # source://activerecord/7.0.4/lib/active_record/type/hash_lookup_type_map.rb#34
  def clear; end

  # source://activerecord/7.0.4/lib/active_record/type/hash_lookup_type_map.rb#17
  def fetch(lookup_key, *args, &block); end

  # source://activerecord/7.0.4/lib/active_record/type/hash_lookup_type_map.rb#43
  def key?(key); end

  # source://activerecord/7.0.4/lib/active_record/type/hash_lookup_type_map.rb#47
  def keys; end

  # source://activerecord/7.0.4/lib/active_record/type/hash_lookup_type_map.rb#13
  def lookup(lookup_key, *args); end

  # source://activerecord/7.0.4/lib/active_record/type/hash_lookup_type_map.rb#23
  def register_type(key, value = T.unsafe(nil), &block); end

  private

  # source://activerecord/7.0.4/lib/active_record/type/hash_lookup_type_map.rb#52
  def perform_fetch(type, *args, &block); end
end

# source://activerecord/7.0.4/lib/active_record/type.rb#65
ActiveRecord::Type::ImmutableString = ActiveModel::Type::ImmutableString

# source://activerecord/7.0.4/lib/active_record/type.rb#64
ActiveRecord::Type::Integer = ActiveModel::Type::Integer

module ActiveRecord::Type::Internal; end

module ActiveRecord::Type::Internal::Timezone
  # source://activerecord/7.0.4/lib/active_record/type/internal/timezone.rb#11
  def default_timezone; end

  # source://activerecord/7.0.4/lib/active_record/type/internal/timezone.rb#7
  def is_utc?; end
end

class ActiveRecord::Type::Json < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Mutable

  # source://activerecord/7.0.4/lib/active_record/type/json.rb#25
  def accessor; end

  # source://activerecord/7.0.4/lib/active_record/type/json.rb#21
  def changed_in_place?(raw_old_value, new_value); end

  # source://activerecord/7.0.4/lib/active_record/type/json.rb#12
  def deserialize(value); end

  # source://activerecord/7.0.4/lib/active_record/type/json.rb#17
  def serialize(value); end

  # source://activerecord/7.0.4/lib/active_record/type/json.rb#8
  def type; end
end

class ActiveRecord::Type::Registration
  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#51
  def initialize(name, block, adapter: T.unsafe(nil), override: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#70
  def <=>(other); end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#58
  def call(_registry, *args, adapter: T.unsafe(nil), **kwargs); end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#66
  def matches?(type_name, *args, **kwargs); end

  protected

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#80
  def adapter; end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#80
  def block; end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#80
  def name; end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#80
  def override; end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#82
  def priority; end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#93
  def priority_except_adapter; end

  private

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#102
  def conflicts_with?(other); end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#111
  def has_adapter_conflict?(other); end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#98
  def matches_adapter?(adapter: T.unsafe(nil), **_arg1); end

  # source://activerecord/7.0.4/lib/active_record/type/adapter_specific_registry.rb#107
  def same_priority_except_adapter?(other); end
end

class ActiveRecord::Type::Serialized
  include ::ActiveModel::Type::Helpers::Mutable

  # source://activerecord/7.0.4/lib/active_record/type/serialized.rb#12
  def initialize(subtype, coder); end

  # source://activerecord/7.0.4/lib/active_record/type/serialized.rb#44
  def accessor; end

  # source://activerecord/7.0.4/lib/active_record/type/serialized.rb#48
  def assert_valid_value(value); end

  # source://activerecord/7.0.4/lib/active_record/type/serialized.rb#37
  def changed_in_place?(raw_old_value, value); end

  # source://activerecord/7.0.4/lib/active_record/type/serialized.rb#10
  def coder; end

  # source://activerecord/7.0.4/lib/active_record/type/serialized.rb#18
  def deserialize(value); end

  # source://activerecord/7.0.4/lib/active_record/type/serialized.rb#54
  def force_equality?(value); end

  # source://activerecord/7.0.4/lib/active_record/type/serialized.rb#33
  def inspect; end

  # source://activerecord/7.0.4/lib/active_record/type/serialized.rb#26
  def serialize(value); end

  # source://activerecord/7.0.4/lib/active_record/type/serialized.rb#10
  def subtype; end

  private

  # source://activerecord/7.0.4/lib/active_record/type/serialized.rb#59
  def default_value?(value); end

  # source://activerecord/7.0.4/lib/active_record/type/serialized.rb#63
  def encoded(value); end
end

# source://activerecord/7.0.4/lib/active_record/type.rb#66
ActiveRecord::Type::String = ActiveModel::Type::String

class ActiveRecord::Type::Text < ::ActiveModel::Type::String
  # source://activerecord/7.0.4/lib/active_record/type/text.rb#6
  def type; end
end

class ActiveRecord::Type::Time < ::ActiveModel::Type::Time
  include ::ActiveRecord::Type::Internal::Timezone

  # source://activerecord/7.0.4/lib/active_record/type/time.rb#11
  def serialize(value); end

  private

  # source://activerecord/7.0.4/lib/active_record/type/time.rb#21
  def cast_value(value); end
end

class ActiveRecord::Type::Time::Value; end

class ActiveRecord::Type::TypeMap
  # source://activerecord/7.0.4/lib/active_record/type/type_map.rb#8
  def initialize(parent = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/type/type_map.rb#35
  def alias_type(key, target_key); end

  # source://activerecord/7.0.4/lib/active_record/type/type_map.rb#18
  def fetch(lookup_key, &block); end

  # source://activerecord/7.0.4/lib/active_record/type/type_map.rb#14
  def lookup(lookup_key); end

  # source://activerecord/7.0.4/lib/active_record/type/type_map.rb#24
  def register_type(key, value = T.unsafe(nil), &block); end

  protected

  # source://activerecord/7.0.4/lib/active_record/type/type_map.rb#43
  def perform_fetch(lookup_key, &block); end
end

class ActiveRecord::Type::UnsignedInteger < ::ActiveModel::Type::Integer
  private

  # source://activerecord/7.0.4/lib/active_record/type/unsigned_integer.rb#7
  def max_value; end

  # source://activerecord/7.0.4/lib/active_record/type/unsigned_integer.rb#11
  def min_value; end
end

# source://activerecord/7.0.4/lib/active_record/type.rb#67
ActiveRecord::Type::Value = ActiveModel::Type::Value

module ActiveRecord::TypeCaster; end

class ActiveRecord::TypeCaster::Connection
  # source://activerecord/7.0.4/lib/active_record/type_caster/connection.rb#6
  def initialize(klass, table_name); end

  # source://activerecord/7.0.4/lib/active_record/type_caster/connection.rb#11
  def type_cast_for_database(attr_name, value); end

  # source://activerecord/7.0.4/lib/active_record/type_caster/connection.rb#16
  def type_for_attribute(attr_name); end

  private

  # source://activerecord/7.0.4/lib/active_record/type_caster/connection.rb#27
  def connection(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/type_caster/connection.rb#30
  def table_name; end
end

class ActiveRecord::TypeCaster::Map
  # source://activerecord/7.0.4/lib/active_record/type_caster/map.rb#6
  def initialize(klass); end

  # source://activerecord/7.0.4/lib/active_record/type_caster/map.rb#10
  def type_cast_for_database(attr_name, value); end

  # source://activerecord/7.0.4/lib/active_record/type_caster/map.rb#15
  def type_for_attribute(name); end

  private

  # source://activerecord/7.0.4/lib/active_record/type_caster/map.rb#20
  def klass; end
end

class ActiveRecord::TypeConflictError < ::StandardError; end

# source://activerecord/7.0.4/lib/active_record/errors.rb#347
ActiveRecord::UnknownAttributeError = ActiveModel::UnknownAttributeError

class ActiveRecord::UnknownAttributeReference < ::ActiveRecord::ActiveRecordError; end

class ActiveRecord::UnknownPrimaryKey < ::ActiveRecord::ActiveRecordError
  # source://activerecord/7.0.4/lib/active_record/errors.rb#378
  def initialize(model = T.unsafe(nil), description = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/errors.rb#376
  def model; end
end

module ActiveRecord::VERSION; end

# source://activerecord/7.0.4/lib/active_record/gem_version.rb#10
ActiveRecord::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://activerecord/7.0.4/lib/active_record/gem_version.rb#11
ActiveRecord::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://activerecord/7.0.4/lib/active_record/gem_version.rb#13
ActiveRecord::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)

# source://activerecord/7.0.4/lib/active_record/gem_version.rb#15
ActiveRecord::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://activerecord/7.0.4/lib/active_record/gem_version.rb#12
ActiveRecord::VERSION::TINY = T.let(T.unsafe(nil), Integer)

module ActiveRecord::Validations
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods
  mixes_in_class_methods ::ActiveRecord::Validations::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/validations.rb#46
  def save(**options); end

  # source://activerecord/7.0.4/lib/active_record/validations.rb#52
  def save!(**options); end

  # source://activerecord/7.0.4/lib/active_record/validations.rb#66
  def valid?(context = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/validations.rb#66
  def validate(context = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/validations.rb#75
  def default_validation_context; end

  # source://activerecord/7.0.4/lib/active_record/validations.rb#83
  def perform_validations(options = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/validations.rb#79
  def raise_validation_error; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
  end
end

class ActiveRecord::Validations::AbsenceValidator < ::ActiveModel::Validations::AbsenceValidator
  # source://activerecord/7.0.4/lib/active_record/validations/absence.rb#6
  def validate_each(record, attribute, association_or_value); end
end

class ActiveRecord::Validations::AssociatedValidator < ::ActiveModel::EachValidator
  # source://activerecord/7.0.4/lib/active_record/validations/associated.rb#6
  def validate_each(record, attribute, value); end

  private

  # source://activerecord/7.0.4/lib/active_record/validations/associated.rb#13
  def valid_object?(record); end
end

module ActiveRecord::Validations::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/validations/absence.rb#20
  def validates_absence_of(*attr_names); end

  # source://activerecord/7.0.4/lib/active_record/validations/associated.rb#54
  def validates_associated(*attr_names); end

  # source://activerecord/7.0.4/lib/active_record/validations/length.rb#19
  def validates_length_of(*attr_names); end

  # source://activerecord/7.0.4/lib/active_record/validations/numericality.rb#30
  def validates_numericality_of(*attr_names); end

  # source://activerecord/7.0.4/lib/active_record/validations/presence.rb#63
  def validates_presence_of(*attr_names); end

  # source://activerecord/7.0.4/lib/active_record/validations/length.rb#19
  def validates_size_of(*attr_names); end

  # source://activerecord/7.0.4/lib/active_record/validations/uniqueness.rb#241
  def validates_uniqueness_of(*attr_names); end
end

class ActiveRecord::Validations::LengthValidator < ::ActiveModel::Validations::LengthValidator
  # source://activerecord/7.0.4/lib/active_record/validations/length.rb#6
  def validate_each(record, attribute, association_or_value); end
end

class ActiveRecord::Validations::NumericalityValidator < ::ActiveModel::Validations::NumericalityValidator
  # source://activerecord/7.0.4/lib/active_record/validations/numericality.rb#6
  def validate_each(record, attribute, value, precision: T.unsafe(nil), scale: T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/validations/numericality.rb#13
  def column_precision_for(record, attribute); end

  # source://activerecord/7.0.4/lib/active_record/validations/numericality.rb#17
  def column_scale_for(record, attribute); end
end

class ActiveRecord::Validations::PresenceValidator < ::ActiveModel::Validations::PresenceValidator
  # source://activerecord/7.0.4/lib/active_record/validations/presence.rb#6
  def validate_each(record, attribute, association_or_value); end
end

class ActiveRecord::Validations::UniquenessValidator < ::ActiveModel::EachValidator
  # source://activerecord/7.0.4/lib/active_record/validations/uniqueness.rb#6
  def initialize(options); end

  # source://activerecord/7.0.4/lib/active_record/validations/uniqueness.rb#19
  def validate_each(record, attribute, value); end

  private

  # source://activerecord/7.0.4/lib/active_record/validations/uniqueness.rb#67
  def build_relation(klass, attribute, value); end

  # source://activerecord/7.0.4/lib/active_record/validations/uniqueness.rb#57
  def find_finder_class_for(record); end

  # source://activerecord/7.0.4/lib/active_record/validations/uniqueness.rb#98
  def map_enum_attribute(klass, attribute, value); end

  # source://activerecord/7.0.4/lib/active_record/validations/uniqueness.rb#85
  def scope_relation(record, relation); end
end

class ActiveRecord::ValueTooLong < ::ActiveRecord::StatementInvalid; end
class ActiveRecord::WrappedDatabaseException < ::ActiveRecord::StatementInvalid; end

module ActiveSupport::ActionableError
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::ActionableError::ClassMethods

  class << self
    # source://activesupport/7.0.4/lib/active_support/actionable_error.rb#18
    def actions(error); end

    # source://activesupport/7.0.4/lib/active_support/actionable_error.rb#27
    def dispatch(error, name); end
  end

  module GeneratedClassMethods
    def _actions; end
    def _actions=(value); end
    def _actions?; end
  end

  module GeneratedInstanceMethods
    def _actions; end
    def _actions=(value); end
    def _actions?; end
  end
end

module ActiveSupport::ActionableError::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/actionable_error.rb#43
  def action(name, &block); end
end

class ActiveSupport::ActionableError::NonActionable < ::StandardError; end

module ActiveSupport::Autoload
  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#37
  def autoload(const_name, path = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#57
  def autoload_at(path); end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#50
  def autoload_under(path); end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#75
  def autoloads; end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#64
  def eager_autoload; end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#71
  def eager_load!; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#28
    def extended(base); end
  end
end

module ActiveSupport::Benchmarkable
  # source://activesupport/7.0.4/lib/active_support/benchmarkable.rb#37
  def benchmark(message = T.unsafe(nil), options = T.unsafe(nil), &block); end
end

module ActiveSupport::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#95
  def run_callbacks(kind); end

  private

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#147
  def halted_callback_hook(filter, name); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://activesupport/7.0.4/lib/active_support/callbacks.rb#71
ActiveSupport::Callbacks::CALLBACK_FILTER_TYPES = T.let(T.unsafe(nil), Array)

module ActiveSupport::Callbacks::CallTemplate
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#533
    def build(filter, callback); end
  end
end

class ActiveSupport::Callbacks::CallTemplate::InstanceExec0
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#435
  def initialize(block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#439
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#449
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#443
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::InstanceExec1
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#457
  def initialize(block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#461
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#471
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#465
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::InstanceExec2
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#479
  def initialize(block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#483
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#495
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#488
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::MethodCall
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#377
  def initialize(method); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#394
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#404
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#398
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::ObjectCall
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#412
  def initialize(target, method); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#417
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#427
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#421
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::ProcCall
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#504
  def initialize(target); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#508
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#518
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#512
  def make_lambda; end
end

class ActiveSupport::Callbacks::Callback
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#295
  def initialize(name, filter, kind, options, chain_config); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#330
  def apply(callback_sequence); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#293
  def chain_config; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#344
  def current_scopes; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#320
  def duplicates?(other); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#293
  def filter; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def kind; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def kind=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#316
  def matches?(_kind, _filter); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#304
  def merge_conditional_options(chain, if_option:, unless_option:); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def name; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def name=(_arg0); end

  private

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#352
  def check_conditionals(conditionals); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#367
  def conditions_lambdas; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#281
    def build(chain, filter, kind, options); end
  end
end

class ActiveSupport::Callbacks::CallbackChain
  include ::Enumerable

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#608
  def initialize(name, config); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#654
  def append(*callbacks); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#633
  def clear; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#645
  def compile; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#606
  def config; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#628
  def delete(o); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#619
  def each(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#621
  def empty?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#620
  def index(o); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#623
  def insert(index, o); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#606
  def name; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#658
  def prepend(*callbacks); end

  protected

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#663
  def chain; end

  private

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#666
  def append_one(callback); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#683
  def default_terminator; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#639
  def initialize_copy(other); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#672
  def prepend_one(callback); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#678
  def remove_duplicates(callback); end
end

class ActiveSupport::Callbacks::CallbackSequence
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#557
  def initialize(nested = T.unsafe(nil), call_template = T.unsafe(nil), user_conditions = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#571
  def after(&after); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#576
  def around(call_template, user_conditions); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#566
  def before(&before); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#590
  def expand_call_template(arg, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#586
  def final?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#598
  def invoke_after(arg); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#594
  def invoke_before(arg); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#584
  def nested; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#580
  def skip?(arg); end
end

module ActiveSupport::Callbacks::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#705
  def __update_callbacks(name); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#917
  def define_callbacks(*names); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#696
  def normalize_callback_params(filters, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#827
  def reset_callbacks(name); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#756
  def set_callback(name, *filter_list, &block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#802
  def skip_callback(name, *filter_list, &block); end

  protected

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#948
  def get_callbacks(name); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#952
  def set_callbacks(name, callbacks); end
end

module ActiveSupport::Callbacks::Conditionals; end

class ActiveSupport::Callbacks::Conditionals::Value
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#152
  def initialize(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#155
  def call(target, value); end
end

module ActiveSupport::Callbacks::Filters; end

class ActiveSupport::Callbacks::Filters::After
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#213
    def build(callback_sequence, user_callback, user_conditions, chain_config); end

    private

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#255
    def conditional(callback_sequence, user_callback, user_conditions); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#244
    def halting(callback_sequence, user_callback); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#229
    def halting_and_conditional(callback_sequence, user_callback, user_conditions); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#269
    def simple(callback_sequence, user_callback); end
  end
end

class ActiveSupport::Callbacks::Filters::Before
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#163
    def build(callback_sequence, user_callback, user_conditions, chain_config, filter, name); end

    private

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#192
    def halting(callback_sequence, user_callback, halted_lambda, filter, name); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#173
    def halting_and_conditional(callback_sequence, user_callback, user_conditions, halted_lambda, filter, name); end
  end
end

class ActiveSupport::Callbacks::Filters::Environment < ::Struct
  def halted; end
  def halted=(_); end
  def target; end
  def target=(_); end
  def value; end
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module ActiveSupport::Concern
  # source://activesupport/7.0.4/lib/active_support/concern.rb#127
  def append_features(base); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#207
  def class_methods(&class_methods_module_definition); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#156
  def included(base = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#140
  def prepend_features(base); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#173
  def prepended(base = T.unsafe(nil), &block); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/concern.rb#123
    def extended(base); end
  end
end

class ActiveSupport::Concern::MultipleIncludedBlocks < ::StandardError
  # source://activesupport/7.0.4/lib/active_support/concern.rb#112
  def initialize; end
end

class ActiveSupport::Concern::MultiplePrependBlocks < ::StandardError
  # source://activesupport/7.0.4/lib/active_support/concern.rb#118
  def initialize; end
end

module ActiveSupport::DescendantsTracker
  # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#88
  def descendants; end

  # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#92
  def direct_descendants; end

  # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#82
  def subclasses; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#66
    def clear(classes); end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#62
    def descendants(klass); end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#11
    def direct_descendants(klass); end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#50
    def disable_clear!; end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#77
    def native?; end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#58
    def subclasses(klass); end
  end
end

class ActiveSupport::LogSubscriber < ::ActiveSupport::Subscriber
  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
  def colorize_logging; end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
  def colorize_logging=(val); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def debug(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def error(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def fatal(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#114
  def finish(name, id, payload); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def info(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#106
  def logger; end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#120
  def publish_event(event); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#110
  def start(name, id, payload); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def unknown(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def warn(progname = T.unsafe(nil), &block); end

  private

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#139
  def color(text, color, bold = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#146
  def log_exception(name, e); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
    def colorize_logging; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
    def colorize_logging=(val); end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#96
    def flush_all!; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#91
    def log_subscribers; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#83
    def logger; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#89
    def logger=(_arg0); end

    private

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#101
    def fetch_public_methods(subscriber, inherit_all); end
  end
end

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#71
ActiveSupport::LogSubscriber::BLACK = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#75
ActiveSupport::LogSubscriber::BLUE = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#68
ActiveSupport::LogSubscriber::BOLD = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#67
ActiveSupport::LogSubscriber::CLEAR = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#77
ActiveSupport::LogSubscriber::CYAN = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#73
ActiveSupport::LogSubscriber::GREEN = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#76
ActiveSupport::LogSubscriber::MAGENTA = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#72
ActiveSupport::LogSubscriber::RED = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#78
ActiveSupport::LogSubscriber::WHITE = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#74
ActiveSupport::LogSubscriber::YELLOW = T.let(T.unsafe(nil), String)

module ActiveSupport::Rescuable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#170
  def handler_for_rescue(exception); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#164
  def rescue_with_handler(exception); end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

module ActiveSupport::Rescuable::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#103
  def handler_for_rescue(exception, object: T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#51
  def rescue_from(*klasses, with: T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#88
  def rescue_with_handler(exception, object: T.unsafe(nil), visited_exceptions: T.unsafe(nil)); end

  private

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#137
  def constantize_rescue_handler_class(class_or_name); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#122
  def find_rescue_handler(exception); end
end

class ActiveSupport::Subscriber
  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#128
  def initialize; end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#143
  def finish(name, id, payload); end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#126
  def patterns; end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#152
  def publish_event(event); end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#134
  def start(name, id, payload); end

  private

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#158
  def event_stack; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#33
    def attach_to(namespace, subscriber = T.unsafe(nil), notifier = T.unsafe(nil), inherit_all: T.unsafe(nil)); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#48
    def detach_from(namespace, notifier = T.unsafe(nil)); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#67
    def method_added(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#76
    def subscribers; end

    private

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#83
    def add_event_subscriber(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#121
    def fetch_public_methods(subscriber, inherit_all); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#105
    def find_attached_subscriber; end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#109
    def invalid_event?(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#81
    def namespace; end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#81
    def notifier; end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#117
    def pattern_subscribed?(pattern); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#113
    def prepare_pattern(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#94
    def remove_event_subscriber(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#81
    def subscriber; end
  end
end

module PG
  include ::PG::Constants

  class << self
    # source://pg/1.4.4/lib/pg.rb#68
    def connect(*args, &block); end

    def init_openssl(_arg0, _arg1); end
    def init_ssl(_arg0); end
    def is_threadsafe?; end
    def isthreadsafe; end
    def library_version; end
    def threadsafe?; end

    # source://pg/1.4.4/lib/pg.rb#62
    def version_string(include_buildnum = T.unsafe(nil)); end
  end
end

class PG::ActiveSqlTransaction < ::PG::InvalidTransactionState; end
class PG::AdminShutdown < ::PG::OperatorIntervention; end
class PG::AmbiguousAlias < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::AmbiguousColumn < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::AmbiguousFunction < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::AmbiguousParameter < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::ArraySubscriptError < ::PG::DataException; end
class PG::AssertFailure < ::PG::PlpgsqlError; end
class PG::BadCopyFileFormat < ::PG::DataException; end

class PG::BasicTypeMapBasedOnResult < ::PG::TypeMapByOid
  include ::PG::BasicTypeRegistry::Checker

  # source://pg/1.4.4/lib/pg/basic_type_map_based_on_result.rb#39
  def initialize(connection_or_coder_maps, registry: T.unsafe(nil)); end
end

class PG::BasicTypeMapForQueries < ::PG::TypeMapByClass
  include ::PG::BasicTypeRegistry::Checker

  # source://pg/1.4.4/lib/pg/basic_type_map_for_queries.rb#50
  def initialize(connection_or_coder_maps, registry: T.unsafe(nil), if_undefined: T.unsafe(nil)); end

  # source://pg/1.4.4/lib/pg/basic_type_map_for_queries.rb#86
  def encode_array_as; end

  # source://pg/1.4.4/lib/pg/basic_type_map_for_queries.rb#71
  def encode_array_as=(pg_type); end

  private

  # source://pg/1.4.4/lib/pg/basic_type_map_for_queries.rb#148
  def array_encoders_by_klass; end

  # source://pg/1.4.4/lib/pg/basic_type_map_for_queries.rb#96
  def coder_by_name(format, direction, name); end

  # source://pg/1.4.4/lib/pg/basic_type_map_for_queries.rb#155
  def get_array_type(value); end

  # source://pg/1.4.4/lib/pg/basic_type_map_for_queries.rb#90
  def init_encoders; end

  # source://pg/1.4.4/lib/pg/basic_type_map_for_queries.rb#105
  def populate_encoder_list; end

  # source://pg/1.4.4/lib/pg/basic_type_map_for_queries.rb#101
  def undefined(name, format); end
end

class PG::BasicTypeMapForQueries::BinaryData < ::String; end

# source://pg/1.4.4/lib/pg/basic_type_map_for_queries.rb#182
PG::BasicTypeMapForQueries::DEFAULT_ARRAY_TYPE_MAP = T.let(T.unsafe(nil), Hash)

# source://pg/1.4.4/lib/pg/basic_type_map_for_queries.rb#165
PG::BasicTypeMapForQueries::DEFAULT_TYPE_MAP = T.let(T.unsafe(nil), Hash)

class PG::BasicTypeMapForQueries::UndefinedEncoder < ::RuntimeError; end

class PG::BasicTypeMapForResults < ::PG::TypeMapByOid
  include ::PG::BasicTypeRegistry::Checker

  # source://pg/1.4.4/lib/pg/basic_type_map_for_results.rb#70
  def initialize(connection_or_coder_maps, registry: T.unsafe(nil)); end
end

class PG::BasicTypeMapForResults::WarningTypeMap < ::PG::TypeMapInRuby
  # source://pg/1.4.4/lib/pg/basic_type_map_for_results.rb#54
  def initialize(typenames); end

  # source://pg/1.4.4/lib/pg/basic_type_map_for_results.rb#59
  def typecast_result_value(result, _tuple, field); end
end

class PG::BasicTypeRegistry
  include ::PG::BasicTypeRegistry::Checker

  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#165
  def initialize; end

  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#201
  def alias_type(format, new, old); end

  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#173
  def coders_for(format, direction); end

  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#214
  def define_default_types; end

  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#182
  def register_coder(coder); end

  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#214
  def register_default_types; end

  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#194
  def register_type(format, name, encoder_class, decoder_class); end

  class << self
    # source://pg/1.4.4/lib/pg/basic_type_registry.rb#295
    def alias_type(*args); end

    # source://pg/1.4.4/lib/pg/basic_type_registry.rb#295
    def register_coder(*args); end

    # source://pg/1.4.4/lib/pg/basic_type_registry.rb#295
    def register_type(*args); end
  end
end

module PG::BasicTypeRegistry::Checker
  protected

  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#153
  def build_coder_maps(conn_or_maps, registry: T.unsafe(nil)); end

  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#148
  def check_format_and_direction(format, direction); end
end

# source://pg/1.4.4/lib/pg/basic_type_registry.rb#146
PG::BasicTypeRegistry::Checker::ValidDirections = T.let(T.unsafe(nil), Hash)

# source://pg/1.4.4/lib/pg/basic_type_registry.rb#145
PG::BasicTypeRegistry::Checker::ValidFormats = T.let(T.unsafe(nil), Hash)

class PG::BasicTypeRegistry::CoderMap
  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#44
  def initialize(result, coders_by_name, format, arraycoder); end

  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#83
  def coder_by_name(name); end

  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#87
  def coder_by_oid(oid); end

  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#79
  def coders; end

  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#81
  def coders_by_name; end

  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#80
  def coders_by_oid; end
end

# source://pg/1.4.4/lib/pg/basic_type_registry.rb#36
PG::BasicTypeRegistry::CoderMap::DONT_QUOTE_TYPES = T.let(T.unsafe(nil), Hash)

class PG::BasicTypeRegistry::CoderMapsBundle
  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#111
  def initialize(connection, registry: T.unsafe(nil)); end

  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#135
  def each_format(direction); end

  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#139
  def map_for(format, direction); end

  # source://pg/1.4.4/lib/pg/basic_type_registry.rb#109
  def typenames_by_oid; end
end

# source://pg/1.4.4/lib/pg/basic_type_registry.rb#290
PG::BasicTypeRegistry::DEFAULT_TYPE_REGISTRY = T.let(T.unsafe(nil), PG::BasicTypeRegistry)

module PG::BinaryDecoder; end

class PG::BinaryDecoder::Boolean < ::PG::SimpleDecoder
  include ::PG::Coder::BinaryFormatting

  def decode(*_arg0); end
end

PG::BinaryDecoder::Boolean::CFUNC = T.let(T.unsafe(nil), Object)

class PG::BinaryDecoder::Bytea < ::PG::SimpleDecoder
  include ::PG::Coder::BinaryFormatting

  def decode(*_arg0); end
end

PG::BinaryDecoder::Bytea::CFUNC = T.let(T.unsafe(nil), Object)

class PG::BinaryDecoder::Float < ::PG::SimpleDecoder
  include ::PG::Coder::BinaryFormatting

  def decode(*_arg0); end
end

PG::BinaryDecoder::Float::CFUNC = T.let(T.unsafe(nil), Object)

class PG::BinaryDecoder::Integer < ::PG::SimpleDecoder
  include ::PG::Coder::BinaryFormatting

  def decode(*_arg0); end
end

PG::BinaryDecoder::Integer::CFUNC = T.let(T.unsafe(nil), Object)

class PG::BinaryDecoder::String < ::PG::SimpleDecoder
  include ::PG::Coder::BinaryFormatting

  def decode(*_arg0); end
end

PG::BinaryDecoder::String::CFUNC = T.let(T.unsafe(nil), Object)

class PG::BinaryDecoder::Timestamp < ::PG::SimpleDecoder
  include ::PG::Coder::BinaryFormatting

  def decode(*_arg0); end
end

PG::BinaryDecoder::Timestamp::CFUNC = T.let(T.unsafe(nil), Object)

class PG::BinaryDecoder::TimestampLocal < ::PG::BinaryDecoder::Timestamp
  # source://pg/1.4.4/lib/pg/binary_decoder.rb#18
  def initialize(params = T.unsafe(nil)); end
end

class PG::BinaryDecoder::TimestampUtc < ::PG::BinaryDecoder::Timestamp
  # source://pg/1.4.4/lib/pg/binary_decoder.rb#8
  def initialize(params = T.unsafe(nil)); end
end

class PG::BinaryDecoder::TimestampUtcToLocal < ::PG::BinaryDecoder::Timestamp
  # source://pg/1.4.4/lib/pg/binary_decoder.rb#13
  def initialize(params = T.unsafe(nil)); end
end

class PG::BinaryDecoder::ToBase64 < ::PG::CompositeDecoder
  include ::PG::Coder::BinaryFormatting

  def decode(*_arg0); end
end

PG::BinaryDecoder::ToBase64::CFUNC = T.let(T.unsafe(nil), Object)
module PG::BinaryEncoder; end

class PG::BinaryEncoder::Boolean < ::PG::SimpleEncoder
  include ::PG::Coder::BinaryFormatting

  def encode(*_arg0); end
end

PG::BinaryEncoder::Boolean::CFUNC = T.let(T.unsafe(nil), Object)

class PG::BinaryEncoder::Bytea < ::PG::SimpleEncoder
  include ::PG::Coder::BinaryFormatting

  def encode(*_arg0); end
end

PG::BinaryEncoder::Bytea::CFUNC = T.let(T.unsafe(nil), Object)

class PG::BinaryEncoder::FromBase64 < ::PG::CompositeEncoder
  include ::PG::Coder::BinaryFormatting

  def encode(*_arg0); end
end

PG::BinaryEncoder::FromBase64::CFUNC = T.let(T.unsafe(nil), Object)

class PG::BinaryEncoder::Int2 < ::PG::SimpleEncoder
  include ::PG::Coder::BinaryFormatting

  def encode(*_arg0); end
end

PG::BinaryEncoder::Int2::CFUNC = T.let(T.unsafe(nil), Object)

class PG::BinaryEncoder::Int4 < ::PG::SimpleEncoder
  include ::PG::Coder::BinaryFormatting

  def encode(*_arg0); end
end

PG::BinaryEncoder::Int4::CFUNC = T.let(T.unsafe(nil), Object)

class PG::BinaryEncoder::Int8 < ::PG::SimpleEncoder
  include ::PG::Coder::BinaryFormatting

  def encode(*_arg0); end
end

PG::BinaryEncoder::Int8::CFUNC = T.let(T.unsafe(nil), Object)

class PG::BinaryEncoder::String < ::PG::SimpleEncoder
  include ::PG::Coder::BinaryFormatting

  def encode(*_arg0); end
end

PG::BinaryEncoder::String::CFUNC = T.let(T.unsafe(nil), Object)
class PG::BranchTransactionAlreadyActive < ::PG::InvalidTransactionState; end
class PG::CannotCoerce < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::CannotConnectNow < ::PG::OperatorIntervention; end
class PG::CantChangeRuntimeParam < ::PG::ObjectNotInPrerequisiteState; end
class PG::CardinalityViolation < ::PG::ServerError; end
class PG::CaseNotFound < ::PG::ServerError; end
class PG::CharacterNotInRepertoire < ::PG::DataException; end
class PG::CheckViolation < ::PG::IntegrityConstraintViolation; end

class PG::Coder
  # source://pg/1.4.4/lib/pg/coder.rb#17
  def initialize(params = T.unsafe(nil)); end

  # source://pg/1.4.4/lib/pg/coder.rb#37
  def ==(v); end

  # source://pg/1.4.4/lib/pg/coder.rb#23
  def dup; end

  def flags; end
  def flags=(_arg0); end
  def format; end
  def format=(_arg0); end

  # source://pg/1.4.4/lib/pg/coder.rb#49
  def inspect; end

  # source://pg/1.4.4/lib/pg/coder.rb#58
  def inspect_short; end

  # source://pg/1.4.4/lib/pg/coder.rb#41
  def marshal_dump; end

  # source://pg/1.4.4/lib/pg/coder.rb#45
  def marshal_load(str); end

  def name; end
  def name=(_arg0); end
  def oid; end
  def oid=(_arg0); end

  # source://pg/1.4.4/lib/pg/coder.rb#28
  def to_h; end
end

module PG::Coder::BinaryFormatting
  # source://pg/1.4.4/lib/pg/coder.rb#10
  def initialize(params = T.unsafe(nil)); end
end

# source://pg/1.4.4/lib/pg/coder.rb#9
PG::Coder::BinaryFormatting::Params = T.let(T.unsafe(nil), Hash)

PG::Coder::FORMAT_ERROR_MASK = T.let(T.unsafe(nil), Integer)
PG::Coder::FORMAT_ERROR_TO_PARTIAL = T.let(T.unsafe(nil), Integer)
PG::Coder::FORMAT_ERROR_TO_RAISE = T.let(T.unsafe(nil), Integer)
PG::Coder::FORMAT_ERROR_TO_STRING = T.let(T.unsafe(nil), Integer)
PG::Coder::TIMESTAMP_APP_LOCAL = T.let(T.unsafe(nil), Integer)
PG::Coder::TIMESTAMP_APP_UTC = T.let(T.unsafe(nil), Integer)
PG::Coder::TIMESTAMP_DB_LOCAL = T.let(T.unsafe(nil), Integer)
PG::Coder::TIMESTAMP_DB_UTC = T.let(T.unsafe(nil), Integer)
class PG::CollationMismatch < ::PG::SyntaxErrorOrAccessRuleViolation; end

class PG::CompositeCoder < ::PG::Coder
  def delimiter; end
  def delimiter=(_arg0); end
  def elements_type; end
  def elements_type=(_arg0); end

  # source://pg/1.4.4/lib/pg/coder.rb#80
  def inspect; end

  def needs_quotation=(_arg0); end
  def needs_quotation?; end

  # source://pg/1.4.4/lib/pg/coder.rb#72
  def to_h; end
end

class PG::CompositeDecoder < ::PG::CompositeCoder; end
class PG::CompositeEncoder < ::PG::CompositeCoder; end
class PG::ConfigFileError < ::PG::ServerError; end
class PG::ConfigurationLimitExceeded < ::PG::InsufficientResources; end

class PG::Connection
  include ::PG::Constants

  # source://pg/1.4.4/lib/pg/connection.rb#518
  def async_cancel; end

  def async_describe_portal(_arg0); end
  def async_describe_prepared(_arg0); end

  # source://pg/1.4.4/lib/pg/connection.rb#491
  def async_encrypt_password(password, username, algorithm = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#109
  def async_exec(*args, &blk); end

  def async_exec_params(*_arg0); end
  def async_exec_prepared(*_arg0); end
  def async_exec_without_profiling(*_arg0); end
  def async_flush; end

  # source://pg/1.4.4/lib/pg/connection.rb#359
  def async_get_copy_data(async = T.unsafe(nil), decoder = T.unsafe(nil)); end

  def async_get_last_result; end

  # source://pg/1.4.4/lib/pg/connection.rb#336
  def async_get_result; end

  # source://pg/1.4.4/lib/pg/connection.rb#407
  def async_isnonblocking; end

  def async_prepare(*_arg0); end

  # source://pg/1.4.4/lib/pg/connection.rb#431
  def async_put_copy_data(buffer, encoder = T.unsafe(nil)); end

  # source://pg/1.4.4/lib/pg/connection.rb#461
  def async_put_copy_end(*args); end

  def async_query(*_arg0); end

  # source://pg/1.4.4/lib/pg/connection.rb#503
  def async_reset; end

  def async_set_client_encoding(_arg0); end

  # source://pg/1.4.4/lib/pg/connection.rb#393
  def async_setnonblocking(enabled); end

  def backend_key; end
  def backend_pid; end
  def block(*_arg0); end

  # source://pg/1.4.4/lib/pg/connection.rb#518
  def cancel; end

  def client_encoding=(_arg0); end
  def close; end

  # source://pg/1.4.4/lib/pg/connection.rb#274
  def conndefaults; end

  # source://pg/1.4.4/lib/pg/connection.rb#290
  def conndefaults_hash; end

  def connect_poll; end
  def connection_needs_password; end
  def connection_used_password; end
  def conninfo; end

  # source://pg/1.4.4/lib/pg/connection.rb#298
  def conninfo_hash; end

  def consume_input; end

  # source://pg/1.4.4/lib/pg/connection.rb#185
  def copy_data(sql, coder = T.unsafe(nil)); end

  def db; end
  def decoder_for_get_copy_data; end
  def decoder_for_get_copy_data=(_arg0); end
  def describe_portal(_arg0); end
  def describe_prepared(_arg0); end
  def discard_results; end
  def encoder_for_put_copy_data; end
  def encoder_for_put_copy_data=(_arg0); end

  # source://pg/1.4.4/lib/pg/connection.rb#491
  def encrypt_password(password, username, algorithm = T.unsafe(nil)); end

  def enter_pipeline_mode; end
  def error_message; end
  def escape(_arg0); end
  def escape_bytea(_arg0); end
  def escape_identifier(_arg0); end
  def escape_literal(_arg0); end
  def escape_string(_arg0); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#55
  def exec(*args, &blk); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#68
  def exec_params(*args, &blk); end

  def exec_params_without_profiling(*_arg0); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#81
  def exec_prepared(*args, &blk); end

  def exec_prepared_without_profiling(*_arg0); end
  def exec_without_profiling(*_arg0); end
  def exit_pipeline_mode; end
  def external_encoding; end
  def field_name_type; end
  def field_name_type=(_arg0); end
  def finish; end
  def finished?; end
  def flush; end
  def get_client_encoding; end

  # source://pg/1.4.4/lib/pg/connection.rb#359
  def get_copy_data(async = T.unsafe(nil), decoder = T.unsafe(nil)); end

  def get_last_result; end

  # source://pg/1.4.4/lib/pg/connection.rb#336
  def get_result; end

  def host; end
  def hostaddr; end

  # source://pg/1.4.4/lib/pg/connection.rb#97
  def inspect; end

  def internal_encoding; end
  def internal_encoding=(_arg0); end
  def is_busy; end

  # source://pg/1.4.4/lib/pg/connection.rb#407
  def isnonblocking; end

  def lo_close(_arg0); end
  def lo_creat(*_arg0); end
  def lo_create(_arg0); end
  def lo_export(_arg0, _arg1); end
  def lo_import(_arg0); end
  def lo_lseek(_arg0, _arg1, _arg2); end
  def lo_open(*_arg0); end
  def lo_read(_arg0, _arg1); end
  def lo_seek(_arg0, _arg1, _arg2); end
  def lo_tell(_arg0); end
  def lo_truncate(_arg0, _arg1); end
  def lo_unlink(_arg0); end
  def lo_write(_arg0, _arg1); end
  def loclose(_arg0); end
  def locreat(*_arg0); end
  def locreate(_arg0); end
  def loexport(_arg0, _arg1); end
  def loimport(_arg0); end
  def lolseek(_arg0, _arg1, _arg2); end
  def loopen(*_arg0); end
  def loread(_arg0, _arg1); end
  def loseek(_arg0, _arg1, _arg2); end
  def lotell(_arg0); end
  def lotruncate(_arg0, _arg1); end
  def lounlink(_arg0); end
  def lowrite(_arg0, _arg1); end
  def make_empty_pgresult(_arg0); end

  # source://pg/1.4.4/lib/pg/connection.rb#407
  def nonblocking?; end

  def notifies; end
  def notifies_wait(*_arg0); end
  def options; end
  def parameter_status(_arg0); end
  def pass; end
  def pipeline_status; end
  def pipeline_sync; end
  def port; end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#42
  def prepare(*args, &blk); end

  def prepare_without_profiling(*_arg0); end
  def protocol_version; end

  # source://pg/1.4.4/lib/pg/connection.rb#431
  def put_copy_data(buffer, encoder = T.unsafe(nil)); end

  # source://pg/1.4.4/lib/pg/connection.rb#461
  def put_copy_end(*args); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#55
  def query(*args, &blk); end

  def quote_ident(_arg0); end

  # source://pg/1.4.4/lib/pg/connection.rb#503
  def reset; end

  def reset_poll; end
  def reset_start; end
  def send_describe_portal(_arg0); end
  def send_describe_prepared(_arg0); end
  def send_flush_request; end
  def send_prepare(*_arg0); end
  def send_query(*_arg0); end
  def send_query_params(*_arg0); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#95
  def send_query_prepared(*args, &blk); end

  def send_query_prepared_without_profiling(*_arg0); end
  def server_version; end
  def set_client_encoding(_arg0); end
  def set_default_encoding; end
  def set_error_context_visibility(_arg0); end
  def set_error_verbosity(_arg0); end
  def set_notice_processor; end
  def set_notice_receiver; end
  def set_single_row_mode; end

  # source://pg/1.4.4/lib/pg/connection.rb#393
  def setnonblocking(enabled); end

  def socket; end
  def socket_io; end
  def ssl_attribute(_arg0); end
  def ssl_attribute_names; end

  # source://pg/1.4.4/lib/pg/connection.rb#315
  def ssl_attributes; end

  def ssl_in_use?; end
  def status; end
  def sync_cancel; end
  def sync_describe_portal(_arg0); end
  def sync_describe_prepared(_arg0); end
  def sync_encrypt_password(*_arg0); end
  def sync_exec(*_arg0); end
  def sync_exec_params(*_arg0); end
  def sync_exec_prepared(*_arg0); end
  def sync_flush; end
  def sync_get_copy_data(*_arg0); end
  def sync_get_last_result; end
  def sync_get_result; end
  def sync_isnonblocking; end
  def sync_prepare(*_arg0); end
  def sync_put_copy_data(*_arg0); end
  def sync_put_copy_end(*_arg0); end
  def sync_reset; end
  def sync_set_client_encoding(_arg0); end
  def sync_setnonblocking(_arg0); end
  def trace(_arg0); end

  # source://pg/1.4.4/lib/pg/connection.rb#258
  def transaction; end

  def transaction_status; end
  def tty; end
  def type_map_for_queries; end
  def type_map_for_queries=(_arg0); end
  def type_map_for_results; end
  def type_map_for_results=(_arg0); end
  def unescape_bytea(_arg0); end
  def untrace; end
  def user; end
  def wait_for_notify(*_arg0); end

  private

  # source://pg/1.4.4/lib/pg/connection.rb#573
  def async_connect_or_reset(poll_meth); end

  def flush_data=(_arg0); end

  class << self
    # source://pg/1.4.4/lib/pg/connection.rb#863
    def async_api=(enable); end

    # source://pg/1.4.4/lib/pg/connection.rb#694
    def async_connect(*args); end

    # source://pg/1.4.4/lib/pg/connection.rb#788
    def async_ping(*args); end

    # source://pg/1.4.4/lib/pg/connection.rb#840
    def async_send_api=(enable); end

    def conndefaults; end

    # source://pg/1.4.4/lib/pg/connection.rb#282
    def conndefaults_hash; end

    # source://pg/1.4.4/lib/pg/connection.rb#694
    def connect(*args); end

    # source://pg/1.4.4/lib/pg/connection.rb#45
    def connect_hash_to_string(hash); end

    def connect_start(*_arg0); end
    def conninfo_parse(_arg0); end
    def encrypt_password(_arg0, _arg1); end
    def escape(_arg0); end
    def escape_bytea(_arg0); end
    def escape_string(_arg0); end
    def isthreadsafe; end

    # source://pg/1.4.4/lib/pg/connection.rb#694
    def new(*args); end

    # source://pg/1.4.4/lib/pg/connection.rb#694
    def open(*args); end

    # source://pg/1.4.4/lib/pg/connection.rb#61
    def parse_connect_args(*args); end

    # source://pg/1.4.4/lib/pg/connection.rb#788
    def ping(*args); end

    # source://pg/1.4.4/lib/pg/connection.rb#38
    def quote_connstr(value); end

    def quote_ident(_arg0); end

    # source://pg/1.4.4/lib/pg/connection.rb#694
    def setdb(*args); end

    # source://pg/1.4.4/lib/pg/connection.rb#694
    def setdblogin(*args); end

    def sync_connect(*_arg0); end
    def sync_ping(*_arg0); end
    def unescape_bytea(_arg0); end

    private

    # source://pg/1.4.4/lib/pg/connection.rb#712
    def connect_to_hosts(*args); end

    # source://pg/1.4.4/lib/pg/connection.rb#763
    def host_is_named_pipe?(host_string); end
  end
end

# source://pg/1.4.4/lib/pg/connection.rb#34
PG::Connection::CONNECT_ARGUMENT_ORDER = T.let(T.unsafe(nil), Array)

class PG::ConnectionBad < ::PG::Error; end
class PG::ConnectionDoesNotExist < ::PG::ConnectionException; end
class PG::ConnectionException < ::PG::ServerError; end
class PG::ConnectionFailure < ::PG::ConnectionException; end
module PG::Constants; end
PG::Constants::CONNECTION_AUTH_OK = T.let(T.unsafe(nil), Integer)
PG::Constants::CONNECTION_AWAITING_RESPONSE = T.let(T.unsafe(nil), Integer)
PG::Constants::CONNECTION_BAD = T.let(T.unsafe(nil), Integer)
PG::Constants::CONNECTION_CHECK_STANDBY = T.let(T.unsafe(nil), Integer)
PG::Constants::CONNECTION_CHECK_TARGET = T.let(T.unsafe(nil), Integer)
PG::Constants::CONNECTION_CHECK_WRITABLE = T.let(T.unsafe(nil), Integer)
PG::Constants::CONNECTION_CONSUME = T.let(T.unsafe(nil), Integer)
PG::Constants::CONNECTION_GSS_STARTUP = T.let(T.unsafe(nil), Integer)
PG::Constants::CONNECTION_MADE = T.let(T.unsafe(nil), Integer)
PG::Constants::CONNECTION_NEEDED = T.let(T.unsafe(nil), Integer)
PG::Constants::CONNECTION_OK = T.let(T.unsafe(nil), Integer)
PG::Constants::CONNECTION_SETENV = T.let(T.unsafe(nil), Integer)
PG::Constants::CONNECTION_SSL_STARTUP = T.let(T.unsafe(nil), Integer)
PG::Constants::CONNECTION_STARTED = T.let(T.unsafe(nil), Integer)
PG::Constants::INVALID_OID = T.let(T.unsafe(nil), Integer)
PG::Constants::INV_READ = T.let(T.unsafe(nil), Integer)
PG::Constants::INV_WRITE = T.let(T.unsafe(nil), Integer)
PG::Constants::InvalidOid = T.let(T.unsafe(nil), Integer)
PG::Constants::PGRES_BAD_RESPONSE = T.let(T.unsafe(nil), Integer)
PG::Constants::PGRES_COMMAND_OK = T.let(T.unsafe(nil), Integer)
PG::Constants::PGRES_COPY_BOTH = T.let(T.unsafe(nil), Integer)
PG::Constants::PGRES_COPY_IN = T.let(T.unsafe(nil), Integer)
PG::Constants::PGRES_COPY_OUT = T.let(T.unsafe(nil), Integer)
PG::Constants::PGRES_EMPTY_QUERY = T.let(T.unsafe(nil), Integer)
PG::Constants::PGRES_FATAL_ERROR = T.let(T.unsafe(nil), Integer)
PG::Constants::PGRES_NONFATAL_ERROR = T.let(T.unsafe(nil), Integer)
PG::Constants::PGRES_PIPELINE_ABORTED = T.let(T.unsafe(nil), Integer)
PG::Constants::PGRES_PIPELINE_SYNC = T.let(T.unsafe(nil), Integer)
PG::Constants::PGRES_POLLING_FAILED = T.let(T.unsafe(nil), Integer)
PG::Constants::PGRES_POLLING_OK = T.let(T.unsafe(nil), Integer)
PG::Constants::PGRES_POLLING_READING = T.let(T.unsafe(nil), Integer)
PG::Constants::PGRES_POLLING_WRITING = T.let(T.unsafe(nil), Integer)
PG::Constants::PGRES_SINGLE_TUPLE = T.let(T.unsafe(nil), Integer)
PG::Constants::PGRES_TUPLES_OK = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_COLUMN_NAME = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_CONSTRAINT_NAME = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_CONTEXT = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_DATATYPE_NAME = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_INTERNAL_POSITION = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_INTERNAL_QUERY = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_MESSAGE_DETAIL = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_MESSAGE_HINT = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_MESSAGE_PRIMARY = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_SCHEMA_NAME = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_SEVERITY = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_SEVERITY_NONLOCALIZED = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_SOURCE_FILE = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_SOURCE_FUNCTION = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_SOURCE_LINE = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_SQLSTATE = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_STATEMENT_POSITION = T.let(T.unsafe(nil), Integer)
PG::Constants::PG_DIAG_TABLE_NAME = T.let(T.unsafe(nil), Integer)
PG::Constants::PQERRORS_DEFAULT = T.let(T.unsafe(nil), Integer)
PG::Constants::PQERRORS_SQLSTATE = T.let(T.unsafe(nil), Integer)
PG::Constants::PQERRORS_TERSE = T.let(T.unsafe(nil), Integer)
PG::Constants::PQERRORS_VERBOSE = T.let(T.unsafe(nil), Integer)
PG::Constants::PQPING_NO_ATTEMPT = T.let(T.unsafe(nil), Integer)
PG::Constants::PQPING_NO_RESPONSE = T.let(T.unsafe(nil), Integer)
PG::Constants::PQPING_OK = T.let(T.unsafe(nil), Integer)
PG::Constants::PQPING_REJECT = T.let(T.unsafe(nil), Integer)
PG::Constants::PQSHOW_CONTEXT_ALWAYS = T.let(T.unsafe(nil), Integer)
PG::Constants::PQSHOW_CONTEXT_ERRORS = T.let(T.unsafe(nil), Integer)
PG::Constants::PQSHOW_CONTEXT_NEVER = T.let(T.unsafe(nil), Integer)
PG::Constants::PQTRANS_ACTIVE = T.let(T.unsafe(nil), Integer)
PG::Constants::PQTRANS_IDLE = T.let(T.unsafe(nil), Integer)
PG::Constants::PQTRANS_INERROR = T.let(T.unsafe(nil), Integer)
PG::Constants::PQTRANS_INTRANS = T.let(T.unsafe(nil), Integer)
PG::Constants::PQTRANS_UNKNOWN = T.let(T.unsafe(nil), Integer)
PG::Constants::PQ_PIPELINE_ABORTED = T.let(T.unsafe(nil), Integer)
PG::Constants::PQ_PIPELINE_OFF = T.let(T.unsafe(nil), Integer)
PG::Constants::PQ_PIPELINE_ON = T.let(T.unsafe(nil), Integer)
PG::Constants::SEEK_CUR = T.let(T.unsafe(nil), Integer)
PG::Constants::SEEK_END = T.let(T.unsafe(nil), Integer)
PG::Constants::SEEK_SET = T.let(T.unsafe(nil), Integer)

class PG::CopyCoder < ::PG::Coder
  def delimiter; end
  def delimiter=(_arg0); end
  def null_string; end
  def null_string=(_arg0); end

  # source://pg/1.4.4/lib/pg/coder.rb#88
  def to_h; end

  def type_map; end
  def type_map=(_arg0); end
end

class PG::CopyDecoder < ::PG::CopyCoder
  include ::PG::Coder::BinaryFormatting
end

class PG::CopyEncoder < ::PG::CopyCoder
  include ::PG::Coder::BinaryFormatting
end

class PG::CrashShutdown < ::PG::OperatorIntervention; end
class PG::DataCorrupted < ::PG::InternalError; end
class PG::DataException < ::PG::ServerError; end
class PG::DatabaseDropped < ::PG::OperatorIntervention; end
class PG::DatatypeMismatch < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::DatetimeFieldOverflow < ::PG::DataException; end
class PG::DependentObjectsStillExist < ::PG::DependentPrivilegeDescriptorsStillExist; end
class PG::DependentPrivilegeDescriptorsStillExist < ::PG::ServerError; end
class PG::DiagnosticsException < ::PG::ServerError; end
class PG::DiskFull < ::PG::InsufficientResources; end
class PG::DivisionByZero < ::PG::DataException; end
class PG::DuplicateAlias < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::DuplicateColumn < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::DuplicateCursor < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::DuplicateDatabase < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::DuplicateFile < ::PG::SystemError; end
class PG::DuplicateFunction < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::DuplicateJsonObjectKeyValue < ::PG::DataException; end
class PG::DuplicateObject < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::DuplicatePstatement < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::DuplicateSchema < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::DuplicateTable < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::EREContainingSqlNotPermitted < ::PG::ExternalRoutineException; end
class PG::EREModifyingSqlDataNotPermitted < ::PG::ExternalRoutineException; end
class PG::EREProhibitedSqlStatementAttempted < ::PG::ExternalRoutineException; end
class PG::EREReadingSqlDataNotPermitted < ::PG::ExternalRoutineException; end
class PG::ERIEEventTriggerProtocolViolated < ::PG::ExternalRoutineInvocationException; end
class PG::ERIEInvalidSqlstateReturned < ::PG::ExternalRoutineInvocationException; end
class PG::ERIENullValueNotAllowed < ::PG::ExternalRoutineInvocationException; end
class PG::ERIESrfProtocolViolated < ::PG::ExternalRoutineInvocationException; end
class PG::ERIETriggerProtocolViolated < ::PG::ExternalRoutineInvocationException; end
PG::ERROR_CLASSES = T.let(T.unsafe(nil), Hash)

class PG::Error < ::StandardError
  # source://pg/1.4.4/lib/pg/exceptions.rb#10
  def initialize(msg = T.unsafe(nil), connection: T.unsafe(nil), result: T.unsafe(nil)); end

  def connection; end
  def error; end
  def result; end
end

class PG::ErrorInAssignment < ::PG::DataException; end
class PG::EscapeCharacterConflict < ::PG::DataException; end
class PG::ExclusionViolation < ::PG::IntegrityConstraintViolation; end
class PG::ExternalRoutineException < ::PG::ServerError; end
class PG::ExternalRoutineInvocationException < ::PG::ServerError; end
class PG::FdwColumnNameNotFound < ::PG::FdwError; end
class PG::FdwDynamicParameterValueNeeded < ::PG::FdwError; end
class PG::FdwError < ::PG::ServerError; end
class PG::FdwFunctionSequenceError < ::PG::FdwError; end
class PG::FdwInconsistentDescriptorInformation < ::PG::FdwError; end
class PG::FdwInvalidAttributeValue < ::PG::FdwError; end
class PG::FdwInvalidColumnName < ::PG::FdwError; end
class PG::FdwInvalidColumnNumber < ::PG::FdwError; end
class PG::FdwInvalidDataType < ::PG::FdwError; end
class PG::FdwInvalidDataTypeDescriptors < ::PG::FdwError; end
class PG::FdwInvalidDescriptorFieldIdentifier < ::PG::FdwError; end
class PG::FdwInvalidHandle < ::PG::FdwError; end
class PG::FdwInvalidOptionIndex < ::PG::FdwError; end
class PG::FdwInvalidOptionName < ::PG::FdwError; end
class PG::FdwInvalidStringFormat < ::PG::FdwError; end
class PG::FdwInvalidStringLengthOrBufferLength < ::PG::FdwError; end
class PG::FdwInvalidUseOfNullPointer < ::PG::FdwError; end
class PG::FdwNoSchemas < ::PG::FdwError; end
class PG::FdwOptionNameNotFound < ::PG::FdwError; end
class PG::FdwOutOfMemory < ::PG::FdwError; end
class PG::FdwReplyHandle < ::PG::FdwError; end
class PG::FdwSchemaNotFound < ::PG::FdwError; end
class PG::FdwTableNotFound < ::PG::FdwError; end
class PG::FdwTooManyHandles < ::PG::FdwError; end
class PG::FdwUnableToCreateExecution < ::PG::FdwError; end
class PG::FdwUnableToCreateReply < ::PG::FdwError; end
class PG::FdwUnableToEstablishConnection < ::PG::FdwError; end
class PG::FeatureNotSupported < ::PG::ServerError; end
class PG::FloatingPointException < ::PG::DataException; end
class PG::ForeignKeyViolation < ::PG::IntegrityConstraintViolation; end
class PG::GeneratedAlways < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::GroupingError < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::HeldCursorRequiresSameIsolationLevel < ::PG::InvalidTransactionState; end
class PG::IdleInTransactionSessionTimeout < ::PG::InvalidTransactionState; end
class PG::IdleSessionTimeout < ::PG::OperatorIntervention; end
class PG::InFailedSqlTransaction < ::PG::InvalidTransactionState; end
class PG::InappropriateAccessModeForBranchTransaction < ::PG::InvalidTransactionState; end
class PG::InappropriateIsolationLevelForBranchTransaction < ::PG::InvalidTransactionState; end
class PG::IndeterminateCollation < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::IndeterminateDatatype < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::IndexCorrupted < ::PG::InternalError; end
class PG::IndicatorOverflow < ::PG::DataException; end
class PG::InsufficientPrivilege < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::InsufficientResources < ::PG::ServerError; end
class PG::IntegrityConstraintViolation < ::PG::ServerError; end
class PG::InternalError < ::PG::ServerError; end
class PG::IntervalFieldOverflow < ::PG::DataException; end
class PG::InvalidArgumentForLog < ::PG::DataException; end
class PG::InvalidArgumentForNthValue < ::PG::DataException; end
class PG::InvalidArgumentForNtile < ::PG::DataException; end
class PG::InvalidArgumentForPowerFunction < ::PG::DataException; end
class PG::InvalidArgumentForSqlJsonDatetimeFunction < ::PG::DataException; end
class PG::InvalidArgumentForWidthBucketFunction < ::PG::DataException; end
class PG::InvalidAuthorizationSpecification < ::PG::ServerError; end
class PG::InvalidBinaryRepresentation < ::PG::DataException; end
class PG::InvalidCatalogName < ::PG::ServerError; end
class PG::InvalidChangeOfResultFields < ::PG::Error; end
class PG::InvalidCharacterValueForCast < ::PG::DataException; end
class PG::InvalidColumnDefinition < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::InvalidColumnReference < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::InvalidCursorDefinition < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::InvalidCursorName < ::PG::ServerError; end
class PG::InvalidCursorState < ::PG::ServerError; end
class PG::InvalidDatabaseDefinition < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::InvalidDatetimeFormat < ::PG::DataException; end
class PG::InvalidEscapeCharacter < ::PG::DataException; end
class PG::InvalidEscapeOctet < ::PG::DataException; end
class PG::InvalidEscapeSequence < ::PG::DataException; end
class PG::InvalidForeignKey < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::InvalidFunctionDefinition < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::InvalidGrantOperation < ::PG::InvalidGrantor; end
class PG::InvalidGrantor < ::PG::ServerError; end
class PG::InvalidIndicatorParameterValue < ::PG::DataException; end
class PG::InvalidJsonText < ::PG::DataException; end
class PG::InvalidName < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::InvalidObjectDefinition < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::InvalidParameterValue < ::PG::DataException; end
class PG::InvalidPassword < ::PG::InvalidAuthorizationSpecification; end
class PG::InvalidPrecedingOrFollowingSize < ::PG::DataException; end
class PG::InvalidPstatementDefinition < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::InvalidRecursion < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::InvalidRegularExpression < ::PG::DataException; end
class PG::InvalidResultStatus < ::PG::Error; end
class PG::InvalidRoleSpecification < ::PG::ServerError; end
class PG::InvalidRowCountInLimitClause < ::PG::DataException; end
class PG::InvalidRowCountInResultOffsetClause < ::PG::DataException; end
class PG::InvalidSchemaDefinition < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::InvalidSchemaName < ::PG::ServerError; end
class PG::InvalidSqlJsonSubscript < ::PG::DataException; end
class PG::InvalidSqlStatementName < ::PG::ServerError; end
class PG::InvalidTableDefinition < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::InvalidTablesampleArgument < ::PG::DataException; end
class PG::InvalidTablesampleRepeat < ::PG::DataException; end
class PG::InvalidTextRepresentation < ::PG::DataException; end
class PG::InvalidTimeZoneDisplacementValue < ::PG::DataException; end
class PG::InvalidTransactionInitiation < ::PG::ServerError; end
class PG::InvalidTransactionState < ::PG::ServerError; end
class PG::InvalidTransactionTermination < ::PG::ServerError; end
class PG::InvalidUseOfEscapeCharacter < ::PG::DataException; end
class PG::InvalidXmlComment < ::PG::DataException; end
class PG::InvalidXmlContent < ::PG::DataException; end
class PG::InvalidXmlDocument < ::PG::DataException; end
class PG::InvalidXmlProcessingInstruction < ::PG::DataException; end
class PG::IoError < ::PG::SystemError; end
class PG::LEInvalidSpecification < ::PG::LocatorException; end
class PG::LocatorException < ::PG::ServerError; end
class PG::LockFileExists < ::PG::ConfigFileError; end
class PG::LockNotAvailable < ::PG::ObjectNotInPrerequisiteState; end
class PG::MoreThanOneSqlJsonItem < ::PG::DataException; end
class PG::MostSpecificTypeMismatch < ::PG::DataException; end
class PG::NameTooLong < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::NoActiveSqlTransaction < ::PG::InvalidTransactionState; end
class PG::NoActiveSqlTransactionForBranchTransaction < ::PG::InvalidTransactionState; end
class PG::NoDataFound < ::PG::PlpgsqlError; end
class PG::NoResultError < ::PG::Error; end
class PG::NoSqlJsonItem < ::PG::DataException; end
class PG::NonNumericSqlJsonItem < ::PG::DataException; end
class PG::NonUniqueKeysInAJsonObject < ::PG::DataException; end
class PG::NonstandardUseOfEscapeCharacter < ::PG::DataException; end
class PG::NotAllCopyDataRetrieved < ::PG::Error; end
class PG::NotAnXmlDocument < ::PG::DataException; end
class PG::NotInBlockingMode < ::PG::Error; end
class PG::NotNullViolation < ::PG::IntegrityConstraintViolation; end
class PG::NullValueNoIndicatorParameter < ::PG::DataException; end
class PG::NullValueNotAllowed < ::PG::DataException; end
class PG::NumericValueOutOfRange < ::PG::DataException; end
class PG::ObjectInUse < ::PG::ObjectNotInPrerequisiteState; end
class PG::ObjectNotInPrerequisiteState < ::PG::ServerError; end
class PG::OperatorIntervention < ::PG::ServerError; end
class PG::OutOfMemory < ::PG::InsufficientResources; end

# source://pg/1.4.4/lib/pg/postgresql_lib_path.rb#2
PG::POSTGRESQL_LIB_PATH = T.let(T.unsafe(nil), String)

class PG::PlpgsqlError < ::PG::ServerError; end
class PG::ProgramLimitExceeded < ::PG::ServerError; end
class PG::ProtocolViolation < ::PG::ConnectionException; end
class PG::QueryCanceled < ::PG::OperatorIntervention; end
class PG::RaiseException < ::PG::PlpgsqlError; end
class PG::ReadOnlySqlTransaction < ::PG::InvalidTransactionState; end

class PG::RecordCoder < ::PG::Coder
  # source://pg/1.4.4/lib/pg/coder.rb#98
  def to_h; end

  def type_map; end
  def type_map=(_arg0); end
end

class PG::RecordDecoder < ::PG::RecordCoder; end
class PG::RecordEncoder < ::PG::RecordCoder; end
class PG::ReservedName < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::RestrictViolation < ::PG::IntegrityConstraintViolation; end

# PG patches, keep in mind exec and async_exec have a exec{|r| } semantics that is yet to be implemented
class PG::Result
  include ::Enumerable
  include ::PG::Constants

  def [](_arg0); end
  def autoclear?; end
  def check; end
  def check_result; end
  def clear; end
  def cleared?; end
  def cmd_status; end
  def cmd_tuples; end
  def cmdtuples; end
  def column_values(_arg0); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#15
  def each(*args, &blk); end

  def each_row; end
  def each_without_profiling; end
  def error_field(_arg0); end
  def error_message; end
  def fformat(_arg0); end
  def field_name_type; end
  def field_name_type=(_arg0); end

  # source://pg/1.4.4/lib/pg/result.rb#26
  def field_names_as(type); end

  def field_values(_arg0); end
  def fields; end
  def fmod(_arg0); end
  def fname(_arg0); end
  def fnumber(_arg0); end
  def fsize(_arg0); end
  def ftable(_arg0); end
  def ftablecol(_arg0); end
  def ftype(_arg0); end
  def getisnull(_arg0, _arg1); end
  def getlength(_arg0, _arg1); end
  def getvalue(_arg0, _arg1); end

  # source://pg/1.4.4/lib/pg/result.rb#32
  def inspect; end

  # source://pg/1.4.4/lib/pg/result.rb#16
  def map_types!(type_map); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#22
  def mp_report_sql(&block); end

  def nfields; end
  def nparams; end
  def ntuples; end
  def num_fields; end
  def num_tuples; end
  def oid_value; end
  def paramtype(_arg0); end
  def res_status(_arg0); end
  def result_error_field(_arg0); end
  def result_error_message; end
  def result_status; end
  def result_verbose_error_message(_arg0, _arg1); end
  def stream_each; end
  def stream_each_row; end
  def stream_each_tuple; end
  def tuple(_arg0); end
  def tuple_values(_arg0); end
  def type_map; end
  def type_map=(_arg0); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#8
  def values(*args, &blk); end

  def values_without_profiling; end
  def verbose_error_message(_arg0, _arg1); end
end

class PG::SEInvalidSpecification < ::PG::SavepointException; end
class PG::SREFunctionExecutedNoReturnStatement < ::PG::SqlRoutineException; end
class PG::SREModifyingSqlDataNotPermitted < ::PG::SqlRoutineException; end
class PG::SREProhibitedSqlStatementAttempted < ::PG::SqlRoutineException; end
class PG::SREReadingSqlDataNotPermitted < ::PG::SqlRoutineException; end
class PG::SavepointException < ::PG::ServerError; end
class PG::SchemaAndDataStatementMixingNotSupported < ::PG::InvalidTransactionState; end
class PG::SequenceGeneratorLimitExceeded < ::PG::DataException; end
class PG::ServerError < ::PG::Error; end
class PG::SimpleCoder < ::PG::Coder; end
class PG::SimpleDecoder < ::PG::SimpleCoder; end
class PG::SimpleEncoder < ::PG::SimpleCoder; end
class PG::SingletonSqlJsonItemRequired < ::PG::DataException; end
class PG::SnapshotTooOld < ::PG::ServerError; end
class PG::SqlJsonArrayNotFound < ::PG::DataException; end
class PG::SqlJsonMemberNotFound < ::PG::DataException; end
class PG::SqlJsonNumberNotFound < ::PG::DataException; end
class PG::SqlJsonObjectNotFound < ::PG::DataException; end
class PG::SqlJsonScalarRequired < ::PG::DataException; end
class PG::SqlRoutineException < ::PG::ServerError; end
class PG::SqlStatementNotYetComplete < ::PG::ServerError; end
class PG::SqlclientUnableToEstablishSqlconnection < ::PG::ConnectionException; end
class PG::SqlserverRejectedEstablishmentOfSqlconnection < ::PG::ConnectionException; end
class PG::StackedDiagnosticsAccessedWithoutActiveHandler < ::PG::DiagnosticsException; end
class PG::StatementTooComplex < ::PG::ProgramLimitExceeded; end
class PG::StringDataLengthMismatch < ::PG::DataException; end
class PG::StringDataRightTruncation < ::PG::DataException; end
class PG::SubstringError < ::PG::DataException; end
class PG::SyntaxError < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::SyntaxErrorOrAccessRuleViolation < ::PG::ServerError; end
class PG::SystemError < ::PG::ServerError; end
class PG::TRDeadlockDetected < ::PG::TransactionRollback; end
class PG::TRIntegrityConstraintViolation < ::PG::TransactionRollback; end
class PG::TRSerializationFailure < ::PG::TransactionRollback; end
class PG::TRStatementCompletionUnknown < ::PG::TransactionRollback; end
module PG::TextDecoder; end

class PG::TextDecoder::Array < ::PG::CompositeDecoder
  def decode(*_arg0); end
end

PG::TextDecoder::Array::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextDecoder::Boolean < ::PG::SimpleDecoder
  def decode(*_arg0); end
end

PG::TextDecoder::Boolean::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextDecoder::Bytea < ::PG::SimpleDecoder
  def decode(*_arg0); end
end

PG::TextDecoder::Bytea::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextDecoder::CopyRow < ::PG::CopyDecoder
  def decode(*_arg0); end
end

PG::TextDecoder::CopyRow::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextDecoder::Date < ::PG::SimpleDecoder
  # source://pg/1.4.4/lib/pg/text_decoder.rb#10
  def decode(string, tuple = T.unsafe(nil), field = T.unsafe(nil)); end
end

class PG::TextDecoder::Float < ::PG::SimpleDecoder
  def decode(*_arg0); end
end

PG::TextDecoder::Float::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextDecoder::FromBase64 < ::PG::CompositeDecoder
  def decode(*_arg0); end
end

PG::TextDecoder::FromBase64::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextDecoder::Identifier < ::PG::SimpleDecoder
  def decode(*_arg0); end
end

PG::TextDecoder::Identifier::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextDecoder::Inet < ::PG::SimpleDecoder
  def decode(*_arg0); end
end

PG::TextDecoder::Inet::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextDecoder::Integer < ::PG::SimpleDecoder
  def decode(*_arg0); end
end

PG::TextDecoder::Integer::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextDecoder::JSON < ::PG::SimpleDecoder
  # source://pg/1.4.4/lib/pg/text_decoder.rb#20
  def decode(string, tuple = T.unsafe(nil), field = T.unsafe(nil)); end
end

class PG::TextDecoder::Numeric < ::PG::SimpleDecoder
  def decode(*_arg0); end
end

PG::TextDecoder::Numeric::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextDecoder::Record < ::PG::RecordDecoder
  def decode(*_arg0); end
end

PG::TextDecoder::Record::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextDecoder::String < ::PG::SimpleDecoder
  def decode(*_arg0); end
end

PG::TextDecoder::String::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextDecoder::Timestamp < ::PG::SimpleDecoder
  def decode(*_arg0); end
end

PG::TextDecoder::Timestamp::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextDecoder::TimestampLocal < ::PG::TextDecoder::Timestamp
  # source://pg/1.4.4/lib/pg/text_decoder.rb#37
  def initialize(params = T.unsafe(nil)); end
end

class PG::TextDecoder::TimestampUtc < ::PG::TextDecoder::Timestamp
  # source://pg/1.4.4/lib/pg/text_decoder.rb#27
  def initialize(params = T.unsafe(nil)); end
end

class PG::TextDecoder::TimestampUtcToLocal < ::PG::TextDecoder::Timestamp
  # source://pg/1.4.4/lib/pg/text_decoder.rb#32
  def initialize(params = T.unsafe(nil)); end
end

# source://pg/1.4.4/lib/pg/text_decoder.rb#44
PG::TextDecoder::TimestampWithTimeZone = PG::TextDecoder::Timestamp

# source://pg/1.4.4/lib/pg/text_decoder.rb#43
PG::TextDecoder::TimestampWithoutTimeZone = PG::TextDecoder::TimestampLocal

module PG::TextEncoder; end

class PG::TextEncoder::Array < ::PG::CompositeEncoder
  def encode(*_arg0); end
end

PG::TextEncoder::Array::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextEncoder::Boolean < ::PG::SimpleEncoder
  def encode(*_arg0); end
end

PG::TextEncoder::Boolean::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextEncoder::Bytea < ::PG::SimpleEncoder
  def encode(*_arg0); end
end

PG::TextEncoder::Bytea::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextEncoder::CopyRow < ::PG::CopyEncoder
  def encode(*_arg0); end
end

PG::TextEncoder::CopyRow::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextEncoder::Date < ::PG::SimpleEncoder
  # source://pg/1.4.4/lib/pg/text_encoder.rb#10
  def encode(value); end
end

class PG::TextEncoder::Float < ::PG::SimpleEncoder
  def encode(*_arg0); end
end

PG::TextEncoder::Float::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextEncoder::Identifier < ::PG::SimpleEncoder
  def encode(*_arg0); end
end

PG::TextEncoder::Identifier::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextEncoder::Inet < ::PG::SimpleEncoder
  # source://pg/1.4.4/lib/pg/text_encoder.rb#40
  def encode(value); end
end

class PG::TextEncoder::Integer < ::PG::SimpleEncoder
  def encode(*_arg0); end
end

PG::TextEncoder::Integer::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextEncoder::JSON < ::PG::SimpleEncoder
  # source://pg/1.4.4/lib/pg/text_encoder.rb#34
  def encode(value); end
end

class PG::TextEncoder::Numeric < ::PG::SimpleEncoder
  def encode(*_arg0); end
end

PG::TextEncoder::Numeric::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextEncoder::QuotedLiteral < ::PG::CompositeEncoder
  def encode(*_arg0); end
end

PG::TextEncoder::QuotedLiteral::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextEncoder::Record < ::PG::RecordEncoder
  def encode(*_arg0); end
end

PG::TextEncoder::Record::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextEncoder::String < ::PG::SimpleEncoder
  def encode(*_arg0); end
end

PG::TextEncoder::String::CFUNC = T.let(T.unsafe(nil), Object)

class PG::TextEncoder::TimestampUtc < ::PG::SimpleEncoder
  # source://pg/1.4.4/lib/pg/text_encoder.rb#22
  def encode(value); end
end

class PG::TextEncoder::TimestampWithTimeZone < ::PG::SimpleEncoder
  # source://pg/1.4.4/lib/pg/text_encoder.rb#28
  def encode(value); end
end

class PG::TextEncoder::TimestampWithoutTimeZone < ::PG::SimpleEncoder
  # source://pg/1.4.4/lib/pg/text_encoder.rb#16
  def encode(value); end
end

class PG::TextEncoder::ToBase64 < ::PG::CompositeEncoder
  def encode(*_arg0); end
end

PG::TextEncoder::ToBase64::CFUNC = T.let(T.unsafe(nil), Object)
class PG::TooManyArguments < ::PG::ProgramLimitExceeded; end
class PG::TooManyColumns < ::PG::ProgramLimitExceeded; end
class PG::TooManyConnections < ::PG::InsufficientResources; end
class PG::TooManyJsonArrayElements < ::PG::DataException; end
class PG::TooManyJsonObjectMembers < ::PG::DataException; end
class PG::TooManyRows < ::PG::PlpgsqlError; end
class PG::TransactionResolutionUnknown < ::PG::ConnectionException; end
class PG::TransactionRollback < ::PG::ServerError; end
class PG::TriggeredActionException < ::PG::ServerError; end
class PG::TriggeredDataChangeViolation < ::PG::ServerError; end
class PG::TrimError < ::PG::DataException; end

class PG::Tuple
  include ::Enumerable

  def [](_arg0); end
  def each; end

  # source://pg/1.4.4/lib/pg/tuple.rb#23
  def each_key(&block); end

  def each_value; end
  def fetch(*_arg0); end

  # source://pg/1.4.4/lib/pg/tuple.rb#14
  def has_key?(key); end

  def index(_arg0); end

  # source://pg/1.4.4/lib/pg/tuple.rb#10
  def inspect; end

  # source://pg/1.4.4/lib/pg/tuple.rb#14
  def key?(key); end

  # source://pg/1.4.4/lib/pg/tuple.rb#19
  def keys; end

  def length; end
  def size; end
  def values; end

  private

  def field_map; end
  def field_names; end
  def marshal_dump; end
  def marshal_load(_arg0); end
end

class PG::TypeMap; end

module PG::TypeMap::DefaultTypeMappable
  def default_type_map; end
  def default_type_map=(_arg0); end
  def with_default_type_map(_arg0); end
end

class PG::TypeMapAllStrings < ::PG::TypeMap; end

class PG::TypeMapByClass < ::PG::TypeMap
  include ::PG::TypeMap::DefaultTypeMappable

  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def coders; end
end

class PG::TypeMapByColumn < ::PG::TypeMap
  include ::PG::TypeMap::DefaultTypeMappable

  def initialize(_arg0); end

  def coders; end

  # source://pg/1.4.4/lib/pg/type_map_by_column.rb#12
  def inspect; end

  # source://pg/1.4.4/lib/pg/type_map_by_column.rb#8
  def oids; end
end

class PG::TypeMapByMriType < ::PG::TypeMap
  include ::PG::TypeMap::DefaultTypeMappable

  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def coders; end
end

class PG::TypeMapByOid < ::PG::TypeMap
  include ::PG::TypeMap::DefaultTypeMappable

  def add_coder(_arg0); end
  def build_column_map(_arg0); end
  def coders; end
  def max_rows_for_online_lookup; end
  def max_rows_for_online_lookup=(_arg0); end
  def rm_coder(_arg0, _arg1); end
end

class PG::TypeMapInRuby < ::PG::TypeMap
  include ::PG::TypeMap::DefaultTypeMappable

  def typecast_copy_get(_arg0, _arg1, _arg2, _arg3); end
  def typecast_query_param(_arg0, _arg1); end
  def typecast_result_value(_arg0, _arg1, _arg2); end
end

class PG::UnableToSend < ::PG::Error; end
class PG::UndefinedColumn < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::UndefinedFile < ::PG::SystemError; end
class PG::UndefinedFunction < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::UndefinedObject < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::UndefinedParameter < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::UndefinedTable < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::UniqueViolation < ::PG::IntegrityConstraintViolation; end
class PG::UnsafeNewEnumValueUsage < ::PG::ObjectNotInPrerequisiteState; end
class PG::UnterminatedCString < ::PG::DataException; end
class PG::UntranslatableCharacter < ::PG::DataException; end

# source://pg/1.4.4/lib/pg/version.rb#3
PG::VERSION = T.let(T.unsafe(nil), String)

class PG::WindowingError < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::WithCheckOptionViolation < ::PG::ServerError; end
class PG::WrongObjectType < ::PG::SyntaxErrorOrAccessRuleViolation; end
class PG::ZeroLengthCharacterString < ::PG::DataException; end

# based off https://github.com/newrelic/rpm/blob/master/lib/new_relic/agent/instrumentation/active_record.rb
# fallback for alls sorts of weird dbs
module Rack
  class << self
    # source://rack/2.2.4/lib/rack/version.rb#26
    def release; end

    # source://rack/2.2.4/lib/rack/version.rb#19
    def version; end
  end
end

module Rack::Auth; end

class Rack::Auth::AbstractHandler
  # source://rack/2.2.4/lib/rack/auth/abstract/handler.rb#13
  def initialize(app, realm = T.unsafe(nil), &authenticator); end

  # source://rack/2.2.4/lib/rack/auth/abstract/handler.rb#11
  def realm; end

  # source://rack/2.2.4/lib/rack/auth/abstract/handler.rb#11
  def realm=(_arg0); end

  private

  # source://rack/2.2.4/lib/rack/auth/abstract/handler.rb#29
  def bad_request; end

  # source://rack/2.2.4/lib/rack/auth/abstract/handler.rb#20
  def unauthorized(www_authenticate = T.unsafe(nil)); end
end

class Rack::Auth::AbstractRequest
  # source://rack/2.2.4/lib/rack/auth/abstract/request.rb#7
  def initialize(env); end

  # source://rack/2.2.4/lib/rack/auth/abstract/request.rb#31
  def params; end

  # source://rack/2.2.4/lib/rack/auth/abstract/request.rb#23
  def parts; end

  # source://rack/2.2.4/lib/rack/auth/abstract/request.rb#15
  def provided?; end

  # source://rack/2.2.4/lib/rack/auth/abstract/request.rb#11
  def request; end

  # source://rack/2.2.4/lib/rack/auth/abstract/request.rb#27
  def scheme; end

  # source://rack/2.2.4/lib/rack/auth/abstract/request.rb#19
  def valid?; end

  private

  # source://rack/2.2.4/lib/rack/auth/abstract/request.rb#40
  def authorization_key; end
end

# source://rack/2.2.4/lib/rack/auth/abstract/request.rb#38
Rack::Auth::AbstractRequest::AUTHORIZATION_KEYS = T.let(T.unsafe(nil), Array)

class Rack::Auth::Basic < ::Rack::Auth::AbstractHandler
  # source://rack/2.2.4/lib/rack/auth/basic.rb#18
  def call(env); end

  private

  # source://rack/2.2.4/lib/rack/auth/basic.rb#37
  def challenge; end

  # source://rack/2.2.4/lib/rack/auth/basic.rb#41
  def valid?(auth); end
end

class Rack::Auth::Basic::Request < ::Rack::Auth::AbstractRequest
  # source://rack/2.2.4/lib/rack/auth/basic.rb#46
  def basic?; end

  # source://rack/2.2.4/lib/rack/auth/basic.rb#50
  def credentials; end

  # source://rack/2.2.4/lib/rack/auth/basic.rb#54
  def username; end
end

module Rack::Auth::Digest; end

class Rack::Auth::Digest::MD5 < ::Rack::Auth::AbstractHandler
  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#26
  def initialize(app, realm = T.unsafe(nil), opaque = T.unsafe(nil), &authenticator); end

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#39
  def call(env); end

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#22
  def opaque; end

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#22
  def opaque=(_arg0); end

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#24
  def passwords_hashed=(_arg0); end

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#35
  def passwords_hashed?; end

  private

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#114
  def A1(auth, password); end

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#118
  def A2(auth); end

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#104
  def H(data); end

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#110
  def KD(secret, data); end

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#79
  def challenge(hash = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#122
  def digest(auth, password); end

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#104
  def md5(data); end

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#68
  def params(hash = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#83
  def valid?(auth); end

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#99
  def valid_digest?(auth); end

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#95
  def valid_nonce?(auth); end

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#91
  def valid_opaque?(auth); end

  # source://rack/2.2.4/lib/rack/auth/digest/md5.rb#87
  def valid_qop?(auth); end
end

# source://rack/2.2.4/lib/rack/auth/digest/md5.rb#66
Rack::Auth::Digest::MD5::QOP = T.let(T.unsafe(nil), String)

class Rack::Auth::Digest::Nonce
  # source://rack/2.2.4/lib/rack/auth/digest/nonce.rb#27
  def initialize(timestamp = T.unsafe(nil), given_digest = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/auth/digest/nonce.rb#35
  def digest; end

  # source://rack/2.2.4/lib/rack/auth/digest/nonce.rb#47
  def fresh?; end

  # source://rack/2.2.4/lib/rack/auth/digest/nonce.rb#43
  def stale?; end

  # source://rack/2.2.4/lib/rack/auth/digest/nonce.rb#31
  def to_s; end

  # source://rack/2.2.4/lib/rack/auth/digest/nonce.rb#39
  def valid?; end

  class << self
    # source://rack/2.2.4/lib/rack/auth/digest/nonce.rb#23
    def parse(string); end

    # source://rack/2.2.4/lib/rack/auth/digest/nonce.rb#20
    def private_key; end

    # source://rack/2.2.4/lib/rack/auth/digest/nonce.rb#20
    def private_key=(_arg0); end

    # source://rack/2.2.4/lib/rack/auth/digest/nonce.rb#20
    def time_limit; end

    # source://rack/2.2.4/lib/rack/auth/digest/nonce.rb#20
    def time_limit=(_arg0); end
  end
end

class Rack::Auth::Digest::Params < ::Hash
  # source://rack/2.2.4/lib/rack/auth/digest/params.rb#25
  def initialize; end

  # source://rack/2.2.4/lib/rack/auth/digest/params.rb#31
  def [](k); end

  # source://rack/2.2.4/lib/rack/auth/digest/params.rb#35
  def []=(k, v); end

  # source://rack/2.2.4/lib/rack/auth/digest/params.rb#47
  def quote(str); end

  # source://rack/2.2.4/lib/rack/auth/digest/params.rb#41
  def to_s; end

  class << self
    # source://rack/2.2.4/lib/rack/auth/digest/params.rb#15
    def dequote(str); end

    # source://rack/2.2.4/lib/rack/auth/digest/params.rb#8
    def parse(str); end

    # source://rack/2.2.4/lib/rack/auth/digest/params.rb#21
    def split_header_value(str); end
  end
end

# source://rack/2.2.4/lib/rack/auth/digest/params.rb#39
Rack::Auth::Digest::Params::UNQUOTED = T.let(T.unsafe(nil), Array)

class Rack::Auth::Digest::Request < ::Rack::Auth::AbstractRequest
  # source://rack/2.2.4/lib/rack/auth/digest/request.rb#19
  def correct_uri?; end

  # source://rack/2.2.4/lib/rack/auth/digest/request.rb#15
  def digest?; end

  # source://rack/2.2.4/lib/rack/auth/digest/request.rb#11
  def method; end

  # source://rack/2.2.4/lib/rack/auth/digest/request.rb#35
  def method_missing(sym, *args); end

  # source://rack/2.2.4/lib/rack/auth/digest/request.rb#23
  def nonce; end

  # source://rack/2.2.4/lib/rack/auth/digest/request.rb#27
  def params; end

  # source://rack/2.2.4/lib/rack/auth/digest/request.rb#31
  def respond_to?(sym, *_arg1); end
end

class Rack::BodyProxy
  # source://rack/2.2.4/lib/rack/body_proxy.rb#10
  def initialize(body, &block); end

  # source://rack/2.2.4/lib/rack/body_proxy.rb#23
  def close; end

  # source://rack/2.2.4/lib/rack/body_proxy.rb#35
  def closed?; end

  # source://rack/2.2.4/lib/rack/body_proxy.rb#40
  def method_missing(method_name, *args, **_arg2, &block); end

  private

  # source://rack/2.2.4/lib/rack/body_proxy.rb#17
  def respond_to_missing?(method_name, include_all = T.unsafe(nil)); end
end

class Rack::Builder
  # source://rack/2.2.4/lib/rack/builder.rb#123
  def initialize(default_app = T.unsafe(nil), &block); end

  # source://rack/2.2.4/lib/rack/builder.rb#243
  def call(env); end

  # source://rack/2.2.4/lib/rack/builder.rb#226
  def freeze_app; end

  # source://rack/2.2.4/lib/rack/builder.rb#219
  def map(path, &block); end

  # source://rack/2.2.4/lib/rack/builder.rb#176
  def run(app); end

  # source://rack/2.2.4/lib/rack/builder.rb#231
  def to_app; end

  # source://rack/2.2.4/lib/rack/builder.rb#153
  def use(middleware, *args, **_arg2, &block); end

  # source://rack/2.2.4/lib/rack/builder.rb#190
  def warmup(prc = T.unsafe(nil), &block); end

  private

  # source://rack/2.2.4/lib/rack/builder.rb#251
  def generate_map(default_app, mapping); end

  class << self
    # source://rack/2.2.4/lib/rack/builder.rb#130
    def app(default_app = T.unsafe(nil), &block); end

    # source://rack/2.2.4/lib/rack/builder.rb#93
    def load_file(path, opts = T.unsafe(nil)); end

    # source://rack/2.2.4/lib/rack/builder.rb#112
    def new_from_string(builder_script, file = T.unsafe(nil)); end

    # source://rack/2.2.4/lib/rack/builder.rb#64
    def parse_file(config, opts = T.unsafe(nil)); end
  end
end

# source://rack/2.2.4/lib/rack/builder.rb#36
Rack::Builder::UTF_8_BOM = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#29
Rack::CACHE_CONTROL = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#31
Rack::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#32
Rack::CONTENT_TYPE = T.let(T.unsafe(nil), String)

class Rack::Cascade
  # source://rack/2.2.4/lib/rack/cascade.rb#22
  def initialize(apps, cascade_for = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/cascade.rb#57
  def <<(app); end

  # source://rack/2.2.4/lib/rack/cascade.rb#57
  def add(app); end

  # source://rack/2.2.4/lib/rack/cascade.rb#14
  def apps; end

  # source://rack/2.2.4/lib/rack/cascade.rb#33
  def call(env); end

  # source://rack/2.2.4/lib/rack/cascade.rb#62
  def include?(app); end
end

# source://rack/2.2.4/lib/rack/cascade.rb#11
Rack::Cascade::NotFound = T.let(T.unsafe(nil), Array)

class Rack::Chunked
  include ::Rack::Utils

  # source://rack/2.2.4/lib/rack/chunked.rb#78
  def initialize(app); end

  # source://rack/2.2.4/lib/rack/chunked.rb#97
  def call(env); end

  # source://rack/2.2.4/lib/rack/chunked.rb#83
  def chunkable_version?(ver); end
end

class Rack::Chunked::Body
  # source://rack/2.2.4/lib/rack/chunked.rb#30
  def initialize(body); end

  # source://rack/2.2.4/lib/rack/chunked.rb#50
  def close; end

  # source://rack/2.2.4/lib/rack/chunked.rb#36
  def each(&block); end

  private

  # source://rack/2.2.4/lib/rack/chunked.rb#57
  def yield_trailers; end
end

# source://rack/2.2.4/lib/rack/chunked.rb#27
Rack::Chunked::Body::TAIL = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/chunked.rb#26
Rack::Chunked::Body::TERM = T.let(T.unsafe(nil), String)

class Rack::Chunked::TrailerBody < ::Rack::Chunked::Body
  private

  # source://rack/2.2.4/lib/rack/chunked.rb#71
  def yield_trailers; end
end

class Rack::CommonLogger
  # source://rack/2.2.4/lib/rack/common_logger.rb#24
  def initialize(app, logger = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/common_logger.rb#36
  def call(env); end

  private

  # source://rack/2.2.4/lib/rack/common_logger.rb#78
  def extract_content_length(headers); end

  # source://rack/2.2.4/lib/rack/common_logger.rb#47
  def log(env, status, header, began_at); end
end

# source://rack/2.2.4/lib/rack/common_logger.rb#18
Rack::CommonLogger::FORMAT = T.let(T.unsafe(nil), String)

class Rack::ConditionalGet
  # source://rack/2.2.4/lib/rack/conditional_get.rb#18
  def initialize(app); end

  # source://rack/2.2.4/lib/rack/conditional_get.rb#24
  def call(env); end

  private

  # source://rack/2.2.4/lib/rack/conditional_get.rb#59
  def etag_matches?(none_match, headers); end

  # source://rack/2.2.4/lib/rack/conditional_get.rb#48
  def fresh?(env, headers); end

  # source://rack/2.2.4/lib/rack/conditional_get.rb#65
  def modified_since?(modified_since, headers); end

  # source://rack/2.2.4/lib/rack/conditional_get.rb#72
  def to_rfc2822(since); end
end

class Rack::Config
  # source://rack/2.2.4/lib/rack/config.rb#12
  def initialize(app, &block); end

  # source://rack/2.2.4/lib/rack/config.rb#17
  def call(env); end
end

class Rack::ContentLength
  include ::Rack::Utils

  # source://rack/2.2.4/lib/rack/content_length.rb#12
  def initialize(app); end

  # source://rack/2.2.4/lib/rack/content_length.rb#16
  def call(env); end
end

class Rack::ContentType
  include ::Rack::Utils

  # source://rack/2.2.4/lib/rack/content_type.rb#15
  def initialize(app, content_type = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/content_type.rb#19
  def call(env); end
end

# source://rack/2.2.4/lib/rack.rb#43
Rack::DELETE = T.let(T.unsafe(nil), String)

class Rack::Deflater
  # source://rack/2.2.4/lib/rack/deflater.rb#36
  def initialize(app, options = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/deflater.rb#43
  def call(env); end

  private

  # source://rack/2.2.4/lib/rack/deflater.rb#122
  def should_deflate?(env, status, headers, body); end
end

class Rack::Deflater::GzipStream
  # source://rack/2.2.4/lib/rack/deflater.rb#85
  def initialize(body, mtime, sync); end

  # source://rack/2.2.4/lib/rack/deflater.rb#114
  def close; end

  # source://rack/2.2.4/lib/rack/deflater.rb#92
  def each(&block); end

  # source://rack/2.2.4/lib/rack/deflater.rb#109
  def write(data); end
end

class Rack::Directory
  # source://rack/2.2.4/lib/rack/directory.rb#77
  def initialize(root, app = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/directory.rb#83
  def call(env); end

  # source://rack/2.2.4/lib/rack/directory.rb#103
  def check_bad_request(path_info); end

  # source://rack/2.2.4/lib/rack/directory.rb#113
  def check_forbidden(path_info); end

  # source://rack/2.2.4/lib/rack/directory.rb#175
  def entity_not_found(path_info); end

  # source://rack/2.2.4/lib/rack/directory.rb#191
  def filesize_format(int); end

  # source://rack/2.2.4/lib/rack/directory.rb#90
  def get(env); end

  # source://rack/2.2.4/lib/rack/directory.rb#124
  def list_directory(path_info, path, script_name); end

  # source://rack/2.2.4/lib/rack/directory.rb#165
  def list_path(env, path, path_info, script_name); end

  # source://rack/2.2.4/lib/rack/directory.rb#74
  def root; end

  # source://rack/2.2.4/lib/rack/directory.rb#157
  def stat(path); end
end

# source://rack/2.2.4/lib/rack/directory.rb#14
Rack::Directory::DIR_FILE = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/directory.rb#37
Rack::Directory::DIR_PAGE_FOOTER = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/directory.rb#15
Rack::Directory::DIR_PAGE_HEADER = T.let(T.unsafe(nil), String)

class Rack::Directory::DirectoryBody < ::Struct
  # source://rack/2.2.4/lib/rack/directory.rb#47
  def each; end

  private

  # source://rack/2.2.4/lib/rack/directory.rb#67
  def DIR_FILE_escape(htmls); end
end

# source://rack/2.2.4/lib/rack/directory.rb#183
Rack::Directory::FILESIZE_FORMAT = T.let(T.unsafe(nil), Array)

# source://rack/2.2.4/lib/rack.rb#36
Rack::ETAG = T.let(T.unsafe(nil), String)

class Rack::ETag
  # source://rack/2.2.4/lib/rack/etag.rb#20
  def initialize(app, no_cache_control = T.unsafe(nil), cache_control = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/etag.rb#26
  def call(env); end

  private

  # source://rack/2.2.4/lib/rack/etag.rb#65
  def digest_body(body); end

  # source://rack/2.2.4/lib/rack/etag.rb#57
  def etag_body?(body); end

  # source://rack/2.2.4/lib/rack/etag.rb#53
  def etag_status?(status); end

  # source://rack/2.2.4/lib/rack/etag.rb#61
  def skip_caching?(headers); end
end

# source://rack/2.2.4/lib/rack/etag.rb#18
Rack::ETag::DEFAULT_CACHE_CONTROL = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/etag.rb#17
Rack::ETag::ETAG_STRING = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#30
Rack::EXPIRES = T.let(T.unsafe(nil), String)

class Rack::Events
  # source://rack/2.2.4/lib/rack/events.rb#102
  def initialize(app, handlers); end

  # source://rack/2.2.4/lib/rack/events.rb#107
  def call(env); end

  private

  # source://rack/2.2.4/lib/rack/events.rb#145
  def make_request(env); end

  # source://rack/2.2.4/lib/rack/events.rb#149
  def make_response(status, headers, body); end

  # source://rack/2.2.4/lib/rack/events.rb#133
  def on_commit(request, response); end

  # source://rack/2.2.4/lib/rack/events.rb#129
  def on_error(request, response, e); end

  # source://rack/2.2.4/lib/rack/events.rb#141
  def on_finish(request, response); end

  # source://rack/2.2.4/lib/rack/events.rb#137
  def on_start(request, response); end
end

module Rack::Events::Abstract
  # source://rack/2.2.4/lib/rack/events.rb#62
  def on_commit(req, res); end

  # source://rack/2.2.4/lib/rack/events.rb#71
  def on_error(req, res, e); end

  # source://rack/2.2.4/lib/rack/events.rb#68
  def on_finish(req, res); end

  # source://rack/2.2.4/lib/rack/events.rb#65
  def on_send(req, res); end

  # source://rack/2.2.4/lib/rack/events.rb#59
  def on_start(req, res); end
end

class Rack::Events::BufferedResponse < ::Rack::Response::Raw
  # source://rack/2.2.4/lib/rack/events.rb#94
  def initialize(status, headers, body); end

  # source://rack/2.2.4/lib/rack/events.rb#92
  def body; end

  # source://rack/2.2.4/lib/rack/events.rb#99
  def to_a; end
end

class Rack::Events::EventedBodyProxy < ::Rack::BodyProxy
  # source://rack/2.2.4/lib/rack/events.rb#78
  def initialize(body, request, response, handlers, &block); end

  # source://rack/2.2.4/lib/rack/events.rb#85
  def each; end

  # source://rack/2.2.4/lib/rack/events.rb#76
  def request; end

  # source://rack/2.2.4/lib/rack/events.rb#76
  def response; end
end

# source://rack/2.2.4/lib/rack/file.rb#6
Rack::File = Rack::Files

class Rack::Files
  # source://rack/2.2.4/lib/rack/files.rb#29
  def initialize(root, headers = T.unsafe(nil), default_mime = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/files.rb#36
  def call(env); end

  # source://rack/2.2.4/lib/rack/files.rb#41
  def get(env); end

  # source://rack/2.2.4/lib/rack/files.rb#27
  def root; end

  # source://rack/2.2.4/lib/rack/files.rb#70
  def serving(request, path); end

  private

  # source://rack/2.2.4/lib/rack/files.rb#192
  def fail(status, body, headers = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/files.rb#211
  def filesize(path); end

  # source://rack/2.2.4/lib/rack/files.rb#207
  def mime_type(path, default_mime); end

  class << self
    # source://rack/2.2.4/lib/rack/files.rb#20
    def method_added(name); end
  end
end

# source://rack/2.2.4/lib/rack/files.rb#15
Rack::Files::ALLOWED_VERBS = T.let(T.unsafe(nil), Array)

# source://rack/2.2.4/lib/rack/files.rb#16
Rack::Files::ALLOW_HEADER = T.let(T.unsafe(nil), String)

class Rack::Files::BaseIterator
  # source://rack/2.2.4/lib/rack/files.rb#126
  def initialize(path, ranges, options); end

  # source://rack/2.2.4/lib/rack/files.rb#146
  def bytesize; end

  # source://rack/2.2.4/lib/rack/files.rb#155
  def close; end

  # source://rack/2.2.4/lib/rack/files.rb#132
  def each; end

  # source://rack/2.2.4/lib/rack/files.rb#124
  def options; end

  # source://rack/2.2.4/lib/rack/files.rb#124
  def path; end

  # source://rack/2.2.4/lib/rack/files.rb#124
  def ranges; end

  private

  # source://rack/2.2.4/lib/rack/files.rb#173
  def each_range_part(file, range); end

  # source://rack/2.2.4/lib/rack/files.rb#159
  def multipart?; end

  # source://rack/2.2.4/lib/rack/files.rb#163
  def multipart_heading(range); end
end

class Rack::Files::Iterator < ::Rack::Files::BaseIterator
  # source://rack/2.2.4/lib/rack/files.rb#124
  def to_path; end
end

# source://rack/2.2.4/lib/rack/files.rb#17
Rack::Files::MULTIPART_BOUNDARY = T.let(T.unsafe(nil), String)

class Rack::ForwardRequest < ::Exception
  # source://rack/2.2.4/lib/rack/recursive.rb#15
  def initialize(url, env = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/recursive.rb#13
  def env; end

  # source://rack/2.2.4/lib/rack/recursive.rb#13
  def url; end
end

# source://rack/2.2.4/lib/rack.rb#39
Rack::GET = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#44
Rack::HEAD = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#20
Rack::HTTPS = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#35
Rack::HTTP_COOKIE = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#17
Rack::HTTP_HOST = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#18
Rack::HTTP_PORT = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#19
Rack::HTTP_VERSION = T.let(T.unsafe(nil), String)

module Rack::Handler
  class << self
    # source://rack/2.2.4/lib/rack/handler.rb#51
    def default; end

    # source://rack/2.2.4/lib/rack/handler.rb#13
    def get(server); end

    # source://rack/2.2.4/lib/rack/handler.rb#36
    def pick(server_names); end

    # source://rack/2.2.4/lib/rack/handler.rb#85
    def register(server, klass); end

    # source://rack/2.2.4/lib/rack/handler.rb#75
    def try_require(prefix, const_name); end
  end
end

class Rack::Handler::CGI
  class << self
    # source://rack/2.2.4/lib/rack/handler/cgi.rb#6
    def run(app, **options); end

    # source://rack/2.2.4/lib/rack/handler/cgi.rb#51
    def send_body(body); end

    # source://rack/2.2.4/lib/rack/handler/cgi.rb#40
    def send_headers(status, headers); end

    # source://rack/2.2.4/lib/rack/handler/cgi.rb#11
    def serve(app); end
  end
end

class Rack::Handler::WEBrick < ::WEBrick::HTTPServlet::AbstractServlet
  # source://rack/2.2.4/lib/rack/handler/webrick.rb#61
  def initialize(server, app); end

  # source://rack/2.2.4/lib/rack/handler/webrick.rb#66
  def service(req, res); end

  class << self
    # source://rack/2.2.4/lib/rack/handler/webrick.rb#26
    def run(app, **options); end

    # source://rack/2.2.4/lib/rack/handler/webrick.rb#54
    def shutdown; end

    # source://rack/2.2.4/lib/rack/handler/webrick.rb#44
    def valid_options; end
  end
end

class Rack::Head
  # source://rack/2.2.4/lib/rack/head.rb#7
  def initialize(app); end

  # source://rack/2.2.4/lib/rack/head.rb#11
  def call(env); end
end

# source://rack/2.2.4/lib/rack.rb#46
Rack::LINK = T.let(T.unsafe(nil), String)

class Rack::Lint
  include ::Rack::Lint::Assertion

  # source://rack/2.2.4/lib/rack/lint.rb#10
  def initialize(app); end

  # source://rack/2.2.4/lib/rack/lint.rb#41
  def _call(env); end

  # source://rack/2.2.4/lib/rack/lint.rb#37
  def call(env = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/lint.rb#719
  def check_content_length(status, headers); end

  # source://rack/2.2.4/lib/rack/lint.rb#705
  def check_content_type(status, headers); end

  # source://rack/2.2.4/lib/rack/lint.rb#77
  def check_env(env); end

  # source://rack/2.2.4/lib/rack/lint.rb#497
  def check_error(error); end

  # source://rack/2.2.4/lib/rack/lint.rb#668
  def check_headers(header); end

  # source://rack/2.2.4/lib/rack/lint.rb#562
  def check_hijack(env); end

  # source://rack/2.2.4/lib/rack/lint.rb#609
  def check_hijack_response(headers, env); end

  # source://rack/2.2.4/lib/rack/lint.rb#377
  def check_input(input); end

  # source://rack/2.2.4/lib/rack/lint.rb#661
  def check_status(status); end

  # source://rack/2.2.4/lib/rack/lint.rb#792
  def close; end

  # source://rack/2.2.4/lib/rack/lint.rb#745
  def each; end

  # source://rack/2.2.4/lib/rack/lint.rb#732
  def verify_content_length(bytes); end
end

module Rack::Lint::Assertion
  # source://rack/2.2.4/lib/rack/lint.rb#19
  def assert(message); end
end

class Rack::Lint::ErrorWrapper
  include ::Rack::Lint::Assertion

  # source://rack/2.2.4/lib/rack/lint.rb#509
  def initialize(error); end

  # source://rack/2.2.4/lib/rack/lint.rb#531
  def close(*args); end

  # source://rack/2.2.4/lib/rack/lint.rb#526
  def flush; end

  # source://rack/2.2.4/lib/rack/lint.rb#514
  def puts(str); end

  # source://rack/2.2.4/lib/rack/lint.rb#519
  def write(str); end
end

class Rack::Lint::HijackWrapper
  include ::Rack::Lint::Assertion
  extend ::Forwardable

  # source://rack/2.2.4/lib/rack/lint.rb#547
  def initialize(io); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def close(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def close_read(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def close_write(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def closed?(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def flush(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def read(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def read_nonblock(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def write(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def write_nonblock(*args, **_arg1, &block); end
end

# source://rack/2.2.4/lib/rack/lint.rb#540
Rack::Lint::HijackWrapper::REQUIRED_METHODS = T.let(T.unsafe(nil), Array)

class Rack::Lint::InputWrapper
  include ::Rack::Lint::Assertion

  # source://rack/2.2.4/lib/rack/lint.rb#398
  def initialize(input); end

  # source://rack/2.2.4/lib/rack/lint.rb#491
  def close(*args); end

  # source://rack/2.2.4/lib/rack/lint.rb#463
  def each(*args); end

  # source://rack/2.2.4/lib/rack/lint.rb#404
  def gets(*args); end

  # source://rack/2.2.4/lib/rack/lint.rb#430
  def read(*args); end

  # source://rack/2.2.4/lib/rack/lint.rb#478
  def rewind(*args); end
end

class Rack::Lint::LintError < ::RuntimeError; end

class Rack::Lock
  # source://rack/2.2.4/lib/rack/lock.rb#9
  def initialize(app, mutex = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/lock.rb#13
  def call(env); end

  private

  # source://rack/2.2.4/lib/rack/lock.rb#27
  def unlock; end
end

class Rack::Logger
  # source://rack/2.2.4/lib/rack/logger.rb#8
  def initialize(app, level = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/logger.rb#12
  def call(env); end
end

class Rack::MediaType
  class << self
    # source://rack/2.2.4/lib/rack/media_type.rb#26
    def params(content_type); end

    # source://rack/2.2.4/lib/rack/media_type.rb#16
    def type(content_type); end

    private

    # source://rack/2.2.4/lib/rack/media_type.rb#38
    def strip_doublequotes(str); end
  end
end

# source://rack/2.2.4/lib/rack/media_type.rb#7
Rack::MediaType::SPLIT_PATTERN = T.let(T.unsafe(nil), Regexp)

class Rack::MethodOverride
  # source://rack/2.2.4/lib/rack/method_override.rb#11
  def initialize(app); end

  # source://rack/2.2.4/lib/rack/method_override.rb#15
  def call(env); end

  # source://rack/2.2.4/lib/rack/method_override.rb#27
  def method_override(env); end

  private

  # source://rack/2.2.4/lib/rack/method_override.rb#40
  def allowed_methods; end

  # source://rack/2.2.4/lib/rack/method_override.rb#44
  def method_override_param(req); end
end

# source://rack/2.2.4/lib/rack/method_override.rb#9
Rack::MethodOverride::ALLOWED_METHODS = T.let(T.unsafe(nil), Array)

# source://rack/2.2.4/lib/rack/method_override.rb#5
Rack::MethodOverride::HTTP_METHODS = T.let(T.unsafe(nil), Array)

# source://rack/2.2.4/lib/rack/method_override.rb#8
Rack::MethodOverride::HTTP_METHOD_OVERRIDE_HEADER = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/method_override.rb#7
Rack::MethodOverride::METHOD_OVERRIDE_PARAM_KEY = T.let(T.unsafe(nil), String)

module Rack::Mime
  private

  # source://rack/2.2.4/lib/rack/mime.rb#30
  def match?(value, matcher); end

  # source://rack/2.2.4/lib/rack/mime.rb#18
  def mime_type(ext, fallback = T.unsafe(nil)); end

  class << self
    # source://rack/2.2.4/lib/rack/mime.rb#30
    def match?(value, matcher); end

    # source://rack/2.2.4/lib/rack/mime.rb#18
    def mime_type(ext, fallback = T.unsafe(nil)); end
  end
end

# source://rack/2.2.4/lib/rack/mime.rb#51
Rack::Mime::MIME_TYPES = T.let(T.unsafe(nil), Hash)

class Rack::MiniProfiler
  extend ::Rack::MiniProfiler::ProfilingMethods

  # options:
  # :auto_inject - should script be automatically injected on every html page (not xhr)
  #
  # @return [MiniProfiler] a new instance of MiniProfiler
  #
  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#115
  def initialize(app, config = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#206
  def advanced_debugging_enabled?; end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#575
  def analyze_memory; end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#792
  def cache_control_value; end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#214
  def call(env); end

  # cancels automatic injection of profile script for the current page
  #
  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#788
  def cancel_auto_inject(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#202
  def config; end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#194
  def current; end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#198
  def current=(c); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#547
  def dump_env(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#529
  def dump_exceptions(exceptions); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#682
  def flamegraph(graph, path); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#167
  def generate_html(page_struct, env, result_json = T.unsafe(nil)); end

  # get_profile_script returns script to be injected inside current html page
  # By default, profile_script is appended to the end of all html requests automatically.
  # Calling get_profile_script cancels automatic append for the current page
  # Use it when:
  # * you have disabled auto append behaviour throught :auto_inject => false flag
  # * you do not want script to be automatically appended for the current page. You can also call cancel_auto_inject
  #
  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#730
  def get_profile_script(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#651
  def help(client_settings, env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#711
  def ids(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#720
  def ids_comma_separated(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#508
  def inject(fragment, script); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#474
  def inject_profiler(env, status, headers, body); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#646
  def make_link(postfix, env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#179
  def serve_html(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#130
  def serve_results(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#641
  def text_result(body); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#210
  def tool_disabled_message(client_settings); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#569
  def trim_strings(strings, max_size); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#126
  def user(env); end

  private

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#798
  def handle_snapshots_request(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#863
  def rails_route_from_path(path, method); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#845
  def serve_flamegraph(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#890
  def take_snapshot(env, start); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#884
  def take_snapshot?(path); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#879
  def url_for_snapshot(id, group_name); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#874
  def url_for_snapshots_group(group_name); end

  class << self
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#48
    def add_snapshot_custom_field(key, value); end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#84
    def advanced_tools_message; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#72
    def authorize_request; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#90
    def binds_to_params(binds); end

    # So we can change the configuration if we want
    #
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#25
    def config; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#63
    def create_current(env = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#37
    def current; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#41
    def current=(c); end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#76
    def deauthorize_request; end

    # discard existing results, don't track this request
    #
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#59
    def discard_results; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#16
    def generate_id; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#54
    def get_snapshot_custom_fields; end

    # @return [Boolean]
    #
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#12
    def patch_rails?; end

    # @return [Boolean]
    #
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#106
    def redact_sql_queries?; end

    # @return [Boolean]
    #
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#80
    def request_authorized?; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#20
    def reset_config; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#29
    def resources_root; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#33
    def share_template; end

    # @return [Boolean]
    #
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#101
    def snapshots_transporter?; end

    # Returns the value of attribute subscribe_sql_active_record.
    #
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#10
    def subscribe_sql_active_record; end

    # Sets the attribute subscribe_sql_active_record
    #
    # @param value the value to set the attribute subscribe_sql_active_record to.
    #
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#10
    def subscribe_sql_active_record=(_arg0); end
  end
end

# source://rack-mini-profiler//lib/mini_profiler/asset_version.rb#4
Rack::MiniProfiler::ASSET_VERSION = T.let(T.unsafe(nil), String)

class Rack::MiniProfiler::AbstractStore
  # a list of tokens that are permitted to access profiler in explicit mode
  #
  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#40
  def allowed_tokens; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#34
  def diagnostics(user); end

  # @param group_name [String]
  # @raise [NotImplementedError]
  # @return [Array<Rack::MiniProfiler::TimerStruct::Page>] list of snapshots of the group. Blank array if the group doesn't exist.
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#63
  def fetch_snapshots_group(group_name); end

  # returns a hash where the keys are group names and the values
  # are hashes that contain 3 keys:
  #   1. `:worst_score` => the duration of the worst/slowest snapshot in the group (float)
  #   2. `:best_score` => the duration of the best/fastest snapshot in the group (float)
  #   3. `:snapshots_count` => the number of snapshots in the group (integer)
  #
  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#57
  def fetch_snapshots_overview; end

  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#30
  def get_unviewed_ids(user); end

  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#14
  def load(id); end

  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#67
  def load_snapshot(id, group_name); end

  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#48
  def push_snapshot(page_struct, group_name, config); end

  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#10
  def save(page_struct); end

  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#26
  def set_all_unviewed(user, ids); end

  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#18
  def set_unviewed(user, id); end

  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#22
  def set_viewed(user, id); end

  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#44
  def should_take_snapshot?(period); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#79
  def snapshots_group(group_name); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#71
  def snapshots_overview; end
end

# maximum age of allowed tokens before cycling in seconds
#
# source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#8
Rack::MiniProfiler::AbstractStore::MAX_TOKEN_AGE = T.let(T.unsafe(nil), Integer)

class Rack::MiniProfiler::ClientSettings
  # @return [ClientSettings] a new instance of ClientSettings
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#16
  def initialize(env, store, start); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#118
  def backtrace_default?; end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#114
  def backtrace_full?; end

  # Returns the value of attribute backtrace_level.
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#14
  def backtrace_level; end

  # Sets the attribute backtrace_level
  #
  # @param value the value to set the attribute backtrace_level to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#14
  def backtrace_level=(_arg0); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#122
  def backtrace_none?; end

  # Returns the value of attribute disable_profiling.
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#13
  def disable_profiling; end

  # Sets the attribute disable_profiling
  #
  # @param value the value to set the attribute disable_profiling to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#13
  def disable_profiling=(_arg0); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#110
  def disable_profiling?; end

  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#84
  def discard_cookie!(headers); end

  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#42
  def handle_cookie(result); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#90
  def has_valid_cookie?; end

  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#58
  def write!(headers); end
end

# source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#9
Rack::MiniProfiler::ClientSettings::BACKTRACE_DEFAULT = T.let(T.unsafe(nil), T.untyped)

# source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#10
Rack::MiniProfiler::ClientSettings::BACKTRACE_FULL = T.let(T.unsafe(nil), Integer)

# source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#11
Rack::MiniProfiler::ClientSettings::BACKTRACE_NONE = T.let(T.unsafe(nil), Integer)

# source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#7
Rack::MiniProfiler::ClientSettings::COOKIE_NAME = T.let(T.unsafe(nil), String)

class Rack::MiniProfiler::Config
  # Returns the value of attribute assets_url.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#93
  def assets_url; end

  # source://rack-mini-profiler//lib/mini_profiler/config.rb#111
  def assets_url=(lmbda); end

  # Returns the value of attribute authorization_mode.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def authorization_mode; end

  # Sets the attribute authorization_mode
  #
  # @param value the value to set the attribute authorization_mode to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#97
  def authorization_mode=(mode); end

  # Returns the value of attribute auto_inject.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def auto_inject; end

  # Sets the attribute auto_inject
  #
  # @param value the value to set the attribute auto_inject to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def auto_inject=(_arg0); end

  # Returns the value of attribute backtrace_ignores.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def backtrace_ignores; end

  # Sets the attribute backtrace_ignores
  #
  # @param value the value to set the attribute backtrace_ignores to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def backtrace_ignores=(_arg0); end

  # Returns the value of attribute backtrace_includes.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def backtrace_includes; end

  # Sets the attribute backtrace_includes
  #
  # @param value the value to set the attribute backtrace_includes to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def backtrace_includes=(_arg0); end

  # Returns the value of attribute backtrace_remove.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def backtrace_remove; end

  # Sets the attribute backtrace_remove
  #
  # @param value the value to set the attribute backtrace_remove to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def backtrace_remove=(_arg0); end

  # Returns the value of attribute backtrace_threshold_ms.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def backtrace_threshold_ms; end

  # Sets the attribute backtrace_threshold_ms
  #
  # @param value the value to set the attribute backtrace_threshold_ms to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def backtrace_threshold_ms=(_arg0); end

  # Returns the value of attribute base_url_path.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def base_url_path; end

  # Sets the attribute base_url_path
  #
  # @param value the value to set the attribute base_url_path to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def base_url_path=(_arg0); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def collapse_results; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def collapse_results=(_arg0); end

  # Returns the value of attribute content_security_policy_nonce.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def content_security_policy_nonce; end

  # Sets the attribute content_security_policy_nonce
  #
  # @param value the value to set the attribute content_security_policy_nonce to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def content_security_policy_nonce=(_arg0); end

  # Returns the value of attribute cookie_path.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def cookie_path; end

  # Sets the attribute cookie_path
  #
  # @param value the value to set the attribute cookie_path to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def cookie_path=(_arg0); end

  # Returns the value of attribute disable_caching.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def disable_caching; end

  # Sets the attribute disable_caching
  #
  # @param value the value to set the attribute disable_caching to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def disable_caching=(_arg0); end

  # Returns the value of attribute enable_advanced_debugging_tools.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def enable_advanced_debugging_tools; end

  # Sets the attribute enable_advanced_debugging_tools
  #
  # @param value the value to set the attribute enable_advanced_debugging_tools to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def enable_advanced_debugging_tools=(_arg0); end

  # Returns the value of attribute enable_hotwire_turbo_drive_support.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def enable_hotwire_turbo_drive_support; end

  # Sets the attribute enable_hotwire_turbo_drive_support
  #
  # @param value the value to set the attribute enable_hotwire_turbo_drive_support to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def enable_hotwire_turbo_drive_support=(_arg0); end

  # Returns the value of attribute enabled.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def enabled; end

  # Sets the attribute enabled
  #
  # @param value the value to set the attribute enabled to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def enabled=(_arg0); end

  # Returns the value of attribute flamegraph_mode.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def flamegraph_mode; end

  # Sets the attribute flamegraph_mode
  #
  # @param value the value to set the attribute flamegraph_mode to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def flamegraph_mode=(_arg0); end

  # Returns the value of attribute flamegraph_sample_rate.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def flamegraph_sample_rate; end

  # Sets the attribute flamegraph_sample_rate
  #
  # @param value the value to set the attribute flamegraph_sample_rate to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def flamegraph_sample_rate=(_arg0); end

  # source://rack-mini-profiler//lib/mini_profiler/config.rb#122
  def horizontal_position; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def html_container; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def html_container=(_arg0); end

  # Returns the value of attribute logger.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def logger=(_arg0); end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def max_snapshot_groups; end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def max_snapshot_groups=(_arg0); end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def max_snapshots_per_group; end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def max_snapshots_per_group=(_arg0); end

  # Returns the value of attribute max_sql_param_length.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def max_sql_param_length; end

  # Sets the attribute max_sql_param_length
  #
  # @param value the value to set the attribute max_sql_param_length to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def max_sql_param_length=(_arg0); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def max_traces_to_show; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def max_traces_to_show=(_arg0); end

  # source://rack-mini-profiler//lib/mini_profiler/config.rb#126
  def merge!(config); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def position; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def position=(_arg0); end

  # Returns the value of attribute pre_authorize_cb.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def pre_authorize_cb; end

  # Sets the attribute pre_authorize_cb
  #
  # @param value the value to set the attribute pre_authorize_cb to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def pre_authorize_cb=(_arg0); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def show_children; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def show_children=(_arg0); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def show_controls; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def show_controls=(_arg0); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def show_total_sql_count; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def show_total_sql_count=(_arg0); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def show_trivial; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def show_trivial=(_arg0); end

  # Returns the value of attribute skip_paths.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def skip_paths; end

  # Sets the attribute skip_paths
  #
  # @param value the value to set the attribute skip_paths to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def skip_paths=(_arg0); end

  # Returns the value of attribute skip_schema_queries.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def skip_schema_queries; end

  # Sets the attribute skip_schema_queries
  #
  # @param value the value to set the attribute skip_schema_queries to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def skip_schema_queries=(_arg0); end

  # Returns the value of attribute skip_sql_param_names.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def skip_sql_param_names; end

  # Sets the attribute skip_sql_param_names
  #
  # @param value the value to set the attribute skip_sql_param_names to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def skip_sql_param_names=(_arg0); end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshot_every_n_requests; end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshot_every_n_requests=(_arg0); end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshot_hidden_custom_fields; end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshot_hidden_custom_fields=(_arg0); end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_redact_sql_queries; end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_redact_sql_queries=(_arg0); end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_transport_auth_key; end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_transport_auth_key=(_arg0); end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_transport_destination_url; end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_transport_destination_url=(_arg0); end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_transport_gzip_requests; end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_transport_gzip_requests=(_arg0); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def start_hidden; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def start_hidden=(_arg0); end

  # Returns the value of attribute storage.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def storage; end

  # Sets the attribute storage
  #
  # @param value the value to set the attribute storage to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def storage=(_arg0); end

  # Returns the value of attribute storage_failure.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def storage_failure; end

  # Sets the attribute storage_failure
  #
  # @param value the value to set the attribute storage_failure to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def storage_failure=(_arg0); end

  # Returns the value of attribute storage_instance.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def storage_instance; end

  # Sets the attribute storage_instance
  #
  # @param value the value to set the attribute storage_instance to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def storage_instance=(_arg0); end

  # Returns the value of attribute storage_options.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def storage_options; end

  # Sets the attribute storage_options
  #
  # @param value the value to set the attribute storage_options to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def storage_options=(_arg0); end

  # Returns the value of attribute suppress_encoding.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def suppress_encoding; end

  # Sets the attribute suppress_encoding
  #
  # @param value the value to set the attribute suppress_encoding to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def suppress_encoding=(_arg0); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def toggle_shortcut; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def toggle_shortcut=(_arg0); end

  # Deprecated options
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def use_existing_jquery; end

  # Deprecated options
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def use_existing_jquery=(_arg0); end

  # Returns the value of attribute user_provider.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def user_provider; end

  # Sets the attribute user_provider
  #
  # @param value the value to set the attribute user_provider to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def user_provider=(_arg0); end

  # source://rack-mini-profiler//lib/mini_profiler/config.rb#118
  def vertical_position; end

  class << self
    # source://rack-mini-profiler//lib/mini_profiler/config.rb#6
    def attr_accessor(*vars); end

    # source://rack-mini-profiler//lib/mini_profiler/config.rb#12
    def attributes; end

    # source://rack-mini-profiler//lib/mini_profiler/config.rb#16
    def default; end
  end
end

class Rack::MiniProfiler::Context
  # @return [Context] a new instance of Context
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#7
  def initialize(opts = T.unsafe(nil)); end

  # Returns the value of attribute current_timer.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def current_timer; end

  # Sets the attribute current_timer
  #
  # @param value the value to set the attribute current_timer to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def current_timer=(_arg0); end

  # Returns the value of attribute discard.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def discard; end

  # Sets the attribute discard
  #
  # @param value the value to set the attribute discard to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def discard=(_arg0); end

  # Returns the value of attribute full_backtrace.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def full_backtrace; end

  # Sets the attribute full_backtrace
  #
  # @param value the value to set the attribute full_backtrace to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def full_backtrace=(_arg0); end

  # Returns the value of attribute inject_js.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def inject_js; end

  # Sets the attribute inject_js
  #
  # @param value the value to set the attribute inject_js to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def inject_js=(_arg0); end

  # Returns the value of attribute measure.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def measure; end

  # Sets the attribute measure
  #
  # @param value the value to set the attribute measure to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def measure=(_arg0); end

  # Returns the value of attribute mpt_init.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def mpt_init; end

  # Sets the attribute mpt_init
  #
  # @param value the value to set the attribute mpt_init to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def mpt_init=(_arg0); end

  # Returns the value of attribute page_struct.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def page_struct; end

  # Sets the attribute page_struct
  #
  # @param value the value to set the attribute page_struct to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def page_struct=(_arg0); end

  # Returns the value of attribute skip_backtrace.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def skip_backtrace; end

  # Sets the attribute skip_backtrace
  #
  # @param value the value to set the attribute skip_backtrace to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def skip_backtrace=(_arg0); end
end

class Rack::MiniProfiler::FileStore < ::Rack::MiniProfiler::AbstractStore
  # @return [FileStore] a new instance of FileStore
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#49
  def initialize(args = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#145
  def allowed_tokens; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#161
  def cleanup_cache; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#139
  def flush_tokens; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#133
  def get_unviewed_ids(user); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#102
  def load(id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#96
  def save(page_struct); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#127
  def set_all_unviewed(user, ids); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#108
  def set_unviewed(user, id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#117
  def set_viewed(user, id); end
end

# Sub-class thread so we have a named thread (useful for debugging in Thread.list).
class Rack::MiniProfiler::FileStore::CacheCleanupThread < ::Thread; end

# source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#47
Rack::MiniProfiler::FileStore::EXPIRES_IN_SECONDS = T.let(T.unsafe(nil), Integer)

class Rack::MiniProfiler::FileStore::FileCache
  # @return [FileCache] a new instance of FileCache
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#12
  def initialize(path, prefix); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#17
  def [](key); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#28
  def []=(key, val); end

  private

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#41
  def path(key); end
end

class Rack::MiniProfiler::GCProfiler
  # @return [GCProfiler] a new instance of GCProfiler
  #
  # source://rack-mini-profiler//lib/mini_profiler/gc_profiler.rb#5
  def initialize; end

  # source://rack-mini-profiler//lib/mini_profiler/gc_profiler.rb#63
  def analyze_growth(ids_before, ids_after); end

  # source://rack-mini-profiler//lib/mini_profiler/gc_profiler.rb#79
  def analyze_initial_state(ids_before); end

  # source://rack-mini-profiler//lib/mini_profiler/gc_profiler.rb#51
  def analyze_strings(ids_before, ids_after); end

  # source://rack-mini-profiler//lib/mini_profiler/gc_profiler.rb#39
  def diff_object_stats(before, after); end

  # source://rack-mini-profiler//lib/mini_profiler/gc_profiler.rb#10
  def object_space_stats; end

  # source://rack-mini-profiler//lib/mini_profiler/gc_profiler.rb#94
  def profile_gc(app, env); end
end

class Rack::MiniProfiler::MemcacheStore < ::Rack::MiniProfiler::AbstractStore
  # @return [MemcacheStore] a new instance of MemcacheStore
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#10
  def initialize(args = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#64
  def allowed_tokens; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#60
  def flush_tokens; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#56
  def get_unviewed_ids(user); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#25
  def load(id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#21
  def save(page_struct); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#52
  def set_all_unviewed(user, ids); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#32
  def set_unviewed(user, id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#42
  def set_viewed(user, id); end
end

# source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#7
Rack::MiniProfiler::MemcacheStore::EXPIRES_IN_SECONDS = T.let(T.unsafe(nil), Integer)

# source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#8
Rack::MiniProfiler::MemcacheStore::MAX_RETRIES = T.let(T.unsafe(nil), Integer)

class Rack::MiniProfiler::MemoryStore < ::Rack::MiniProfiler::AbstractStore
  # @return [MemoryStore] a new instance of MemoryStore
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#50
  def initialize(args = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#130
  def allowed_tokens; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#123
  def cleanup_cache; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#202
  def fetch_snapshots_group(group_name); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#188
  def fetch_snapshots_overview; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#117
  def get_unviewed_ids(user); end

  # FIXME: use weak ref, trouble it may be broken in 1.9 so need to use the 'ref' gem
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#74
  def initialize_cleanup_thread(args = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#63
  def initialize_locks; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#91
  def load(id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#213
  def load_snapshot(id, group_name); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#156
  def push_snapshot(page_struct, group_name, config); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#85
  def save(page_struct); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#111
  def set_all_unviewed(user, ids); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#97
  def set_unviewed(user, id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#104
  def set_viewed(user, id); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#144
  def should_take_snapshot?(period); end

  private

  # used in tests only
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#225
  def wipe_snapshots_data; end
end

# source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#48
Rack::MiniProfiler::MemoryStore::CLEANUP_CYCLE = T.let(T.unsafe(nil), Integer)

# source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#47
Rack::MiniProfiler::MemoryStore::CLEANUP_INTERVAL = T.let(T.unsafe(nil), Integer)

# Sub-class thread so we have a named thread (useful for debugging in Thread.list).
class Rack::MiniProfiler::MemoryStore::CacheCleanupThread < ::Thread
  # @return [CacheCleanupThread] a new instance of CacheCleanupThread
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#10
  def initialize(interval, cycle, store); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#32
  def cleanup; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#37
  def cycle_count; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#41
  def increment_cycle; end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#18
  def should_cleanup?; end

  # We don't want to hit the filesystem every 10s to clean up the cache so we need to do a bit of
  # accounting to avoid sleeping that entire time.  We don't want to sleep for the entire period because
  # it means the thread will stay live in hot deployment scenarios, keeping a potentially large memory
  # graph from being garbage collected upon undeploy.
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#26
  def sleepy_run; end
end

# source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#46
Rack::MiniProfiler::MemoryStore::EXPIRES_IN_SECONDS = T.let(T.unsafe(nil), Integer)

module Rack::MiniProfiler::ProfilingMethods
  # Add a custom timing. These are displayed similar to SQL/query time in
  # columns expanding to the right.
  #
  # type        - String counter type. Each distinct type gets its own column.
  # duration_ms - Duration of the call in ms. Either this or a block must be
  #               given but not both.
  #
  # When a block is given, calculate the duration by yielding to the block
  # and keeping a record of its run time.
  #
  # Returns the result of the block, or nil when no block is given.
  #
  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#143
  def counter(type, duration_ms = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#64
  def counter_method(klass, method, &blk); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#27
  def finish_step(obj); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#72
  def profile_method(klass, method, type = T.unsafe(nil), &blk); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#124
  def profile_singleton_method(klass, method, type = T.unsafe(nil), &blk); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#7
  def record_sql(query, elapsed_ms, params = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#20
  def start_step(name); end

  # perform a profiling step on given block
  #
  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#35
  def step(name, opts = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#68
  def uncounter_method(klass, method); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#50
  def unprofile_method(klass, method); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#128
  def unprofile_singleton_method(klass, method); end

  private

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#157
  def clean_method_name(method); end
end

class Rack::MiniProfiler::RedisStore < ::Rack::MiniProfiler::AbstractStore
  # @return [RedisStore] a new instance of RedisStore
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#13
  def initialize(args = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#87
  def allowed_tokens; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#70
  def diagnostics(user); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#230
  def fetch_snapshots_group(group_name); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#206
  def fetch_snapshots_overview; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#78
  def flush_tokens; end

  # Remove expired ids from the unviewed sorted set and return the remaining ids
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#64
  def get_unviewed_ids(user); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#24
  def load(id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#247
  def load_snapshot(id, group_name); end

  # Returns the value of attribute prefix.
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#9
  def prefix; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#136
  def push_snapshot(page_struct, group_name, config); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#20
  def save(page_struct); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#47
  def set_all_unviewed(user, ids); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#38
  def set_unviewed(user, id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#59
  def set_viewed(user, id); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#126
  def should_take_snapshot?(period); end

  # Only used for testing
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#83
  def simulate_expire; end

  private

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#298
  def cached_redis_eval(script, script_sha, reraise: T.unsafe(nil), argv: T.unsafe(nil), keys: T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#310
  def cleanup_corrupt_snapshots(corrupt_snapshots_ids, group_name); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#288
  def group_snapshot_hash_key(group_name); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#282
  def group_snapshot_zset_key(group_name); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#267
  def prefixed_id(id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#271
  def redis; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#278
  def snapshot_counter_key; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#294
  def snapshot_overview_zset_key; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#263
  def user_key(user); end

  # only used in tests
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#341
  def wipe_snapshots_data; end
end

# source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#115
Rack::MiniProfiler::RedisStore::COUNTER_LUA = T.let(T.unsafe(nil), String)

# source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#124
Rack::MiniProfiler::RedisStore::COUNTER_LUA_SHA = T.let(T.unsafe(nil), String)

# source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#11
Rack::MiniProfiler::RedisStore::EXPIRES_IN_SECONDS = T.let(T.unsafe(nil), Integer)

# source://rack-mini-profiler//lib/mini_profiler/version.rb#6
Rack::MiniProfiler::SOURCE_CODE_URI = T.let(T.unsafe(nil), String)

class Rack::MiniProfiler::SnapshotsTransporter
  # @return [SnapshotsTransporter] a new instance of SnapshotsTransporter
  #
  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#28
  def initialize(config); end

  # Returns the value of attribute buffer.
  #
  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#25
  def buffer; end

  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#49
  def flush_buffer; end

  # Returns the value of attribute gzip_requests.
  #
  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#26
  def gzip_requests; end

  # Sets the attribute gzip_requests
  #
  # @param value the value to set the attribute gzip_requests to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#26
  def gzip_requests=(_arg0); end

  # Returns the value of attribute max_buffer_size.
  #
  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#26
  def max_buffer_size; end

  # Sets the attribute max_buffer_size
  #
  # @param value the value to set the attribute max_buffer_size to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#26
  def max_buffer_size=(_arg0); end

  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#89
  def requests_interval; end

  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#41
  def ship(snapshot); end

  private

  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#95
  def backoff_delay; end

  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#100
  def start_thread; end

  class << self
    # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#15
    def failed_http_requests_count; end

    # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#12
    def successful_http_requests_count; end

    # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#19
    def transport(snapshot); end

    # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#9
    def transported_snapshots_count; end
  end
end

# Timing system for a SQL query
module Rack::MiniProfiler::TimerStruct; end

# A base class for timing structures
class Rack::MiniProfiler::TimerStruct::Base
  # @return [Base] a new instance of Base
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/base.rb#9
  def initialize(attrs = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/base.rb#17
  def [](name); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/base.rb#21
  def []=(name, val); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/base.rb#32
  def as_json(options = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/base.rb#13
  def attributes; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/base.rb#26
  def to_json(*a); end
end

# This class holds the client timings
class Rack::MiniProfiler::TimerStruct::Client < ::Rack::MiniProfiler::TimerStruct::Base
  # @return [Client] a new instance of Client
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/client.rb#27
  def initialize(env = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/client.rb#31
  def redirect_count; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/client.rb#35
  def timings; end

  class << self
    # source://rack-mini-profiler//lib/mini_profiler/timer_struct/client.rb#39
    def init_from_form_data(env, page_struct); end

    # source://rack-mini-profiler//lib/mini_profiler/timer_struct/client.rb#10
    def init_instrumentation; end

    # used by Railtie to instrument asset_tag for JS / CSS
    #
    # source://rack-mini-profiler//lib/mini_profiler/timer_struct/client.rb#19
    def instrument(name, orig); end
  end
end

# Timing system for a custom timers such as cache, redis, RPC, external API
# calls, etc.
class Rack::MiniProfiler::TimerStruct::Custom < ::Rack::MiniProfiler::TimerStruct::Base
  # @return [Custom] a new instance of Custom
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/custom.rb#10
  def initialize(type, duration_ms, page, parent); end

  # Returns the value of attribute parent.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/custom.rb#9
  def parent; end

  # Sets the attribute parent
  #
  # @param value the value to set the attribute parent to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/custom.rb#9
  def parent=(_arg0); end
end

# TimerStruct::Page
#   Root: TimerStruct::Request
#     :has_many TimerStruct::Request children
#     :has_many TimerStruct::Sql children
#     :has_many TimerStruct::Custom children
class Rack::MiniProfiler::TimerStruct::Page < ::Rack::MiniProfiler::TimerStruct::Base
  # @return [Page] a new instance of Page
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#60
  def initialize(env); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#124
  def as_json(options = T.unsafe(nil)); end

  # Returns the value of attribute attributes.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#58
  def attributes; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#116
  def attributes_to_serialize; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#104
  def duration_ms; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#108
  def duration_ms_in_sql; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#128
  def extra_json; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#100
  def name; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#112
  def root; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#120
  def to_json(*a); end

  class << self
    # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#14
    def from_hash(hash); end

    private

    # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#45
    def symbolize_array(array); end

    # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#30
    def symbolize_hash(hash); end
  end
end

class Rack::MiniProfiler::TimerStruct::Request < ::Rack::MiniProfiler::TimerStruct::Base
  # @return [Request] a new instance of Request
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#16
  def initialize(name, page, parent); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#81
  def add_child(name); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#128
  def add_custom(type, elapsed_ms, page); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#104
  def add_sql(query, elapsed_ms, page, params = T.unsafe(nil), skip_backtrace = T.unsafe(nil), full_backtrace = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#172
  def adjust_depth; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#69
  def children; end

  # Returns the value of attribute children_duration.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#14
  def children_duration; end

  # Sets the attribute children_duration
  #
  # @param value the value to set the attribute children_duration to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#14
  def children_duration=(_arg0); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#73
  def custom_timings; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#65
  def depth; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#53
  def duration_ms; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#57
  def duration_ms_in_sql; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#90
  def move_child(child, destination); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#145
  def move_custom(type, custom, destination); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#115
  def move_sql(sql, destination); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#49
  def name; end

  # Returns the value of attribute parent.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#14
  def parent; end

  # Sets the attribute parent
  #
  # @param value the value to set the attribute parent to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#14
  def parent=(_arg0); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#165
  def record_time(milliseconds = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#77
  def sql_timings; end

  # Returns the value of attribute start.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#14
  def start; end

  # Sets the attribute start
  #
  # @param value the value to set the attribute start to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#14
  def start=(_arg0); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#61
  def start_ms; end

  class << self
    # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#8
    def createRoot(name, page); end
  end
end

class Rack::MiniProfiler::TimerStruct::Sql < ::Rack::MiniProfiler::TimerStruct::Base
  # @return [Sql] a new instance of Sql
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/sql.rb#11
  def initialize(query, duration_ms, page, parent, params = T.unsafe(nil), skip_backtrace = T.unsafe(nil), full_backtrace = T.unsafe(nil)); end

  # Returns the value of attribute parent.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/sql.rb#9
  def parent; end

  # Sets the attribute parent
  #
  # @param value the value to set the attribute parent to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/sql.rb#9
  def parent=(_arg0); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/sql.rb#52
  def report_reader_duration(elapsed_ms); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/sql.rb#60
  def trim_binds(binds); end
end

# source://rack-mini-profiler//lib/mini_profiler/version.rb#5
Rack::MiniProfiler::VERSION = T.let(T.unsafe(nil), String)

module Rack::MiniProfilerRails
  extend ::Rack::MiniProfilerRailsMethods

  class << self
    # source://rack-mini-profiler//lib/mini_profiler_rails/railtie.rb#121
    def create_engine; end

    # source://rack-mini-profiler//lib/mini_profiler_rails/railtie.rb#142
    def get_key(payload); end

    # call direct if needed to do a defer init
    #
    # source://rack-mini-profiler//lib/mini_profiler_rails/railtie.rb#10
    def initialize!(app); end

    # @return [Boolean]
    #
    # source://rack-mini-profiler//lib/mini_profiler_rails/railtie.rb#150
    def serves_static_assets?(app); end

    # source://rack-mini-profiler//lib/mini_profiler_rails/railtie.rb#146
    def shorten_identifier(identifier); end

    # source://rack-mini-profiler//lib/mini_profiler_rails/railtie.rb#132
    def subscribe(event, &blk); end
  end
end

class Rack::MiniProfilerRails::Railtie < ::Rails::Railtie; end

module Rack::MiniProfilerRailsMethods
  extend ::Rack::MiniProfilerRailsMethods

  # source://rack-mini-profiler//lib/mini_profiler_rails/railtie_methods.rb#54
  def get_webpacker_assets_path; end

  # source://rack-mini-profiler//lib/mini_profiler_rails/railtie_methods.rb#4
  def render_notification_handler(name, finish, start, name_as_description: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler_rails/railtie_methods.rb#42
  def should_measure?; end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler_rails/railtie_methods.rb#47
  def should_move?(child, node); end
end

class Rack::MockRequest
  # source://rack/2.2.4/lib/rack/mock.rb#52
  def initialize(app); end

  # source://rack/2.2.4/lib/rack/mock.rb#65
  def delete(uri, opts = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/mock.rb#57
  def get(uri, opts = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/mock.rb#67
  def head(uri, opts = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/mock.rb#69
  def options(uri, opts = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/mock.rb#63
  def patch(uri, opts = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/mock.rb#59
  def post(uri, opts = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/mock.rb#61
  def put(uri, opts = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/mock.rb#74
  def request(method = T.unsafe(nil), uri = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # source://rack/2.2.4/lib/rack/mock.rb#105
    def env_for(uri = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://rack/2.2.4/lib/rack/mock.rb#92
    def parse_uri_rfc2396(uri); end
  end
end

# source://rack/2.2.4/lib/rack/mock.rb#43
Rack::MockRequest::DEFAULT_ENV = T.let(T.unsafe(nil), Hash)

class Rack::MockRequest::FatalWarner
  # source://rack/2.2.4/lib/rack/mock.rb#35
  def flush; end

  # source://rack/2.2.4/lib/rack/mock.rb#27
  def puts(warning); end

  # source://rack/2.2.4/lib/rack/mock.rb#38
  def string; end

  # source://rack/2.2.4/lib/rack/mock.rb#31
  def write(warning); end
end

class Rack::MockRequest::FatalWarning < ::RuntimeError; end

class Rack::MockResponse < ::Rack::Response
  # source://rack/2.2.4/lib/rack/mock.rb#184
  def initialize(status, headers, body, errors = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/mock.rb#194
  def =~(other); end

  # source://rack/2.2.4/lib/rack/mock.rb#202
  def body; end

  # source://rack/2.2.4/lib/rack/mock.rb#226
  def cookie(name); end

  # source://rack/2.2.4/lib/rack/mock.rb#179
  def cookies; end

  # source://rack/2.2.4/lib/rack/mock.rb#222
  def empty?; end

  # source://rack/2.2.4/lib/rack/mock.rb#182
  def errors; end

  # source://rack/2.2.4/lib/rack/mock.rb#182
  def errors=(_arg0); end

  # source://rack/2.2.4/lib/rack/mock.rb#198
  def match(other); end

  # source://rack/2.2.4/lib/rack/mock.rb#179
  def original_headers; end

  private

  # source://rack/2.2.4/lib/rack/mock.rb#253
  def identify_cookie_attributes(cookie_filling); end

  # source://rack/2.2.4/lib/rack/mock.rb#232
  def parse_cookies_from_header; end

  class << self
    def [](*_arg0); end
  end
end

# source://rack-test/2.0.2/lib/rack/test.rb#413
Rack::MockSession = Rack::Test::Session

module Rack::Multipart
  class << self
    # source://rack/2.2.4/lib/rack/multipart.rb#58
    def build_multipart(params, first = T.unsafe(nil)); end

    # source://rack/2.2.4/lib/rack/multipart.rb#44
    def extract_multipart(req, params = T.unsafe(nil)); end

    # source://rack/2.2.4/lib/rack/multipart.rb#40
    def parse_multipart(env, params = T.unsafe(nil)); end
  end
end

# source://rack/2.2.4/lib/rack/multipart.rb#25
Rack::Multipart::ATTRIBUTE = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#24
Rack::Multipart::ATTRIBUTE_CHAR = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#19
Rack::Multipart::BROKEN = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#17
Rack::Multipart::CONDISP = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#36
Rack::Multipart::DISPPARM = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#13
Rack::Multipart::EOL = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/multipart.rb#32
Rack::Multipart::EXTENDED_INITIAL_NAME = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#34
Rack::Multipart::EXTENDED_INITIAL_PARAMETER = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#33
Rack::Multipart::EXTENDED_INITIAL_VALUE = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#29
Rack::Multipart::EXTENDED_OTHER_NAME = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#31
Rack::Multipart::EXTENDED_OTHER_PARAMETER = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#30
Rack::Multipart::EXTENDED_OTHER_VALUE = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#35
Rack::Multipart::EXTENDED_PARAMETER = T.let(T.unsafe(nil), Regexp)

class Rack::Multipart::Generator
  # source://rack/2.2.4/lib/rack/multipart/generator.rb#6
  def initialize(params, first = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/multipart/generator.rb#14
  def dump; end

  private

  # source://rack/2.2.4/lib/rack/multipart/generator.rb#87
  def content_for_other(file, name); end

  # source://rack/2.2.4/lib/rack/multipart/generator.rb#75
  def content_for_tempfile(io, file, name); end

  # source://rack/2.2.4/lib/rack/multipart/generator.rb#50
  def flattened_params; end

  # source://rack/2.2.4/lib/rack/multipart/generator.rb#35
  def multipart?; end
end

# source://rack/2.2.4/lib/rack/multipart.rb#15
Rack::Multipart::MULTIPART = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#14
Rack::Multipart::MULTIPART_BOUNDARY = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/multipart.rb#21
Rack::Multipart::MULTIPART_CONTENT_DISPOSITION = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#22
Rack::Multipart::MULTIPART_CONTENT_ID = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#20
Rack::Multipart::MULTIPART_CONTENT_TYPE = T.let(T.unsafe(nil), Regexp)

class Rack::Multipart::MultipartPartLimitError < ::Errno::EMFILE; end

class Rack::Multipart::Parser
  # source://rack/2.2.4/lib/rack/multipart/parser.rb#167
  def initialize(boundary, tempfile, bufsize, query_parser); end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#185
  def on_read(content); end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#191
  def result; end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#165
  def state; end

  private

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#283
  def consume_boundary; end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#281
  def full_boundary; end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#293
  def get_filename(head); end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#229
  def handle_consume_token; end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#358
  def handle_empty_content!(content); end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#220
  def handle_fast_forward; end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#262
  def handle_mime_body; end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#239
  def handle_mime_head; end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#203
  def run_parser; end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#330
  def tag_multipart_encoding(filename, content_type, name, body); end

  class << self
    # source://rack/2.2.4/lib/rack/multipart/parser.rb#63
    def parse(io, content_length, content_type, tmpfile, bufsize, qp); end

    # source://rack/2.2.4/lib/rack/multipart/parser.rb#56
    def parse_boundary(content_type); end
  end
end

# source://rack/2.2.4/lib/rack/multipart/parser.rb#18
Rack::Multipart::Parser::BOUNDARY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart/parser.rb#12
Rack::Multipart::Parser::BUFSIZE = T.let(T.unsafe(nil), Integer)

class Rack::Multipart::Parser::BoundedIO
  # source://rack/2.2.4/lib/rack/multipart/parser.rb#21
  def initialize(io, content_length); end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#27
  def read(size, outbuf = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#48
  def rewind; end
end

# source://rack/2.2.4/lib/rack/multipart/parser.rb#328
Rack::Multipart::Parser::CHARSET = T.let(T.unsafe(nil), String)

class Rack::Multipart::Parser::Collector
  include ::Enumerable

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#120
  def initialize(tempfile); end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#126
  def each; end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#146
  def on_mime_body(mime_index, content); end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#150
  def on_mime_finish(mime_index); end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#130
  def on_mime_head(mime_index, head, filename, content_type, name); end

  private

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#155
  def check_open_files; end
end

class Rack::Multipart::Parser::Collector::BufferPart < ::Rack::Multipart::Parser::Collector::MimePart
  # source://rack/2.2.4/lib/rack/multipart/parser.rb#110
  def close; end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#109
  def file?; end
end

class Rack::Multipart::Parser::Collector::MimePart < ::Struct
  # source://rack/2.2.4/lib/rack/multipart/parser.rb#86
  def get_data; end
end

class Rack::Multipart::Parser::Collector::TempfilePart < ::Rack::Multipart::Parser::Collector::MimePart
  # source://rack/2.2.4/lib/rack/multipart/parser.rb#115
  def close; end

  # source://rack/2.2.4/lib/rack/multipart/parser.rb#114
  def file?; end
end

# source://rack/2.2.4/lib/rack/multipart/parser.rb#54
Rack::Multipart::Parser::EMPTY = T.let(T.unsafe(nil), Rack::Multipart::Parser::MultipartInfo)

class Rack::Multipart::Parser::MultipartInfo < ::Struct
  def params; end
  def params=(_); end
  def tmp_files; end
  def tmp_files=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rack/2.2.4/lib/rack/multipart/parser.rb#14
Rack::Multipart::Parser::TEMPFILE_FACTORY = T.let(T.unsafe(nil), Proc)

# source://rack/2.2.4/lib/rack/multipart/parser.rb#13
Rack::Multipart::Parser::TEXT_PLAIN = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/multipart.rb#28
Rack::Multipart::REGULAR_PARAMETER = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#27
Rack::Multipart::REGULAR_PARAMETER_NAME = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#37
Rack::Multipart::RFC2183 = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#26
Rack::Multipart::SECTION = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/multipart.rb#16
Rack::Multipart::TOKEN = T.let(T.unsafe(nil), Regexp)

class Rack::Multipart::UploadedFile
  # source://rack/2.2.4/lib/rack/multipart/uploaded_file.rb#12
  def initialize(filepath = T.unsafe(nil), ct = T.unsafe(nil), bin = T.unsafe(nil), path: T.unsafe(nil), content_type: T.unsafe(nil), binary: T.unsafe(nil), filename: T.unsafe(nil), io: T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/multipart/uploaded_file.rb#10
  def content_type; end

  # source://rack/2.2.4/lib/rack/multipart/uploaded_file.rb#10
  def content_type=(_arg0); end

  # source://rack/2.2.4/lib/rack/multipart/uploaded_file.rb#27
  def local_path; end

  # source://rack/2.2.4/lib/rack/multipart/uploaded_file.rb#36
  def method_missing(method_name, *args, &block); end

  # source://rack/2.2.4/lib/rack/multipart/uploaded_file.rb#7
  def original_filename; end

  # source://rack/2.2.4/lib/rack/multipart/uploaded_file.rb#27
  def path; end

  # source://rack/2.2.4/lib/rack/multipart/uploaded_file.rb#32
  def respond_to?(*args); end
end

# source://rack/2.2.4/lib/rack/multipart.rb#18
Rack::Multipart::VALUE = T.let(T.unsafe(nil), Regexp)

class Rack::NullLogger
  # source://rack/2.2.4/lib/rack/null_logger.rb#5
  def initialize(app); end

  # source://rack/2.2.4/lib/rack/null_logger.rb#37
  def <<(msg); end

  # source://rack/2.2.4/lib/rack/null_logger.rb#36
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://rack/2.2.4/lib/rack/null_logger.rb#9
  def call(env); end

  # source://rack/2.2.4/lib/rack/null_logger.rb#35
  def close; end

  # source://rack/2.2.4/lib/rack/null_logger.rb#27
  def datetime_format; end

  # source://rack/2.2.4/lib/rack/null_logger.rb#32
  def datetime_format=(datetime_format); end

  # source://rack/2.2.4/lib/rack/null_logger.rb#15
  def debug(progname = T.unsafe(nil), &block); end

  # source://rack/2.2.4/lib/rack/null_logger.rb#21
  def debug?; end

  # source://rack/2.2.4/lib/rack/null_logger.rb#17
  def error(progname = T.unsafe(nil), &block); end

  # source://rack/2.2.4/lib/rack/null_logger.rb#23
  def error?; end

  # source://rack/2.2.4/lib/rack/null_logger.rb#18
  def fatal(progname = T.unsafe(nil), &block); end

  # source://rack/2.2.4/lib/rack/null_logger.rb#24
  def fatal?; end

  # source://rack/2.2.4/lib/rack/null_logger.rb#28
  def formatter; end

  # source://rack/2.2.4/lib/rack/null_logger.rb#33
  def formatter=(formatter); end

  # source://rack/2.2.4/lib/rack/null_logger.rb#14
  def info(progname = T.unsafe(nil), &block); end

  # source://rack/2.2.4/lib/rack/null_logger.rb#20
  def info?; end

  # source://rack/2.2.4/lib/rack/null_logger.rb#25
  def level; end

  # source://rack/2.2.4/lib/rack/null_logger.rb#30
  def level=(level); end

  # source://rack/2.2.4/lib/rack/null_logger.rb#26
  def progname; end

  # source://rack/2.2.4/lib/rack/null_logger.rb#31
  def progname=(progname); end

  # source://rack/2.2.4/lib/rack/null_logger.rb#29
  def sev_threshold; end

  # source://rack/2.2.4/lib/rack/null_logger.rb#34
  def sev_threshold=(sev_threshold); end

  # source://rack/2.2.4/lib/rack/null_logger.rb#19
  def unknown(progname = T.unsafe(nil), &block); end

  # source://rack/2.2.4/lib/rack/null_logger.rb#16
  def warn(progname = T.unsafe(nil), &block); end

  # source://rack/2.2.4/lib/rack/null_logger.rb#22
  def warn?; end
end

# source://rack/2.2.4/lib/rack.rb#45
Rack::OPTIONS = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#42
Rack::PATCH = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#21
Rack::PATH_INFO = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#40
Rack::POST = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#41
Rack::PUT = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#25
Rack::QUERY_STRING = T.let(T.unsafe(nil), String)

class Rack::QueryParser
  # source://rack/2.2.4/lib/rack/query_parser.rb#29
  def initialize(params_class, key_space_limit, param_depth_limit); end

  # source://rack/2.2.4/lib/rack/query_parser.rb#27
  def key_space_limit; end

  # source://rack/2.2.4/lib/rack/query_parser.rb#128
  def make_params; end

  # source://rack/2.2.4/lib/rack/query_parser.rb#136
  def new_depth_limit(param_depth_limit); end

  # source://rack/2.2.4/lib/rack/query_parser.rb#132
  def new_space_limit(key_space_limit); end

  # source://rack/2.2.4/lib/rack/query_parser.rb#87
  def normalize_params(params, name, v, depth); end

  # source://rack/2.2.4/lib/rack/query_parser.rb#27
  def param_depth_limit; end

  # source://rack/2.2.4/lib/rack/query_parser.rb#68
  def parse_nested_query(qs, d = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/query_parser.rb#40
  def parse_query(qs, d = T.unsafe(nil), &unescaper); end

  private

  # source://rack/2.2.4/lib/rack/query_parser.rb#146
  def params_hash_has_key?(hash, key); end

  # source://rack/2.2.4/lib/rack/query_parser.rb#142
  def params_hash_type?(obj); end

  # source://rack/2.2.4/lib/rack/query_parser.rb#158
  def unescape(s); end

  class << self
    # source://rack/2.2.4/lib/rack/query_parser.rb#23
    def make_default(key_space_limit, param_depth_limit); end
  end
end

# source://rack/2.2.4/lib/rack/query_parser.rb#8
Rack::QueryParser::COMMON_SEP = T.let(T.unsafe(nil), Hash)

# source://rack/2.2.4/lib/rack/query_parser.rb#7
Rack::QueryParser::DEFAULT_SEP = T.let(T.unsafe(nil), Regexp)

class Rack::QueryParser::InvalidParameterError < ::ArgumentError; end
class Rack::QueryParser::ParameterTypeError < ::TypeError; end

class Rack::QueryParser::Params
  # source://rack/2.2.4/lib/rack/query_parser.rb#163
  def initialize(limit); end

  # source://rack/2.2.4/lib/rack/query_parser.rb#169
  def [](key); end

  # source://rack/2.2.4/lib/rack/query_parser.rb#173
  def []=(key, value); end

  # source://rack/2.2.4/lib/rack/query_parser.rb#179
  def key?(key); end

  # source://rack/2.2.4/lib/rack/query_parser.rb#201
  def to_h; end

  # source://rack/2.2.4/lib/rack/query_parser.rb#201
  def to_params_hash; end
end

class Rack::QueryParser::ParamsTooDeepError < ::RangeError; end

# source://rack/2.2.4/lib/rack.rb#53
Rack::RACK_ERRORS = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#63
Rack::RACK_HIJACK = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#65
Rack::RACK_HIJACK_IO = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#55
Rack::RACK_INPUT = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#64
Rack::RACK_IS_HIJACK = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#54
Rack::RACK_LOGGER = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#76
Rack::RACK_METHODOVERRIDE_ORIGINAL_METHOD = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#67
Rack::RACK_MULTIPART_BUFFER_SIZE = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#68
Rack::RACK_MULTIPART_TEMPFILE_FACTORY = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#60
Rack::RACK_MULTIPROCESS = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#59
Rack::RACK_MULTITHREAD = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#66
Rack::RACK_RECURSIVE_INCLUDE = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#72
Rack::RACK_REQUEST_COOKIE_HASH = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#73
Rack::RACK_REQUEST_COOKIE_STRING = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#70
Rack::RACK_REQUEST_FORM_HASH = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#69
Rack::RACK_REQUEST_FORM_INPUT = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#71
Rack::RACK_REQUEST_FORM_VARS = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#74
Rack::RACK_REQUEST_QUERY_HASH = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#75
Rack::RACK_REQUEST_QUERY_STRING = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#61
Rack::RACK_RUNONCE = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#56
Rack::RACK_SESSION = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#57
Rack::RACK_SESSION_OPTIONS = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#77
Rack::RACK_SESSION_UNPACKED_COOKIE_DATA = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#58
Rack::RACK_SHOWSTATUS_DETAIL = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#52
Rack::RACK_TEMPFILES = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#62
Rack::RACK_URL_SCHEME = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#51
Rack::RACK_VERSION = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/version.rb#23
Rack::RELEASE = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#22
Rack::REQUEST_METHOD = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#23
Rack::REQUEST_PATH = T.let(T.unsafe(nil), String)

class Rack::Recursive
  # source://rack/2.2.4/lib/rack/recursive.rb#35
  def initialize(app); end

  # source://rack/2.2.4/lib/rack/recursive.rb#43
  def _call(env); end

  # source://rack/2.2.4/lib/rack/recursive.rb#39
  def call(env); end

  # source://rack/2.2.4/lib/rack/recursive.rb#50
  def include(env, path); end
end

class Rack::Reloader
  # source://rack/2.2.4/lib/rack/reloader.rb#27
  def initialize(app, cooldown = T.unsafe(nil), backend = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/reloader.rb#38
  def call(env); end

  # source://rack/2.2.4/lib/rack/reloader.rb#52
  def reload!(stderr = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/reloader.rb#60
  def safe_load(file, mtime, stderr = T.unsafe(nil)); end
end

module Rack::Reloader::Stat
  # source://rack/2.2.4/lib/rack/reloader.rb#90
  def figure_path(file, paths); end

  # source://rack/2.2.4/lib/rack/reloader.rb#71
  def rotation; end

  # source://rack/2.2.4/lib/rack/reloader.rb#105
  def safe_stat(file); end
end

class Rack::Request
  include ::Rack::Request::Env
  include ::Rack::Request::Helpers

  # source://rack/2.2.4/lib/rack/request.rb#26
  def initialize(env); end

  # source://rack/2.2.4/lib/rack/request.rb#40
  def delete_param(k); end

  # source://rack/2.2.4/lib/rack/request.rb#31
  def params; end

  # source://rack/2.2.4/lib/rack/request.rb#31
  def query; end

  # source://rack/2.2.4/lib/rack/request.rb#35
  def update_param(k, v); end

  # source://yard/0.9.28/lib/yard/server/rack_adapter.rb#86
  def version_supplied; end

  # source://yard/0.9.28/lib/yard/server/rack_adapter.rb#86
  def version_supplied=(_arg0); end

  # source://yard/0.9.28/lib/yard/server/rack_adapter.rb#88
  def xhr?; end

  class << self
    # source://rack/2.2.4/lib/rack/request.rb#16
    def ip_filter; end

    # source://rack/2.2.4/lib/rack/request.rb#16
    def ip_filter=(_arg0); end
  end
end

# source://rack/2.2.4/lib/rack/request.rb#20
Rack::Request::ALLOWED_SCHEMES = T.let(T.unsafe(nil), Array)

module Rack::Request::Env
  # source://rack/2.2.4/lib/rack/request.rb#50
  def initialize(env); end

  # source://rack/2.2.4/lib/rack/request.rb#91
  def add_header(key, v); end

  # source://rack/2.2.4/lib/rack/request.rb#102
  def delete_header(name); end

  # source://rack/2.2.4/lib/rack/request.rb#73
  def each_header(&block); end

  # source://rack/2.2.4/lib/rack/request.rb#48
  def env; end

  # source://rack/2.2.4/lib/rack/request.rb#68
  def fetch_header(name, &block); end

  # source://rack/2.2.4/lib/rack/request.rb#62
  def get_header(name); end

  # source://rack/2.2.4/lib/rack/request.rb#57
  def has_header?(name); end

  # source://rack/2.2.4/lib/rack/request.rb#78
  def set_header(name, v); end

  private

  # source://rack/2.2.4/lib/rack/request.rb#106
  def initialize_copy(other); end
end

module Rack::Request::Helpers
  # source://rack/2.2.4/lib/rack/request.rb#426
  def GET; end

  # source://rack/2.2.4/lib/rack/request.rb#440
  def POST; end

  # source://rack/2.2.4/lib/rack/request.rb#532
  def [](key); end

  # source://rack/2.2.4/lib/rack/request.rb#543
  def []=(key, value); end

  # source://rack/2.2.4/lib/rack/request.rb#519
  def accept_encoding; end

  # source://rack/2.2.4/lib/rack/request.rb#523
  def accept_language; end

  # source://rack/2.2.4/lib/rack/request.rb#227
  def authority; end

  # source://rack/2.2.4/lib/rack/request.rb#502
  def base_url; end

  # source://rack/2.2.4/lib/rack/request.rb#150
  def body; end

  # source://rack/2.2.4/lib/rack/request.rb#400
  def content_charset; end

  # source://rack/2.2.4/lib/rack/request.rb#159
  def content_length; end

  # source://rack/2.2.4/lib/rack/request.rb#271
  def content_type; end

  # source://rack/2.2.4/lib/rack/request.rb#256
  def cookies; end

  # source://rack/2.2.4/lib/rack/request.rb#181
  def delete?; end

  # source://rack/2.2.4/lib/rack/request.rb#497
  def delete_param(k); end

  # source://rack/2.2.4/lib/rack/request.rb#412
  def form_data?; end

  # source://rack/2.2.4/lib/rack/request.rb#344
  def forwarded_authority; end

  # source://rack/2.2.4/lib/rack/request.rb#330
  def forwarded_for; end

  # source://rack/2.2.4/lib/rack/request.rb#338
  def forwarded_port; end

  # source://rack/2.2.4/lib/rack/request.rb#515
  def fullpath; end

  # source://rack/2.2.4/lib/rack/request.rb#184
  def get?; end

  # source://rack/2.2.4/lib/rack/request.rb#187
  def head?; end

  # source://rack/2.2.4/lib/rack/request.rb#296
  def host; end

  # source://rack/2.2.4/lib/rack/request.rb#281
  def host_authority; end

  # source://rack/2.2.4/lib/rack/request.rb#285
  def host_with_port(authority = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/request.rb#304
  def hostname; end

  # source://rack/2.2.4/lib/rack/request.rb#354
  def ip; end

  # source://rack/2.2.4/lib/rack/request.rb#193
  def link?; end

  # source://rack/2.2.4/lib/rack/request.rb#160
  def logger; end

  # source://rack/2.2.4/lib/rack/request.rb#383
  def media_type; end

  # source://rack/2.2.4/lib/rack/request.rb#392
  def media_type_params; end

  # source://rack/2.2.4/lib/rack/request.rb#162
  def multithread?; end

  # source://rack/2.2.4/lib/rack/request.rb#190
  def options?; end

  # source://rack/2.2.4/lib/rack/request.rb#468
  def params; end

  # source://rack/2.2.4/lib/rack/request.rb#421
  def parseable_data?; end

  # source://rack/2.2.4/lib/rack/request.rb#196
  def patch?; end

  # source://rack/2.2.4/lib/rack/request.rb#511
  def path; end

  # source://rack/2.2.4/lib/rack/request.rb#154
  def path_info; end

  # source://rack/2.2.4/lib/rack/request.rb#155
  def path_info=(s); end

  # source://rack/2.2.4/lib/rack/request.rb#308
  def port; end

  # source://rack/2.2.4/lib/rack/request.rb#199
  def post?; end

  # source://rack/2.2.4/lib/rack/request.rb#202
  def put?; end

  # source://rack/2.2.4/lib/rack/request.rb#158
  def query_string; end

  # source://rack/2.2.4/lib/rack/request.rb#165
  def referer; end

  # source://rack/2.2.4/lib/rack/request.rb#165
  def referrer; end

  # source://rack/2.2.4/lib/rack/request.rb#157
  def request_method; end

  # source://rack/2.2.4/lib/rack/request.rb#210
  def scheme; end

  # source://rack/2.2.4/lib/rack/request.rb#151
  def script_name; end

  # source://rack/2.2.4/lib/rack/request.rb#152
  def script_name=(s); end

  # source://rack/2.2.4/lib/rack/request.rb#233
  def server_authority; end

  # source://rack/2.2.4/lib/rack/request.rb#246
  def server_name; end

  # source://rack/2.2.4/lib/rack/request.rb#250
  def server_port; end

  # source://rack/2.2.4/lib/rack/request.rb#168
  def session; end

  # source://rack/2.2.4/lib/rack/request.rb#174
  def session_options; end

  # source://rack/2.2.4/lib/rack/request.rb#350
  def ssl?; end

  # source://rack/2.2.4/lib/rack/request.rb#205
  def trace?; end

  # source://rack/2.2.4/lib/rack/request.rb#527
  def trusted_proxy?(ip); end

  # source://rack/2.2.4/lib/rack/request.rb#208
  def unlink?; end

  # source://rack/2.2.4/lib/rack/request.rb#477
  def update_param(k, v); end

  # source://rack/2.2.4/lib/rack/request.rb#507
  def url; end

  # source://rack/2.2.4/lib/rack/request.rb#161
  def user_agent; end

  # source://rack/2.2.4/lib/rack/request.rb#552
  def values_at(*keys); end

  # source://rack/2.2.4/lib/rack/request.rb#276
  def xhr?; end

  private

  # source://rack/2.2.4/lib/rack/request.rb#641
  def allowed_scheme(header); end

  # source://rack/2.2.4/lib/rack/request.rb#558
  def default_session; end

  # source://rack/2.2.4/lib/rack/request.rb#645
  def extract_proto_header(header); end

  # source://rack/2.2.4/lib/rack/request.rb#636
  def forwarded_scheme; end

  # source://rack/2.2.4/lib/rack/request.rb#574
  def parse_http_accept_header(header); end

  # source://rack/2.2.4/lib/rack/request.rb#593
  def parse_multipart; end

  # source://rack/2.2.4/lib/rack/request.rb#589
  def parse_query(qs, d = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/request.rb#585
  def query_parser; end

  # source://rack/2.2.4/lib/rack/request.rb#632
  def reject_trusted_ip_addresses(ip_addresses); end

  # source://rack/2.2.4/lib/rack/request.rb#619
  def split_authority(authority); end

  # source://rack/2.2.4/lib/rack/request.rb#597
  def split_header(value); end

  # source://rack/2.2.4/lib/rack/request.rb#561
  def wrap_ipv6(host); end
end

# source://rack/2.2.4/lib/rack/request.rb#130
Rack::Request::Helpers::DEFAULT_PORTS = T.let(T.unsafe(nil), Hash)

# source://rack/2.2.4/lib/rack/request.rb#115
Rack::Request::Helpers::FORM_DATA_MEDIA_TYPES = T.let(T.unsafe(nil), Array)

# source://rack/2.2.4/lib/rack/request.rb#133
Rack::Request::Helpers::HTTP_X_FORWARDED_FOR = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/request.rb#136
Rack::Request::Helpers::HTTP_X_FORWARDED_HOST = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/request.rb#145
Rack::Request::Helpers::HTTP_X_FORWARDED_PORT = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/request.rb#142
Rack::Request::Helpers::HTTP_X_FORWARDED_PROTO = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/request.rb#139
Rack::Request::Helpers::HTTP_X_FORWARDED_SCHEME = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/request.rb#148
Rack::Request::Helpers::HTTP_X_FORWARDED_SSL = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/request.rb#123
Rack::Request::Helpers::PARSEABLE_DATA_MEDIA_TYPES = T.let(T.unsafe(nil), Array)

# source://rack/2.2.4/lib/rack/request.rb#21
Rack::Request::SCHEME_WHITELIST = T.let(T.unsafe(nil), Array)

class Rack::Response
  include ::Rack::Response::Helpers

  # source://rack/2.2.4/lib/rack/response.rb#42
  def initialize(body = T.unsafe(nil), status = T.unsafe(nil), headers = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/response.rb#127
  def [](key); end

  # source://rack/2.2.4/lib/rack/response.rb#128
  def []=(key, v); end

  # source://rack/2.2.4/lib/rack/response.rb#26
  def body; end

  # source://rack/2.2.4/lib/rack/response.rb#26
  def body=(_arg0); end

  # source://rack/2.2.4/lib/rack/response.rb#73
  def chunked?; end

  # source://rack/2.2.4/lib/rack/response.rb#118
  def close; end

  # source://rack/2.2.4/lib/rack/response.rb#129
  def delete_header(key); end

  # source://rack/2.2.4/lib/rack/response.rb#98
  def each(&callback); end

  # source://rack/2.2.4/lib/rack/response.rb#122
  def empty?; end

  # source://rack/2.2.4/lib/rack/response.rb#80
  def finish(&block); end

  # source://rack/2.2.4/lib/rack/response.rb#127
  def get_header(key); end

  # source://rack/2.2.4/lib/rack/response.rb#126
  def has_header?(key); end

  # source://rack/2.2.4/lib/rack/response.rb#27
  def header; end

  # source://rack/2.2.4/lib/rack/response.rb#27
  def headers; end

  # source://rack/2.2.4/lib/rack/response.rb#26
  def length; end

  # source://rack/2.2.4/lib/rack/response.rb#26
  def length=(_arg0); end

  # source://rack/2.2.4/lib/rack/response.rb#68
  def redirect(target, status = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/response.rb#128
  def set_header(key, v); end

  # source://rack/2.2.4/lib/rack/response.rb#26
  def status; end

  # source://rack/2.2.4/lib/rack/response.rb#26
  def status=(_arg0); end

  # source://rack/2.2.4/lib/rack/response.rb#80
  def to_a(&block); end

  # source://rack/2.2.4/lib/rack/response.rb#112
  def write(chunk); end

  class << self
    # source://rack/2.2.4/lib/rack/response.rb#19
    def [](status, headers, body); end
  end
end

# source://rack/2.2.4/lib/rack/response.rb#23
Rack::Response::CHUNKED = T.let(T.unsafe(nil), String)

module Rack::Response::Helpers
  # source://rack/2.2.4/lib/rack/response.rb#145
  def accepted?; end

  # source://rack/2.2.4/lib/rack/response.rb#171
  def add_header(key, v); end

  # source://rack/2.2.4/lib/rack/response.rb#148
  def bad_request?; end

  # source://rack/2.2.4/lib/rack/response.rb#246
  def cache!(duration = T.unsafe(nil), directive: T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/response.rb#229
  def cache_control; end

  # source://rack/2.2.4/lib/rack/response.rb#233
  def cache_control=(v); end

  # source://rack/2.2.4/lib/rack/response.rb#140
  def client_error?; end

  # source://rack/2.2.4/lib/rack/response.rb#199
  def content_length; end

  # source://rack/2.2.4/lib/rack/response.rb#182
  def content_type; end

  # source://rack/2.2.4/lib/rack/response.rb#187
  def content_type=(content_type); end

  # source://rack/2.2.4/lib/rack/response.rb#144
  def created?; end

  # source://rack/2.2.4/lib/rack/response.rb#217
  def delete_cookie(key, value = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/response.rb#238
  def do_not_cache!; end

  # source://rack/2.2.4/lib/rack/response.rb#253
  def etag; end

  # source://rack/2.2.4/lib/rack/response.rb#257
  def etag=(v); end

  # source://rack/2.2.4/lib/rack/response.rb#150
  def forbidden?; end

  # source://rack/2.2.4/lib/rack/response.rb#158
  def include?(header); end

  # source://rack/2.2.4/lib/rack/response.rb#137
  def informational?; end

  # source://rack/2.2.4/lib/rack/response.rb#135
  def invalid?; end

  # source://rack/2.2.4/lib/rack/response.rb#204
  def location; end

  # source://rack/2.2.4/lib/rack/response.rb#208
  def location=(location); end

  # source://rack/2.2.4/lib/rack/response.rb#191
  def media_type; end

  # source://rack/2.2.4/lib/rack/response.rb#195
  def media_type_params; end

  # source://rack/2.2.4/lib/rack/response.rb#152
  def method_not_allowed?; end

  # source://rack/2.2.4/lib/rack/response.rb#147
  def moved_permanently?; end

  # source://rack/2.2.4/lib/rack/response.rb#146
  def no_content?; end

  # source://rack/2.2.4/lib/rack/response.rb#151
  def not_found?; end

  # source://rack/2.2.4/lib/rack/response.rb#143
  def ok?; end

  # source://rack/2.2.4/lib/rack/response.rb#153
  def precondition_failed?; end

  # source://rack/2.2.4/lib/rack/response.rb#156
  def redirect?; end

  # source://rack/2.2.4/lib/rack/response.rb#139
  def redirection?; end

  # source://rack/2.2.4/lib/rack/response.rb#141
  def server_error?; end

  # source://rack/2.2.4/lib/rack/response.rb#212
  def set_cookie(key, value); end

  # source://rack/2.2.4/lib/rack/response.rb#221
  def set_cookie_header; end

  # source://rack/2.2.4/lib/rack/response.rb#225
  def set_cookie_header=(v); end

  # source://rack/2.2.4/lib/rack/response.rb#138
  def successful?; end

  # source://rack/2.2.4/lib/rack/response.rb#149
  def unauthorized?; end

  # source://rack/2.2.4/lib/rack/response.rb#154
  def unprocessable?; end

  protected

  # source://rack/2.2.4/lib/rack/response.rb#287
  def append(chunk); end

  # source://rack/2.2.4/lib/rack/response.rb#263
  def buffered_body!; end
end

class Rack::Response::Raw
  include ::Rack::Response::Helpers

  # source://rack/2.2.4/lib/rack/response.rb#307
  def initialize(status, headers); end

  # source://rack/2.2.4/lib/rack/response.rb#315
  def delete_header(key); end

  # source://rack/2.2.4/lib/rack/response.rb#313
  def get_header(key); end

  # source://rack/2.2.4/lib/rack/response.rb#312
  def has_header?(key); end

  # source://rack/2.2.4/lib/rack/response.rb#304
  def headers; end

  # source://rack/2.2.4/lib/rack/response.rb#314
  def set_header(key, v); end

  # source://rack/2.2.4/lib/rack/response.rb#305
  def status; end

  # source://rack/2.2.4/lib/rack/response.rb#305
  def status=(_arg0); end
end

# source://rack/2.2.4/lib/rack/response.rb#24
Rack::Response::STATUS_WITH_NO_ENTITY_BODY = T.let(T.unsafe(nil), Hash)

class Rack::RewindableInput
  # source://rack/2.2.4/lib/rack/rewindable_input.rb#17
  def initialize(io); end

  # source://rack/2.2.4/lib/rack/rewindable_input.rb#48
  def close; end

  # source://rack/2.2.4/lib/rack/rewindable_input.rb#33
  def each(&block); end

  # source://rack/2.2.4/lib/rack/rewindable_input.rb#23
  def gets; end

  # source://rack/2.2.4/lib/rack/rewindable_input.rb#28
  def read(*args); end

  # source://rack/2.2.4/lib/rack/rewindable_input.rb#38
  def rewind; end

  private

  # source://rack/2.2.4/lib/rack/rewindable_input.rb#90
  def filesystem_has_posix_semantics?; end

  # source://rack/2.2.4/lib/rack/rewindable_input.rb#61
  def make_rewindable; end
end

class Rack::Runtime
  # source://rack/2.2.4/lib/rack/runtime.rb#14
  def initialize(app, name = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/runtime.rb#20
  def call(env); end
end

# source://rack/2.2.4/lib/rack/runtime.rb#11
Rack::Runtime::FORMAT_STRING = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/runtime.rb#12
Rack::Runtime::HEADER_NAME = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#24
Rack::SCRIPT_NAME = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#27
Rack::SERVER_NAME = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#28
Rack::SERVER_PORT = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#26
Rack::SERVER_PROTOCOL = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#33
Rack::SET_COOKIE = T.let(T.unsafe(nil), String)

class Rack::Sendfile
  # source://rack/2.2.4/lib/rack/sendfile.rb#101
  def initialize(app, variation = T.unsafe(nil), mappings = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/sendfile.rb#109
  def call(env); end

  private

  # source://rack/2.2.4/lib/rack/sendfile.rb#149
  def map_accel_path(env, path); end

  # source://rack/2.2.4/lib/rack/sendfile.rb#143
  def variation(env); end
end

class Rack::Server
  # source://rack/2.2.4/lib/rack/server.rb#215
  def initialize(options = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/server.rb#248
  def app; end

  # source://rack/2.2.4/lib/rack/server.rb#234
  def default_options; end

  # source://rack/2.2.4/lib/rack/server.rb#282
  def middleware; end

  # source://rack/2.2.4/lib/rack/server.rb#229
  def options; end

  # source://rack/2.2.4/lib/rack/server.rb#171
  def options=(_arg0); end

  # source://rack/2.2.4/lib/rack/server.rb#330
  def server; end

  # source://rack/2.2.4/lib/rack/server.rb#286
  def start(&block); end

  private

  # source://rack/2.2.4/lib/rack/server.rb#411
  def build_app(app); end

  # source://rack/2.2.4/lib/rack/server.rb#344
  def build_app_and_options_from_config; end

  # source://rack/2.2.4/lib/rack/server.rb#392
  def build_app_from_string; end

  # source://rack/2.2.4/lib/rack/server.rb#440
  def check_pid!; end

  # source://rack/2.2.4/lib/rack/server.rb#425
  def daemonize_app; end

  # source://rack/2.2.4/lib/rack/server.rb#354
  def handle_profiling(heapfile, profile_mode, filename); end

  # source://rack/2.2.4/lib/rack/server.rb#382
  def make_profile_name(filename); end

  # source://rack/2.2.4/lib/rack/server.rb#407
  def opt_parser; end

  # source://rack/2.2.4/lib/rack/server.rb#396
  def parse_options(args); end

  # source://rack/2.2.4/lib/rack/server.rb#450
  def pidfile_process_status; end

  # source://rack/2.2.4/lib/rack/server.rb#421
  def wrapped_app; end

  # source://rack/2.2.4/lib/rack/server.rb#432
  def write_pid; end

  class << self
    # source://rack/2.2.4/lib/rack/server.rb#259
    def default_middleware_by_environment; end

    # source://rack/2.2.4/lib/rack/server.rb#253
    def logging_middleware; end

    # source://rack/2.2.4/lib/rack/server.rb#277
    def middleware; end

    # source://rack/2.2.4/lib/rack/server.rb#167
    def start(options = T.unsafe(nil)); end
  end
end

class Rack::Server::Options
  # source://rack/2.2.4/lib/rack/server.rb#127
  def handler_opts(options); end

  # source://rack/2.2.4/lib/rack/server.rb#12
  def parse!(args); end
end

module Rack::Session; end
module Rack::Session::Abstract; end

class Rack::Session::Abstract::ID < ::Rack::Session::Abstract::Persisted
  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#517
  def delete_session(req, sid, options); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#502
  def find_session(req, sid); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#510
  def write_session(req, sid, session, options); end

  class << self
    # source://rack/2.2.4/lib/rack/session/abstract/id.rb#488
    def inherited(klass); end
  end
end

class Rack::Session::Abstract::Persisted
  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#250
  def initialize(app, options = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#259
  def call(env); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#373
  def commit_session(req, res); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#263
  def context(env, app = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#248
  def default_options; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#248
  def key; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#248
  def sid_secure; end

  private

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#342
  def commit_session?(req, session, options); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#408
  def cookie_value(data); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#328
  def current_session_id(req); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#448
  def delete_session(req, sid, options); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#320
  def extract_session_id(request); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#433
  def find_session(env, sid); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#359
  def force_options?(options); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#355
  def forced_session_update?(session, options); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#288
  def generate_sid(secure = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#278
  def initialize_sid; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#312
  def load_session(req); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#351
  def loaded_session?(session); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#274
  def make_request(env); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#301
  def prepare_session(req); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#363
  def security_matches?(request, options); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#424
  def session_class; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#334
  def session_exists?(req); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#415
  def set_cookie(request, res, cookie); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#441
  def write_session(req, sid, session, options); end
end

# source://rack/2.2.4/lib/rack/session/abstract/id.rb#234
Rack::Session::Abstract::Persisted::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

class Rack::Session::Abstract::PersistedSecure < ::Rack::Session::Abstract::Persisted
  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#471
  def extract_session_id(*_arg0); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#465
  def generate_sid(*_arg0); end

  private

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#482
  def cookie_value(data); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#478
  def session_class; end
end

class Rack::Session::Abstract::PersistedSecure::SecureSessionHash < ::Rack::Session::Abstract::SessionHash
  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#455
  def [](key); end
end

class Rack::Session::Abstract::SessionHash
  include ::Enumerable

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#62
  def initialize(store, req); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#82
  def [](key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#108
  def []=(key, value); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#114
  def clear; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#140
  def delete(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#119
  def destroy; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#87
  def dig(key, *keys); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#77
  def each(&block); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#163
  def empty?; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#153
  def exists?; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#92
  def fetch(key, default = T.unsafe(nil), &block); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#101
  def has_key?(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#68
  def id; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#46
  def id=(_arg0); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#101
  def include?(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#145
  def inspect; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#101
  def key?(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#168
  def keys; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#159
  def loaded?; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#129
  def merge!(hash); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#73
  def options; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#135
  def replace(hash); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#108
  def store(key, value); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#124
  def to_hash; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#129
  def update(hash); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#173
  def values; end

  private

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#188
  def load!; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#180
  def load_for_read!; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#184
  def load_for_write!; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#194
  def stringify_keys(other); end

  class << self
    # source://rack/2.2.4/lib/rack/session/abstract/id.rb#50
    def find(req); end

    # source://rack/2.2.4/lib/rack/session/abstract/id.rb#54
    def set(req, session); end

    # source://rack/2.2.4/lib/rack/session/abstract/id.rb#58
    def set_options(req, options); end
  end
end

# source://rack/2.2.4/lib/rack/session/abstract/id.rb#48
Rack::Session::Abstract::SessionHash::Unspecified = T.let(T.unsafe(nil), Object)

class Rack::Session::Cookie < ::Rack::Session::Abstract::PersistedSecure
  # source://rack/2.2.4/lib/rack/session/cookie.rb#107
  def initialize(app, options = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/session/cookie.rb#105
  def coder; end

  private

  # source://rack/2.2.4/lib/rack/session/cookie.rb#180
  def delete_session(req, session_id, options); end

  # source://rack/2.2.4/lib/rack/session/cookie.rb#185
  def digest_match?(data, digest); end

  # source://rack/2.2.4/lib/rack/session/cookie.rb#132
  def extract_session_id(request); end

  # source://rack/2.2.4/lib/rack/session/cookie.rb#126
  def find_session(req, sid); end

  # source://rack/2.2.4/lib/rack/session/cookie.rb#192
  def generate_hmac(data, secret); end

  # source://rack/2.2.4/lib/rack/session/cookie.rb#149
  def persistent_session_id!(data, sid = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/session/cookie.rb#196
  def secure?(options); end

  # source://rack/2.2.4/lib/rack/session/cookie.rb#136
  def unpacked_cookie_data(request); end

  # source://rack/2.2.4/lib/rack/session/cookie.rb#164
  def write_session(req, session_id, session, options); end
end

class Rack::Session::Cookie::Base64
  # source://rack/2.2.4/lib/rack/session/cookie.rb#56
  def decode(str); end

  # source://rack/2.2.4/lib/rack/session/cookie.rb#52
  def encode(str); end
end

class Rack::Session::Cookie::Base64::JSON < ::Rack::Session::Cookie::Base64
  # source://rack/2.2.4/lib/rack/session/cookie.rb#79
  def decode(str); end

  # source://rack/2.2.4/lib/rack/session/cookie.rb#75
  def encode(obj); end
end

class Rack::Session::Cookie::Base64::Marshal < ::Rack::Session::Cookie::Base64
  # source://rack/2.2.4/lib/rack/session/cookie.rb#66
  def decode(str); end

  # source://rack/2.2.4/lib/rack/session/cookie.rb#62
  def encode(str); end
end

class Rack::Session::Cookie::Base64::ZipJSON < ::Rack::Session::Cookie::Base64
  # source://rack/2.2.4/lib/rack/session/cookie.rb#90
  def decode(str); end

  # source://rack/2.2.4/lib/rack/session/cookie.rb#86
  def encode(obj); end
end

class Rack::Session::Cookie::Identity
  # source://rack/2.2.4/lib/rack/session/cookie.rb#102
  def decode(str); end

  # source://rack/2.2.4/lib/rack/session/cookie.rb#101
  def encode(str); end
end

class Rack::Session::Cookie::SessionId
  # source://rack/2.2.4/lib/rack/session/cookie.rb#158
  def initialize(session_id, cookie_value); end

  # source://rack/2.2.4/lib/rack/session/cookie.rb#156
  def cookie_value; end
end

class Rack::Session::Pool < ::Rack::Session::Abstract::PersistedSecure
  # source://rack/2.2.4/lib/rack/session/pool.rb#33
  def initialize(app, options = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/session/pool.rb#63
  def delete_session(req, session_id, options); end

  # source://rack/2.2.4/lib/rack/session/pool.rb#46
  def find_session(req, sid); end

  # source://rack/2.2.4/lib/rack/session/pool.rb#39
  def generate_sid; end

  # source://rack/2.2.4/lib/rack/session/pool.rb#30
  def mutex; end

  # source://rack/2.2.4/lib/rack/session/pool.rb#30
  def pool; end

  # source://rack/2.2.4/lib/rack/session/pool.rb#71
  def with_lock(req); end

  # source://rack/2.2.4/lib/rack/session/pool.rb#56
  def write_session(req, session_id, new_session, options); end

  private

  # source://rack/2.2.4/lib/rack/session/pool.rb#80
  def get_session_with_fallback(sid); end
end

# source://rack/2.2.4/lib/rack/session/pool.rb#31
Rack::Session::Pool::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

class Rack::Session::SessionId
  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#20
  def initialize(public_id); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#18
  def cookie_value; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#31
  def empty?; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#32
  def inspect; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#24
  def private_id; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#18
  def public_id; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#18
  def to_s; end

  private

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#36
  def hash_sid(sid); end
end

# source://rack/2.2.4/lib/rack/session/abstract/id.rb#16
Rack::Session::SessionId::ID_VERSION = T.let(T.unsafe(nil), Integer)

class Rack::ShowExceptions
  # source://rack/2.2.4/lib/rack/show_exceptions.rb#18
  def initialize(app); end

  # source://rack/2.2.4/lib/rack/show_exceptions.rb#22
  def call(env); end

  # source://rack/2.2.4/lib/rack/show_exceptions.rb#57
  def dump_exception(exception); end

  # source://rack/2.2.4/lib/rack/show_exceptions.rb#103
  def h(obj); end

  # source://rack/2.2.4/lib/rack/show_exceptions.rb#48
  def prefers_plaintext?(env); end

  # source://rack/2.2.4/lib/rack/show_exceptions.rb#63
  def pretty(env, exception); end

  # source://rack/2.2.4/lib/rack/show_exceptions.rb#99
  def template; end

  private

  # source://rack/2.2.4/lib/rack/show_exceptions.rb#52
  def accepts_html?(env); end
end

# source://rack/2.2.4/lib/rack/show_exceptions.rb#16
Rack::ShowExceptions::CONTEXT = T.let(T.unsafe(nil), Integer)

# source://rack/2.2.4/lib/rack/show_exceptions.rb#118
Rack::ShowExceptions::TEMPLATE = T.let(T.unsafe(nil), ERB)

class Rack::ShowStatus
  # source://rack/2.2.4/lib/rack/show_status.rb#14
  def initialize(app); end

  # source://rack/2.2.4/lib/rack/show_status.rb#19
  def call(env); end

  # source://rack/2.2.4/lib/rack/show_status.rb#44
  def h(obj); end
end

# source://rack/2.2.4/lib/rack/show_status.rb#59
Rack::ShowStatus::TEMPLATE = T.let(T.unsafe(nil), String)

class Rack::Static
  # source://rack/2.2.4/lib/rack/static.rb#91
  def initialize(app, options = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/static.rb#107
  def add_index_root?(path); end

  # source://rack/2.2.4/lib/rack/static.rb#166
  def applicable_rules(path); end

  # source://rack/2.2.4/lib/rack/static.rb#123
  def call(env); end

  # source://rack/2.2.4/lib/rack/static.rb#119
  def can_serve(path); end

  # source://rack/2.2.4/lib/rack/static.rb#111
  def overwrite_file_path(path); end

  # source://rack/2.2.4/lib/rack/static.rb#115
  def route_file(path); end
end

# source://rack/2.2.4/lib/rack.rb#48
Rack::TRACE = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#34
Rack::TRANSFER_ENCODING = T.let(T.unsafe(nil), String)

class Rack::TempfileReaper
  # source://rack/2.2.4/lib/rack/tempfile_reaper.rb#9
  def initialize(app); end

  # source://rack/2.2.4/lib/rack/tempfile_reaper.rb#13
  def call(env); end
end

module Rack::Test
  class << self
    # source://rack-test/2.0.2/lib/rack/test.rb#407
    def encoding_aware_strings?; end
  end
end

class Rack::Test::Cookie
  include ::Rack::Utils

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#23
  def initialize(raw, uri = T.unsafe(nil), default_host = T.unsafe(nil)); end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#107
  def <=>(other); end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#58
  def domain; end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#53
  def empty?; end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#85
  def expired?; end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#80
  def expires; end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#70
  def http_only?; end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#102
  def matches?(uri); end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#14
  def name; end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#75
  def path; end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#21
  def raw; end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#48
  def replaces?(other); end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#64
  def secure?; end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#112
  def to_h; end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#112
  def to_hash; end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#90
  def valid?(uri); end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#17
  def value; end

  private

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#124
  def default_uri; end
end

class Rack::Test::CookieJar
  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#136
  def initialize(cookies = T.unsafe(nil), default_host = T.unsafe(nil)); end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#192
  def <<(new_cookie); end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#143
  def [](name); end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#153
  def []=(name, value); end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#167
  def delete(name); end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#203
  def for(uri); end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#159
  def get_cookie(name); end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#177
  def merge(raw_cookies, uri = T.unsafe(nil)); end

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#220
  def to_hash; end

  private

  # source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#239
  def each_cookie_for(uri); end
end

# source://rack-test/2.0.2/lib/rack/test/cookie_jar.rb#134
Rack::Test::CookieJar::DELIMITER = T.let(T.unsafe(nil), String)

# source://rack-test/2.0.2/lib/rack/test.rb#33
Rack::Test::DEFAULT_HOST = T.let(T.unsafe(nil), String)

# source://rack-test/2.0.2/lib/rack/test.rb#42
Rack::Test::END_BOUNDARY = T.let(T.unsafe(nil), String)

class Rack::Test::Error < ::StandardError; end

# source://rack-test/2.0.2/lib/rack/test.rb#36
Rack::Test::MULTIPART_BOUNDARY = T.let(T.unsafe(nil), String)

module Rack::Test::Methods
  extend ::Forwardable

  # source://rack-test/2.0.2/lib/rack/test/methods.rb#91
  def _rack_test_current_session=(_arg0); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def authorize(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def basic_authorize(*args, **_arg1, &block); end

  # source://rack-test/2.0.2/lib/rack/test/methods.rb#40
  def build_rack_test_session(_name); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def clear_cookies(*args, **_arg1, &block); end

  # source://rack-test/2.0.2/lib/rack/test/methods.rb#51
  def current_session; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def custom_request(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def delete(*args, **_arg1, &block); end

  # source://rack-test/2.0.2/lib/rack/test/methods.rb#64
  def digest_authorize(username, password); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def env(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def follow_redirect!(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def get(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def head(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def header(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def last_request(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def last_response(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def options(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def patch(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def post(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def put(*args, **_arg1, &block); end

  # source://rack-test/2.0.2/lib/rack/test/methods.rb#29
  def rack_mock_session(name = T.unsafe(nil)); end

  # source://rack-test/2.0.2/lib/rack/test/methods.rb#29
  def rack_test_session(name = T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def request(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_cookie(*args, **_arg1, &block); end

  # source://rack-test/2.0.2/lib/rack/test/methods.rb#57
  def with_session(name); end

  private

  # source://rack-test/2.0.2/lib/rack/test/methods.rb#91
  def _rack_test_current_session; end
end

# source://rack-test/2.0.2/lib/rack/test.rb#39
Rack::Test::START_BOUNDARY = T.let(T.unsafe(nil), String)

class Rack::Test::Session
  include ::Rack::Utils
  include ::Rack::Test::Utils
  extend ::Forwardable

  # source://rack-test/2.0.2/lib/rack/test.rb#99
  def initialize(app, default_host = T.unsafe(nil)); end

  # source://rack-test/2.0.2/lib/rack/test.rb#217
  def _digest_authorize(username, password); end

  # source://rack-test/2.0.2/lib/rack/test.rb#120
  def after_request(&block); end

  # source://rack-test/2.0.2/lib/rack/test.rb#200
  def authorize(username, password); end

  # source://rack-test/2.0.2/lib/rack/test.rb#200
  def basic_authorize(username, password); end

  # source://rack-test/2.0.2/lib/rack/test.rb#125
  def clear_cookies; end

  # source://rack-test/2.0.2/lib/rack/test.rb#67
  def cookie_jar; end

  # source://rack-test/2.0.2/lib/rack/test.rb#67
  def cookie_jar=(_arg0); end

  # source://rack-test/2.0.2/lib/rack/test.rb#162
  def custom_request(verb, uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test/2.0.2/lib/rack/test.rb#70
  def default_host; end

  # source://rack-test/2.0.2/lib/rack/test.rb#113
  def delete(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test/2.0.2/lib/rack/test.rb#213
  def digest_authorize(username, password); end

  # source://rack-test/2.0.2/lib/rack/test.rb#187
  def env(name, value); end

  # source://rack-test/2.0.2/lib/rack/test.rb#226
  def follow_redirect!; end

  # source://rack-test/2.0.2/lib/rack/test.rb#113
  def get(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test/2.0.2/lib/rack/test.rb#113
  def head(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test/2.0.2/lib/rack/test.rb#175
  def header(name, value); end

  # source://rack-test/2.0.2/lib/rack/test.rb#136
  def last_request; end

  # source://rack-test/2.0.2/lib/rack/test.rb#143
  def last_response; end

  # source://rack-test/2.0.2/lib/rack/test.rb#113
  def options(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test/2.0.2/lib/rack/test.rb#113
  def patch(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test/2.0.2/lib/rack/test.rb#113
  def post(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test/2.0.2/lib/rack/test.rb#113
  def put(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test/2.0.2/lib/rack/test.rb#152
  def request(uri, env = T.unsafe(nil), &block); end

  # source://rack-test/2.0.2/lib/rack/test.rb#130
  def set_cookie(cookie, uri = T.unsafe(nil)); end

  private

  # source://rack-test/2.0.2/lib/rack/test.rb#338
  def append_query_params(query_array, query_params); end

  # source://rack-test/2.0.2/lib/rack/test.rb#264
  def close_body(body); end

  # source://rack-test/2.0.2/lib/rack/test.rb#401
  def digest_auth_configured?; end

  # source://rack-test/2.0.2/lib/rack/test.rb#378
  def digest_auth_header; end

  # source://rack-test/2.0.2/lib/rack/test.rb#291
  def env_for(uri, env); end

  # source://rack-test/2.0.2/lib/rack/test.rb#344
  def multipart_content_type(env); end

  # source://rack-test/2.0.2/lib/rack/test.rb#269
  def parse_uri(path, env); end

  # source://rack-test/2.0.2/lib/rack/test.rb#355
  def process_request(uri, env); end

  # source://rack-test/2.0.2/lib/rack/test.rb#395
  def retry_with_digest_auth?(env); end

  class << self
    # source://rack-test/2.0.2/lib/rack/test.rb#57
    def new(app, default_host = T.unsafe(nil)); end
  end
end

class Rack::Test::UploadedFile
  # source://rack-test/2.0.2/lib/rack/test/uploaded_file.rb#31
  def initialize(content, content_type = T.unsafe(nil), binary = T.unsafe(nil), original_filename: T.unsafe(nil)); end

  # source://rack-test/2.0.2/lib/rack/test/uploaded_file.rb#58
  def append_to(buffer); end

  # source://rack-test/2.0.2/lib/rack/test/uploaded_file.rb#22
  def content_type; end

  # source://rack-test/2.0.2/lib/rack/test/uploaded_file.rb#22
  def content_type=(_arg0); end

  # source://rack-test/2.0.2/lib/rack/test/uploaded_file.rb#44
  def local_path; end

  # source://rack-test/2.0.2/lib/rack/test/uploaded_file.rb#50
  def method_missing(method_name, *args, &block); end

  # source://rack-test/2.0.2/lib/rack/test/uploaded_file.rb#16
  def original_filename; end

  # source://rack-test/2.0.2/lib/rack/test/uploaded_file.rb#44
  def path; end

  # source://rack-test/2.0.2/lib/rack/test/uploaded_file.rb#19
  def tempfile; end

  private

  # source://rack-test/2.0.2/lib/rack/test/uploaded_file.rb#94
  def initialize_from_file_path(path); end

  # source://rack-test/2.0.2/lib/rack/test/uploaded_file.rb#88
  def initialize_from_stringio(stringio, original_filename); end

  # source://rack-test/2.0.2/lib/rack/test/uploaded_file.rb#69
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end

  class << self
    # source://rack-test/2.0.2/lib/rack/test/uploaded_file.rb#80
    def actually_finalize(file); end

    # source://rack-test/2.0.2/lib/rack/test/uploaded_file.rb#74
    def finalize(file); end
  end
end

module Rack::Test::Utils
  include ::Rack::Utils
  extend ::Rack::Utils
  extend ::Rack::Test::Utils

  # source://rack-test/2.0.2/lib/rack/test/utils.rb#34
  def build_multipart(params, _first = T.unsafe(nil), multipart = T.unsafe(nil)); end

  # source://rack-test/2.0.2/lib/rack/test/utils.rb#11
  def build_nested_query(value, prefix = T.unsafe(nil)); end

  private

  # source://rack-test/2.0.2/lib/rack/test/utils.rb#100
  def _build_parts(buffer, parameters); end

  # source://rack-test/2.0.2/lib/rack/test/utils.rb#133
  def build_file_part(buffer, parameter_name, uploaded_file); end

  # source://rack-test/2.0.2/lib/rack/test/utils.rb#94
  def build_parts(buffer, parameters); end

  # source://rack-test/2.0.2/lib/rack/test/utils.rb#121
  def build_primitive_part(buffer, parameter_name, value); end

  # source://rack-test/2.0.2/lib/rack/test/utils.rb#62
  def normalize_multipart_params(params, first = T.unsafe(nil)); end
end

# source://rack-test/2.0.2/lib/rack/test/version.rb#3
Rack::Test::VERSION = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack.rb#47
Rack::UNLINK = T.let(T.unsafe(nil), String)

class Rack::URLMap
  # source://rack/2.2.4/lib/rack/urlmap.rb#19
  def initialize(map = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/urlmap.rb#46
  def call(env); end

  # source://rack/2.2.4/lib/rack/urlmap.rb#23
  def remap(map); end

  private

  # source://rack/2.2.4/lib/rack/urlmap.rb#85
  def casecmp?(v1, v2); end
end

module Rack::Utils
  private

  # source://rack/2.2.4/lib/rack/utils.rb#226
  def add_cookie_to_header(header, key, value); end

  # source://rack/2.2.4/lib/rack/utils.rb#309
  def add_remove_cookie_to_header(header, key, value = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/utils.rb#148
  def best_q_match(q_value_header, available_mimes); end

  # source://rack/2.2.4/lib/rack/utils.rb#115
  def build_nested_query(value, prefix = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/utils.rb#105
  def build_query(params); end

  # source://rack/2.2.4/lib/rack/utils.rb#341
  def byte_ranges(env, size); end

  # source://rack/2.2.4/lib/rack/utils.rb#594
  def clean_path_info(path_info); end

  # source://rack/2.2.4/lib/rack/utils.rb#86
  def clock_time; end

  # source://rack/2.2.4/lib/rack/utils.rb#302
  def delete_cookie_header!(header, key, value = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/utils.rb#38
  def escape(s); end

  # source://rack/2.2.4/lib/rack/utils.rb#173
  def escape_html(string); end

  # source://rack/2.2.4/lib/rack/utils.rb#44
  def escape_path(s); end

  # source://rack/2.2.4/lib/rack/utils.rb#346
  def get_byte_ranges(http_range, size); end

  # source://rack/2.2.4/lib/rack/utils.rb#272
  def make_delete_cookie_header(header, key, value); end

  # source://rack/2.2.4/lib/rack/utils.rb#209
  def parse_cookies(env); end

  # source://rack/2.2.4/lib/rack/utils.rb#213
  def parse_cookies_header(header); end

  # source://rack/2.2.4/lib/rack/utils.rb#101
  def parse_nested_query(qs, d = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/utils.rb#97
  def parse_query(qs, d = T.unsafe(nil), &unescaper); end

  # source://rack/2.2.4/lib/rack/utils.rb#133
  def q_values(q_value_header); end

  # source://rack/2.2.4/lib/rack/utils.rb#332
  def rfc2109(time); end

  # source://rack/2.2.4/lib/rack/utils.rb#319
  def rfc2822(time); end

  # source://rack/2.2.4/lib/rack/utils.rb#380
  def secure_compare(a, b); end

  # source://rack/2.2.4/lib/rack/utils.rb#177
  def select_best_encoding(available_encodings, accept_encoding); end

  # source://rack/2.2.4/lib/rack/utils.rb#267
  def set_cookie_header!(header, key, value); end

  # source://rack/2.2.4/lib/rack/utils.rb#584
  def status_code(status); end

  # source://rack/2.2.4/lib/rack/utils.rb#56
  def unescape(s, encoding = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/utils.rb#50
  def unescape_path(s); end

  # source://rack/2.2.4/lib/rack/utils.rb#611
  def valid_path?(path); end

  class << self
    # source://rack/2.2.4/lib/rack/utils.rb#226
    def add_cookie_to_header(header, key, value); end

    # source://rack/2.2.4/lib/rack/utils.rb#309
    def add_remove_cookie_to_header(header, key, value = T.unsafe(nil)); end

    # source://rack/2.2.4/lib/rack/utils.rb#148
    def best_q_match(q_value_header, available_mimes); end

    # source://rack/2.2.4/lib/rack/utils.rb#115
    def build_nested_query(value, prefix = T.unsafe(nil)); end

    # source://rack/2.2.4/lib/rack/utils.rb#105
    def build_query(params); end

    # source://rack/2.2.4/lib/rack/utils.rb#341
    def byte_ranges(env, size); end

    # source://rack/2.2.4/lib/rack/utils.rb#594
    def clean_path_info(path_info); end

    # source://rack/2.2.4/lib/rack/utils.rb#86
    def clock_time; end

    # source://rack/2.2.4/lib/rack/utils.rb#29
    def default_query_parser; end

    # source://rack/2.2.4/lib/rack/utils.rb#29
    def default_query_parser=(_arg0); end

    # source://rack/2.2.4/lib/rack/utils.rb#302
    def delete_cookie_header!(header, key, value = T.unsafe(nil)); end

    # source://rack/2.2.4/lib/rack/utils.rb#38
    def escape(s); end

    # source://rack/2.2.4/lib/rack/utils.rb#173
    def escape_html(string); end

    # source://rack/2.2.4/lib/rack/utils.rb#44
    def escape_path(s); end

    # source://rack/2.2.4/lib/rack/utils.rb#346
    def get_byte_ranges(http_range, size); end

    # source://rack/2.2.4/lib/rack/utils.rb#77
    def key_space_limit; end

    # source://rack/2.2.4/lib/rack/utils.rb#81
    def key_space_limit=(v); end

    # source://rack/2.2.4/lib/rack/utils.rb#272
    def make_delete_cookie_header(header, key, value); end

    # source://rack/2.2.4/lib/rack/utils.rb#61
    def multipart_part_limit; end

    # source://rack/2.2.4/lib/rack/utils.rb#61
    def multipart_part_limit=(_arg0); end

    # source://rack/2.2.4/lib/rack/utils.rb#69
    def param_depth_limit; end

    # source://rack/2.2.4/lib/rack/utils.rb#73
    def param_depth_limit=(v); end

    # source://rack/2.2.4/lib/rack/utils.rb#209
    def parse_cookies(env); end

    # source://rack/2.2.4/lib/rack/utils.rb#213
    def parse_cookies_header(header); end

    # source://rack/2.2.4/lib/rack/utils.rb#101
    def parse_nested_query(qs, d = T.unsafe(nil)); end

    # source://rack/2.2.4/lib/rack/utils.rb#97
    def parse_query(qs, d = T.unsafe(nil), &unescaper); end

    # source://rack/2.2.4/lib/rack/utils.rb#133
    def q_values(q_value_header); end

    # source://rack/2.2.4/lib/rack/utils.rb#332
    def rfc2109(time); end

    # source://rack/2.2.4/lib/rack/utils.rb#319
    def rfc2822(time); end

    # source://rack/2.2.4/lib/rack/utils.rb#380
    def secure_compare(a, b); end

    # source://rack/2.2.4/lib/rack/utils.rb#177
    def select_best_encoding(available_encodings, accept_encoding); end

    # source://rack/2.2.4/lib/rack/utils.rb#267
    def set_cookie_header!(header, key, value); end

    # source://rack/2.2.4/lib/rack/utils.rb#584
    def status_code(status); end

    # source://rack/2.2.4/lib/rack/utils.rb#56
    def unescape(s, encoding = T.unsafe(nil)); end

    # source://rack/2.2.4/lib/rack/utils.rb#50
    def unescape_path(s); end

    # source://rack/2.2.4/lib/rack/utils.rb#611
    def valid_path?(path); end
  end
end

# source://rack/2.2.4/lib/rack/utils.rb#22
Rack::Utils::COMMON_SEP = T.let(T.unsafe(nil), Hash)

class Rack::Utils::Context
  # source://rack/2.2.4/lib/rack/utils.rb#398
  def initialize(app_f, app_r); end

  # source://rack/2.2.4/lib/rack/utils.rb#396
  def app; end

  # source://rack/2.2.4/lib/rack/utils.rb#403
  def call(env); end

  # source://rack/2.2.4/lib/rack/utils.rb#411
  def context(env, app = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/utils.rb#396
  def for; end

  # source://rack/2.2.4/lib/rack/utils.rb#407
  def recontext(app); end
end

# source://rack/2.2.4/lib/rack/utils.rb#21
Rack::Utils::DEFAULT_SEP = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/utils.rb#161
Rack::Utils::ESCAPE_HTML = T.let(T.unsafe(nil), Hash)

# source://rack/2.2.4/lib/rack/utils.rb#170
Rack::Utils::ESCAPE_HTML_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/utils.rb#511
Rack::Utils::HTTP_STATUS_CODES = T.let(T.unsafe(nil), Hash)

class Rack::Utils::HeaderHash < ::Hash
  # source://rack/2.2.4/lib/rack/utils.rb#429
  def initialize(hash = T.unsafe(nil)); end

  # source://rack/2.2.4/lib/rack/utils.rb#459
  def [](k); end

  # source://rack/2.2.4/lib/rack/utils.rb#463
  def []=(k, v); end

  # source://rack/2.2.4/lib/rack/utils.rb#442
  def clear; end

  # source://rack/2.2.4/lib/rack/utils.rb#470
  def delete(k); end

  # source://rack/2.2.4/lib/rack/utils.rb#447
  def each; end

  # source://rack/2.2.4/lib/rack/utils.rb#476
  def has_key?(k); end

  # source://rack/2.2.4/lib/rack/utils.rb#476
  def include?(k); end

  # source://rack/2.2.4/lib/rack/utils.rb#476
  def key?(k); end

  # source://rack/2.2.4/lib/rack/utils.rb#476
  def member?(k); end

  # source://rack/2.2.4/lib/rack/utils.rb#489
  def merge(other); end

  # source://rack/2.2.4/lib/rack/utils.rb#484
  def merge!(other); end

  # source://rack/2.2.4/lib/rack/utils.rb#494
  def replace(other); end

  # source://rack/2.2.4/lib/rack/utils.rb#453
  def to_hash; end

  protected

  # source://rack/2.2.4/lib/rack/utils.rb#501
  def names; end

  private

  # source://rack/2.2.4/lib/rack/utils.rb#436
  def initialize_copy(other); end

  class << self
    # source://rack/2.2.4/lib/rack/utils.rb#421
    def [](headers); end
  end
end

# source://rack/2.2.4/lib/rack/utils.rb#20
Rack::Utils::InvalidParameterError = Rack::QueryParser::InvalidParameterError

# source://rack/2.2.4/lib/rack/utils.rb#23
Rack::Utils::KeySpaceConstrainedParams = Rack::QueryParser::Params

# source://rack/2.2.4/lib/rack/utils.rb#609
Rack::Utils::NULL_BYTE = T.let(T.unsafe(nil), String)

# source://rack/2.2.4/lib/rack/utils.rb#592
Rack::Utils::PATH_SEPS = T.let(T.unsafe(nil), Regexp)

# source://rack/2.2.4/lib/rack/utils.rb#19
Rack::Utils::ParameterTypeError = Rack::QueryParser::ParameterTypeError

# source://rack/2.2.4/lib/rack/utils.rb#25
Rack::Utils::RFC2822_DAY_NAME = T.let(T.unsafe(nil), Array)

# source://rack/2.2.4/lib/rack/utils.rb#26
Rack::Utils::RFC2822_MONTH_NAME = T.let(T.unsafe(nil), Array)

# source://rack/2.2.4/lib/rack/utils.rb#578
Rack::Utils::STATUS_WITH_NO_ENTITY_BODY = T.let(T.unsafe(nil), Hash)

# source://rack/2.2.4/lib/rack/utils.rb#580
Rack::Utils::SYMBOL_TO_STATUS_CODE = T.let(T.unsafe(nil), Hash)

# source://rack/2.2.4/lib/rack/version.rb#16
Rack::VERSION = T.let(T.unsafe(nil), Array)

module Rails::Initializable
  mixes_in_class_methods ::Rails::Initializable::ClassMethods

  # source://railties/7.0.4/lib/rails/initializable.rb#66
  def initializers; end

  # source://railties/7.0.4/lib/rails/initializable.rb#58
  def run_initializers(group = T.unsafe(nil), *args); end

  class << self
    # source://railties/7.0.4/lib/rails/initializable.rb#7
    def included(base); end
  end
end

module Rails::Initializable::ClassMethods
  # source://railties/7.0.4/lib/rails/initializable.rb#88
  def initializer(name, opts = T.unsafe(nil), &blk); end

  # source://railties/7.0.4/lib/rails/initializable.rb#71
  def initializers; end

  # source://railties/7.0.4/lib/rails/initializable.rb#75
  def initializers_chain; end

  # source://railties/7.0.4/lib/rails/initializable.rb#84
  def initializers_for(binding); end
end

class Rails::Initializable::Collection < ::Array
  include ::TSort

  # source://railties/7.0.4/lib/rails/initializable.rb#53
  def +(other); end

  # source://railties/7.0.4/lib/rails/initializable.rb#49
  def tsort_each_child(initializer, &block); end

  def tsort_each_node; end
end

class Rails::Initializable::Initializer
  # source://railties/7.0.4/lib/rails/initializable.rb#14
  def initialize(name, context, options, &block); end

  # source://railties/7.0.4/lib/rails/initializable.rb#23
  def after; end

  # source://railties/7.0.4/lib/rails/initializable.rb#19
  def before; end

  # source://railties/7.0.4/lib/rails/initializable.rb#27
  def belongs_to?(group); end

  # source://railties/7.0.4/lib/rails/initializable.rb#35
  def bind(context); end

  # source://railties/7.0.4/lib/rails/initializable.rb#12
  def block; end

  # source://railties/7.0.4/lib/rails/initializable.rb#40
  def context_class; end

  # source://railties/7.0.4/lib/rails/initializable.rb#12
  def name; end

  # source://railties/7.0.4/lib/rails/initializable.rb#31
  def run(*args); end
end

class Rails::Railtie
  include ::Rails::Initializable
  extend ::ActiveSupport::DescendantsTracker
  extend ::Rails::Initializable::ClassMethods

  # source://railties/7.0.4/lib/rails/railtie.rb#246
  def initialize; end

  # source://railties/7.0.4/lib/rails/railtie.rb#263
  def config; end

  # source://railties/7.0.4/lib/rails/railtie.rb#256
  def configure(&block); end

  # source://railties/7.0.4/lib/rails/railtie.rb#252
  def inspect; end

  # source://railties/7.0.4/lib/rails/railtie.rb#244
  def railtie_name(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/railtie.rb#267
  def railtie_namespace; end

  protected

  # source://railties/7.0.4/lib/rails/railtie.rb#272
  def run_console_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#276
  def run_generators_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#280
  def run_runner_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#289
  def run_server_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#284
  def run_tasks_blocks(app); end

  private

  # source://railties/7.0.4/lib/rails/railtie.rb#295
  def each_registered_block(type, &block); end

  class << self
    # source://railties/7.0.4/lib/rails/railtie.rb#194
    def <=>(other); end

    # source://railties/7.0.4/lib/rails/railtie.rb#172
    def abstract_railtie?; end

    # source://railties/7.0.4/lib/rails/railtie.rb#146
    def config(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.0.4/lib/rails/railtie.rb#190
    def configure(&block); end

    # source://railties/7.0.4/lib/rails/railtie.rb#156
    def console(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#164
    def generators(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#198
    def inherited(subclass); end

    # source://railties/7.0.4/lib/rails/railtie.rb#183
    def instance; end

    # source://railties/7.0.4/lib/rails/railtie.rb#176
    def railtie_name(name = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/railtie.rb#152
    def rake_tasks(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#160
    def runner(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#168
    def server(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#148
    def subclasses; end

    protected

    # source://railties/7.0.4/lib/rails/railtie.rb#206
    def increment_load_index; end

    # source://railties/7.0.4/lib/rails/railtie.rb#204
    def load_index; end

    private

    # source://railties/7.0.4/lib/rails/railtie.rb#212
    def generate_railtie_name(string); end

    # source://railties/7.0.4/lib/rails/railtie.rb#224
    def method_missing(name, *args, **_arg2, &block); end

    # source://railties/7.0.4/lib/rails/railtie.rb#236
    def register_block_for(type, &blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#216
    def respond_to_missing?(name, _); end
  end
end

# source://railties/7.0.4/lib/rails/railtie.rb#142
Rails::Railtie::ABSTRACT_RAILTIES = T.let(T.unsafe(nil), Array)

class Rails::Railtie::Configuration
  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#8
  def initialize; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#70
  def after_initialize(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#47
  def app_generators; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#39
  def app_middleware; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#54
  def before_configuration(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#60
  def before_eager_load(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#65
  def before_initialize(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#18
  def eager_load_namespaces; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#85
  def respond_to?(name, include_private = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#81
  def to_prepare(&blk); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#75
  def to_prepare_blocks; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#30
  def watchable_dirs; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#23
  def watchable_files; end

  private

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#90
  def method_missing(name, *args, &blk); end

  class << self
    # source://railties/7.0.4/lib/rails/railtie/configuration.rb#13
    def eager_load_namespaces; end
  end
end

class SqlPatches
  class << self
    # source://rack-mini-profiler//lib/patches/sql_patches.rb#61
    def all_patch_files; end

    # @return [Boolean]
    #
    # source://rack-mini-profiler//lib/patches/sql_patches.rb#4
    def correct_version?(required_version, klass); end

    # source://rack-mini-profiler//lib/patches/sql_patches.rb#22
    def elapsed_time(start_time); end

    # source://rack-mini-profiler//lib/patches/sql_patches.rb#49
    def other_patches; end

    # source://rack-mini-profiler//lib/patches/sql_patches.rb#67
    def patch(patch_files = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://rack-mini-profiler//lib/patches/sql_patches.rb#26
    def patch_rails?; end

    # source://rack-mini-profiler//lib/patches/sql_patches.rb#10
    def record_sql(statement, parameters = T.unsafe(nil), &block); end

    # @return [Boolean]
    #
    # source://rack-mini-profiler//lib/patches/sql_patches.rb#17
    def should_measure?; end

    # source://rack-mini-profiler//lib/patches/sql_patches.rb#30
    def sql_patches; end
  end
end
