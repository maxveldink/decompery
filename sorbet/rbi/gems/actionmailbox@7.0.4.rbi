# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `actionmailbox` gem.
# Please instead update this file by running `bin/tapioca gem actionmailbox`.

module AbstractController::AssetPaths
  extend ::ActiveSupport::Concern
end

class AbstractController::Base
  include ::ActiveSupport::Configurable
  extend ::ActiveSupport::Configurable::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#161
  def action_methods; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def action_name; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def action_name=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#175
  def available_action?(action_name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#156
  def controller_path; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def formats; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def formats=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#194
  def inspect; end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#182
  def performed?; end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#142
  def process(action, *args, **_arg2); end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def response_body; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def response_body=(_arg0); end

  def send_action(*_arg0); end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#246
  def _find_action_name(action_name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#228
  def _handle_action_missing(*args); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#282
  def _valid_action_name?(action_name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#204
  def action_method?(name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#273
  def method_for_action(action_name); end

  # source://actionpack/7.0.4/lib/abstract_controller/base.rb#214
  def process_action(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#50
    def abstract; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#55
    def abstract!; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#50
    def abstract?; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#89
    def action_methods; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#107
    def clear_action_methods!; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#121
    def controller_path; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#59
    def inherited(klass); end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#74
    def internal_methods; end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#126
    def method_added(name); end

    # source://actionpack/7.0.4/lib/abstract_controller/base.rb#190
    def supports_path?; end
  end
end

module AbstractController::Caching
  include ::AbstractController::Caching::ConfigMethods
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Autoload
  include GeneratedInstanceMethods
  include ::AbstractController::Caching::Fragments

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Caching::Fragments::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ConfigMethods

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#52
  def view_cache_dependencies; end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#58
  def cache(key, options = T.unsafe(nil), &block); end

  module GeneratedClassMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end

  module GeneratedInstanceMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end
end

module AbstractController::Caching::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#47
  def view_cache_dependency(&dependency); end
end

module AbstractController::Caching::ConfigMethods
  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#13
  def cache_store; end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#17
  def cache_store=(store); end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#22
  def cache_configured?; end
end

module AbstractController::Caching::Fragments
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Caching::Fragments::ClassMethods

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#68
  def combined_fragment_cache_key(key); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#132
  def expire_fragment(key, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#105
  def fragment_exist?(key, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#145
  def instrument_fragment_cache(name, key, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#93
  def read_fragment(key, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#80
  def write_fragment(key, content, options = T.unsafe(nil)); end

  module GeneratedClassMethods
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end

  module GeneratedInstanceMethods
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end
end

module AbstractController::Caching::Fragments::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#57
  def fragment_cache_key(value = T.unsafe(nil), &key); end
end

module AbstractController::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::AbstractController::Callbacks::ClassMethods

  private

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#232
  def process_action(*_arg0, **_arg1, &_arg2); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

class AbstractController::Callbacks::ActionFilter
  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#39
  def initialize(actions); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#43
  def after(controller); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#43
  def around(controller); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#43
  def before(controller); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#43
  def match?(controller); end
end

module AbstractController::Callbacks::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#96
  def _insert_callbacks(callbacks, block = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#77
  def _normalize_callback_option(options, from, to); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#72
  def _normalize_callback_options(options); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def after_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def append_after_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def append_around_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def append_before_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def around_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#204
  def before_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#210
  def prepend_after_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#210
  def prepend_around_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#210
  def prepend_before_action(*names, &blk); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#218
  def skip_after_action(*names); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#218
  def skip_around_action(*names); end

  # source://actionpack/7.0.4/lib/abstract_controller/callbacks.rb#218
  def skip_before_action(*names); end
end

module AbstractController::Collector
  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def atom(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def bmp(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def css(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def csv(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def gif(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def gzip(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def html(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def ics(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def jpeg(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def js(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def json(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def m4a(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def mp3(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def mp4(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def mpeg(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def multipart_form(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def ogg(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def otf(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def pdf(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def png(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def rss(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def svg(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def text(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def tiff(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def ttf(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def url_encoded_form(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def vcf(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def vtt(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def webm(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def woff(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def woff2(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def xml(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def yaml(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#10
  def zip(*args, **_arg1, &block); end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#26
  def method_missing(symbol, *args, **_arg2, &block); end

  class << self
    # source://actionpack/7.0.4/lib/abstract_controller/collector.rb#7
    def generate_method_for_mime(mime); end
  end
end

module AbstractController::Helpers
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#40
  def _helpers; end

  module GeneratedClassMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end

  module GeneratedInstanceMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end
end

module AbstractController::Helpers::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#56
  def _helpers=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#184
  def _helpers_for_modification; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#158
  def clear_helpers; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#147
  def helper(*args, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#79
  def helper_method(*methods); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#48
  def inherited(klass); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#169
  def modules_for_helpers(modules_or_helper_prefixes); end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#203
  def default_helper_module!; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#192
  def define_helpers_module(klass, helpers = T.unsafe(nil)); end
end

class AbstractController::Helpers::MissingHelperError < ::LoadError
  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#27
  def initialize(error, path); end
end

module AbstractController::Logger
  extend ::ActiveSupport::Concern
  include ::ActiveSupport::Benchmarkable
end

module AbstractController::Rendering
  extend ::ActiveSupport::Concern
  include ::ActionView::ViewPaths

  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#23
  def render(*args, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#51
  def render_to_body(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#45
  def render_to_string(*args, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#55
  def rendered_format; end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#63
  def view_assigns; end

  private

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#75
  def _normalize_args(action = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#90
  def _normalize_options(options); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#116
  def _normalize_render(*args, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#100
  def _process_format(format); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#95
  def _process_options(options); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#103
  def _process_variant(options); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#123
  def _protected_ivars; end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#106
  def _set_html_content_type; end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#112
  def _set_rendered_content_type(format); end

  # source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#109
  def _set_vary_header; end
end

# source://actionpack/7.0.4/lib/abstract_controller/rendering.rb#59
AbstractController::Rendering::DEFAULT_PROTECTED_INSTANCE_VARIABLES = T.let(T.unsafe(nil), Array)

module AbstractController::Translation
  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#33
  def l(object, **options); end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#33
  def localize(object, **options); end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#7
  def raise_on_missing_translations; end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#7
  def raise_on_missing_translations=(val); end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#17
  def t(key, **options); end

  # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#17
  def translate(key, **options); end

  class << self
    # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#7
    def raise_on_missing_translations; end

    # source://actionpack/7.0.4/lib/abstract_controller/translation.rb#7
    def raise_on_missing_translations=(val); end
  end
end

module AbstractController::UrlFor
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionDispatch::Routing::UrlFor

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::UrlFor::ClassMethods

  # source://actionpack/7.0.4/lib/abstract_controller/url_for.rb#14
  def _routes; end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

module AbstractController::UrlFor::ClassMethods
  # source://actionpack/7.0.4/lib/abstract_controller/url_for.rb#20
  def _routes; end

  # source://actionpack/7.0.4/lib/abstract_controller/url_for.rb#24
  def action_methods; end
end

class ActionController::Base < ::ActionController::Metal
  include ::ActionView::ViewPaths
  include ::AbstractController::Rendering
  include ::AbstractController::Translation
  include ::AbstractController::AssetPaths
  include ::AbstractController::Helpers
  include ::ActionController::Helpers
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor
  include ::AbstractController::Logger
  include ::ActiveSupport::Benchmarkable
  include ::ActionController::Redirecting
  include ::ActionView::Rendering
  include ::ActionView::Layouts
  include ::ActionController::Rendering
  include ::ActionController::Renderers
  include ::ActionController::Renderers::All
  include ::ActionController::Head
  include ::ActionController::ConditionalGet
  include ::ActionController::EtagWithTemplateDigest
  include ::ActionController::EtagWithFlash
  include ::ActionController::Caching
  include ::AbstractController::Caching::Fragments
  include ::AbstractController::Caching::ConfigMethods
  include ::AbstractController::Caching
  include ::ActionController::MimeResponds
  include ::ActionController::BasicImplicitRender
  include ::ActionController::ImplicitRender
  include ::ActionController::StrongParameters
  include ::ActionController::ParameterEncoding
  include ::ActionController::Cookies
  include ::ActionController::Flash
  include ::ActionController::FormBuilder
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks
  include ::ActionController::RequestForgeryProtection
  include ::ActionController::ContentSecurityPolicy
  include ::ActionController::PermissionsPolicy
  include ::ActionController::Streaming
  include ::ActionController::DataStreaming
  include ::ActionController::HttpAuthentication::Basic::ControllerMethods
  include ::ActionController::HttpAuthentication::Digest::ControllerMethods
  include ::ActionController::HttpAuthentication::Token::ControllerMethods
  include ::ActionController::DefaultHeaders
  include ::ActionController::Logging
  include ::ActiveSupport::Rescuable
  include ::ActionController::Rescue
  include ::ActionController::Instrumentation
  include ::ActionController::ParamsWrapper
  extend ::ActionView::ViewPaths::ClassMethods
  extend ::AbstractController::Helpers::ClassMethods
  extend ::ActionController::Helpers::ClassMethods
  extend ::AbstractController::UrlFor::ClassMethods
  extend ::ActionView::Rendering::ClassMethods
  extend ::ActionView::Layouts::ClassMethods
  extend ::ActionController::Rendering::ClassMethods
  extend ::ActionController::Renderers::ClassMethods
  extend ::ActionController::ConditionalGet::ClassMethods
  extend ::AbstractController::Caching::Fragments::ClassMethods
  extend ::AbstractController::Caching::ClassMethods
  extend ::AbstractController::Caching::ConfigMethods
  extend ::ActionController::ParameterEncoding::ClassMethods
  extend ::ActionController::Flash::ClassMethods
  extend ::ActionController::FormBuilder::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::AbstractController::Callbacks::ClassMethods
  extend ::ActionController::RequestForgeryProtection::ClassMethods
  extend ::ActionController::ContentSecurityPolicy::ClassMethods
  extend ::ActionController::PermissionsPolicy::ClassMethods
  extend ::ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods
  extend ::ActionController::DefaultHeaders::ClassMethods
  extend ::ActionController::Logging::ClassMethods
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::ActionController::Instrumentation::ClassMethods
  extend ::ActionController::ParamsWrapper::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _process_action_callbacks; end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_process_action_callbacks(&block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies; end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#36
  def alert; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def allow_forgery_protection; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def allow_forgery_protection=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def asset_host; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def asset_host=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def assets_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def assets_dir=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def default_asset_host_protocol; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def default_asset_host_protocol=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def default_protect_from_forgery; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def default_protect_from_forgery=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def default_static_extension; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def default_static_extension=(value); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def enable_fragment_cache_logging; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def enable_fragment_cache_logging=(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest; end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#10
  def flash(*_arg0, **_arg1, &_arg2); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def forgery_protection_origin_check; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def forgery_protection_origin_check=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def forgery_protection_strategy; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def forgery_protection_strategy=(value); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys; end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
  def helpers_path; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
  def helpers_path=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
  def helpers_path?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def javascripts_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def javascripts_dir=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def log_warning_on_csrf_failure; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def log_warning_on_csrf_failure=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def logger; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def logger=(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#36
  def notice; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def per_form_csrf_tokens; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def per_form_csrf_tokens=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def perform_caching; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def perform_caching=(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects; end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects=(val); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def relative_url_root; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def relative_url_root=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def request_forgery_protection_token; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def request_forgery_protection_token=(value); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def stylesheets_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def stylesheets_dir=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def urlsafe_csrf_tokens; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://actionpack/7.0.4/lib/action_controller/base.rb#266
  def _protected_ivars; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#31
    def _default_form_builder; end

    # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#31
    def _default_form_builder=(value); end

    # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#31
    def _default_form_builder?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#8
    def _flash_types; end

    # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#8
    def _flash_types=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#8
    def _flash_types?; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods?; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#15
    def _helpers; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout=(value); end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout?; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions=(value); end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _process_action_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _process_action_callbacks=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers?; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options; end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def allow_forgery_protection; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def allow_forgery_protection=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def asset_host; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def asset_host=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def assets_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def assets_dir=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def default_asset_host_protocol; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def default_asset_host_protocol=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def default_protect_from_forgery; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def default_protect_from_forgery=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def default_static_extension; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def default_static_extension=(value); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def enable_fragment_cache_logging; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def enable_fragment_cache_logging=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest; end

    # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def forgery_protection_origin_check; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def forgery_protection_origin_check=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def forgery_protection_strategy; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def forgery_protection_strategy=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
    def helpers_path; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
    def helpers_path=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
    def helpers_path?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def javascripts_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def javascripts_dir=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def log_warning_on_csrf_failure; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def log_warning_on_csrf_failure=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def logger; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def logger=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def per_form_csrf_tokens; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def per_form_csrf_tokens=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def perform_caching; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def perform_caching=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects; end

    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects=(val); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def relative_url_root; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def relative_url_root=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def request_forgery_protection_token; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def request_forgery_protection_token=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def stylesheets_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def stylesheets_dir=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def urlsafe_csrf_tokens; end

    # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#97
    def urlsafe_csrf_tokens=(urlsafe_csrf_tokens); end

    # source://actionpack/7.0.4/lib/action_controller/base.rb#198
    def without_modules(*modules); end
  end
end

module ActionController::Base::HelperMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#39
  def alert(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#31
  def combined_fragment_cache_key(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#11
  def content_security_policy?(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#12
  def content_security_policy_nonce(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/cookies.rb#8
  def cookies(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#106
  def form_authenticity_token(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#39
  def notice(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#107
  def protect_against_forgery?(*args, **_arg1, &block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#43
  def view_cache_dependencies(*args, **_arg1, &block); end
end

# source://actionpack/7.0.4/lib/action_controller/base.rb#206
ActionController::Base::MODULES = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.4/lib/action_controller/base.rb#261
ActionController::Base::PROTECTED_IVARS = T.let(T.unsafe(nil), Array)

module ActionController::BasicImplicitRender
  # source://actionpack/7.0.4/lib/action_controller/metal/basic_implicit_render.rb#9
  def default_render; end

  # source://actionpack/7.0.4/lib/action_controller/metal/basic_implicit_render.rb#5
  def send_action(method, *args); end
end

module ActionController::Caching
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Caching::Fragments
  include ::AbstractController::Caching

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Caching::Fragments::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ClassMethods
  mixes_in_class_methods ::AbstractController::Caching::ConfigMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/caching.rb#40
  def instrument_name; end

  # source://actionpack/7.0.4/lib/action_controller/caching.rb#32
  def instrument_payload(key); end

  module GeneratedClassMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end

  module GeneratedInstanceMethods
    def _view_cache_dependencies; end
    def _view_cache_dependencies=(value); end
    def _view_cache_dependencies?; end
    def fragment_cache_keys; end
    def fragment_cache_keys=(value); end
    def fragment_cache_keys?; end
  end
end

module ActionController::ConditionalGet
  include ::ActionController::Head
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ConditionalGet::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#276
  def expires_in(seconds, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#294
  def expires_now; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#117
  def fresh_when(object = T.unsafe(nil), etag: T.unsafe(nil), weak_etag: T.unsafe(nil), strong_etag: T.unsafe(nil), last_modified: T.unsafe(nil), public: T.unsafe(nil), cache_control: T.unsafe(nil), template: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#306
  def http_cache_forever(public: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#316
  def no_store; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#249
  def stale?(object = T.unsafe(nil), **freshness_kwargs); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#321
  def combine_etags(validator, options); end

  module GeneratedClassMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end

  module GeneratedInstanceMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end
end

module ActionController::ConditionalGet::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#31
  def etag(&etagger); end
end

module ActionController::ContentSecurityPolicy
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Helpers
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::AbstractController::Callbacks::ClassMethods
  mixes_in_class_methods ::ActionController::ContentSecurityPolicy::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#73
  def content_security_policy?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#77
  def content_security_policy_nonce; end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#81
  def current_content_security_policy; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end
end

module ActionController::ContentSecurityPolicy::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#39
  def content_security_policy(enabled = T.unsafe(nil), **options, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/content_security_policy.rb#65
  def content_security_policy_report_only(report_only = T.unsafe(nil), **options); end
end

module ActionController::Cookies
  extend ::ActiveSupport::Concern

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/cookies.rb#14
  def cookies; end
end

module ActionController::DataStreaming
  extend ::ActiveSupport::Concern
  include ::ActionController::Rendering

  mixes_in_class_methods ::ActionController::Rendering::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#109
  def send_data(data, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#69
  def send_file(path, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#114
  def send_file_headers!(options); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#15
ActionController::DataStreaming::DEFAULT_SEND_FILE_DISPOSITION = T.let(T.unsafe(nil), String)

# source://actionpack/7.0.4/lib/action_controller/metal/data_streaming.rb#14
ActionController::DataStreaming::DEFAULT_SEND_FILE_TYPE = T.let(T.unsafe(nil), String)

module ActionController::DefaultHeaders
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::DefaultHeaders::ClassMethods
end

module ActionController::DefaultHeaders::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/default_headers.rb#10
  def make_response!(request); end
end

module ActionController::EtagWithFlash
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionController::ConditionalGet

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ConditionalGet::ClassMethods

  module GeneratedClassMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end

  module GeneratedInstanceMethods
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end
end

module ActionController::EtagWithTemplateDigest
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionController::ConditionalGet

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ConditionalGet::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#35
  def determine_template_etag(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#51
  def lookup_and_digest_template(template); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#45
  def pick_template_for_etag(options); end

  module GeneratedClassMethods
    def etag_with_template_digest; end
    def etag_with_template_digest=(value); end
    def etag_with_template_digest?; end
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end

  module GeneratedInstanceMethods
    def etag_with_template_digest; end
    def etag_with_template_digest=(value); end
    def etag_with_template_digest?; end
    def etaggers; end
    def etaggers=(value); end
    def etaggers?; end
  end
end

module ActionController::Flash
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::Flash::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#51
  def redirect_to(options = T.unsafe(nil), response_options_and_flash = T.unsafe(nil)); end

  module GeneratedClassMethods
    def _flash_types; end
    def _flash_types=(value); end
    def _flash_types?; end
  end

  module GeneratedInstanceMethods; end
end

module ActionController::Flash::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#45
  def action_methods; end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#32
  def add_flash_types(*types); end
end

module ActionController::FormBuilder
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::FormBuilder::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#46
  def default_form_builder; end

  module GeneratedClassMethods
    def _default_form_builder; end
    def _default_form_builder=(value); end
    def _default_form_builder?; end
  end

  module GeneratedInstanceMethods; end
end

module ActionController::FormBuilder::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#40
  def default_form_builder(builder); end
end

module ActionController::Head
  # source://actionpack/7.0.4/lib/action_controller/metal/head.rb#21
  def head(status, options = T.unsafe(nil)); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/head.rb#52
  def include_content?(status); end
end

module ActionController::Helpers
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Helpers

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods
  mixes_in_class_methods ::ActionController::Helpers::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#128
  def helpers; end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#59
    def helpers_path; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#59
    def helpers_path=(_arg0); end
  end

  module GeneratedClassMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
    def helpers_path; end
    def helpers_path=(value); end
    def helpers_path?; end
    def include_all_helpers; end
    def include_all_helpers=(value); end
    def include_all_helpers?; end
  end

  module GeneratedInstanceMethods
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
    def helpers_path; end
    def helpers_path=(value); end
    def helpers_path?; end
    def include_all_helpers; end
    def include_all_helpers=(value); end
    def include_all_helpers?; end
  end
end

module ActionController::Helpers::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#111
  def all_helpers_from_path(path); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#76
  def helper_attr(*attrs); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#86
  def helpers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#102
  def modules_for_helpers(args); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#122
  def all_application_helpers; end
end

module ActionController::HttpAuthentication::Basic::ControllerMethods
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#92
  def authenticate_or_request_with_http_basic(realm = T.unsafe(nil), message = T.unsafe(nil), &login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#96
  def authenticate_with_http_basic(&login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#83
  def http_basic_authenticate_or_request_with(name:, password:, realm: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#100
  def request_http_basic_authentication(realm = T.unsafe(nil), message = T.unsafe(nil)); end
end

module ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#76
  def http_basic_authenticate_with(name:, password:, realm: T.unsafe(nil), **options); end
end

module ActionController::HttpAuthentication::Digest::ControllerMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#193
  def authenticate_or_request_with_http_digest(realm = T.unsafe(nil), message = T.unsafe(nil), &password_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#199
  def authenticate_with_http_digest(realm = T.unsafe(nil), &password_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#205
  def request_http_digest_authentication(realm = T.unsafe(nil), message = T.unsafe(nil)); end
end

module ActionController::HttpAuthentication::Token::ControllerMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#430
  def authenticate_or_request_with_http_token(realm = T.unsafe(nil), message = T.unsafe(nil), &login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#436
  def authenticate_with_http_token(&login_procedure); end

  # source://actionpack/7.0.4/lib/action_controller/metal/http_authentication.rb#442
  def request_http_token_authentication(realm = T.unsafe(nil), message = T.unsafe(nil)); end
end

module ActionController::ImplicitRender
  include ::ActionController::BasicImplicitRender

  # source://actionpack/7.0.4/lib/action_controller/metal/implicit_render.rb#33
  def default_render; end

  # source://actionpack/7.0.4/lib/action_controller/metal/implicit_render.rb#52
  def method_for_action(action_name); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/implicit_render.rb#59
  def interactive_browser_request?; end
end

module ActionController::Instrumentation
  extend ::ActiveSupport::Concern
  include ::ActiveSupport::Benchmarkable
  include ::AbstractController::Logger

  mixes_in_class_methods ::ActionController::Instrumentation::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#40
  def redirect_to(*_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#19
  def render(*_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#34
  def send_data(data, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#27
  def send_file(path, options = T.unsafe(nil)); end

  def view_runtime; end
  def view_runtime=(_arg0); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#96
  def append_info_to_payload(payload); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#90
  def cleanup_view_runtime; end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#80
  def halted_callback_hook(filter, _); end

  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#50
  def process_action(*_arg0); end
end

module ActionController::Instrumentation::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/instrumentation.rb#104
  def log_process_action(payload); end
end

module ActionController::Logging
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::Logging::ClassMethods
end

module ActionController::Logging::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/logging.rb#15
  def log_at(level, **options); end
end

class ActionController::Metal < ::AbstractController::Base
  # source://actionpack/7.0.4/lib/action_controller/metal.rb#150
  def initialize; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def content_type(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def content_type=(arg); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#141
  def controller_name; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#185
  def dispatch(name, request, response); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def headers(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def location(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def location=(arg); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def media_type(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
  def middleware_stack; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
  def middleware_stack=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
  def middleware_stack?; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#157
  def params; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#161
  def params=(val); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#181
  def performed?; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def request; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def request=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#206
  def reset_session; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def response; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/attr_internal.rb#33
  def response=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#172
  def response_body=(body); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def response_code(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#146
  def session(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#197
  def set_request!(request); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#193
  def set_response!(response); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def status(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#147
  def status=(arg); end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#202
  def to_a; end

  # source://actionpack/7.0.4/lib/action_controller/metal.rb#168
  def url_for(string); end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal.rb#231
    def action(name); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#136
    def action_encoding_template(action); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#126
    def controller_name; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#247
    def dispatch(name, req, res); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#212
    def inherited(base); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#130
    def make_response!(request); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#226
    def middleware; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack?; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#220
    def use(*_arg0, **_arg1, &_arg2); end
  end
end

module ActionController::MimeResponds
  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#201
  def respond_to(*mimes); end
end

class ActionController::MimeResponds::Collector
  include ::AbstractController::Collector

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#246
  def initialize(mimes, variant = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#253
  def all(*args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#253
  def any(*args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#271
  def any_response?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#262
  def custom(mime_type, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#244
  def format; end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#244
  def format=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#288
  def negotiate_format(request); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#275
  def response; end
end

class ActionController::MimeResponds::Collector::VariantCollector
  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#293
  def initialize(variant = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#298
  def all(*args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#298
  def any(*args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#309
  def method_missing(name, *args, &block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#313
  def variant; end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/mime_responds.rb#322
  def variant_key; end
end

module ActionController::ParameterEncoding
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::ParameterEncoding::ClassMethods
end

module ActionController::ParameterEncoding::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#18
  def action_encoding_template(action); end

  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#9
  def inherited(klass); end

  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#77
  def param_encoding(action, param, encoding); end

  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#14
  def setup_param_encode; end

  # source://actionpack/7.0.4/lib/action_controller/metal/parameter_encoding.rb#48
  def skip_parameter_encoding(action); end
end

module ActionController::ParamsWrapper
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::ParamsWrapper::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#277
  def _extract_parameters(parameters); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#299
  def _perform_parameter_wrapping; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#273
  def _wrap_parameters(parameters); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#289
  def _wrapper_enabled?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#268
  def _wrapper_formats; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#263
  def _wrapper_key; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#257
  def process_action(*_arg0); end

  module GeneratedClassMethods
    def _wrapper_options; end
    def _wrapper_options=(value); end
    def _wrapper_options?; end
  end

  module GeneratedInstanceMethods
    def _wrapper_options; end
    def _wrapper_options=(value); end
    def _wrapper_options?; end
  end
end

module ActionController::ParamsWrapper::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#189
  def _set_wrapper_options(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#244
  def inherited(klass); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#220
  def wrap_parameters(name_or_model_or_options, options = T.unsafe(nil)); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#83
ActionController::ParamsWrapper::EXCLUDE_PARAMETERS = T.let(T.unsafe(nil), Array)

class ActionController::ParamsWrapper::Options < ::Struct
  include ::Mutex_m

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#98
  def initialize(name, format, include, exclude, klass, model); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#108
  def include; end

  # source://mutex_m/0.1.1/mutex_m.rb#93
  def lock; end

  # source://mutex_m/0.1.1/mutex_m.rb#83
  def locked?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#104
  def model; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#141
  def name; end

  # source://mutex_m/0.1.1/mutex_m.rb#78
  def synchronize(&block); end

  # source://mutex_m/0.1.1/mutex_m.rb#88
  def try_lock; end

  # source://mutex_m/0.1.1/mutex_m.rb#98
  def unlock; end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#165
  def _default_wrap_model; end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#90
    def from_hash(hash); end
  end
end

module ActionController::PermissionsPolicy
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::PermissionsPolicy::ClassMethods
end

module ActionController::PermissionsPolicy::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/permissions_policy.rb#26
  def permissions_policy(**options, &block); end
end

module ActionController::Redirecting
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Benchmarkable
  include ::AbstractController::Logger
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::UrlFor::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#130
  def _compute_redirect_to_location(request, options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#95
  def redirect_back(fallback_location:, allow_other_host: T.unsafe(nil), **args); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#121
  def redirect_back_or_to(fallback_location, allow_other_host: T.unsafe(nil), **options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#82
  def redirect_to(options = T.unsafe(nil), response_options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#169
  def url_from(location); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#175
  def _allow_other_host; end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#189
  def _enforce_open_redirect_protection(location, allow_other_host:); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#179
  def _extract_redirect_to_status(options, response_options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#197
  def _url_host_allowed?(url); end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#130
    def _compute_redirect_to_location(request, options); end
  end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

class ActionController::Redirecting::UnsafeRedirectError < ::StandardError; end

module ActionController::Renderers
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::Renderers::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#144
  def _render_to_body_with_renderer(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#170
  def _render_with_renderer_js(js, options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#155
  def _render_with_renderer_json(json, options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#175
  def _render_with_renderer_xml(xml, options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#140
  def render_to_body(options); end

  class << self
    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#90
    def _render_with_renderer_method_name(key); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#74
    def add(key, &block); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#84
    def remove(key); end
  end

  module GeneratedClassMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end

  module GeneratedInstanceMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end
end

module ActionController::Renderers::All
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionController::Renderers

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::Renderers::ClassMethods

  module GeneratedClassMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end

  module GeneratedInstanceMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
  end
end

module ActionController::Renderers::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#128
  def use_renderer(*args); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#128
  def use_renderers(*args); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#28
ActionController::Renderers::RENDERERS = T.let(T.unsafe(nil), Set)

module ActionController::Rendering
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionController::Rendering::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#28
  def render(*args); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#45
  def render_to_body(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#34
  def render_to_string(*_arg0); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#87
  def _normalize_args(action = T.unsafe(nil), options = T.unsafe(nil), &blk); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#94
  def _normalize_options(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#108
  def _normalize_text(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#117
  def _process_options(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#56
  def _process_variant(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#62
  def _render_in_priorities(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#70
  def _set_html_content_type; end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#74
  def _set_rendered_content_type(format); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#80
  def _set_vary_header; end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#51
  def process_action(*_arg0); end
end

module ActionController::Rendering::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#21
  def inherited(klass); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#11
  def render(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#15
  def renderer; end

  # source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#17
  def setup_renderer!; end
end

# source://actionpack/7.0.4/lib/action_controller/metal/rendering.rb#7
ActionController::Rendering::RENDER_FORMATS_IN_PRIORITY = T.let(T.unsafe(nil), Array)

module ActionController::RequestForgeryProtection
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::AbstractController::Helpers
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::Helpers::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::AbstractController::Callbacks::ClassMethods
  mixes_in_class_methods ::ActionController::RequestForgeryProtection::ClassMethods

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#344
  def any_authenticity_token_valid?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#430
  def compare_with_global_token(token, session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#426
  def compare_with_real_token(token, session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#464
  def csrf_token_hmac(session, identifier); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#535
  def decode_csrf_token(encoded_csrf_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#527
  def encode_csrf_token(csrf_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#484
  def form_authenticity_param; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#356
  def form_authenticity_token(form_options: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#519
  def generate_csrf_token; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#460
  def global_csrf_token(session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#277
  def handle_unverified_request; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#316
  def mark_for_same_origin_verification!; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#322
  def marked_for_same_origin_verification?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#419
  def mask_token(raw_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#363
  def masked_authenticity_token(session, form_options: T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#327
  def non_xhr_javascript_response?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#514
  def normalize_action_path(action_path); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#453
  def per_form_csrf_token(session, action_path, method); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#489
  def protect_against_forgery?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#448
  def real_csrf_token(session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#351
  def request_authenticity_tokens; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#411
  def unmask_token(masked_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#287
  def unverified_request_warning_message; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#379
  def valid_authenticity_token?(session, encoded_masked_token); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#434
  def valid_per_form_csrf_token?(token, session); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#504
  def valid_request_origin?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#338
  def verified_request?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#267
  def verify_authenticity_token; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#306
  def verify_same_origin_request; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#472
  def xor_byte_strings(s1, s2); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _helper_methods; end
    def _helper_methods=(value); end
    def _helper_methods?; end
  end
end

# source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#331
ActionController::RequestForgeryProtection::AUTHENTICITY_TOKEN_LENGTH = T.let(T.unsafe(nil), Integer)

module ActionController::RequestForgeryProtection::ClassMethods
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#156
  def protect_from_forgery(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#170
  def skip_forgery_protection(options = T.unsafe(nil)); end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#175
  def protection_method_class(name); end
end

# source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#493
ActionController::RequestForgeryProtection::NULL_ORIGIN_MESSAGE = T.let(T.unsafe(nil), String)

module ActionController::RequestForgeryProtection::ProtectionMethods; end

class ActionController::RequestForgeryProtection::ProtectionMethods::Exception
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#246
  def initialize(controller); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#250
  def handle_unverified_request; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#244
  def warning_message; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#244
  def warning_message=(_arg0); end
end

class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#193
  def initialize(controller); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#198
  def handle_unverified_request; end
end

class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession::NullCookieJar < ::ActionDispatch::Cookies::CookieJar
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#227
  def write(*_arg0); end
end

class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession::NullSessionHash < ::Rack::Session::Abstract::SessionHash
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#208
  def initialize(req); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#215
  def destroy; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#221
  def enabled?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#217
  def exists?; end
end

class ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession
  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#234
  def initialize(controller); end

  # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#238
  def handle_unverified_request; end
end

module ActionController::Rescue
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Rescuable

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/rescue.rb#16
  def show_detailed_exceptions?; end

  private

  # source://actionpack/7.0.4/lib/action_controller/metal/rescue.rb#21
  def process_action(*_arg0); end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

module ActionController::Streaming
  private

  # source://actionpack/7.0.4/lib/action_controller/metal/streaming.rb#198
  def _process_options(options); end

  # source://actionpack/7.0.4/lib/action_controller/metal/streaming.rb#212
  def _render_template(options); end
end

module ActionController::StrongParameters
  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1224
  def params; end

  # source://actionpack/7.0.4/lib/action_controller/metal/strong_parameters.rb#1239
  def params=(value); end
end

module ActionController::UrlFor
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::AbstractController::UrlFor::ClassMethods

  # source://actionpack/7.0.4/lib/action_controller/metal/url_for.rb#30
  def url_options; end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

module ActionDispatch::Cookies::ChainedCookieJars
  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#252
  def encrypted; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#218
  def permanent; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#234
  def signed; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#258
  def signed_or_encrypted; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#281
  def encrypted_cookie_cipher; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#275
  def prepare_upgrade_legacy_hmac_aes_cbc_cookies?; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#285
  def signed_cookie_digest; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#268
  def upgrade_legacy_hmac_aes_cbc_cookies?; end
end

class ActionDispatch::Cookies::CookieJar
  include ::ActionDispatch::Cookies::ChainedCookieJars
  include ::Enumerable

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#315
  def initialize(request); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#336
  def [](name); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#370
  def []=(name, options); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#424
  def always_write_cookie; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#424
  def always_write_cookie=(val); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#414
  def clear(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#325
  def commit!; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#323
  def committed?; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#393
  def delete(name, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#407
  def deleted?(name, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#331
  def each(&block); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#340
  def fetch(name, *args, &block); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#344
  def has_key?(name); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#344
  def key?(name); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#313
  def request; end

  def to_hash(*_arg0); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#364
  def to_header; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#352
  def update(other_hash); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#357
  def update_cookies_from_jar; end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#418
  def write(headers); end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#427
  def escape(string); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#448
  def handle_options(options); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#431
  def make_set_cookie_header(header); end

  # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#444
  def write_cookie?(cookie); end

  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#424
    def always_write_cookie; end

    # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#424
    def always_write_cookie=(val); end

    # source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#307
    def build(req, cookies); end
  end
end

# source://actionpack/7.0.4/lib/action_dispatch/middleware/cookies.rb#305
ActionDispatch::Cookies::CookieJar::DOMAIN_REGEXP = T.let(T.unsafe(nil), Regexp)

module ActionDispatch::Routing::PolymorphicRoutes
  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#153
  def edit_polymorphic_path(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#149
  def edit_polymorphic_url(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#153
  def new_polymorphic_path(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#149
  def new_polymorphic_url(record_or_hash, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#124
  def polymorphic_path(record_or_hash_or_array, options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#101
  def polymorphic_url(record_or_hash_or_array, options = T.unsafe(nil)); end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#168
  def polymorphic_mapping(record); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#164
  def polymorphic_path_for_action(action, record_or_hash, options); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#160
  def polymorphic_url_for_action(action, record_or_hash, options); end
end

class ActionDispatch::Routing::PolymorphicRoutes::HelperMethodBuilder
  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#239
  def initialize(key_strategy, prefix, suffix); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#253
  def handle_class(klass); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#257
  def handle_class_call(target, klass); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#284
  def handle_list(list); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#261
  def handle_model(record); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#275
  def handle_model_call(target, record); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#245
  def handle_string(record); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#249
  def handle_string_call(target, str); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#237
  def prefix; end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#237
  def suffix; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#338
  def get_method_for_class(klass); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#343
  def get_method_for_string(str); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#330
  def polymorphic_mapping(target, record); end

  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#187
    def build(action, type); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#179
    def get(action, type); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#185
    def path; end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#201
    def plural(prefix, suffix); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#205
    def polymorphic_method(recipient, record_or_hash_or_array, action, type, options); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#197
    def singular(prefix, suffix); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#184
    def url; end
  end
end

# source://actionpack/7.0.4/lib/action_dispatch/routing/polymorphic_routes.rb#177
ActionDispatch::Routing::PolymorphicRoutes::HelperMethodBuilder::CACHE = T.let(T.unsafe(nil), Hash)

module ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#106
  def initialize(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#173
  def full_url_for(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#213
  def route_for(name, *args); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#169
  def url_for(options = T.unsafe(nil)); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#114
  def url_options; end

  protected

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#218
  def optimize_routes_generation?; end

  private

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#230
  def _routes_context; end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#223
  def _with_routes(routes); end

  module GeneratedClassMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end

  module GeneratedInstanceMethods
    def default_url_options; end
    def default_url_options=(value); end
    def default_url_options?; end
  end
end

module ActionMailbox
  extend ::ActiveSupport::Autoload

  # source://actionmailbox//lib/action_mailbox.rb#14
  def incinerate; end

  # source://actionmailbox//lib/action_mailbox.rb#14
  def incinerate=(val); end

  # source://actionmailbox//lib/action_mailbox.rb#15
  def incinerate_after; end

  # source://actionmailbox//lib/action_mailbox.rb#15
  def incinerate_after=(val); end

  # source://actionmailbox//lib/action_mailbox.rb#12
  def ingress; end

  # source://actionmailbox//lib/action_mailbox.rb#12
  def ingress=(val); end

  # source://actionmailbox//lib/action_mailbox.rb#13
  def logger; end

  # source://actionmailbox//lib/action_mailbox.rb#13
  def logger=(val); end

  # source://actionmailbox//lib/action_mailbox.rb#16
  def queues; end

  # source://actionmailbox//lib/action_mailbox.rb#16
  def queues=(val); end

  # source://actionmailbox//lib/action_mailbox.rb#17
  def storage_service; end

  # source://actionmailbox//lib/action_mailbox.rb#17
  def storage_service=(val); end

  class << self
    # source://actionmailbox//lib/action_mailbox.rb#14
    def incinerate; end

    # source://actionmailbox//lib/action_mailbox.rb#14
    def incinerate=(val); end

    # source://actionmailbox//lib/action_mailbox.rb#15
    def incinerate_after; end

    # source://actionmailbox//lib/action_mailbox.rb#15
    def incinerate_after=(val); end

    # source://actionmailbox//lib/action_mailbox.rb#12
    def ingress; end

    # source://actionmailbox//lib/action_mailbox.rb#12
    def ingress=(val); end

    # source://actionmailbox//lib/action_mailbox.rb#13
    def logger; end

    # source://actionmailbox//lib/action_mailbox.rb#13
    def logger=(val); end

    # source://actionmailbox//lib/action_mailbox.rb#16
    def queues; end

    # source://actionmailbox//lib/action_mailbox.rb#16
    def queues=(val); end

    # source://railties/7.0.4/lib/rails/engine.rb#405
    def railtie_helpers_paths; end

    # source://railties/7.0.4/lib/rails/engine.rb#394
    def railtie_namespace; end

    # source://railties/7.0.4/lib/rails/engine.rb#409
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://actionmailbox//lib/action_mailbox.rb#17
    def storage_service; end

    # source://actionmailbox//lib/action_mailbox.rb#17
    def storage_service=(val); end

    # source://railties/7.0.4/lib/rails/engine.rb#397
    def table_name_prefix; end

    # source://railties/7.0.4/lib/rails/engine.rb#401
    def use_relative_model_naming?; end
  end
end

# The base class for all application mailboxes. Not intended to be inherited from directly. Inherit from
# +ApplicationMailbox+ instead, as that's where the app-specific routing is configured. This routing
# is specified in the following ways:
#
#   class ApplicationMailbox < ActionMailbox::Base
#     # Any of the recipients of the mail (whether to, cc, bcc) are matched against the regexp.
#     routing /^replies@/i => :replies
#
#     # Any of the recipients of the mail (whether to, cc, bcc) needs to be an exact match for the string.
#     routing "help@example.com" => :help
#
#     # Any callable (proc, lambda, etc) object is passed the inbound_email record and is a match if true.
#     routing ->(inbound_email) { inbound_email.mail.to.size > 2 } => :multiple_recipients
#
#     # Any object responding to #match? is called with the inbound_email record as an argument. Match if true.
#     routing CustomAddress.new => :custom
#
#     # Any inbound_email that has not been already matched will be sent to the BackstopMailbox.
#     routing :all => :backstop
#   end
#
# Application mailboxes need to override the #process method, which is invoked by the framework after
# callbacks have been run. The callbacks available are: +before_processing+, +after_processing+, and
# +around_processing+. The primary use case is ensure certain preconditions to processing are fulfilled
# using +before_processing+ callbacks.
#
# If a precondition fails to be met, you can halt the processing using the +#bounced!+ method,
# which will silently prevent any further processing, but not actually send out any bounce notice. You
# can also pair this behavior with the invocation of an Action Mailer class responsible for sending out
# an actual bounce email. This is done using the #bounce_with method, which takes the mail object returned
# by an Action Mailer method, like so:
#
#   class ForwardsMailbox < ApplicationMailbox
#     before_processing :ensure_sender_is_a_user
#
#     private
#       def ensure_sender_is_a_user
#         unless User.exist?(email_address: mail.from)
#           bounce_with UserRequiredMailer.missing(inbound_email)
#         end
#       end
#   end
#
# During the processing of the inbound email, the status will be tracked. Before processing begins,
# the email will normally have the +pending+ status. Once processing begins, just before callbacks
# and the #process method is called, the status is changed to +processing+. If processing is allowed to
# complete, the status is changed to +delivered+. If a bounce is triggered, then +bounced+. If an unhandled
# exception is bubbled up, then +failed+.
#
# Exceptions can be handled at the class level using the familiar +Rescuable+ approach:
#
#   class ForwardsMailbox < ApplicationMailbox
#     rescue_from(ApplicationSpecificVerificationError) { bounced! }
#   end
class ActionMailbox::Base
  include ::ActiveSupport::Rescuable
  include ::ActionMailbox::Routing
  include ::ActiveSupport::Callbacks
  include ::ActionMailbox::Callbacks
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::ActionMailbox::Routing::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActionMailbox::Callbacks::ClassMethods

  # @return [Base] a new instance of Base
  #
  # source://actionmailbox//lib/action_mailbox/base.rb#76
  def initialize(inbound_email); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _process_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_process_callbacks(&block); end

  # Enqueues the given +message+ for delivery and changes the inbound email's status to +:bounced+.
  #
  # source://actionmailbox//lib/action_mailbox/base.rb#101
  def bounce_with(message); end

  # source://actionmailbox//lib/action_mailbox/base.rb#68
  def bounced!(*_arg0, **_arg1, &_arg2); end

  # source://actionmailbox//lib/action_mailbox/base.rb#68
  def delivered!(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://actionmailbox//lib/action_mailbox/base.rb#95
  def finished_processing?; end

  # Returns the value of attribute inbound_email.
  #
  # source://actionmailbox//lib/action_mailbox/base.rb#67
  def inbound_email; end

  # source://actionmailbox//lib/action_mailbox/base.rb#70
  def logger(*_arg0, **_arg1, &_arg2); end

  # source://actionmailbox//lib/action_mailbox/base.rb#68
  def mail(*_arg0, **_arg1, &_arg2); end

  # source://actionmailbox//lib/action_mailbox/base.rb#80
  def perform_processing; end

  # source://actionmailbox//lib/action_mailbox/base.rb#91
  def process; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers?; end

  # source://actionmailbox//lib/action_mailbox/routing.rb#9
  def router; end

  # source://actionmailbox//lib/action_mailbox/routing.rb#9
  def router=(val); end

  private

  # source://actionmailbox//lib/action_mailbox/base.rb#107
  def track_status_of_inbound_email; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _process_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _process_callbacks=(value); end

    # source://actionmailbox//lib/action_mailbox/base.rb#72
    def receive(inbound_email); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers?; end

    # source://actionmailbox//lib/action_mailbox/routing.rb#9
    def router; end

    # source://actionmailbox//lib/action_mailbox/routing.rb#9
    def router=(val); end
  end
end

class ActionMailbox::BaseController < ::ActionController::Base
  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def authenticate_by_password; end
  def ensure_configured; end
  def ingress_name; end
  def password; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

# Defines the callbacks related to processing.
module ActionMailbox::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActionMailbox::Callbacks::ClassMethods

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

module ActionMailbox::Callbacks::ClassMethods
  # source://actionmailbox//lib/action_mailbox/callbacks.rb#25
  def after_processing(*methods, &block); end

  # source://actionmailbox//lib/action_mailbox/callbacks.rb#29
  def around_processing(*methods, &block); end

  # source://actionmailbox//lib/action_mailbox/callbacks.rb#21
  def before_processing(*methods, &block); end
end

# source://actionmailbox//lib/action_mailbox/callbacks.rb#11
ActionMailbox::Callbacks::TERMINATOR = T.let(T.unsafe(nil), Proc)

class ActionMailbox::Engine < ::Rails::Engine; end

class ActionMailbox::InboundEmail < ::ActionMailbox::Record
  include ::ActionMailbox::InboundEmail::GeneratedAttributeMethods
  include ::ActionMailbox::InboundEmail::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums; end
  end
end

module ActionMailbox::InboundEmail::GeneratedAssociationMethods; end
module ActionMailbox::InboundEmail::GeneratedAttributeMethods; end

module ActionMailbox::InboundEmail::Incineratable
  extend ::ActiveSupport::Concern

  def incinerate; end
  def incinerate_later; end
end

class ActionMailbox::InboundEmail::Incineratable::Incineration
  def initialize(inbound_email); end

  def run; end

  private

  def due?; end
  def processed?; end
end

module ActionMailbox::InboundEmail::MessageId
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionMailbox::InboundEmail::MessageId::ClassMethods
end

module ActionMailbox::InboundEmail::MessageId::ClassMethods
  def create_and_extract_message_id!(source, **options); end

  private

  def create_and_upload_raw_email!(source); end
  def extract_message_id(source); end
  def generate_missing_message_id(message_checksum); end
end

module ActionMailbox::InboundEmail::Routable
  extend ::ActiveSupport::Concern

  def route; end
  def route_later; end
end

class ActionMailbox::IncinerationJob < ::ActiveJob::Base
  def perform(inbound_email); end

  class << self
    # source://activejob/7.0.4/lib/active_job/queue_name.rb#56
    def queue_name; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    def schedule(inbound_email); end
  end
end

class ActionMailbox::Record < ::ActiveRecord::Base
  include ::ActionMailbox::Record::GeneratedAttributeMethods
  include ::ActionMailbox::Record::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums; end
  end
end

module ActionMailbox::Record::GeneratedAssociationMethods; end
module ActionMailbox::Record::GeneratedAttributeMethods; end

# Encapsulates the routes that live on the ApplicationMailbox and performs the actual routing when
# an inbound_email is received.
class ActionMailbox::Router
  # @return [Router] a new instance of Router
  #
  # source://actionmailbox//lib/action_mailbox/router.rb#9
  def initialize; end

  # source://actionmailbox//lib/action_mailbox/router.rb#19
  def add_route(address, to:); end

  # source://actionmailbox//lib/action_mailbox/router.rb#13
  def add_routes(routes); end

  # source://actionmailbox//lib/action_mailbox/router.rb#33
  def mailbox_for(inbound_email); end

  # source://actionmailbox//lib/action_mailbox/router.rb#23
  def route(inbound_email); end

  private

  # Returns the value of attribute routes.
  #
  # source://actionmailbox//lib/action_mailbox/router.rb#38
  def routes; end
end

class ActionMailbox::Router::Route
  # source://actionmailbox//lib/action_mailbox/router/route.rb#10
  def initialize(address, to:); end

  # source://actionmailbox//lib/action_mailbox/router/route.rb#8
  def address; end

  # source://actionmailbox//lib/action_mailbox/router/route.rb#31
  def mailbox_class; end

  # source://actionmailbox//lib/action_mailbox/router/route.rb#8
  def mailbox_name; end

  # source://actionmailbox//lib/action_mailbox/router/route.rb#16
  def match?(inbound_email); end

  private

  # source://actionmailbox//lib/action_mailbox/router/route.rb#36
  def ensure_valid_address; end
end

class ActionMailbox::Router::RoutingError < ::StandardError; end

# See ActionMailbox::Base for how to specify routing.
module ActionMailbox::Routing
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionMailbox::Routing::ClassMethods
end

module ActionMailbox::Routing::ClassMethods
  # source://actionmailbox//lib/action_mailbox/routing.rb#21
  def mailbox_for(inbound_email); end

  # source://actionmailbox//lib/action_mailbox/routing.rb#17
  def route(inbound_email); end

  # source://actionmailbox//lib/action_mailbox/routing.rb#13
  def routing(routes); end
end

class ActionMailbox::RoutingJob < ::ActiveJob::Base
  def perform(inbound_email); end

  class << self
    # source://activejob/7.0.4/lib/active_job/queue_name.rb#56
    def queue_name; end
  end
end

class ActionMailbox::TestCase < ::ActiveSupport::TestCase
  include ::ActionMailbox::TestHelper
end

module ActionMailbox::TestHelper
  # Create an InboundEmail record using an eml fixture in the format of message/rfc822
  # referenced with +fixture_name+ located in +test/fixtures/files/fixture_name+.
  #
  # source://actionmailbox//lib/action_mailbox/test_helper.rb#9
  def create_inbound_email_from_fixture(fixture_name, status: T.unsafe(nil)); end

  # Creates an InboundEmail by specifying through options or a block.
  #
  # ==== Options
  #
  # * <tt>:status</tt> - The +status+ to set for the created InboundEmail.
  #   For possible statuses, see its documentation.
  #
  # ==== Creating a simple email
  #
  # When you only need to set basic fields like +from+, +to+, +subject+, and
  # +body+, you can pass them directly as options.
  #
  #   create_inbound_email_from_mail(from: "david@loudthinking.com", subject: "Hello!")
  #
  # ==== Creating a multi-part email
  #
  # When you need to create a more intricate email, like a multi-part email
  # that contains both a plaintext version and an HTML version, you can pass a
  # block.
  #
  #   create_inbound_email_from_mail do
  #     to "David Heinemeier Hansson <david@loudthinking.com>"
  #     from "Bilbo Baggins <bilbo@bagend.com>"
  #     subject "Come down to the Shire!"
  #
  #     text_part do
  #       body "Please join us for a party at Bag End"
  #     end
  #
  #     html_part do
  #       body "<h1>Please join us for a party at Bag End</h1>"
  #     end
  #   end
  #
  # As with +Mail.new+, you can also use a block parameter to define the parts
  # of the message:
  #
  #   create_inbound_email_from_mail do |mail|
  #     mail.to "David Heinemeier Hansson <david@loudthinking.com>"
  #     mail.from "Bilbo Baggins <bilbo@bagend.com>"
  #     mail.subject "Come down to the Shire!"
  #
  #     mail.text_part do |part|
  #       part.body "Please join us for a party at Bag End"
  #     end
  #
  #     mail.html_part do |part|
  #       part.body "<h1>Please join us for a party at Bag End</h1>"
  #     end
  #   end
  #
  # source://actionmailbox//lib/action_mailbox/test_helper.rb#63
  def create_inbound_email_from_mail(status: T.unsafe(nil), **mail_options, &block); end

  # Create an InboundEmail using the raw rfc822 +source+ as text.
  #
  # source://actionmailbox//lib/action_mailbox/test_helper.rb#72
  def create_inbound_email_from_source(source, status: T.unsafe(nil)); end

  # Create an InboundEmail from fixture using the same arguments as create_inbound_email_from_fixture
  # and immediately route it to processing.
  #
  # source://actionmailbox//lib/action_mailbox/test_helper.rb#79
  def receive_inbound_email_from_fixture(*args); end

  # Create an InboundEmail using the same options or block as
  # create_inbound_email_from_mail, then immediately route it for processing.
  #
  # source://actionmailbox//lib/action_mailbox/test_helper.rb#85
  def receive_inbound_email_from_mail(**kwargs, &block); end

  # Create an InboundEmail using the same arguments as create_inbound_email_from_source and immediately route it
  # to processing.
  #
  # source://actionmailbox//lib/action_mailbox/test_helper.rb#91
  def receive_inbound_email_from_source(*args); end
end

module ActionView::Layouts
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionView::ViewPaths
  include ::ActionView::Rendering

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods
  mixes_in_class_methods ::ActionView::Rendering::ClassMethods
  mixes_in_class_methods ::ActionView::Layouts::ClassMethods

  # source://actionview/7.0.4/lib/action_view/layouts.rb#361
  def initialize(*_arg0); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#215
  def _layout_conditions(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#350
  def _normalize_options(options); end

  def action_has_layout=(_arg0); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#372
  def action_has_layout?; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#377
  def _conditional_layout?; end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#415
  def _default_layout(lookup_context, formats, require_layout = T.unsafe(nil)); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#430
  def _include_layout?(options); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#382
  def _layout(*_arg0); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#388
  def _layout_for_option(name); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#401
  def _normalize_layout(value); end

  module GeneratedClassMethods
    def _layout; end
    def _layout=(value); end
    def _layout?; end
    def _layout_conditions; end
    def _layout_conditions=(value); end
    def _layout_conditions?; end
  end

  module GeneratedInstanceMethods; end
end

module ActionView::Layouts::ClassMethods
  # source://actionview/7.0.4/lib/action_view/layouts.rb#283
  def _write_layout_method; end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#218
  def inherited(klass); end

  # source://actionview/7.0.4/lib/action_view/layouts.rb#269
  def layout(layout, conditions = T.unsafe(nil)); end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#345
  def _implied_layout_name; end
end

module ActionView::Layouts::ClassMethods::LayoutConditions
  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#233
  def _conditional_layout?; end
end

module ActionView::Rendering
  extend ::ActiveSupport::Concern
  include ::ActionView::ViewPaths

  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods
  mixes_in_class_methods ::ActionView::Rendering::ClassMethods

  # source://actionview/7.0.4/lib/action_view/rendering.rb#31
  def initialize; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#37
  def process(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#101
  def render_to_body(options = T.unsafe(nil)); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#29
  def rendered_format; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#91
  def view_context; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#77
  def view_context_class; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#96
  def view_renderer; end

  private

  # source://actionview/7.0.4/lib/action_view/rendering.rb#134
  def _normalize_args(action = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#158
  def _normalize_options(options); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#127
  def _process_format(format); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#108
  def _render_template(options); end
end

module ActionView::Rendering::ClassMethods
  # source://actionview/7.0.4/lib/action_view/rendering.rb#48
  def _helpers; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#45
  def _routes; end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#51
  def build_view_context_class(klass, supports_path, routes, helpers); end

  # source://actionview/7.0.4/lib/action_view/rendering.rb#64
  def view_context_class; end
end

module ActionView::ViewPaths
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionView::ViewPaths::ClassMethods

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#90
  def _prefixes; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def any_templates?(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#112
  def append_view_path(path); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#102
  def details_for_lookup; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def formats(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def formats=(arg); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def locale(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def locale=(arg); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#97
  def lookup_context; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#122
  def prepend_view_path(path); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def template_exists?(*_arg0, **_arg1, &_arg2); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#11
  def view_paths(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://actionview/7.0.4/lib/action_view/view_paths.rb#84
    def all_view_paths; end

    # source://actionview/7.0.4/lib/action_view/view_paths.rb#76
    def get_view_paths(klass); end

    # source://actionview/7.0.4/lib/action_view/view_paths.rb#80
    def set_view_paths(klass, paths); end
  end
end

module ActionView::ViewPaths::ClassMethods
  # source://actionview/7.0.4/lib/action_view/view_paths.rb#23
  def _prefixes; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#15
  def _view_paths; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#19
  def _view_paths=(paths); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#37
  def append_view_path(path); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#47
  def prepend_view_path(path); end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#52
  def view_paths; end

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#61
  def view_paths=(paths); end

  private

  # source://actionview/7.0.4/lib/action_view/view_paths.rb#68
  def local_prefixes; end
end

class ActiveJob::Base
  include ::ActiveJob::Core
  include ::ActiveJob::QueueAdapter
  include ::ActiveJob::QueueName
  include ::ActiveJob::QueuePriority
  include ::ActiveJob::Enqueuing
  include ::ActiveSupport::Rescuable
  include ::ActiveJob::Execution
  include ::ActiveSupport::Callbacks
  include ::ActiveJob::Callbacks
  include ::ActiveJob::Exceptions
  include ::ActiveJob::Instrumentation
  include ::ActiveJob::Logging
  include ::ActiveJob::Timezones
  include ::ActiveJob::Translation
  extend ::ActiveJob::Core::ClassMethods
  extend ::ActiveJob::QueueAdapter::ClassMethods
  extend ::ActiveJob::QueueName::ClassMethods
  extend ::ActiveJob::QueuePriority::ClassMethods
  extend ::ActiveJob::Enqueuing::ClassMethods
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::ActiveJob::Execution::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveJob::Callbacks::ClassMethods
  extend ::ActiveJob::Exceptions::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _enqueue_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _perform_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_enqueue_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_perform_callbacks(&block); end

  # source://activejob/7.0.4/lib/active_job/logging.rb#11
  def logger; end

  # source://activejob/7.0.4/lib/active_job/logging.rb#11
  def logger=(val); end

  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#15
  def queue_adapter(*_arg0, **_arg1, &_arg2); end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
  def queue_name_prefix; end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
  def queue_name_prefix=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
  def queue_name_prefix?; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers?; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _enqueue_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _enqueue_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _perform_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _perform_callbacks=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#13
    def _queue_adapter; end

    # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#13
    def _queue_adapter=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#12
    def _queue_adapter_name; end

    # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#12
    def _queue_adapter_name=(value); end

    # source://activejob/7.0.4/lib/active_job/logging.rb#12
    def log_arguments; end

    # source://activejob/7.0.4/lib/active_job/logging.rb#12
    def log_arguments=(value); end

    # source://activejob/7.0.4/lib/active_job/logging.rb#12
    def log_arguments?; end

    # source://activejob/7.0.4/lib/active_job/logging.rb#11
    def logger; end

    # source://activejob/7.0.4/lib/active_job/logging.rb#11
    def logger=(val); end

    # source://activejob/7.0.4/lib/active_job/queue_priority.rb#32
    def priority; end

    # source://activejob/7.0.4/lib/active_job/queue_priority.rb#32
    def priority=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_priority.rb#32
    def priority?; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#56
    def queue_name; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#56
    def queue_name=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#56
    def queue_name?; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#57
    def queue_name_delimiter; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#57
    def queue_name_delimiter=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#57
    def queue_name_delimiter?; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
    def queue_name_prefix; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
    def queue_name_prefix=(value); end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#58
    def queue_name_prefix?; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers?; end

    # source://activejob/7.0.4/lib/active_job/exceptions.rb#11
    def retry_jitter; end

    # source://activejob/7.0.4/lib/active_job/exceptions.rb#11
    def retry_jitter=(value); end

    # source://activesupport/7.0.4/lib/active_support/deprecation/method_wrappers.rb#63
    def skip_after_callbacks_if_terminated(*args, **_arg1, &block); end

    # source://activesupport/7.0.4/lib/active_support/deprecation/method_wrappers.rb#63
    def skip_after_callbacks_if_terminated=(*args, **_arg1, &block); end
  end
end

module ActiveJob::Callbacks
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Callbacks
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveJob::Callbacks::ClassMethods

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
    def _execute_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
    def _run_execute_callbacks(&block); end
  end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

module ActiveJob::Callbacks::ClassMethods
  # source://activejob/7.0.4/lib/active_job/callbacks.rb#146
  def after_enqueue(*filters, &blk); end

  # source://activejob/7.0.4/lib/active_job/callbacks.rb#75
  def after_perform(*filters, &blk); end

  # source://activejob/7.0.4/lib/active_job/callbacks.rb#167
  def around_enqueue(*filters, &blk); end

  # source://activejob/7.0.4/lib/active_job/callbacks.rb#108
  def around_perform(*filters, &blk); end

  # source://activejob/7.0.4/lib/active_job/callbacks.rb#127
  def before_enqueue(*filters, &blk); end

  # source://activejob/7.0.4/lib/active_job/callbacks.rb#56
  def before_perform(*filters, &blk); end
end

module ActiveJob::Core
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::Core::ClassMethods

  # source://activejob/7.0.4/lib/active_job/core.rb#91
  def initialize(*arguments, **_arg1); end

  # source://activejob/7.0.4/lib/active_job/core.rb#10
  def arguments; end

  # source://activejob/7.0.4/lib/active_job/core.rb#10
  def arguments=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#146
  def deserialize(job_data); end

  # source://activejob/7.0.4/lib/active_job/core.rb#54
  def enqueue_error; end

  # source://activejob/7.0.4/lib/active_job/core.rb#54
  def enqueue_error=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#44
  def enqueued_at; end

  # source://activejob/7.0.4/lib/active_job/core.rb#44
  def enqueued_at=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#35
  def exception_executions; end

  # source://activejob/7.0.4/lib/active_job/core.rb#35
  def exception_executions=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#29
  def executions; end

  # source://activejob/7.0.4/lib/active_job/core.rb#29
  def executions=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#17
  def job_id; end

  # source://activejob/7.0.4/lib/active_job/core.rb#17
  def job_id=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#38
  def locale; end

  # source://activejob/7.0.4/lib/active_job/core.rb#38
  def locale=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#23
  def priority=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#26
  def provider_job_id; end

  # source://activejob/7.0.4/lib/active_job/core.rb#26
  def provider_job_id=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#20
  def queue_name=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#14
  def scheduled_at; end

  # source://activejob/7.0.4/lib/active_job/core.rb#14
  def scheduled_at=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#104
  def serialize; end

  # source://activejob/7.0.4/lib/active_job/core.rb#11
  def serialized_arguments=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#160
  def set(options = T.unsafe(nil)); end

  # source://activejob/7.0.4/lib/active_job/core.rb#47
  def successfully_enqueued=(_arg0); end

  # source://activejob/7.0.4/lib/active_job/core.rb#49
  def successfully_enqueued?; end

  # source://activejob/7.0.4/lib/active_job/core.rb#41
  def timezone; end

  # source://activejob/7.0.4/lib/active_job/core.rb#41
  def timezone=(_arg0); end

  private

  # source://activejob/7.0.4/lib/active_job/core.rb#193
  def arguments_serialized?; end

  # source://activejob/7.0.4/lib/active_job/core.rb#189
  def deserialize_arguments(serialized_args); end

  # source://activejob/7.0.4/lib/active_job/core.rb#178
  def deserialize_arguments_if_needed; end

  # source://activejob/7.0.4/lib/active_job/core.rb#185
  def serialize_arguments(arguments); end

  # source://activejob/7.0.4/lib/active_job/core.rb#170
  def serialize_arguments_if_needed(arguments); end
end

module ActiveJob::Core::ClassMethods
  # source://activejob/7.0.4/lib/active_job/core.rb#60
  def deserialize(job_data); end

  # source://activejob/7.0.4/lib/active_job/core.rb#84
  def set(options = T.unsafe(nil)); end
end

module ActiveJob::Enqueuing
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::Enqueuing::ClassMethods

  # source://activejob/7.0.4/lib/active_job/enqueuing.rb#59
  def enqueue(options = T.unsafe(nil)); end
end

module ActiveJob::Enqueuing::ClassMethods
  # source://activejob/7.0.4/lib/active_job/enqueuing.rb#28
  def perform_later(*_arg0, **_arg1, &_arg2); end

  private

  # source://activejob/7.0.4/lib/active_job/enqueuing.rb#38
  def job_or_instantiate(*args, **_arg1); end
end

module ActiveJob::Exceptions
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::Exceptions::ClassMethods

  # source://activejob/7.0.4/lib/active_job/exceptions.rb#124
  def retry_job(options = T.unsafe(nil)); end

  private

  # source://activejob/7.0.4/lib/active_job/exceptions.rb#134
  def determine_delay(seconds_or_duration_or_algorithm:, executions:, jitter: T.unsafe(nil)); end

  # source://activejob/7.0.4/lib/active_job/exceptions.rb#154
  def determine_jitter_for_delay(delay, jitter); end

  # source://activejob/7.0.4/lib/active_job/exceptions.rb#159
  def executions_for(exceptions); end

  module GeneratedClassMethods
    def retry_jitter; end
    def retry_jitter=(value); end
  end

  module GeneratedInstanceMethods; end
end

module ActiveJob::Exceptions::ClassMethods
  # source://activejob/7.0.4/lib/active_job/exceptions.rb#94
  def discard_on(*exceptions); end

  # source://activejob/7.0.4/lib/active_job/exceptions.rb#58
  def retry_on(*exceptions, wait: T.unsafe(nil), attempts: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil), jitter: T.unsafe(nil)); end
end

module ActiveJob::Execution
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Rescuable

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods
  mixes_in_class_methods ::ActiveJob::Execution::ClassMethods

  # source://activejob/7.0.4/lib/active_job/execution.rb#51
  def perform(*_arg0); end

  # source://activejob/7.0.4/lib/active_job/execution.rb#40
  def perform_now; end

  private

  # source://activejob/7.0.4/lib/active_job/execution.rb#56
  def _perform_job; end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

module ActiveJob::Execution::ClassMethods
  # source://activejob/7.0.4/lib/active_job/execution.rb#21
  def execute(job_data); end

  # source://activejob/7.0.4/lib/active_job/execution.rb#17
  def perform_now(*_arg0, **_arg1, &_arg2); end
end

module ActiveJob::Instrumentation
  extend ::ActiveSupport::Concern

  # source://activejob/7.0.4/lib/active_job/instrumentation.rb#13
  def perform_now; end

  private

  # source://activejob/7.0.4/lib/active_job/instrumentation.rb#18
  def _perform_job; end

  # source://activejob/7.0.4/lib/active_job/instrumentation.rb#39
  def halted_callback_hook(*_arg0); end

  # source://activejob/7.0.4/lib/active_job/instrumentation.rb#23
  def instrument(operation, payload = T.unsafe(nil), &block); end
end

module ActiveJob::Logging
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://activejob/7.0.4/lib/active_job/logging.rb#17
  def perform_now; end

  private

  # source://activejob/7.0.4/lib/active_job/logging.rb#31
  def logger_tagged_by_active_job?; end

  # source://activejob/7.0.4/lib/active_job/logging.rb#22
  def tag_logger(*tags, &block); end

  module GeneratedClassMethods
    def log_arguments; end
    def log_arguments=(value); end
    def log_arguments?; end
  end

  module GeneratedInstanceMethods; end
end

module ActiveJob::QueueAdapter
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueueAdapter::ClassMethods

  module GeneratedClassMethods
    def _queue_adapter; end
    def _queue_adapter=(value); end
    def _queue_adapter_name; end
    def _queue_adapter_name=(value); end
  end

  module GeneratedInstanceMethods; end
end

module ActiveJob::QueueAdapter::ClassMethods
  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#24
  def queue_adapter; end

  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#37
  def queue_adapter=(name_or_adapter); end

  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#30
  def queue_adapter_name; end

  private

  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#53
  def assign_adapter(adapter_name, queue_adapter); end

  # source://activejob/7.0.4/lib/active_job/queue_adapter.rb#60
  def queue_adapter?(object); end
end

# source://activejob/7.0.4/lib/active_job/queue_adapter.rb#58
ActiveJob::QueueAdapter::ClassMethods::QUEUE_ADAPTER_METHODS = T.let(T.unsafe(nil), Array)

module ActiveJob::QueueName
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueueName::ClassMethods

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#62
  def queue_name; end

  module GeneratedClassMethods
    def queue_name; end
    def queue_name=(value); end
    def queue_name?; end
    def queue_name_delimiter; end
    def queue_name_delimiter=(value); end
    def queue_name_delimiter?; end
    def queue_name_prefix; end
    def queue_name_prefix=(value); end
    def queue_name_prefix?; end
  end

  module GeneratedInstanceMethods
    def queue_name_prefix; end
    def queue_name_prefix=(value); end
    def queue_name_prefix?; end
  end
end

module ActiveJob::QueueName::ClassMethods
  # source://activejob/7.0.4/lib/active_job/queue_name.rb#9
  def default_queue_name; end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#9
  def default_queue_name=(val); end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#40
  def queue_as(part_name = T.unsafe(nil), &block); end

  # source://activejob/7.0.4/lib/active_job/queue_name.rb#48
  def queue_name_from_part(part_name); end

  class << self
    # source://activejob/7.0.4/lib/active_job/queue_name.rb#9
    def default_queue_name; end

    # source://activejob/7.0.4/lib/active_job/queue_name.rb#9
    def default_queue_name=(val); end
  end
end

module ActiveJob::QueuePriority
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueuePriority::ClassMethods

  # source://activejob/7.0.4/lib/active_job/queue_priority.rb#36
  def priority; end

  module GeneratedClassMethods
    def priority; end
    def priority=(value); end
    def priority?; end
  end

  module GeneratedInstanceMethods; end
end

module ActiveJob::QueuePriority::ClassMethods
  # source://activejob/7.0.4/lib/active_job/queue_priority.rb#9
  def default_priority; end

  # source://activejob/7.0.4/lib/active_job/queue_priority.rb#9
  def default_priority=(val); end

  # source://activejob/7.0.4/lib/active_job/queue_priority.rb#22
  def queue_with_priority(priority = T.unsafe(nil), &block); end

  class << self
    # source://activejob/7.0.4/lib/active_job/queue_priority.rb#9
    def default_priority; end

    # source://activejob/7.0.4/lib/active_job/queue_priority.rb#9
    def default_priority=(val); end
  end
end

module ActiveJob::Timezones
  extend ::ActiveSupport::Concern
end

module ActiveJob::Translation
  extend ::ActiveSupport::Concern
end

class ActiveModel::Attribute
  # source://activemodel/7.0.4/lib/active_model/attribute.rb#33
  def initialize(name, value_before_type_cast, type, original_attribute = T.unsafe(nil), value = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#112
  def ==(other); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#104
  def came_from_user?; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#63
  def changed?; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#67
  def changed_in_place?; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#132
  def encode_with(coder); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#112
  def eql?(other); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#71
  def forgetting_assignment; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#108
  def has_been_read?; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#120
  def hash; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#124
  def init_with(coder); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#100
  def initialized?; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#29
  def name; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#47
  def original_value; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#140
  def original_value_for_database; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#59
  def serializable?(&block); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#29
  def type; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#96
  def type_cast(*_arg0); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#41
  def value; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#29
  def value_before_type_cast; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#55
  def value_for_database; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#84
  def with_cast_value(value); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#88
  def with_type(type); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#80
  def with_value_from_database(value); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#75
  def with_value_from_user(value); end

  private

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#162
  def _original_value_for_database; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#149
  def assigned?; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#158
  def changed_from_assignment?; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#152
  def initialize_dup(other); end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#149
  def original_attribute; end

  class << self
    # source://activemodel/7.0.4/lib/active_model/attribute.rb#8
    def from_database(name, value_before_type_cast, type, value = T.unsafe(nil)); end

    # source://activemodel/7.0.4/lib/active_model/attribute.rb#12
    def from_user(name, value_before_type_cast, type, original_attribute = T.unsafe(nil)); end

    # source://activemodel/7.0.4/lib/active_model/attribute.rb#20
    def null(name); end

    # source://activemodel/7.0.4/lib/active_model/attribute.rb#24
    def uninitialized(name, type); end

    # source://activemodel/7.0.4/lib/active_model/attribute.rb#16
    def with_cast_value(name, value_before_type_cast, type); end
  end
end

class ActiveModel::Attribute::FromUser < ::ActiveModel::Attribute
  # source://activemodel/7.0.4/lib/active_model/attribute.rb#182
  def came_from_user?; end

  # source://activemodel/7.0.4/lib/active_model/attribute.rb#178
  def type_cast(value); end
end

class ActiveModel::Attribute::UserProvidedDefault < ::ActiveModel::Attribute::FromUser
  # source://activemodel/7.0.4/lib/active_model/attribute/user_provided_default.rb#8
  def initialize(name, value, type, database_default); end

  # source://activemodel/7.0.4/lib/active_model/attribute/user_provided_default.rb#25
  def marshal_dump; end

  # source://activemodel/7.0.4/lib/active_model/attribute/user_provided_default.rb#36
  def marshal_load(values); end

  # source://activemodel/7.0.4/lib/active_model/attribute/user_provided_default.rb#13
  def value_before_type_cast; end

  # source://activemodel/7.0.4/lib/active_model/attribute/user_provided_default.rb#21
  def with_type(type); end

  private

  # source://activemodel/7.0.4/lib/active_model/attribute/user_provided_default.rb#48
  def user_provided_value; end
end

module ActiveModel::AttributeAssignment
  include ::ActiveModel::ForbiddenAttributesProtection

  # source://activemodel/7.0.4/lib/active_model/attribute_assignment.rb#28
  def assign_attributes(new_attributes); end

  # source://activemodel/7.0.4/lib/active_model/attribute_assignment.rb#28
  def attributes=(new_attributes); end

  private

  # source://activemodel/7.0.4/lib/active_model/attribute_assignment.rb#46
  def _assign_attribute(k, v); end

  # source://activemodel/7.0.4/lib/active_model/attribute_assignment.rb#40
  def _assign_attributes(attributes); end
end

module ActiveModel::AttributeMethods
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#467
  def attribute_missing(match, *args, **_arg2, &block); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#453
  def method_missing(method, *args, **_arg2, &block); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#476
  def respond_to?(method, include_private_methods = T.unsafe(nil)); end

  def respond_to_without_attributes?(*_arg0); end

  private

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#504
  def _read_attribute(attr); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#489
  def attribute_method?(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#495
  def matched_attribute_method(method_name); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#500
  def missing_attribute(attr_name, stack); end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(value); end
    def attribute_method_matchers?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers?; end
  end
end

module ActiveModel::AttributeMethods::AttrNames
  class << self
    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#525
    def define_attribute_accessor_method(owner, attr_name, writer: T.unsafe(nil)); end
  end
end

# source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#509
ActiveModel::AttributeMethods::AttrNames::DEF_SAFE_NAME = T.let(T.unsafe(nil), Regexp)

# source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#69
ActiveModel::AttributeMethods::CALL_COMPILABLE_REGEXP = T.let(T.unsafe(nil), Regexp)

module ActiveModel::AttributeMethods::ClassMethods
  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#209
  def alias_attribute(new_name, old_name); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#248
  def attribute_alias(name); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#243
  def attribute_alias?(new_name); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#180
  def attribute_method_affix(*affixes); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#109
  def attribute_method_prefix(*prefixes, parameters: T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#144
  def attribute_method_suffix(*suffixes, parameters: T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#311
  def define_attribute_method(attr_name, _owner: T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#276
  def define_attribute_methods(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#353
  def undefine_attribute_methods; end

  private

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#378
  def attribute_method_matchers_cache; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#382
  def attribute_method_matchers_matching(method_name); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#391
  def define_proxy_call(code_generator, name, target, parameters, *call_args, namespace:); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#361
  def generated_attribute_methods; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#365
  def instance_method_already_implemented?(method_name); end
end

class ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher
  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#422
  def initialize(prefix: T.unsafe(nil), suffix: T.unsafe(nil), parameters: T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#431
  def match(method_name); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#437
  def method_name(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#418
  def parameters; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#418
  def prefix; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#418
  def suffix; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#418
  def target; end
end

class ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher::AttributeMethodMatch < ::Struct
  def attr_name; end
  def attr_name=(_); end
  def target; end
  def target=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#70
ActiveModel::AttributeMethods::FORWARD_PARAMETERS = T.let(T.unsafe(nil), String)

# source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#68
ActiveModel::AttributeMethods::NAME_COMPILABLE_REGEXP = T.let(T.unsafe(nil), Regexp)

module ActiveModel::Callbacks
  # source://activemodel/7.0.4/lib/active_model/callbacks.rb#109
  def define_model_callbacks(*callbacks); end

  private

  # source://activemodel/7.0.4/lib/active_model/callbacks.rb#143
  def _define_after_model_callback(klass, callback); end

  # source://activemodel/7.0.4/lib/active_model/callbacks.rb#136
  def _define_around_model_callback(klass, callback); end

  # source://activemodel/7.0.4/lib/active_model/callbacks.rb#129
  def _define_before_model_callback(klass, callback); end

  class << self
    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#66
    def extended(base); end
  end
end

module ActiveModel::Conversion
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveModel::Conversion::ClassMethods

  # source://activemodel/7.0.4/lib/active_model/conversion.rb#59
  def to_key; end

  # source://activemodel/7.0.4/lib/active_model/conversion.rb#41
  def to_model; end

  # source://activemodel/7.0.4/lib/active_model/conversion.rb#82
  def to_param; end

  # source://activemodel/7.0.4/lib/active_model/conversion.rb#95
  def to_partial_path; end
end

module ActiveModel::Conversion::ClassMethods
  # source://activemodel/7.0.4/lib/active_model/conversion.rb#102
  def _to_partial_path; end
end

module ActiveModel::Dirty
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#143
  def as_json(options = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#178
  def attribute_changed?(attr_name, **options); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#245
  def attribute_changed_in_place?(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#188
  def attribute_previously_changed?(attr_name, **options); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#193
  def attribute_previously_was(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#183
  def attribute_was(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#173
  def changed; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#164
  def changed?; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#221
  def changed_attributes; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#231
  def changes; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#150
  def changes_applied; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#209
  def clear_attribute_changes(attr_names); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#203
  def clear_changes_information; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#241
  def previous_changes; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#198
  def restore_attributes(attr_names = T.unsafe(nil)); end

  private

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#271
  def attribute_change(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#276
  def attribute_previous_change(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#281
  def attribute_will_change!(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#250
  def clear_attribute_change(attr_name); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#262
  def forget_attribute_assignments; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#133
  def initialize_dup(other); end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#266
  def mutations_before_last_save; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#254
  def mutations_from_database; end

  # source://activemodel/7.0.4/lib/active_model/dirty.rb#286
  def restore_attribute!(attr_name); end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(value); end
    def attribute_method_matchers?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers?; end
  end
end

class ActiveModel::EachValidator < ::ActiveModel::Validator
  # source://activemodel/7.0.4/lib/active_model/validator.rb#138
  def initialize(options); end

  # source://activemodel/7.0.4/lib/active_model/validator.rb#133
  def attributes; end

  # source://activemodel/7.0.4/lib/active_model/validator.rb#166
  def check_validity!; end

  # source://activemodel/7.0.4/lib/active_model/validator.rb#148
  def validate(record); end

  # source://activemodel/7.0.4/lib/active_model/validator.rb#159
  def validate_each(record, attribute, value); end

  private

  # source://activemodel/7.0.4/lib/active_model/validator.rb#170
  def prepare_value_for_validation(value, record, attr_name); end
end

module ActiveModel::ForbiddenAttributesProtection
  private

  # source://activemodel/7.0.4/lib/active_model/forbidden_attributes_protection.rb#21
  def sanitize_for_mass_assignment(attributes); end

  # source://activemodel/7.0.4/lib/active_model/forbidden_attributes_protection.rb#21
  def sanitize_forbidden_attributes(attributes); end
end

module ActiveModel::Naming
  # source://activemodel/7.0.4/lib/active_model/naming.rb#259
  def model_name; end

  class << self
    # source://activemodel/7.0.4/lib/active_model/naming.rb#242
    def extended(base); end

    # source://activemodel/7.0.4/lib/active_model/naming.rb#327
    def param_key(record_or_class); end

    # source://activemodel/7.0.4/lib/active_model/naming.rb#272
    def plural(record_or_class); end

    # source://activemodel/7.0.4/lib/active_model/naming.rb#315
    def route_key(record_or_class); end

    # source://activemodel/7.0.4/lib/active_model/naming.rb#280
    def singular(record_or_class); end

    # source://activemodel/7.0.4/lib/active_model/naming.rb#300
    def singular_route_key(record_or_class); end

    # source://activemodel/7.0.4/lib/active_model/naming.rb#288
    def uncountable?(record_or_class); end

    private

    # source://activemodel/7.0.4/lib/active_model/naming.rb#331
    def model_name_from_record_or_class(record_or_class); end
  end
end

module ActiveModel::SecurePassword
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveModel::SecurePassword::ClassMethods

  class << self
    # source://activemodel/7.0.4/lib/active_model/secure_password.rb#13
    def min_cost; end

    # source://activemodel/7.0.4/lib/active_model/secure_password.rb#13
    def min_cost=(_arg0); end
  end
end

module ActiveModel::SecurePassword::ClassMethods
  # source://activemodel/7.0.4/lib/active_model/secure_password.rb#84
  def has_secure_password(attribute = T.unsafe(nil), validations: T.unsafe(nil)); end
end

class ActiveModel::SecurePassword::InstanceMethodsOnActivation < ::Module
  # source://activemodel/7.0.4/lib/active_model/secure_password.rb#115
  def initialize(attribute); end
end

# source://activemodel/7.0.4/lib/active_model/secure_password.rb#10
ActiveModel::SecurePassword::MAX_PASSWORD_LENGTH_ALLOWED = T.let(T.unsafe(nil), Integer)

module ActiveModel::Serialization
  def read_attribute_for_serialization(*_arg0); end

  # source://activemodel/7.0.4/lib/active_model/serialization.rb#125
  def serializable_hash(options = T.unsafe(nil)); end

  private

  # source://activemodel/7.0.4/lib/active_model/serialization.rb#152
  def attribute_names_for_serialization; end

  # source://activemodel/7.0.4/lib/active_model/serialization.rb#184
  def serializable_add_includes(options = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/serialization.rb#174
  def serializable_attributes(attribute_names); end
end

module ActiveModel::Serializers::JSON
  include ::ActiveModel::Serialization
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Naming

  # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#96
  def as_json(options = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#146
  def from_json(json, include_root = T.unsafe(nil)); end

  module GeneratedClassMethods
    def include_root_in_json; end
    def include_root_in_json=(value); end
    def include_root_in_json?; end
  end

  module GeneratedInstanceMethods
    def include_root_in_json; end
    def include_root_in_json?; end
  end
end

module ActiveModel::Translation
  include ::ActiveModel::Naming

  # source://activemodel/7.0.4/lib/active_model/translation.rb#44
  def human_attribute_name(attribute, options = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/translation.rb#26
  def i18n_scope; end

  # source://activemodel/7.0.4/lib/active_model/translation.rb#34
  def lookup_ancestors; end
end

class ActiveModel::Type::Value
  # source://activemodel/7.0.4/lib/active_model/type/value.rb#8
  def initialize(precision: T.unsafe(nil), limit: T.unsafe(nil), scale: T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#109
  def ==(other); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#121
  def assert_valid_value(_); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#65
  def binary?; end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#45
  def cast(value); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#72
  def changed?(old_value, new_value, _new_value_before_type_cast); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#93
  def changed_in_place?(raw_old_value, new_value); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#31
  def deserialize(value); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#109
  def eql?(other); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#101
  def force_equality?(_value); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#117
  def hash; end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#6
  def limit; end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#105
  def map(value); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#6
  def precision; end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#6
  def scale; end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#18
  def serializable?(value); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#53
  def serialize(value); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#22
  def type; end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#59
  def type_cast_for_schema(value); end

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#97
  def value_constructed_by_mass_assignment?(_value); end

  private

  # source://activemodel/7.0.4/lib/active_model/type/value.rb#128
  def cast_value(value); end
end

module ActiveModel::Validations
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods

  # source://activemodel/7.0.4/lib/active_model/validations.rb#301
  def errors; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#373
  def invalid?(context = T.unsafe(nil)); end

  def read_attribute_for_validation(*_arg0); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#334
  def valid?(context = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#334
  def validate(context = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#382
  def validate!(context = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/validations/with.rb#137
  def validates_with(*args, &block); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations.rb#283
  def initialize_dup(other); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#410
  def raise_validation_error; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#405
  def run_validations!; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
  end
end

class ActiveModel::Validations::AbsenceValidator < ::ActiveModel::EachValidator
  # source://activemodel/7.0.4/lib/active_model/validations/absence.rb#7
  def validate_each(record, attr_name, value); end
end

class ActiveModel::Validations::AcceptanceValidator < ::ActiveModel::EachValidator
  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#6
  def initialize(options); end

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#11
  def validate_each(record, attribute, value); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#23
  def acceptable_option?(value); end

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#18
  def setup!(klass); end
end

class ActiveModel::Validations::AcceptanceValidator::LazilyDefineAttributes < ::Module
  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#28
  def initialize(attributes); end

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#73
  def ==(other); end

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#56
  def define_on(klass); end

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#32
  def included(klass); end

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#51
  def matches?(method_name); end

  protected

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#78
  def attributes; end
end

module ActiveModel::Validations::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  private

  # source://activemodel/7.0.4/lib/active_model/validations/callbacks.rb#116
  def run_validations!; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

module ActiveModel::Validations::Callbacks::ClassMethods
  # source://activemodel/7.0.4/lib/active_model/validations/callbacks.rb#90
  def after_validation(*args, &block); end

  # source://activemodel/7.0.4/lib/active_model/validations/callbacks.rb#56
  def before_validation(*args, &block); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/callbacks.rb#101
  def set_options_for_callback(options); end
end

module ActiveModel::Validations::ClassMethods
  # source://activemodel/7.0.4/lib/active_model/validations.rb#270
  def attribute_method?(attribute); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#234
  def clear_validators!; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#275
  def inherited(base); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#152
  def validate(*args, &block); end

  # source://activemodel/7.0.4/lib/active_model/validations/validates.rb#106
  def validates(*attributes); end

  # source://activemodel/7.0.4/lib/active_model/validations/validates.rb#148
  def validates!(*attributes); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#85
  def validates_each(*attr_names, &block); end

  # source://activemodel/7.0.4/lib/active_model/validations/with.rb#81
  def validates_with(*args, &block); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#192
  def validators; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#254
  def validators_on(*attributes); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/validates.rb#161
  def _parse_validates_options(options); end

  # source://activemodel/7.0.4/lib/active_model/validations/validates.rb#157
  def _validates_default_keys; end
end

# source://activemodel/7.0.4/lib/active_model/validations.rb#89
ActiveModel::Validations::ClassMethods::VALID_OPTIONS_FOR_VALIDATE = T.let(T.unsafe(nil), Array)

module ActiveModel::Validations::Clusivity
  # source://activemodel/7.0.4/lib/active_model/validations/clusivity.rb#11
  def check_validity!; end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/clusivity.rb#34
  def delimiter; end

  # source://activemodel/7.0.4/lib/active_model/validations/clusivity.rb#18
  def include?(record, value); end

  # source://activemodel/7.0.4/lib/active_model/validations/clusivity.rb#43
  def inclusion_method(enumerable); end
end

# source://activemodel/7.0.4/lib/active_model/validations/clusivity.rb#8
ActiveModel::Validations::Clusivity::ERROR_MESSAGE = T.let(T.unsafe(nil), String)

module ActiveModel::Validations::Comparability
  # source://activemodel/7.0.4/lib/active_model/validations/comparability.rb#21
  def error_options(value, option_value); end

  # source://activemodel/7.0.4/lib/active_model/validations/comparability.rb#10
  def option_value(record, option_value); end
end

# source://activemodel/7.0.4/lib/active_model/validations/comparability.rb#6
ActiveModel::Validations::Comparability::COMPARE_CHECKS = T.let(T.unsafe(nil), Hash)

class ActiveModel::Validations::ComparisonValidator < ::ActiveModel::EachValidator
  include ::ActiveModel::Validations::Comparability

  # source://activemodel/7.0.4/lib/active_model/validations/comparison.rb#10
  def check_validity!; end

  # source://activemodel/7.0.4/lib/active_model/validations/comparison.rb#17
  def validate_each(record, attr_name, value); end
end

class ActiveModel::Validations::ConfirmationValidator < ::ActiveModel::EachValidator
  # source://activemodel/7.0.4/lib/active_model/validations/confirmation.rb#6
  def initialize(options); end

  # source://activemodel/7.0.4/lib/active_model/validations/confirmation.rb#11
  def validate_each(record, attribute, value); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/confirmation.rb#31
  def confirmation_value_equal?(record, attribute, value, confirmed); end

  # source://activemodel/7.0.4/lib/active_model/validations/confirmation.rb#21
  def setup!(klass); end
end

class ActiveModel::Validations::ExclusionValidator < ::ActiveModel::EachValidator
  include ::ActiveModel::Validations::Clusivity

  # source://activemodel/7.0.4/lib/active_model/validations/exclusion.rb#10
  def validate_each(record, attribute, value); end
end

class ActiveModel::Validations::FormatValidator < ::ActiveModel::EachValidator
  # source://activemodel/7.0.4/lib/active_model/validations/format.rb#16
  def check_validity!; end

  # source://activemodel/7.0.4/lib/active_model/validations/format.rb#6
  def validate_each(record, attribute, value); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/format.rb#35
  def check_options_validity(name); end

  # source://activemodel/7.0.4/lib/active_model/validations/format.rb#26
  def option_call(record, name); end

  # source://activemodel/7.0.4/lib/active_model/validations/format.rb#31
  def record_error(record, attribute, name, value); end

  # source://activemodel/7.0.4/lib/active_model/validations/format.rb#49
  def regexp_using_multiline_anchors?(regexp); end
end

module ActiveModel::Validations::HelperMethods
  # source://activemodel/7.0.4/lib/active_model/validations/absence.rb#28
  def validates_absence_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#108
  def validates_acceptance_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/comparison.rb#77
  def validates_comparison_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/confirmation.rb#75
  def validates_confirmation_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/exclusion.rb#44
  def validates_exclusion_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/format.rb#108
  def validates_format_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/inclusion.rb#42
  def validates_inclusion_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/length.rb#122
  def validates_length_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#205
  def validates_numericality_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/presence.rb#34
  def validates_presence_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/length.rb#122
  def validates_size_of(*attr_names); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/helper_methods.rb#7
  def _merge_attributes(attr_names); end
end

class ActiveModel::Validations::InclusionValidator < ::ActiveModel::EachValidator
  include ::ActiveModel::Validations::Clusivity

  # source://activemodel/7.0.4/lib/active_model/validations/inclusion.rb#10
  def validate_each(record, attribute, value); end
end

class ActiveModel::Validations::LengthValidator < ::ActiveModel::EachValidator
  # source://activemodel/7.0.4/lib/active_model/validations/length.rb#11
  def initialize(options); end

  # source://activemodel/7.0.4/lib/active_model/validations/length.rb#24
  def check_validity!; end

  # source://activemodel/7.0.4/lib/active_model/validations/length.rb#40
  def validate_each(record, attribute, value); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/length.rb#67
  def skip_nil_check?(key); end
end

# source://activemodel/7.0.4/lib/active_model/validations/length.rb#7
ActiveModel::Validations::LengthValidator::CHECKS = T.let(T.unsafe(nil), Hash)

# source://activemodel/7.0.4/lib/active_model/validations/length.rb#6
ActiveModel::Validations::LengthValidator::MESSAGES = T.let(T.unsafe(nil), Hash)

# source://activemodel/7.0.4/lib/active_model/validations/length.rb#9
ActiveModel::Validations::LengthValidator::RESERVED_OPTIONS = T.let(T.unsafe(nil), Array)

class ActiveModel::Validations::NumericalityValidator < ::ActiveModel::EachValidator
  include ::ActiveModel::Validations::Comparability

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#20
  def check_validity!; end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#34
  def validate_each(record, attr_name, value, precision: T.unsafe(nil), scale: T.unsafe(nil)); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#112
  def allow_only_integer?(record); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#106
  def filtered_options(value); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#102
  def is_hexadecimal_literal?(raw_value); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#98
  def is_integer?(raw_value); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#92
  def is_number?(raw_value, precision, scale); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#66
  def option_as_number(record, option_value, precision, scale); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#70
  def parse_as_number(raw_value, precision, scale); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#84
  def parse_float(raw_value, precision, scale); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#123
  def prepare_value_for_validation(value, record, attr_name); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#144
  def record_attribute_changed_in_place?(record, attr_name); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#88
  def round(raw_value, scale); end
end

# source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#18
ActiveModel::Validations::NumericalityValidator::HEXADECIMAL_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#16
ActiveModel::Validations::NumericalityValidator::INTEGER_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#12
ActiveModel::Validations::NumericalityValidator::NUMBER_CHECKS = T.let(T.unsafe(nil), Hash)

# source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#11
ActiveModel::Validations::NumericalityValidator::RANGE_CHECKS = T.let(T.unsafe(nil), Hash)

# source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#14
ActiveModel::Validations::NumericalityValidator::RESERVED_OPTIONS = T.let(T.unsafe(nil), Array)

class ActiveModel::Validations::PresenceValidator < ::ActiveModel::EachValidator
  # source://activemodel/7.0.4/lib/active_model/validations/presence.rb#6
  def validate_each(record, attr_name, value); end
end

class ActiveModel::Validations::WithValidator < ::ActiveModel::EachValidator
  # source://activemodel/7.0.4/lib/active_model/validations/with.rb#8
  def validate_each(record, attr, val); end
end

class ActiveModel::Validator
  # source://activemodel/7.0.4/lib/active_model/validator.rb#108
  def initialize(options = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/validator.rb#116
  def kind; end

  # source://activemodel/7.0.4/lib/active_model/validator.rb#97
  def options; end

  # source://activemodel/7.0.4/lib/active_model/validator.rb#122
  def validate(record); end

  class << self
    # source://activemodel/7.0.4/lib/active_model/validator.rb#103
    def kind; end
  end
end

class ActiveRecord::ActiveRecordError < ::StandardError; end

module ActiveRecord::Aggregations::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/aggregations.rb#222
  def composed_of(part_id, options = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/aggregations.rb#245
  def reader_method(name, class_name, mapping, allow_nil, constructor); end

  # source://activerecord/7.0.4/lib/active_record/aggregations.rb#258
  def writer_method(name, class_name, mapping, allow_nil, converter); end
end

module ActiveRecord::Associations
  extend ::ActiveSupport::Autoload
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Associations::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/associations.rb#297
  def association(name); end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#311
  def association_cached?(name); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations.rb#327
  def association_instance_get(name); end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#332
  def association_instance_set(name, association); end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#321
  def init_internals; end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#315
  def initialize_dup(*_arg0); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/associations.rb#290
    def eager_load!; end
  end
end

class ActiveRecord::Associations::AliasTracker
  # source://activerecord/7.0.4/lib/active_record/associations/alias_tracker.rb#49
  def initialize(connection, aliases); end

  # source://activerecord/7.0.4/lib/active_record/associations/alias_tracker.rb#54
  def aliased_table_for(arel_table, table_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/alias_tracker.rb#76
  def aliases; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/alias_tracker.rb#79
  def truncate(name); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/associations/alias_tracker.rb#9
    def create(connection, initial_table, joins, aliases = T.unsafe(nil)); end

    # source://activerecord/7.0.4/lib/active_record/associations/alias_tracker.rb#26
    def initial_count_for(connection, name, table_joins); end
  end
end

class ActiveRecord::Associations::Association
  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#40
  def initialize(owner, reflection); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#203
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#207
  def create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#36
  def disable_joins; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#152
  def extensions; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#193
  def initialize_attributes(record, except_from_scope_attributes = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#136
  def inversed_from(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#140
  def inversed_from_queries(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#148
  def klass; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#172
  def load_target; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#77
  def loaded!; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#72
  def loaded?; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#182
  def marshal_dump; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#187
  def marshal_load(data); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#38
  def options(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#36
  def owner; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#36
  def reflection; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#63
  def reload(force = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#130
  def remove_inverse_instance(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#51
  def reset; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#57
  def reset_negative_cache; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#110
  def reset_scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#98
  def scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#115
  def set_inverse_instance(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#122
  def set_inverse_instance_from_queries(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#88
  def stale_target?; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#36
  def target; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#93
  def target=(target); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#254
  def association_scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#336
  def build_record(attributes); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#351
  def enqueue_destroy_association(options); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#214
  def ensure_klass_exists!; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#218
  def find_target; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#274
  def find_target?; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#324
  def foreign_key_for?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#286
  def foreign_key_present?; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#359
  def inversable?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#304
  def inverse_association_for(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#313
  def inverse_reflection_for(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#319
  def invertible_for?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#364
  def matches_foreign_key?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#293
  def raise_on_type_mismatch!(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#270
  def scope_for_create; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#344
  def skip_statement_cache?(scope); end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#333
  def stale_state; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#266
  def target_scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/association.rb#242
  def violates_strict_loading?; end
end

class ActiveRecord::Associations::AssociationScope
  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#15
  def initialize(value_transformation); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#21
  def scope(association); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#117
  def add_constraints(scope, owner, chain); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#154
  def apply_scope(scope, table, key, value); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#162
  def eval_scope(reflection, scope, owner); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#105
  def get_chain(reflection, association, tracker); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#54
  def join(table, constraint); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#58
  def last_chain_scope(scope, reflection, owner); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#78
  def next_chain_scope(scope, reflection, next_reflection); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#74
  def transform_value(value); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#52
  def value_transformation; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#10
    def create(&block); end

    # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#34
    def get_bind_values(owner, chain); end

    # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#6
    def scope(association); end
  end
end

# source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#19
ActiveRecord::Associations::AssociationScope::INSTANCE = T.let(T.unsafe(nil), ActiveRecord::Associations::AssociationScope)

class ActiveRecord::Associations::AssociationScope::ReflectionProxy < ::SimpleDelegator
  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#97
  def initialize(reflection, aliased_table); end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#95
  def aliased_table; end

  # source://activerecord/7.0.4/lib/active_record/associations/association_scope.rb#102
  def all_includes; end
end

class ActiveRecord::Associations::BelongsToAssociation < ::ActiveRecord::Associations::SingularAssociation
  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#48
  def decrement_counters; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#56
  def decrement_counters_before_last_save; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#35
  def default(&block); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#7
  def handle_dependency; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#52
  def increment_counters; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#30
  def inversed_from(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#39
  def reset; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#79
  def saved_change_to_target?; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#71
  def target_changed?; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#75
  def target_previously_changed?; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#44
  def updated?; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#113
  def find_target?; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#133
  def foreign_key_present?; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#137
  def invertible_for?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#129
  def primary_key(klass); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#84
  def replace(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#121
  def replace_keys(record, force: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#117
  def require_counter_update?; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#142
  def stale_state; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#98
  def update_counters(by); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_association.rb#108
  def update_counters_via_scope(klass, foreign_key, by); end
end

class ActiveRecord::Associations::BelongsToPolymorphicAssociation < ::ActiveRecord::Associations::BelongsToAssociation
  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_polymorphic_association.rb#7
  def klass; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_polymorphic_association.rb#20
  def saved_change_to_target?; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_polymorphic_association.rb#12
  def target_changed?; end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_polymorphic_association.rb#16
  def target_previously_changed?; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_polymorphic_association.rb#35
  def inverse_reflection_for(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_polymorphic_association.rb#39
  def raise_on_type_mismatch!(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_polymorphic_association.rb#25
  def replace_keys(record, force: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/belongs_to_polymorphic_association.rb#43
  def stale_state; end
end

module ActiveRecord::Associations::Builder; end

class ActiveRecord::Associations::Builder::Association
  class << self
    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#25
    def build(model, name, scope, options, &block); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#40
    def create_reflection(model, name, scope, options, &block); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#17
    def extensions; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#17
    def extensions=(_arg0); end

    private

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#144
    def add_after_commit_jobs_callback(model, dependent); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#139
    def add_destroy_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#53
    def build_scope(scope); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#129
    def check_dependent_options(dependent, model); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#94
    def define_accessors(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#76
    def define_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#121
    def define_change_tracking_methods(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#73
    def define_extensions(model, name); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#101
    def define_readers(mixin, name); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#117
    def define_validations(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#109
    def define_writers(mixin, name); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#61
    def macro; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#125
    def valid_dependent_options; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#65
    def valid_options(options); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#69
    def validate_options(options); end
  end
end

# source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#21
ActiveRecord::Associations::Builder::Association::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Associations::Builder::BelongsTo < ::ActiveRecord::Associations::Builder::SingularAssociation
  class << self
    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#43
    def touch_record(o, changes, foreign_key, name, touch, touch_method); end

    private

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#27
    def add_counter_cache_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#102
    def add_default_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#108
    def add_destroy_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#78
    def add_touch_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#20
    def define_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#130
    def define_change_tracking_methods(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#112
    def define_validations(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#5
    def macro; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#16
    def valid_dependent_options; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#9
    def valid_options(options); end
  end
end

class ActiveRecord::Associations::Builder::CollectionAssociation < ::ActiveRecord::Associations::Builder::Association
  class << self
    # source://activerecord/7.0.4/lib/active_record/associations/builder/collection_association.rb#13
    def define_callbacks(model, reflection); end

    private

    # source://activerecord/7.0.4/lib/active_record/associations/builder/collection_association.rb#30
    def define_callback(model, callback_name, name, options); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/collection_association.rb#22
    def define_extensions(model, name, &block); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/collection_association.rb#58
    def define_readers(mixin, name); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/collection_association.rb#68
    def define_writers(mixin, name); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/collection_association.rb#9
    def valid_options(options); end
  end
end

# source://activerecord/7.0.4/lib/active_record/associations/builder/collection_association.rb#7
ActiveRecord::Associations::Builder::CollectionAssociation::CALLBACKS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Associations::Builder::HasAndBelongsToMany
  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#7
  def initialize(association_name, lhs_model, options); end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#5
  def association_name; end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#5
  def lhs_model; end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#63
  def middle_reflection(join_model); end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#5
  def options; end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#13
  def through_model; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#96
  def belongs_to_options(options); end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#75
  def middle_options(join_model); end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/has_and_belongs_to_many.rb#84
  def table_name; end
end

class ActiveRecord::Associations::Builder::HasMany < ::ActiveRecord::Associations::Builder::CollectionAssociation
  class << self
    private

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_many.rb#5
    def macro; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_many.rb#18
    def valid_dependent_options; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_many.rb#9
    def valid_options(options); end
  end
end

class ActiveRecord::Associations::Builder::HasOne < ::ActiveRecord::Associations::Builder::SingularAssociation
  class << self
    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_one.rb#38
    def touch_record(record, name, touch); end

    private

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_one.rb#27
    def add_destroy_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_one.rb#47
    def add_touch_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_one.rb#22
    def define_callbacks(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_one.rb#31
    def define_validations(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_one.rb#5
    def macro; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_one.rb#18
    def valid_dependent_options; end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/has_one.rb#9
    def valid_options(options); end
  end
end

class ActiveRecord::Associations::Builder::SingularAssociation < ::ActiveRecord::Associations::Builder::Association
  class << self
    private

    # source://activerecord/7.0.4/lib/active_record/associations/builder/singular_association.rb#11
    def define_accessors(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/singular_association.rb#26
    def define_constructors(mixin, name); end

    # source://activerecord/7.0.4/lib/active_record/associations/builder/singular_association.rb#7
    def valid_options(options); end
  end
end

module ActiveRecord::Associations::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/associations.rb#1790
  def belongs_to(name, scope = T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#1962
  def has_and_belongs_to_many(name, scope = T.unsafe(nil), **options, &extension); end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#1466
  def has_many(name, scope = T.unsafe(nil), **options, &extension); end

  # source://activerecord/7.0.4/lib/active_record/associations.rb#1630
  def has_one(name, scope = T.unsafe(nil), **options); end
end

class ActiveRecord::Associations::CollectionAssociation < ::ActiveRecord::Associations::Association
  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#271
  def add_to_target(record, skip_callbacks: T.unsafe(nil), replace: T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#109
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#119
  def concat(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#178
  def delete(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#142
  def delete_all(dependent = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#187
  def destroy(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#164
  def destroy_all; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#224
  def empty?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#86
  def find(*args); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#298
  def find_from_target?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#49
  def ids_reader; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#60
  def ids_writer(ids); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#250
  def include?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#262
  def load_target; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#294
  def null_scope?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#32
  def reader; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#234
  def replace(other_array); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#79
  def reset; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#288
  def scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#201
  def size; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#275
  def target=(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#44
  def writer(records); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#340
  def _create_record(attributes, raise = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#478
  def callback(method, record); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#484
  def callbacks_for(callback_name); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#424
  def concat_records(records, raise = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#371
  def delete_or_destroy(records, method); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#400
  def delete_records(records, method); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#507
  def find_by_scan(*args); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#493
  def include_in_memory?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#363
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#321
  def merge_target_lists(persisted, memory); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#385
  def remove_records(existing_records, records, method); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#416
  def replace_common_records_in_memory(new_target, original_target); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#443
  def replace_on_target(record, skip_callbacks, replace:, inversing: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#404
  def replace_records(new_target, original_target); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_association.rb#307
  def transaction(&block); end
end

class ActiveRecord::Associations::CollectionProxy < ::ActiveRecord::Relation
  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#30
  def initialize(klass, association, **_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1031
  def <<(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#962
  def ==(other); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def _select!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def and(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def and!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def annotate(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def annotate!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def annotate_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def annotate_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1031
  def append(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def arel(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#316
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#722
  def calculate(operation, column_name); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1048
  def clear; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1031
  def concat(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def construct_join_dependency(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#347
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#363
  def create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def create_with(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def create_with!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def create_with_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def create_with_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#618
  def delete(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#472
  def delete_all(dependent = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#690
  def destroy(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#499
  def destroy_all; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def distinct(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def distinct!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def distinct_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def distinct_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def eager_load(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def eager_load!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def eager_load_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def eager_load_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#829
  def empty?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def except(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def excluding(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def excluding!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extending(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extending!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extending_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extending_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extensions(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def extract_associated(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#136
  def find(*args); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def from(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def from!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def from_clause(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def from_clause=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def group(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def group!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def group_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def group_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def having(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def having!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def having_clause(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def having_clause=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def in_order_of(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#925
  def include?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def includes(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def includes!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def includes_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def includes_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def insert(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def insert!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def insert_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def insert_all!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1100
  def inspect; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def invert_where(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def invert_where!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def joins!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def joins_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def joins_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#257
  def last(limit = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def left_joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def left_outer_joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def left_outer_joins!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def left_outer_joins_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def left_outer_joins_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def limit(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def limit!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def limit_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def limit_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def load_async(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#42
  def load_target; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#51
  def loaded; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#51
  def loaded?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def lock(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def lock!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def lock_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def lock_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def merge(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def merge!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#316
  def new(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def none(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def none!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def offset(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def offset!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def offset_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def offset_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def only(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def optimizer_hints(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def optimizer_hints!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def optimizer_hints_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def optimizer_hints_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def or(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def or!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def order(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def order!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def order_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def order_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#726
  def pluck(*column_names); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def preload(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def preload!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def preload_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def preload_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1038
  def prepend(*args); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#929
  def proxy_association; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1031
  def push(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def readonly(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def readonly!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def readonly_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def readonly_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1006
  def records; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def references(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def references!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def references_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def references_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1067
  def reload; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reorder(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reorder!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reordering_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reordering_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#389
  def replace(other_array); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reselect(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reselect!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1088
  def reset; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1094
  def reset_scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reverse_order(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reverse_order!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reverse_order_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def reverse_order_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def rewhere(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#934
  def scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def scoping(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def select_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def select_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#780
  def size; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def skip_preloading!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def skip_query_cache!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def skip_query_cache_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def skip_query_cache_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def spawn(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def strict_loading(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def strict_loading!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def strict_loading_value(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def strict_loading_value=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def structurally_compatible?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#287
  def take(limit = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#38
  def target; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def uniq!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def unscope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def unscope!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def unscope_values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def unscope_values=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def upsert(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def upsert_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def values(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def where(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def where!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def where_clause(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def where_clause=(arg); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1114
  def without(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1135
  def exec_queries; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1131
  def find_from_target?; end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1122
  def find_nth_from_last(index); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1117
  def find_nth_with_limit(index, limit); end

  # source://activerecord/7.0.4/lib/active_record/associations/collection_proxy.rb#1127
  def null_scope?; end
end

class ActiveRecord::Associations::DisableJoinsAssociationScope < ::ActiveRecord::Associations::AssociationScope
  # source://activerecord/7.0.4/lib/active_record/associations/disable_joins_association_scope.rb#6
  def scope(association); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/disable_joins_association_scope.rb#33
  def add_constraints(reflection, key, join_ids, owner, ordered); end

  # source://activerecord/7.0.4/lib/active_record/associations/disable_joins_association_scope.rb#18
  def last_scope_chain(reverse_chain, owner); end
end

module ActiveRecord::Associations::ForeignAssociation
  # source://activerecord/7.0.4/lib/active_record/associations/foreign_association.rb#5
  def foreign_key_present?; end

  # source://activerecord/7.0.4/lib/active_record/associations/foreign_association.rb#13
  def nullified_owner_attributes; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/foreign_association.rb#22
  def set_owner_attributes(record); end
end

class ActiveRecord::Associations::HasManyAssociation < ::ActiveRecord::Associations::CollectionAssociation
  include ::ActiveRecord::Associations::ForeignAssociation

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#13
  def handle_dependency; end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#56
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#136
  def _create_record(attributes, *_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#132
  def concat_records(records, *_arg1); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#75
  def count_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#107
  def delete_count(method, scope); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#115
  def delete_or_nullify_all_records(method); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#122
  def delete_records(records, method); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#151
  def difference(a, b); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#155
  def intersection(a, b); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#93
  def update_counter(difference, reflection = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#144
  def update_counter_if_success(saved_successfully, difference); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_association.rb#99
  def update_counter_in_memory(difference, reflection = T.unsafe(nil)); end
end

class ActiveRecord::Associations::HasManyThroughAssociation < ::ActiveRecord::Associations::HasManyAssociation
  include ::ActiveRecord::Associations::ThroughAssociation

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#9
  def initialize(owner, reflection); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#14
  def concat(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#24
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#86
  def build_record(attributes); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#56
  def build_through_record(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#37
  def concat_records(records); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#126
  def delete_or_nullify_all_records(method); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#130
  def delete_records(records, method); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#199
  def delete_through_records(records); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#167
  def difference(a, b); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#183
  def distribution(array); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#215
  def find_target; end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#173
  def intersection(a, b); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#222
  def invertible_for?(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#179
  def mark_occurrence(distribution, record); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#106
  def remove_records(existing_records, records, method); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#77
  def save_through_record(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#111
  def target_reflection_has_associated_record?; end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#189
  def through_records_for(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#68
  def through_scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#70
  def through_scope_attributes; end

  # source://activerecord/7.0.4/lib/active_record/associations/has_many_through_association.rb#115
  def update_through_counter?(method); end
end

class ActiveRecord::Associations::HasOneAssociation < ::ActiveRecord::Associations::SingularAssociation
  include ::ActiveRecord::Associations::ForeignAssociation

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_association.rb#26
  def delete(method = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_association.rb#9
  def handle_dependency; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_association.rb#126
  def _create_record(attributes, raise_error = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_association.rb#114
  def nullify_owner_attributes(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_association.rb#90
  def remove_target!(method); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_association.rb#54
  def replace(record, save = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_association.rb#86
  def set_new_record(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_association.rb#118
  def transaction_if(value, &block); end
end

class ActiveRecord::Associations::HasOneThroughAssociation < ::ActiveRecord::Associations::HasOneAssociation
  include ::ActiveRecord::Associations::ThroughAssociation

  private

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_through_association.rb#15
  def create_through_record(record, save); end

  # source://activerecord/7.0.4/lib/active_record/associations/has_one_through_association.rb#10
  def replace(record, save = T.unsafe(nil)); end
end

class ActiveRecord::Associations::JoinDependency
  extend ::ActiveSupport::Autoload

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#71
  def initialize(base, table, associations, join_type); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#153
  def apply_column_aliases(relation); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#77
  def base_klass; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#158
  def each(&block); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#105
  def instantiate(result_set, strict_loading_value, &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#85
  def join_constraints(joins_to_add, alias_tracker, references); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#81
  def reflections; end

  protected

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#163
  def join_root; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#163
  def join_type; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#166
  def alias_tracker; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#168
  def aliases; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#228
  def build(associations, base_klass); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#242
  def construct(ar_parent, parent, row, seen, model_cache, strict_loading_value); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#278
  def construct_model(record, node, row, model_cache, id, strict_loading_value); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#223
  def find_reflection(klass, name); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#166
  def join_root_alias; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#190
  def make_constraints(parent, child, join_type); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#184
  def make_join_constraints(join_root, join_type); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#214
  def walk(left, right, join_type); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#47
    def make_tree(associations); end

    # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#53
    def walk_tree(associations, hash); end
  end
end

class ActiveRecord::Associations::JoinDependency::Aliases
  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#14
  def initialize(tables); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#34
  def column_alias(node, column); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#30
  def column_aliases(node); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#26
  def columns; end
end

class ActiveRecord::Associations::JoinDependency::Aliases::Column < ::Struct
  def alias; end
  def alias=(_); end
  def name; end
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::Associations::JoinDependency::Aliases::Table < ::Struct
  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency.rb#39
  def column_aliases; end

  def columns; end
  def columns=(_); end
  def node; end
  def node=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::Associations::JoinDependency::JoinAssociation < ::ActiveRecord::Associations::JoinDependency::JoinPart
  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#13
  def initialize(reflection, children); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#24
  def join_constraints(foreign_table, foreign_klass, join_type, alias_tracker); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#19
  def match?(other); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#78
  def readonly?; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#10
  def reflection; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#84
  def strict_loading?; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#11
  def table; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#11
  def table=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#10
  def tables; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_association.rb#91
  def append_constraints(join, constraints); end
end

class ActiveRecord::Associations::JoinDependency::JoinBase < ::ActiveRecord::Associations::JoinDependency::JoinPart
  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_base.rb#11
  def initialize(base_klass, table, children); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_base.rb#16
  def match?(other); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_base.rb#9
  def table; end
end

class ActiveRecord::Associations::JoinDependency::JoinPart
  include ::Enumerable

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#22
  def initialize(base_klass, children); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#20
  def attribute_types(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#18
  def base_klass; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#18
  def children; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#20
  def column_names(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#31
  def each(&block); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#36
  def each_children(&block); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#48
  def extract_record(row, column_names_with_alias); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#65
  def instantiate(row, aliases, column_types = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#27
  def match?(other); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#20
  def primary_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#44
  def table; end

  # source://activerecord/7.0.4/lib/active_record/associations/join_dependency/join_part.rb#20
  def table_name(*_arg0, **_arg1, &_arg2); end
end

class ActiveRecord::Associations::Preloader
  extend ::ActiveSupport::Autoload

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#96
  def initialize(records:, associations:, scope: T.unsafe(nil), available_records: T.unsafe(nil), associate_by_default: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#54
  def associate_by_default; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#54
  def associations; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#123
  def branches; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#117
  def call; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#113
  def empty?; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#127
  def loaders; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#54
  def records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader.rb#54
  def scope; end
end

class ActiveRecord::Associations::Preloader::Association
  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#87
  def initialize(klass, owners, reflection, preload_scope, reflection_scope, associate_by_default); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#202
  def associate_records_from_unscoped(unscoped_records); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#144
  def association_key_name; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#102
  def future_classes; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#85
  def klass; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#180
  def load_records(raw_records = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#159
  def loaded?(owner); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#148
  def loader_query; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#152
  def owners_by_key; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#137
  def preloaded_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#131
  def records_by_owner; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#118
  def run; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#114
  def run?; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#110
  def runnable_loaders; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#167
  def scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#171
  def set_inverse(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#98
  def table_name; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#163
  def target_for(owner); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#229
  def associate_records_to_owner(owner, records); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#257
  def association_key_type; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#269
  def build_scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#285
  def cascade_strict_loading(scope); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#249
  def convert_key(key); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#241
  def key_conversion_required?; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#222
  def model; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#225
  def owner_key_name; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#261
  def owner_key_type; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#222
  def owners; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#222
  def preload_scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#222
  def reflection; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#265
  def reflection_scope; end
end

class ActiveRecord::Associations::Preloader::Association::LoaderQuery
  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#10
  def initialize(scope, association_key_name); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#8
  def association_key_name; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#15
  def eql?(other); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#21
  def hash; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#38
  def load_records_for_keys(keys, &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#29
  def load_records_in_batch(loaders); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#25
  def records_for(loaders); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#8
  def scope; end
end

class ActiveRecord::Associations::Preloader::Association::LoaderRecords
  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#44
  def initialize(loaders, loader_query); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#53
  def records; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#80
  def already_loaded_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#58
  def already_loaded_records_by_key; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#58
  def keys_to_load; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#74
  def load_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#58
  def loader_query; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#58
  def loaders; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/association.rb#60
  def populate_keys_to_load_and_already_loaded_records; end
end

class ActiveRecord::Associations::Preloader::Batch
  # source://activerecord/7.0.4/lib/active_record/associations/preloader/batch.rb#7
  def initialize(preloaders, available_records:); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/batch.rb#12
  def call; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/batch.rb#40
  def group_and_load_similar(loaders); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/batch.rb#38
  def loaders; end
end

class ActiveRecord::Associations::Preloader::Branch
  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#11
  def initialize(association:, children:, parent:, associate_by_default:, scope:); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#8
  def associate_by_default; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#7
  def association; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#7
  def children; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#66
  def done?; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#21
  def future_classes; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#74
  def grouped_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#25
  def immediate_future_classes; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#47
  def likely_reflections; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#112
  def loaders; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#7
  def parent; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#102
  def polymorphic?; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#62
  def preloaded_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#9
  def preloaded_records=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#85
  def preloaders_for_reflection(reflection, reflection_records); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#54
  def root?; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#70
  def runnable_loaders; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#8
  def scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#58
  def source_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#37
  def target_classes; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#120
  def build_children(children); end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/branch.rb#137
  def preloader_for(reflection); end
end

class ActiveRecord::Associations::Preloader::ThroughAssociation < ::ActiveRecord::Associations::Preloader::Association
  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#51
  def future_classes; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#7
  def preloaded_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#11
  def records_by_owner; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#41
  def runnable_loaders; end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#67
  def data_available?; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#76
  def middle_records; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#100
  def preload_index; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#72
  def source_preloaders; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#92
  def source_records_by_owner; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#88
  def source_reflection; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#80
  def through_preloaders; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#96
  def through_records_by_owner; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#84
  def through_reflection; end

  # source://activerecord/7.0.4/lib/active_record/associations/preloader/through_association.rb#106
  def through_scope; end
end

class ActiveRecord::Associations::SingularAssociation < ::ActiveRecord::Associations::Association
  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#22
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#30
  def force_reload_reader; end

  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#7
  def reader; end

  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#18
  def writer(record); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#56
  def _create_record(attributes, raise_error = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#40
  def find_target; end

  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#48
  def replace(record); end

  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#36
  def scope_for_create; end

  # source://activerecord/7.0.4/lib/active_record/associations/singular_association.rb#52
  def set_new_record(record); end
end

module ActiveRecord::Associations::ThroughAssociation
  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#7
  def source_reflection(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#109
  def build_record(attributes); end

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#53
  def construct_join_attributes(*records); end

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#89
  def ensure_mutable; end

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#99
  def ensure_not_nested; end

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#85
  def foreign_key_present?; end

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#79
  def stale_state; end

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#30
  def target_scope; end

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#22
  def through_association; end

  # source://activerecord/7.0.4/lib/active_record/associations/through_association.rb#10
  def through_reflection; end
end

module ActiveRecord::AttributeAssignment
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_assignment.rb#10
  def _assign_attributes(attributes); end

  # source://activerecord/7.0.4/lib/active_record/attribute_assignment.rb#40
  def assign_multiparameter_attributes(pairs); end

  # source://activerecord/7.0.4/lib/active_record/attribute_assignment.rb#30
  def assign_nested_parameter_attributes(pairs); end

  # source://activerecord/7.0.4/lib/active_record/attribute_assignment.rb#46
  def execute_callstack_for_multiparameter_attributes(callstack); end

  # source://activerecord/7.0.4/lib/active_record/attribute_assignment.rb#64
  def extract_callstack_for_multiparameter_attributes(pairs); end

  # source://activerecord/7.0.4/lib/active_record/attribute_assignment.rb#82
  def find_parameter_position(multiparameter_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_assignment.rb#78
  def type_cast_attribute_value(multiparameter_name, value); end
end

module ActiveRecord::AttributeMethods
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Autoload
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeMethods
  include ::ActiveRecord::AttributeMethods::Read
  include ::ActiveRecord::AttributeMethods::Write
  include ::ActiveRecord::AttributeMethods::BeforeTypeCast
  include ::ActiveRecord::AttributeMethods::Query
  include ::ActiveRecord::AttributeMethods::PrimaryKey
  include ::ActiveRecord::AttributeMethods::TimeZoneConversion
  include ::ActiveModel::Dirty
  include ::ActiveRecord::AttributeMethods::Dirty
  include ::ActiveRecord::AttributeMethods::Serialization

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Read::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Write::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Dirty::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Serialization::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#329
  def [](attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#343
  def []=(attr_name, value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#240
  def _has_attribute?(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#376
  def accessed_fields; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#283
  def attribute_for_inspect(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#252
  def attribute_names; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#305
  def attribute_present?(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#264
  def attributes; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#234
  def has_attribute?(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#207
  def respond_to?(name, include_private = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#381
  def attribute_method?(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#401
  def attributes_for_create(attribute_names); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#391
  def attributes_for_update(attribute_names); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#386
  def attributes_with_values(attribute_names); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#409
  def format_for_inspect(name, value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#425
  def pk_attribute?(name); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#31
    def dangerous_attribute_methods; end
  end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(value); end
    def attribute_method_matchers?; end
    def partial_inserts; end
    def partial_inserts=(value); end
    def partial_inserts?; end
    def partial_updates; end
    def partial_updates=(value); end
    def partial_updates?; end
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes=(value); end
    def skip_time_zone_conversion_for_attributes?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes=(value); end
    def time_zone_aware_attributes?; end
    def time_zone_aware_types; end
    def time_zone_aware_types=(value); end
    def time_zone_aware_types?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers?; end
    def partial_inserts; end
    def partial_inserts?; end
    def partial_updates; end
    def partial_updates?; end
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes?; end
    def time_zone_aware_types; end
    def time_zone_aware_types?; end
  end
end

module ActiveRecord::AttributeMethods::BeforeTypeCast
  extend ::ActiveSupport::Concern

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/before_type_cast.rb#65
  def attributes_before_type_cast; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/before_type_cast.rb#70
  def attributes_for_database; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/before_type_cast.rb#48
  def read_attribute_before_type_cast(attr_name); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/before_type_cast.rb#76
  def attribute_before_type_cast(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/before_type_cast.rb#84
  def attribute_came_from_user?(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/before_type_cast.rb#80
  def attribute_for_database(attr_name); end
end

module ActiveRecord::AttributeMethods::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#186
  def _has_attribute?(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#150
  def attribute_method?(attribute); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#162
  def attribute_names; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#109
  def dangerous_attribute_method?(name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#127
  def dangerous_class_method?(method_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#58
  def define_attribute_methods; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#180
  def has_attribute?(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#42
  def inherited(child_class); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#47
  def initialize_generated_modules; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#91
  def instance_method_already_implemented?(method_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#113
  def method_defined_within?(name, klass, superklass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#70
  def undefine_attribute_methods; end
end

module ActiveRecord::AttributeMethods::Dirty
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeMethods
  include ::ActiveModel::Dirty

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Dirty::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#100
  def attribute_before_last_save(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#142
  def attribute_change_to_be_saved(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#154
  def attribute_in_database(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#181
  def attributes_in_database; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#171
  def changed_attribute_names_to_save; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#165
  def changes_to_save; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#159
  def has_changes_to_save?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#57
  def reload(*_arg0); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#90
  def saved_change_to_attribute(attr_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#78
  def saved_change_to_attribute?(attr_name, **options); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#110
  def saved_changes; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#105
  def saved_changes?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#128
  def will_save_change_to_attribute?(attr_name, **options); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#221
  def _create_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#186
  def _touch_row(attribute_names, time); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#215
  def _update_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#231
  def attribute_names_for_partial_inserts; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#227
  def attribute_names_for_partial_updates; end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(value); end
    def attribute_method_matchers?; end
    def partial_inserts; end
    def partial_inserts=(value); end
    def partial_inserts?; end
    def partial_updates; end
    def partial_updates=(value); end
    def partial_updates?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers?; end
    def partial_inserts; end
    def partial_inserts?; end
    def partial_updates; end
    def partial_updates?; end
  end
end

module ActiveRecord::AttributeMethods::Dirty::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#31
  def partial_writes; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#47
  def partial_writes=(value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#39
  def partial_writes?; end
end

class ActiveRecord::AttributeMethods::GeneratedAttributeMethods < ::Module
  include ::Mutex_m

  # source://mutex_m/0.1.1/mutex_m.rb#93
  def lock; end

  # source://mutex_m/0.1.1/mutex_m.rb#83
  def locked?; end

  # source://mutex_m/0.1.1/mutex_m.rb#78
  def synchronize(&block); end

  # source://mutex_m/0.1.1/mutex_m.rb#88
  def try_lock; end

  # source://mutex_m/0.1.1/mutex_m.rb#98
  def unlock; end
end

module ActiveRecord::AttributeMethods::PrimaryKey
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#18
  def id; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#23
  def id=(value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#28
  def id?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#33
  def id_before_type_cast; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#47
  def id_for_database; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#43
  def id_in_database; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#38
  def id_was; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#12
  def to_key; end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#52
  def attribute_method?(attr_name); end
end

module ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#63
  def dangerous_attribute_method?(method_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#89
  def get_primary_key(base_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#59
  def instance_method_already_implemented?(method_name); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#70
  def primary_key; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#119
  def primary_key=(value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#77
  def quoted_primary_key; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#81
  def reset_primary_key; end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#126
  def suppress_composite_primary_key(pk); end
end

# source://activerecord/7.0.4/lib/active_record/attribute_methods/primary_key.rb#57
ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods::ID_ATTRIBUTE_METHODS = T.let(T.unsafe(nil), Set)

module ActiveRecord::AttributeMethods::Query
  extend ::ActiveSupport::Concern

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/query.rb#12
  def query_attribute(attr_name); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/query.rb#12
  def attribute?(attr_name); end
end

# source://activerecord/7.0.4/lib/active_record/attribute_methods.rb#24
ActiveRecord::AttributeMethods::RESTRICTED_CLASS_METHODS = T.let(T.unsafe(nil), Array)

module ActiveRecord::AttributeMethods::Read
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Read::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/read.rb#37
  def _read_attribute(attr_name, &block); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/read.rb#27
  def read_attribute(attr_name, &block); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/read.rb#37
  def attribute(attr_name, &block); end
end

module ActiveRecord::AttributeMethods::Read::ClassMethods
  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/read.rb#10
  def define_method_attribute(name, owner:); end
end

module ActiveRecord::AttributeMethods::Serialization
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Serialization::ClassMethods
end

module ActiveRecord::AttributeMethods::Serialization::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/attribute_methods/serialization.rb#103
  def serialize(attr_name, class_name_or_coder = T.unsafe(nil), **options); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/serialization.rb#126
  def type_incompatible_with_serialize?(type, class_name); end
end

class ActiveRecord::AttributeMethods::Serialization::ColumnNotSerializableError < ::StandardError
  # source://activerecord/7.0.4/lib/active_record/attribute_methods/serialization.rb#9
  def initialize(name, type); end
end

module ActiveRecord::AttributeMethods::TimeZoneConversion
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods

  module GeneratedClassMethods
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes=(value); end
    def skip_time_zone_conversion_for_attributes?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes=(value); end
    def time_zone_aware_attributes?; end
    def time_zone_aware_types; end
    def time_zone_aware_types=(value); end
    def time_zone_aware_types?; end
  end

  module GeneratedInstanceMethods
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes?; end
    def time_zone_aware_types; end
    def time_zone_aware_types?; end
  end
end

module ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#76
  def define_attribute(name, cast_type, **_arg2); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#84
  def create_time_zone_conversion_attribute?(name, cast_type); end
end

class ActiveRecord::AttributeMethods::TimeZoneConversion::TimeZoneConverter
  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#17
  def cast(value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#13
  def deserialize(value); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#38
  def convert_time_to_time_zone(value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#56
  def map_avoiding_infinite_recursion(value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#52
  def set_time_zone_without_conversion(value); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#9
    def new(subtype); end
  end
end

module ActiveRecord::AttributeMethods::Write
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Write::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/write.rb#41
  def _write_attribute(attr_name, value); end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/write.rb#31
  def write_attribute(attr_name, value); end

  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/write.rb#41
  def attribute=(attr_name, value); end
end

module ActiveRecord::AttributeMethods::Write::ClassMethods
  private

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/write.rb#14
  def define_method_attribute=(name, owner:); end
end

module ActiveRecord::Attributes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Attributes::ClassMethods

  module GeneratedClassMethods
    def attributes_to_define_after_schema_loads; end
    def attributes_to_define_after_schema_loads=(value); end
    def attributes_to_define_after_schema_loads?; end
  end

  module GeneratedInstanceMethods; end
end

module ActiveRecord::Attributes::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/attributes.rb#208
  def attribute(name, cast_type = T.unsafe(nil), default: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/attributes.rb#253
  def define_attribute(name, cast_type, default: T.unsafe(nil), user_provided_default: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/attributes.rb#263
  def load_schema!; end

  private

  # source://activerecord/7.0.4/lib/active_record/attributes.rb#275
  def define_default_attribute(name, value, type, from_user:); end
end

module ActiveRecord::AutosaveAssociation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AutosaveAssociation::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#271
  def changed_for_autosave?; end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#265
  def destroyed_by_association; end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#258
  def destroyed_by_association=(reflection); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#245
  def mark_for_destruction; end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#252
  def marked_for_destruction?; end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#234
  def reload(options = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#508
  def _ensure_no_duplicate_errors; end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#464
  def _record_changed?(reflection, record, key); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#366
  def around_save_collection_association; end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#279
  def associated_records_to_validate_or_save(association, new_record, autosave); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#470
  def association_foreign_key_changed?(reflection, record, key); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#330
  def association_valid?(reflection, record, index = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#504
  def custom_validation_context?; end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#292
  def nested_records_changed_for_autosave?; end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#356
  def normalize_reflection_attribute(indexed_attribute, reflection, index, attribute); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#479
  def save_belongs_to_association(reflection); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#383
  def save_collection_association(reflection); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#437
  def save_has_one_association(reflection); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#319
  def validate_collection_association(reflection); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#310
  def validate_single_association(reflection); end
end

module ActiveRecord::AutosaveAssociation::AssociationBuilderExtension
  class << self
    # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#142
    def build(model, reflection); end

    # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#146
    def valid_options; end
  end
end

module ActiveRecord::AutosaveAssociation::ClassMethods
  private

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#187
  def add_autosave_association_callbacks(reflection); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#217
  def define_autosave_validation_callbacks(reflection); end

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#157
  def define_non_cyclic_method(name, &block); end
end

class ActiveRecord::Base
  include ::ActiveRecord::Core
  include ::ActiveRecord::Persistence
  include ::ActiveRecord::ReadonlyAttributes
  include ::ActiveRecord::ModelSchema
  include ::ActiveRecord::Inheritance
  include ::ActiveRecord::Scoping
  include ::ActiveRecord::Scoping::Default
  include ::ActiveRecord::Scoping::Named
  include ::ActiveRecord::Sanitization
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveRecord::AttributeAssignment
  include ::ActiveModel::Conversion
  include ::ActiveRecord::Integration
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveRecord::Validations
  include ::ActiveRecord::CounterCache
  include ::ActiveRecord::Attributes
  include ::ActiveRecord::Locking::Optimistic
  include ::ActiveRecord::Locking::Pessimistic
  include ::ActiveModel::AttributeMethods
  include ::ActiveRecord::AttributeMethods
  include ::ActiveRecord::Base::GeneratedAttributeMethods
  include ::ActiveRecord::Base::GeneratedAssociationMethods
  include ::ActiveRecord::AttributeMethods::Read
  include ::ActiveRecord::AttributeMethods::Write
  include ::ActiveRecord::AttributeMethods::BeforeTypeCast
  include ::ActiveRecord::AttributeMethods::Query
  include ::ActiveRecord::AttributeMethods::PrimaryKey
  include ::ActiveRecord::AttributeMethods::TimeZoneConversion
  include ::ActiveModel::Dirty
  include ::ActiveRecord::AttributeMethods::Dirty
  include ::ActiveRecord::AttributeMethods::Serialization
  include ::ActiveRecord::Callbacks
  include ::ActiveModel::Validations::Callbacks
  include ::ActiveRecord::Timestamp
  include ::ActiveRecord::Associations
  include ::ActiveModel::SecurePassword
  include ::ActiveRecord::AutosaveAssociation
  include ::ActiveRecord::NestedAttributes
  include ::ActiveRecord::Transactions
  include ::ActiveRecord::TouchLater
  include ::ActiveRecord::NoTouching
  include ::ActiveRecord::Reflection
  include ::ActiveModel::Serialization
  include ::ActiveModel::Serializers::JSON
  include ::ActiveRecord::Serialization
  include ::ActiveRecord::Store
  include ::ActiveRecord::SecureToken
  include ::ActiveRecord::SignedId
  include ::ActiveRecord::Suppressor
  include ::ActiveRecord::Encryption::EncryptableRecord
  extend ::ActiveModel::Naming
  extend ::ActiveSupport::Benchmarkable
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveRecord::ConnectionHandling
  extend ::ActiveRecord::QueryCache::ClassMethods
  extend ::ActiveRecord::Querying
  extend ::ActiveModel::Translation
  extend ::ActiveRecord::Translation
  extend ::ActiveRecord::DynamicMatchers
  extend ::ActiveRecord::DelegatedType
  extend ::ActiveRecord::Explain
  extend ::ActiveRecord::Enum
  extend ::ActiveRecord::Delegation::DelegateCache
  extend ::ActiveRecord::Aggregations::ClassMethods
  extend ::ActiveRecord::Core::ClassMethods
  extend ::ActiveRecord::Persistence::ClassMethods
  extend ::ActiveRecord::ReadonlyAttributes::ClassMethods
  extend ::ActiveRecord::ModelSchema::ClassMethods
  extend ::ActiveRecord::Inheritance::ClassMethods
  extend ::ActiveRecord::Scoping::ClassMethods
  extend ::ActiveRecord::Scoping::Default::ClassMethods
  extend ::ActiveRecord::Scoping::Named::ClassMethods
  extend ::ActiveRecord::Sanitization::ClassMethods
  extend ::ActiveModel::Conversion::ClassMethods
  extend ::ActiveRecord::Integration::ClassMethods
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveRecord::Validations::ClassMethods
  extend ::ActiveRecord::CounterCache::ClassMethods
  extend ::ActiveRecord::Attributes::ClassMethods
  extend ::ActiveRecord::Locking::Optimistic::ClassMethods
  extend ::ActiveModel::AttributeMethods::ClassMethods
  extend ::ActiveRecord::AttributeMethods::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Read::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Write::ClassMethods
  extend ::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  extend ::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Dirty::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Serialization::ClassMethods
  extend ::ActiveRecord::Callbacks::ClassMethods
  extend ::ActiveModel::Validations::Callbacks::ClassMethods
  extend ::ActiveRecord::Timestamp::ClassMethods
  extend ::ActiveRecord::Associations::ClassMethods
  extend ::ActiveModel::SecurePassword::ClassMethods
  extend ::ActiveRecord::AutosaveAssociation::ClassMethods
  extend ::ActiveRecord::NestedAttributes::ClassMethods
  extend ::ActiveRecord::Transactions::ClassMethods
  extend ::ActiveRecord::NoTouching::ClassMethods
  extend ::ActiveRecord::Reflection::ClassMethods
  extend ::ActiveRecord::Store::ClassMethods
  extend ::ActiveRecord::SecureToken::ClassMethods
  extend ::ActiveRecord::SignedId::ClassMethods
  extend ::ActiveRecord::Suppressor::ClassMethods
  extend ::ActiveRecord::Encryption::EncryptableRecord::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _before_commit_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _commit_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _create_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _destroy_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _find_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _initialize_callbacks; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
  def _reflections; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
  def _reflections?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _rollback_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_before_commit_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_commit_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_create_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_destroy_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_find_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_initialize_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_rollback_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_save_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_touch_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_update_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_validate_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_validation_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _save_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _touch_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _update_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _validate_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _validation_callbacks; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#52
  def _validators; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#52
  def _validators?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
  def aggregate_reflections; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
  def aggregate_reflections?; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
  def attribute_aliases; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
  def attribute_aliases?; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
  def attribute_method_matchers; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
  def attribute_method_matchers?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
  def automatic_scope_inversing; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
  def automatic_scope_inversing?; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#16
  def cache_timestamp_format; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#16
  def cache_timestamp_format?; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#24
  def cache_versioning; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#24
  def cache_versioning?; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#32
  def collection_cache_versioning; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#32
  def collection_cache_versioning?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#171
  def column_for_attribute(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#74
  def default_connection_handler; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#74
  def default_connection_handler?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#76
  def default_role; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#76
  def default_role?; end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#20
  def default_scope_override; end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#19
  def default_scopes; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#78
  def default_shard; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#78
  def default_shard?; end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#116
  def defined_enums; end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#116
  def defined_enums?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#26
  def destroy_association_async_job; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes?; end

  # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
  def include_root_in_json; end

  # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
  def include_root_in_json?; end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically; end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#20
  def logger; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#20
  def logger?; end

  # source://activemodel/7.0.4/lib/active_model/naming.rb#244
  def model_name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options; end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
  def partial_inserts; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
  def partial_inserts?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
  def partial_updates; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
  def partial_updates?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
  def pluralize_table_names; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
  def pluralize_table_names?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
  def primary_key_prefix_type; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
  def primary_key_prefix_type?; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
  def record_timestamps; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
  def record_timestamps=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
  def record_timestamps?; end

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret; end

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
  def skip_time_zone_conversion_for_attributes; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
  def skip_time_zone_conversion_for_attributes?; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
  def store_full_class_name; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
  def store_full_class_name?; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
  def store_full_sti_class; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
  def store_full_sti_class?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
  def table_name_prefix; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
  def table_name_prefix?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
  def table_name_suffix; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
  def table_name_suffix?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
  def time_zone_aware_attributes; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
  def time_zone_aware_attributes?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
  def time_zone_aware_types; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
  def time_zone_aware_types?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#171
  def type_for_attribute(*_arg0, **_arg1, &_arg2); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#48
  def validation_context; end

  private

  # source://activemodel/7.0.4/lib/active_model/validations.rb#48
  def validation_context=(_arg0); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly; end

    # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly=(value); end

    # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _before_commit_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _before_commit_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _commit_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _commit_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _create_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _create_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _destroy_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _destroy_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _find_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _find_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _initialize_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _initialize_callbacks=(value); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
    def _reflections=(value); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
    def _reflections?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _rollback_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _rollback_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _save_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _save_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _touch_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _touch_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _update_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _update_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _validate_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _validate_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _validation_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _validation_callbacks=(value); end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators=(value); end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators?; end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_create(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_destroy(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_find(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_initialize(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_save(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_touch(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_update(*args, **options, &block); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
    def aggregate_reflections; end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
    def aggregate_reflections=(value); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
    def aggregate_reflections?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#82
    def application_record_class?; end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#137
    def around_create(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#137
    def around_destroy(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#137
    def around_save(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#137
    def around_update(*args, **options, &block); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#129
    def asynchronous_queries_session; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#133
    def asynchronous_queries_tracker; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
    def attribute_aliases; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
    def attribute_aliases=(value); end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
    def attribute_aliases?; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
    def attribute_method_matchers; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
    def attribute_method_matchers=(value); end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
    def attribute_method_matchers?; end

    # source://activerecord/7.0.4/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads; end

    # source://activerecord/7.0.4/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads=(value); end

    # source://activerecord/7.0.4/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads?; end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
    def automatic_scope_inversing; end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
    def automatic_scope_inversing=(value); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
    def automatic_scope_inversing?; end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#130
    def before_create(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#130
    def before_destroy(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#130
    def before_save(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#130
    def before_update(*args, **options, &block); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#68
    def belongs_to_required_by_default; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#68
    def belongs_to_required_by_default=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#68
    def belongs_to_required_by_default?; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#16
    def cache_timestamp_format; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#16
    def cache_timestamp_format=(value); end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#16
    def cache_timestamp_format?; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#24
    def cache_versioning; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#24
    def cache_versioning=(value); end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#24
    def cache_versioning?; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#32
    def collection_cache_versioning; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#32
    def collection_cache_versioning=(value); end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#32
    def collection_cache_versioning?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#56
    def configurations; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#50
    def configurations=(config); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#201
    def connected_to_stack; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#215
    def connection_class; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#211
    def connection_class=(b); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#219
    def connection_class?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#223
    def connection_class_for_self; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#94
    def connection_handler; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#98
    def connection_handler=(handler); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#102
    def connection_handlers; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#111
    def connection_handlers=(handlers); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#188
    def current_preventing_writes; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#147
    def current_role; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#169
    def current_shard; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#74
    def default_connection_handler; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#74
    def default_connection_handler=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#74
    def default_connection_handler?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#76
    def default_role; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#76
    def default_role=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#76
    def default_role?; end

    # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#20
    def default_scope_override; end

    # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#20
    def default_scope_override=(value); end

    # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#19
    def default_scopes; end

    # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#19
    def default_scopes=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#78
    def default_shard; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#78
    def default_shard=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#78
    def default_shard?; end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums; end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums=(value); end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#26
    def destroy_association_async_job; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#26
    def destroy_association_async_job=(value); end

    # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes; end

    # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes=(value); end

    # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#72
    def has_many_inversing; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#72
    def has_many_inversing=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#72
    def has_many_inversing?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#157
    def implicit_order_column; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#157
    def implicit_order_column=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#157
    def implicit_order_column?; end

    # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
    def include_root_in_json; end

    # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
    def include_root_in_json=(value); end

    # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
    def include_root_in_json?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#160
    def inheritance_column; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#311
    def inheritance_column=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#160
    def inheritance_column?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name?; end

    # source://activerecord/7.0.4/lib/active_record/store.rb#99
    def local_stored_attributes; end

    # source://activerecord/7.0.4/lib/active_record/store.rb#99
    def local_stored_attributes=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically; end

    # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically=(value); end

    # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#20
    def logger; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#20
    def logger=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#20
    def logger?; end

    # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options; end

    # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options=(value); end

    # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
    def pluralize_table_names; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
    def pluralize_table_names=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
    def pluralize_table_names?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type?; end

    # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
    def record_timestamps; end

    # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
    def record_timestamps=(value); end

    # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
    def record_timestamps?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#80
    def shard_selector; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#80
    def shard_selector=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#80
    def shard_selector?; end

    # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret; end

    # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret=(value); end

    # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes?; end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
    def store_full_class_name; end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
    def store_full_class_name=(value); end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
    def store_full_class_name?; end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
    def store_full_sti_class; end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
    def store_full_sti_class=(value); end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
    def store_full_sti_class?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#70
    def strict_loading_by_default; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#70
    def strict_loading_by_default=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#70
    def strict_loading_by_default?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#238
    def strict_loading_violation!(owner:, reflection:); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
    def table_name_prefix; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
    def table_name_prefix=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
    def table_name_prefix?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
    def table_name_suffix; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
    def table_name_suffix=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
    def table_name_suffix?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types?; end

    private

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#160
    def _inheritance_column=(value); end
  end
end

module ActiveRecord::Base::GeneratedAssociationMethods; end
module ActiveRecord::Base::GeneratedAttributeMethods; end

module ActiveRecord::Batches
  # source://activerecord/7.0.4/lib/active_record/relation/batches.rb#68
  def find_each(start: T.unsafe(nil), finish: T.unsafe(nil), batch_size: T.unsafe(nil), error_on_ignore: T.unsafe(nil), order: T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches.rb#128
  def find_in_batches(start: T.unsafe(nil), finish: T.unsafe(nil), batch_size: T.unsafe(nil), error_on_ignore: T.unsafe(nil), order: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches.rb#204
  def in_batches(of: T.unsafe(nil), start: T.unsafe(nil), finish: T.unsafe(nil), load: T.unsafe(nil), error_on_ignore: T.unsafe(nil), order: T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/batches.rb#286
  def act_on_ignored_order(error_on_ignore); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches.rb#278
  def apply_finish_limit(relation, finish, order); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches.rb#268
  def apply_limits(relation, start, finish, order); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches.rb#274
  def apply_start_limit(relation, start, order); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches.rb#282
  def batch_order(order); end
end

class ActiveRecord::Batches::BatchEnumerator
  include ::Enumerable

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#8
  def initialize(relation:, of: T.unsafe(nil), start: T.unsafe(nil), finish: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#25
  def batch_size; end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#63
  def delete_all; end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#83
  def destroy_all; end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#92
  def each(&block); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#50
  def each_record(&block); end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#19
  def finish; end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#22
  def relation; end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#16
  def start; end

  # source://activerecord/7.0.4/lib/active_record/relation/batches/batch_enumerator.rb#72
  def update_all(updates); end
end

# source://activerecord/7.0.4/lib/active_record/relation/batches.rb#7
ActiveRecord::Batches::ORDER_IGNORE_MESSAGE = T.let(T.unsafe(nil), String)

module ActiveRecord::Calculations
  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#59
  def average(column_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#138
  def calculate(operation, column_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#43
  def count(column_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#242
  def ids; end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#77
  def maximum(column_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#68
  def minimum(column_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#230
  def pick(*column_names); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#192
  def pluck(*column_names); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#86
  def sum(identity_or_column = T.unsafe(nil), &block); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#286
  def aggregate_column(column_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#247
  def all_attributes?(column_names); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#475
  def build_count_subquery(relation, column_name, distinct); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#408
  def column_alias_for(field); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#282
  def distinct_select?(column_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#328
  def execute_grouped_calculation(operation, column_name, distinct); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#298
  def execute_simple_calculation(operation, column_name, distinct); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#251
  def has_include?(column_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#423
  def lookup_cast_type_from_join_dependencies(name, join_dependencies = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#294
  def operation_over_aggregate_column(column, operation, distinct); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#255
  def perform_calculation(operation, column_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#466
  def select_for_count; end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#448
  def type_cast_calculated_value(value, operation, type); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#431
  def type_cast_pluck_values(result, columns); end

  # source://activerecord/7.0.4/lib/active_record/relation/calculations.rb#418
  def type_for(field, &block); end
end

module ActiveRecord::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  # source://activerecord/7.0.4/lib/active_record/callbacks.rb#435
  def destroy; end

  # source://activerecord/7.0.4/lib/active_record/callbacks.rb#451
  def increment!(attribute, by = T.unsafe(nil), touch: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/callbacks.rb#447
  def touch(*_arg0, **_arg1); end

  private

  # source://activerecord/7.0.4/lib/active_record/callbacks.rb#460
  def _create_record; end

  # source://activerecord/7.0.4/lib/active_record/callbacks.rb#464
  def _update_record; end

  # source://activerecord/7.0.4/lib/active_record/callbacks.rb#456
  def create_or_update(**_arg0); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://activerecord/7.0.4/lib/active_record/callbacks.rb#297
ActiveRecord::Callbacks::CALLBACKS = T.let(T.unsafe(nil), Array)

module ActiveRecord::Callbacks::ClassMethods
  include ::ActiveModel::Callbacks
end

module ActiveRecord::ConnectionHandling
  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#337
  def clear_active_connections!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#337
  def clear_all_connections!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#333
  def clear_cache!; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#266
  def clear_query_caches_for_current_thread; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#337
  def clear_reloadable_connections!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#317
  def connected?; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#137
  def connected_to(role: T.unsafe(nil), shard: T.unsafe(nil), prevent_writes: T.unsafe(nil), &blk); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#252
  def connected_to?(role:, shard: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#172
  def connected_to_many(*classes, role:, shard: T.unsafe(nil), prevent_writes: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#198
  def connecting_to(role: T.unsafe(nil), shard: T.unsafe(nil), prevent_writes: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#279
  def connection; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#304
  def connection_db_config; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#308
  def connection_pool; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#286
  def connection_specification_name; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#283
  def connection_specification_name=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#81
  def connects_to(database: T.unsafe(nil), shards: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#49
  def establish_connection(config_or_env = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#337
  def flush_idle_connections!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#256
  def lookup_connection_handler(handler_key); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#293
  def primary_class?; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#214
  def prohibit_shard_swapping(enabled = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#321
  def remove_connection(name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#312
  def retrieve_connection; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#223
  def shard_swapping_prohibited?; end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#238
  def while_preventing_writes(enabled = T.unsafe(nil), &block); end

  private

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#382
  def append_to_connected_to_stack(entry); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#341
  def clear_on_handler(handler); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#347
  def resolve_config_for_connection(config_or_env); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#390
  def swap_connection_handler(handler, &blk); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#357
  def with_handler(handler_key, &blk); end

  # source://activerecord/7.0.4/lib/active_record/connection_handling.rb#362
  def with_role_and_shard(role, shard, prevent_writes); end
end

# source://activerecord/7.0.4/lib/active_record/connection_handling.rb#6
ActiveRecord::ConnectionHandling::DEFAULT_ENV = T.let(T.unsafe(nil), Proc)

# source://activerecord/7.0.4/lib/active_record/connection_handling.rb#5
ActiveRecord::ConnectionHandling::RAILS_ENV = T.let(T.unsafe(nil), Proc)

module ActiveRecord::Core
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Core::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/core.rb#461
  def initialize(attributes = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#614
  def <=>(other_object); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#580
  def ==(comparison_object); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#626
  def blank?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#682
  def connection_handler; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#565
  def encode_with(coder); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#580
  def eql?(comparison_object); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#603
  def freeze; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#609
  def frozen?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#590
  def hash; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#488
  def init_with(coder, &block); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#498
  def init_with_attributes(attributes, new_record = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#687
  def inspect; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#622
  def present?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#705
  def pretty_print(pp); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#678
  def readonly!; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#631
  def readonly?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#729
  def slice(*methods); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#661
  def strict_loading!(value = T.unsafe(nil), mode: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#636
  def strict_loading?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#670
  def strict_loading_mode; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#673
  def strict_loading_n_plus_one_only?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#734
  def values_at(*methods); end

  private

  # source://activerecord/7.0.4/lib/active_record/core.rb#771
  def custom_inspect_method_defined?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#751
  def init_internals; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#539
  def initialize_dup(other); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#768
  def initialize_internals_callback; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#782
  def inspection_filter; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#747
  def to_ary; end

  module GeneratedClassMethods
    def belongs_to_required_by_default; end
    def belongs_to_required_by_default=(value); end
    def belongs_to_required_by_default?; end
    def default_connection_handler; end
    def default_connection_handler=(value); end
    def default_connection_handler?; end
    def default_role; end
    def default_role=(value); end
    def default_role?; end
    def default_shard; end
    def default_shard=(value); end
    def default_shard?; end
    def destroy_association_async_job; end
    def destroy_association_async_job=(value); end
    def enumerate_columns_in_select_statements; end
    def enumerate_columns_in_select_statements=(value); end
    def enumerate_columns_in_select_statements?; end
    def has_many_inversing; end
    def has_many_inversing=(value); end
    def has_many_inversing?; end
    def logger; end
    def logger=(value); end
    def logger?; end
    def shard_selector; end
    def shard_selector=(value); end
    def shard_selector?; end
    def strict_loading_by_default; end
    def strict_loading_by_default=(value); end
    def strict_loading_by_default?; end
  end

  module GeneratedInstanceMethods
    def default_connection_handler; end
    def default_connection_handler?; end
    def default_role; end
    def default_role?; end
    def default_shard; end
    def default_shard?; end
    def destroy_association_async_job; end
    def logger; end
    def logger?; end
  end
end

module ActiveRecord::Core::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/core.rb#415
  def ===(object); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def action_on_strict_loading_violation; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def action_on_strict_loading_violation=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def application_record_class; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def application_record_class=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#420
  def arel_table; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#432
  def cached_find_by_statement(key, &block); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def default_timezone; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def default_timezone=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def dump_schema_after_migration; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def dump_schema_after_migration=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def dump_schemas; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def dump_schemas=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def error_on_ignored_order; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def error_on_ignored_order=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#373
  def filter_attributes; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#382
  def filter_attributes=(filter_attributes); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#268
  def find(*ids); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#287
  def find_by(*args); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#329
  def find_by!(*args); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#362
  def generated_association_methods; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def index_nested_attribute_errors; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def index_nested_attribute_errors=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#255
  def inherited(child_class); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#251
  def initialize_find_by_cache; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#358
  def initialize_generated_modules; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#399
  def inspect; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#387
  def inspection_filter; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def legacy_connection_handling; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def legacy_connection_handling=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def maintain_test_schema; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def maintain_test_schema=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#424
  def predicate_builder; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def queues; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def queues=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def reading_role; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def reading_role=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def schema_format; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def schema_format=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def suppress_multiple_database_warning; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def suppress_multiple_database_warning=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def timestamped_migrations; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def timestamped_migrations=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#428
  def type_caster; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def verbose_query_logs; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def verbose_query_logs=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def warn_on_records_fetched_greater_than; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def warn_on_records_fetched_greater_than=(value); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#340
  def writing_role; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#348
  def writing_role=(value); end

  private

  # source://activerecord/7.0.4/lib/active_record/core.rb#438
  def relation; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#448
  def table_metadata; end
end

module ActiveRecord::CounterCache
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::CounterCache::ClassMethods

  private

  # source://activerecord/7.0.4/lib/active_record/counter_cache.rb#165
  def _create_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/counter_cache.rb#175
  def destroy_row; end

  # source://activerecord/7.0.4/lib/active_record/counter_cache.rb#190
  def each_counter_cached_associations; end
end

module ActiveRecord::CounterCache::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/counter_cache.rb#159
  def decrement_counter(counter_name, id, touch: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/counter_cache.rb#134
  def increment_counter(counter_name, id, touch: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/counter_cache.rb#29
  def reset_counters(id, *counters, touch: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/counter_cache.rb#107
  def update_counters(id, counters); end
end

module ActiveRecord::DelegatedType
  # source://activerecord/7.0.4/lib/active_record/delegated_type.rb#206
  def delegated_type(role, types:, **options); end

  private

  # source://activerecord/7.0.4/lib/active_record/delegated_type.rb#212
  def define_delegated_type_methods(role, types:, options:); end
end

module ActiveRecord::Delegation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Delegation::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def &(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def +(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def -(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def [](*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def as_json(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def compact(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#93
  def connection(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def each(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def encode_with(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def in_groups(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def in_groups_of(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def index(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def join(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def length(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#93
  def primary_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def reverse(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def rindex(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def rotate(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def sample(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def shuffle(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def slice(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def split(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def to_formatted_s(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def to_fs(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def to_sentence(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def to_xml(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#88
  def |(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#128
  def respond_to_missing?(method, _); end
end

module ActiveRecord::Delegation::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#117
  def create(klass, *args, **kwargs); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#122
  def relation_class_for(klass); end
end

module ActiveRecord::Delegation::ClassSpecificRelation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods

  private

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#105
  def method_missing(method, *args, **_arg2, &block); end
end

module ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#99
  def name; end
end

module ActiveRecord::Delegation::DelegateCache
  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#38
  def generate_relation_method(method); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#33
  def inherited(child_class); end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#13
  def initialize_relation_delegate_cache; end

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#9
  def relation_delegate_class(klass); end

  protected

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#43
  def include_relation_methods(delegate); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/delegation.rb#49
  def generated_relation_methods; end
end

module ActiveRecord::DynamicMatchers
  private

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#15
  def method_missing(name, *arguments, &block); end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#6
  def respond_to_missing?(name, _); end
end

class ActiveRecord::DynamicMatchers::FindBy < ::ActiveRecord::DynamicMatchers::Method
  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#100
  def finder; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#96
    def prefix; end
  end
end

class ActiveRecord::DynamicMatchers::FindByBang < ::ActiveRecord::DynamicMatchers::Method
  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#116
  def finder; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#108
    def prefix; end

    # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#112
    def suffix; end
  end
end

class ActiveRecord::DynamicMatchers::Method
  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#52
  def initialize(model, method_name); end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#50
  def attribute_names; end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#63
  def define; end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#50
  def model; end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#50
  def name; end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#59
  def valid?; end

  private

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#84
  def attributes_hash; end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#72
  def body; end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#88
  def finder; end

  # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#78
  def signature; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#32
    def match(model, name); end

    # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#30
    def matchers; end

    # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#37
    def pattern; end

    # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#41
    def prefix; end

    # source://activerecord/7.0.4/lib/active_record/dynamic_matchers.rb#45
    def suffix; end
  end
end

module ActiveRecord::Encryption::EncryptableRecord
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Encryption::EncryptableRecord::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#146
  def ciphertext_for(attribute_name); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#156
  def decrypt; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#151
  def encrypt; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#141
  def encrypted_attribute?(attribute_name); end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#190
  def build_decrypt_attribute_assignments; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#184
  def build_encrypt_attribute_assignments; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#199
  def cant_modify_encrypted_attributes_when_frozen; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#169
  def decrypt_attributes; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#163
  def encrypt_attributes; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#180
  def has_encrypted_attributes?; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#176
  def validate_encryption_allowed; end

  module GeneratedClassMethods
    def encrypted_attributes; end
    def encrypted_attributes=(value); end
    def encrypted_attributes?; end
  end

  module GeneratedInstanceMethods
    def encrypted_attributes; end
    def encrypted_attributes=(value); end
    def encrypted_attributes?; end
  end
end

module ActiveRecord::Encryption::EncryptableRecord::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#56
  def deterministic_encrypted_attributes; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#45
  def encrypts(*names, key_provider: T.unsafe(nil), key: T.unsafe(nil), deterministic: T.unsafe(nil), downcase: T.unsafe(nil), ignore_case: T.unsafe(nil), previous: T.unsafe(nil), **context_properties); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#63
  def source_attribute_from_preserved_attribute(attribute_name); end

  private

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#127
  def add_length_validation_for_encrypted_columns; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#82
  def encrypt_attribute(name, attribute_scheme); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#76
  def global_previous_schemes_for(scheme); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#121
  def load_schema!; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#104
  def override_accessors_to_preserve_original(name, original_attribute_name); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#93
  def preserve_original_encrypted(name); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#68
  def scheme_for(key_provider: T.unsafe(nil), key: T.unsafe(nil), deterministic: T.unsafe(nil), downcase: T.unsafe(nil), ignore_case: T.unsafe(nil), previous: T.unsafe(nil), **context_properties); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#133
  def validate_column_size(attribute_name); end
end

# source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#161
ActiveRecord::Encryption::EncryptableRecord::ORIGINAL_ATTRIBUTE_PREFIX = T.let(T.unsafe(nil), String)

module ActiveRecord::Enum
  # source://activerecord/7.0.4/lib/active_record/enum.rb#167
  def enum(name = T.unsafe(nil), values = T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#119
  def inherited(base); end

  private

  # source://activerecord/7.0.4/lib/active_record/enum.rb#180
  def _enum(name, values, prefix: T.unsafe(nil), suffix: T.unsafe(nil), scopes: T.unsafe(nil), **options); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#261
  def _enum_methods_module; end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#269
  def assert_valid_enum_definition_values(values); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#288
  def detect_enum_conflict!(enum_name, method_name, klass_method = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#310
  def detect_negative_enum_conditions!(method_names); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#300
  def raise_conflict_error(enum_name, method_name, type: T.unsafe(nil), source: T.unsafe(nil)); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/enum.rb#115
    def extended(base); end
  end
end

class ActiveRecord::Enum::EnumType < ::ActiveModel::Type::Value
  # source://activerecord/7.0.4/lib/active_record/enum.rb#127
  def initialize(name, mapping, subtype); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#155
  def assert_valid_value(value); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#133
  def cast(value); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#143
  def deserialize(value); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#151
  def serializable?(value, &block); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#147
  def serialize(value); end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#161
  def subtype; end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#125
  def type(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord/7.0.4/lib/active_record/enum.rb#164
  def mapping; end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#164
  def name; end
end

module ActiveRecord::Explain
  # source://activerecord/7.0.4/lib/active_record/explain.rb#9
  def collecting_queries_for_explain; end

  # source://activerecord/7.0.4/lib/active_record/explain.rb#19
  def exec_explain(queries); end

  private

  # source://activerecord/7.0.4/lib/active_record/explain.rb#39
  def render_bind(attr); end
end

module ActiveRecord::FinderMethods
  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#326
  def exists?(conditions = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#240
  def fifth; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#246
  def fifth!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#67
  def find(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#80
  def find_by(arg, *args); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#86
  def find_by!(arg, *args); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#129
  def find_sole_by(arg, *args); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#142
  def first(limit = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#152
  def first!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#256
  def forty_two; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#262
  def forty_two!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#224
  def fourth; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#230
  def fourth!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#352
  def include?(record); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#171
  def last(limit = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#182
  def last!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#352
  def member?(record); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#370
  def raise_record_not_found_exception!(ids = T.unsafe(nil), result_size = T.unsafe(nil), expected_size = T.unsafe(nil), key = T.unsafe(nil), not_found_ids = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#192
  def second; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#198
  def second!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#288
  def second_to_last; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#294
  def second_to_last!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#112
  def sole; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#97
  def take(limit = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#103
  def take!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#208
  def third; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#214
  def third!; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#272
  def third_to_last; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#278
  def third_to_last!; end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#410
  def apply_join_dependency(eager_loading: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#391
  def construct_relation_for_exists(conditions); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#570
  def find_last(limit); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#532
  def find_nth(index); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#556
  def find_nth_from_last(index); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#537
  def find_nth_with_limit(index, limit); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#464
  def find_one(id); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#480
  def find_some(ids); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#504
  def find_some_ordered(ids); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#516
  def find_take; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#524
  def find_take_with_limit(limit); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#442
  def find_with_ids(*ids); end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#574
  def ordered_relation; end

  # source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#438
  def using_limitable_reflections?(reflections); end
end

# source://activerecord/7.0.4/lib/active_record/relation/finder_methods.rb#7
ActiveRecord::FinderMethods::ONE_AS_ONE = T.let(T.unsafe(nil), String)

module ActiveRecord::Inheritance
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  private

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#343
  def ensure_proper_type; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#327
  def initialize_dup(other); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#333
  def initialize_internals_callback; end

  module GeneratedClassMethods
    def store_full_class_name; end
    def store_full_class_name=(value); end
    def store_full_class_name?; end
    def store_full_sti_class; end
    def store_full_sti_class=(value); end
    def store_full_sti_class?; end
  end

  module GeneratedInstanceMethods
    def store_full_class_name; end
    def store_full_class_name?; end
    def store_full_sti_class; end
    def store_full_sti_class?; end
  end
end

module ActiveRecord::Inheritance::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#153
  def abstract_class; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#153
  def abstract_class=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#156
  def abstract_class?; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#104
  def base_class; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#108
  def base_class?; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#81
  def descends_from_active_record?; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#219
  def dup; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#91
  def finder_needs_type_condition?; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#213
  def inherited(subclass); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#55
  def new(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#205
  def polymorphic_class_for(name); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#198
  def polymorphic_name; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#166
  def primary_abstract_class; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#183
  def sti_class_for(type_name); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#176
  def sti_name; end

  protected

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#235
  def compute_type(type_name); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#263
  def set_base_class; end

  private

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#283
  def discriminate_class_for_record(record); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#295
  def find_sti_class(type_name); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#227
  def initialize_clone(other); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#315
  def subclass_from_attributes(attrs); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#306
  def type_condition(table = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#291
  def using_single_table_inheritance?(record); end
end

module ActiveRecord::Integration
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Integration::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/integration.rb#72
  def cache_key; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#114
  def cache_key_with_version; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#97
  def cache_version; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#57
  def to_param; end

  private

  # source://activerecord/7.0.4/lib/active_record/integration.rb#178
  def can_use_fast_cache_version?(timestamp); end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#197
  def raw_timestamp_to_cache_version(timestamp); end

  module GeneratedClassMethods
    def cache_timestamp_format; end
    def cache_timestamp_format=(value); end
    def cache_timestamp_format?; end
    def cache_versioning; end
    def cache_versioning=(value); end
    def cache_versioning?; end
    def collection_cache_versioning; end
    def collection_cache_versioning=(value); end
    def collection_cache_versioning?; end
  end

  module GeneratedInstanceMethods
    def cache_timestamp_format; end
    def cache_timestamp_format?; end
    def cache_versioning; end
    def cache_versioning?; end
    def collection_cache_versioning; end
    def collection_cache_versioning?; end
  end
end

module ActiveRecord::Integration::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/integration.rb#163
  def collection_cache_key(collection = T.unsafe(nil), timestamp_column = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#147
  def to_param(method_name = T.unsafe(nil)); end
end

module ActiveRecord::Locking::Optimistic
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Locking::Optimistic::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#63
  def increment!(*_arg0, **_arg1); end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#59
  def locking_enabled?; end

  private

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#73
  def _create_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#137
  def _lock_value_for_database(locking_column); end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#82
  def _touch_row(attribute_names, time); end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#87
  def _update_row(attribute_names, attempted_action = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#120
  def destroy_row; end

  module GeneratedClassMethods
    def lock_optimistically; end
    def lock_optimistically=(value); end
    def lock_optimistically?; end
  end

  module GeneratedInstanceMethods
    def lock_optimistically; end
    def lock_optimistically?; end
  end
end

module ActiveRecord::Locking::Optimistic::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#179
  def define_attribute(name, cast_type, **_arg2); end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#162
  def locking_column; end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#156
  def locking_column=(value); end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#151
  def locking_enabled?; end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#168
  def reset_locking_column; end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#174
  def update_counters(id, counters); end
end

# source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#146
ActiveRecord::Locking::Optimistic::ClassMethods::DEFAULT_LOCKING_COLUMN = T.let(T.unsafe(nil), String)

module ActiveRecord::Locking::Pessimistic
  # source://activerecord/7.0.4/lib/active_record/locking/pessimistic.rb#67
  def lock!(lock = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/locking/pessimistic.rb#89
  def with_lock(*args); end
end

module ActiveRecord::ModelSchema
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::ModelSchema::ClassMethods

  class << self
    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#183
    def derive_join_table_name(first_table, second_table); end
  end

  module GeneratedClassMethods
    def immutable_strings_by_default; end
    def immutable_strings_by_default=(value); end
    def immutable_strings_by_default?; end
    def implicit_order_column; end
    def implicit_order_column=(value); end
    def implicit_order_column?; end
    def inheritance_column; end
    def inheritance_column=(value); end
    def inheritance_column?; end
    def internal_metadata_table_name; end
    def internal_metadata_table_name=(value); end
    def internal_metadata_table_name?; end
    def pluralize_table_names; end
    def pluralize_table_names=(value); end
    def pluralize_table_names?; end
    def primary_key_prefix_type; end
    def primary_key_prefix_type=(value); end
    def primary_key_prefix_type?; end
    def schema_migrations_table_name; end
    def schema_migrations_table_name=(value); end
    def schema_migrations_table_name?; end
    def table_name_prefix; end
    def table_name_prefix=(value); end
    def table_name_prefix?; end
    def table_name_suffix; end
    def table_name_suffix=(value); end
    def table_name_suffix?; end
  end

  module GeneratedInstanceMethods
    def pluralize_table_names; end
    def pluralize_table_names?; end
    def primary_key_prefix_type; end
    def primary_key_prefix_type?; end
    def table_name_prefix; end
    def table_name_prefix?; end
    def table_name_suffix; end
    def table_name_suffix?; end
  end
end

module ActiveRecord::ModelSchema::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#486
  def _default_attributes; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#428
  def attribute_types; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#410
  def attributes_builder; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#481
  def column_defaults; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#472
  def column_for_attribute(name); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#492
  def column_names; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#423
  def columns; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#418
  def columns_hash; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#503
  def content_columns; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#288
  def full_table_name_prefix; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#292
  def full_table_name_suffix; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#317
  def ignored_columns; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#356
  def ignored_columns=(columns); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#401
  def next_sequence_value; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#395
  def prefetch_primary_key?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#298
  def protected_environments; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#307
  def protected_environments=(environments); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#273
  def quoted_table_name; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#311
  def real_inheritance_column=(value); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#537
  def reset_column_information; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#369
  def reset_sequence_name; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#278
  def reset_table_name; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#361
  def sequence_name; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#388
  def sequence_name=(value); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#496
  def symbol_column_to_string(name_symbol); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#406
  def table_exists?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#247
  def table_name; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#257
  def table_name=(value); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#448
  def type_for_attribute(attr_name, &block); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#433
  def yaml_encoder; end

  protected

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#547
  def initialize_load_schema_monitor; end

  private

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#637
  def _convert_type_from_options(type); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#621
  def compute_table_name; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#552
  def inherited(child_class); end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#561
  def load_schema; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#575
  def load_schema!; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#595
  def reload_schema_from_cache; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#557
  def schema_loaded?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#615
  def undecorated_table_name(model_name); end
end

module ActiveRecord::NestedAttributes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::NestedAttributes::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#383
  def _destroy; end

  private

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#588
  def allow_destroy?(association_name); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#464
  def assign_nested_attributes_for_collection_association(association_name, attributes_collection); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#405
  def assign_nested_attributes_for_one_to_one_association(association_name, attributes); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#550
  def assign_to_or_mark_for_destruction(record, attributes, allow_destroy); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#572
  def call_reject_if(association_name, attributes); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#530
  def check_record_limit!(limit, attributes_collection); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#556
  def has_destroy_flag?(hash); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#592
  def raise_nested_attributes_record_not_found!(association_name, record_id); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#563
  def reject_new_record?(association_name, attributes); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#584
  def will_be_destroyed?(association_name, attributes); end

  module GeneratedClassMethods
    def nested_attributes_options; end
    def nested_attributes_options=(value); end
    def nested_attributes_options?; end
  end

  module GeneratedInstanceMethods
    def nested_attributes_options; end
    def nested_attributes_options?; end
  end
end

module ActiveRecord::NestedAttributes::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#333
  def accepts_nested_attributes_for(*attr_names); end

  private

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#368
  def generate_association_writer(association_name, type); end
end

# source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#284
ActiveRecord::NestedAttributes::ClassMethods::REJECT_ALL_BLANK_PROC = T.let(T.unsafe(nil), Proc)

class ActiveRecord::NestedAttributes::TooManyRecords < ::ActiveRecord::ActiveRecordError; end

# source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#390
ActiveRecord::NestedAttributes::UNASSIGNABLE_KEYS = T.let(T.unsafe(nil), Array)

module ActiveRecord::NoTouching
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::NoTouching::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/no_touching.rb#53
  def no_touching?; end

  # source://activerecord/7.0.4/lib/active_record/no_touching.rb#61
  def touch(*_arg0, **_arg1); end

  # source://activerecord/7.0.4/lib/active_record/no_touching.rb#57
  def touch_later(*_arg0); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/no_touching.rb#36
    def applied_to?(klass); end

    # source://activerecord/7.0.4/lib/active_record/no_touching.rb#29
    def apply_to(klass); end

    private

    # source://activerecord/7.0.4/lib/active_record/no_touching.rb#41
    def klasses; end
  end
end

module ActiveRecord::NoTouching::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/no_touching.rb#23
  def no_touching(&block); end
end

module ActiveRecord::Persistence
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Persistence::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#711
  def becomes(klass); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#731
  def becomes!(klass); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#856
  def decrement(attribute, by = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#866
  def decrement!(attribute, by = T.unsafe(nil), touch: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#663
  def delete; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#676
  def destroy; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#695
  def destroy!; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#579
  def destroyed?; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#833
  def increment(attribute, by = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#845
  def increment!(attribute, by = T.unsafe(nil), touch: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#562
  def new_record?; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#585
  def persisted?; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#569
  def previously_new_record?; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#574
  def previously_persisted?; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#943
  def reload(options = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#614
  def save(**options, &block); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#647
  def save!(**options, &block); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#882
  def toggle(attribute); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#891
  def toggle!(attribute); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#993
  def touch(*names, time: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#764
  def update(attributes); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#775
  def update!(attributes); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#753
  def update_attribute(name, value); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#785
  def update_column(name, value); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#805
  def update_columns(attributes); end

  private

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1093
  def _create_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1043
  def _delete_row; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1018
  def _find_record(options); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1031
  def _primary_key_constraints_hash; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1122
  def _raise_readonly_record_error; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1114
  def _raise_record_not_destroyed; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1126
  def _raise_record_not_touched_error; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1047
  def _touch_row(attribute_names, time); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1073
  def _update_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1057
  def _update_row(attribute_names, attempted_action = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1026
  def apply_scoping?(options); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1135
  def belongs_to_touch_method; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1064
  def create_or_update(**_arg0, &block); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1036
  def destroy_associations; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1039
  def destroy_row; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1012
  def strict_loaded_associations; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#1110
  def verify_readonly_attribute(name); end
end

module ActiveRecord::Persistence::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/persistence.rb#516
  def _delete_record(constraints); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#477
  def _insert_record(values); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#499
  def _update_record(values, constraints); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#33
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#50
  def create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#473
  def delete(id_or_array); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#447
  def destroy(id); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#66
  def insert(attributes, returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#155
  def insert!(attributes, returning: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#145
  def insert_all(attributes, returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#212
  def insert_all!(attributes, returning: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#346
  def instantiate(attributes, column_types = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#378
  def update(id = T.unsafe(nil), attributes); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#404
  def update!(id = T.unsafe(nil), attributes); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#222
  def upsert(attributes, on_duplicate: T.unsafe(nil), returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#332
  def upsert_all(attributes, on_duplicate: T.unsafe(nil), update_only: T.unsafe(nil), returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#552
  def build_default_constraint; end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#545
  def discriminate_class_for_record(record); end

  # source://activerecord/7.0.4/lib/active_record/persistence.rb#535
  def instantiate_instance_of(klass, attributes, column_types = T.unsafe(nil), &block); end
end

module ActiveRecord::QueryCache::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/query_cache.rb#9
  def cache(&block); end

  # source://activerecord/7.0.4/lib/active_record/query_cache.rb#19
  def uncached(&block); end
end

module ActiveRecord::QueryMethods
  include ::ActiveModel::ForbiddenAttributesProtection

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#317
  def _select!(*fields); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#845
  def and(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#853
  def and!(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1219
  def annotate(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1225
  def annotate!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def annotate_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def annotate_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1280
  def arel(aliases = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1284
  def construct_join_dependency(associations, join_type); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1038
  def create_with(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1042
  def create_with!(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def create_with_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def create_with_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1102
  def distinct(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1107
  def distinct!(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def distinct_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def distinct_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#207
  def eager_load(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#212
  def eager_load!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def eager_load_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def eager_load_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1261
  def excluding(*records); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1273
  def excluding!(records); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1148
  def extending(*modules, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1156
  def extending!(*modules, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def extending_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def extending_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def extensions; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#240
  def extract_associated(association); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1083
  def from(value, subquery_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1087
  def from!(value, subquery_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def from_clause; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def from_clause=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#363
  def group(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#368
  def group!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def group_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def group_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#903
  def having(opts, *rest); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#907
  def having!(opts, *rest); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def having_clause; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def having_clause=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#447
  def in_order_of(column, values); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#191
  def includes(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#196
  def includes!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def includes_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def includes_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#811
  def invert_where; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#815
  def invert_where!; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#586
  def joins(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#591
  def joins!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def joins_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def joins_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#601
  def left_joins(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#601
  def left_outer_joins(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#607
  def left_outer_joins!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def left_outer_joins_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def left_outer_joins_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#917
  def limit(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#921
  def limit!(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def limit_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def limit_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#944
  def lock(locks = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#948
  def lock!(locks = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def lock_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def lock_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#987
  def none; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#991
  def none!; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#933
  def offset(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#937
  def offset!(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def offset_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def offset_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1177
  def optimizer_hints(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1182
  def optimizer_hints!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def optimizer_hints_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def optimizer_hints_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#877
  def or(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#885
  def or!(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#425
  def order(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#433
  def order!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def order_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def order_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#221
  def preload(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#226
  def preload!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def preload_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def preload_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1001
  def readonly(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1005
  def readonly!(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def readonly_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def readonly_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#254
  def references(*table_names); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#259
  def references!(*table_names); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def references_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def references_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#471
  def reorder(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#479
  def reorder!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def reordering_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def reordering_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#332
  def reselect(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#338
  def reselect!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1190
  def reverse_order; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1194
  def reverse_order!; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def reverse_order_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def reverse_order_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#773
  def rewhere(conditions); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#304
  def select(*fields); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def select_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def select_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1205
  def skip_preloading!; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1200
  def skip_query_cache!(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def skip_query_cache_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def skip_query_cache_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1016
  def strict_loading(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1020
  def strict_loading!(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def strict_loading_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def strict_loading_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#831
  def structurally_compatible?(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1231
  def uniq!(name); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#524
  def unscope(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#529
  def unscope!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def unscope_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def unscope_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#745
  def where(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#755
  def where!(opts, *rest); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def where_clause; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def where_clause=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1261
  def without(*records); end

  protected

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1299
  def build_having_clause(opts, rest = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1291
  def build_subquery(subquery_alias, select_value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1299
  def build_where_clause(opts, rest = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1520
  def arel_column(field); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1503
  def arel_columns(columns); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1351
  def assert_mutability!; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1356
  def build_arel(aliases = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1384
  def build_cast_value(name, value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1388
  def build_from; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1421
  def build_join_buckets; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1340
  def build_join_dependencies; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1471
  def build_joins(join_sources, aliases = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1582
  def build_order(arel); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1493
  def build_select(arel); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1702
  def check_if_method_has_arguments!(method_name, args, message = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1639
  def column_references(order_args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1571
  def does_not_support_reverse?(order); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1334
  def each_join_dependencies(join_dependencies = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1327
  def lookup_table_klass_from_join_dependencies(table_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1652
  def order_column(field); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1602
  def preprocess_order_args(order_args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1662
  def resolve_arel_attributes(attrs); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1542
  def reverse_sql_order(order_query); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1633
  def sanitize_order_arguments(order_args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1403
  def select_association_list(associations, stashed_joins = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1718
  def structurally_incompatible_values_for(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1536
  def table_name_matches?(from); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1590
  def validate_order_args(args); end
end

# source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#124
ActiveRecord::QueryMethods::FROZEN_EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#125
ActiveRecord::QueryMethods::FROZEN_EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1713
ActiveRecord::QueryMethods::STRUCTURAL_VALUE_METHODS = T.let(T.unsafe(nil), Array)

# source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1587
ActiveRecord::QueryMethods::VALID_DIRECTIONS = T.let(T.unsafe(nil), Set)

# source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#487
ActiveRecord::QueryMethods::VALID_UNSCOPING_VALUES = T.let(T.unsafe(nil), Set)

class ActiveRecord::QueryMethods::WhereChain
  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#16
  def initialize(scope); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#76
  def associated(*associations); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#104
  def missing(*associations); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#50
  def not(opts, *rest); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#115
  def scope_association_reflection(association); end
end

module ActiveRecord::Querying
  # source://activerecord/7.0.4/lib/active_record/querying.rb#57
  def _load_from_sql(result_set, &block); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#53
  def _query_by_sql(sql, binds = T.unsafe(nil), preparable: T.unsafe(nil), async: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def and(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def annotate(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def any?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def average(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def calculate(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def count(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#93
  def count_by_sql(sql); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def create_or_find_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def create_or_find_by!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def create_with(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def delete_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def delete_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def destroy_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def destroy_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def distinct(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def eager_load(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def except(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def excluding(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def exists?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def extending(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def extract_associated(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def fifth(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def fifth!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find_by!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#49
  def find_by_sql(sql, binds = T.unsafe(nil), preparable: T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find_each(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find_in_batches(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find_or_create_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find_or_create_by!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find_or_initialize_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def find_sole_by(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def first(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def first!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def first_or_create(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def first_or_create!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def first_or_initialize(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def forty_two(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def forty_two!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def fourth(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def fourth!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def from(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def group(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def having(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def ids(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def in_batches(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def in_order_of(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def includes(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def invert_where(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def last(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def last!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def left_joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def left_outer_joins(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def limit(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def lock(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def many?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def maximum(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def merge(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def minimum(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def none(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def none?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def offset(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def one?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def only(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def optimizer_hints(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def or(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def order(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def pick(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def pluck(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def preload(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def readonly(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def references(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def reorder(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def reselect(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def rewhere(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def second(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def second!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def second_to_last(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def second_to_last!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def select(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def sole(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def strict_loading(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def sum(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def take(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def take!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def third(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def third!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def third_to_last(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def third_to_last!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def touch_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def unscope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def update_all(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def where(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/querying.rb#22
  def without(*_arg0, **_arg1, &_arg2); end
end

# source://activerecord/7.0.4/lib/active_record/querying.rb#5
ActiveRecord::Querying::QUERYING_METHODS = T.let(T.unsafe(nil), Array)

module ActiveRecord::ReadonlyAttributes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::ReadonlyAttributes::ClassMethods

  module GeneratedClassMethods
    def _attr_readonly; end
    def _attr_readonly=(value); end
    def _attr_readonly?; end
  end

  module GeneratedInstanceMethods; end
end

module ActiveRecord::ReadonlyAttributes::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#25
  def attr_readonly(*attributes); end

  # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#34
  def readonly_attribute?(name); end

  # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#30
  def readonly_attributes; end
end

module ActiveRecord::Reflection
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Reflection::ClassMethods

  class << self
    # source://activerecord/7.0.4/lib/active_record/reflection.rb#28
    def add_aggregate_reflection(ar, name, reflection); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#22
    def add_reflection(ar, name, reflection); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#17
    def create(macro, name, scope, options, ar); end

    private

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#33
    def reflection_class_for(macro); end
  end

  module GeneratedClassMethods
    def _reflections; end
    def _reflections=(value); end
    def _reflections?; end
    def aggregate_reflections; end
    def aggregate_reflections=(value); end
    def aggregate_reflections?; end
    def automatic_scope_inversing; end
    def automatic_scope_inversing=(value); end
    def automatic_scope_inversing?; end
  end

  module GeneratedInstanceMethods
    def _reflections; end
    def _reflections?; end
    def aggregate_reflections; end
    def aggregate_reflections?; end
    def automatic_scope_inversing; end
    def automatic_scope_inversing?; end
  end
end

class ActiveRecord::Reflection::AbstractReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#280
  def alias_candidate(name); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#157
  def build_association(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#288
  def build_scope(table, predicate_builder = T.unsafe(nil), klass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#284
  def chain; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#233
  def check_validity_of_inverse!; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#165
  def class_name; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#211
  def constraints; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#215
  def counter_cache_column; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#276
  def counter_must_be_updated_by_has_many?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#270
  def has_cached_counter?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#227
  def inverse_of; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#254
  def inverse_updates_counter_cache?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#262
  def inverse_updates_counter_in_memory?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#254
  def inverse_which_updates_counter_cache; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#175
  def join_scope(table, foreign_table, foreign_klass); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#198
  def join_scopes(table, predicate_builder, klass = T.unsafe(nil), record = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#206
  def klass_join_scope(table, predicate_builder); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#171
  def scopes; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#296
  def strict_loading?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#300
  def strict_loading_violation_message(owner); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#151
  def table_name; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#147
  def through_reflection?; end

  protected

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#307
  def actual_source_reflection; end

  private

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#320
  def ensure_option_not_given_as_class!(option_name); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#312
  def predicate_builder(table); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#316
  def primary_key(klass); end
end

class ActiveRecord::Reflection::AggregateReflection < ::ActiveRecord::Reflection::MacroReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#412
  def mapping; end
end

class ActiveRecord::Reflection::AssociationReflection < ::ActiveRecord::Reflection::MacroReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#448
  def initialize(name, scope, options, active_record); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#480
  def active_record_primary_key; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#595
  def add_as_polymorphic_through(reflection, seed); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#591
  def add_as_source(seed); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#599
  def add_as_through(seed); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#585
  def association_class; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#472
  def association_foreign_key; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#476
  def association_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#456
  def association_scope_cache(klass, owner, &block); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#580
  def belongs_to?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#496
  def check_eager_loadable!; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#492
  def check_validity!; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#528
  def clear_association_scope_cache; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#522
  def collect_join_chain; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#562
  def collection?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#421
  def compute_class(name); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#603
  def extensions; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#468
  def foreign_key; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#445
  def foreign_type; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#540
  def has_inverse?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#583
  def has_one?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#536
  def has_scope?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#488
  def join_foreign_key; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#508
  def join_id_for(owner); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#484
  def join_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#464
  def join_table; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#557
  def macro; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#532
  def nested?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#446
  def parent_reflection; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#446
  def parent_reflection=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#587
  def polymorphic?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#544
  def polymorphic_inverse_of(associated_class); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#516
  def source_reflection; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#512
  def through_reflection; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#445
  def type; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#575
  def validate?; end

  private

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#620
  def automatic_inverse_of; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#656
  def can_find_inverse_of_automatically?(reflection, inverse_reflection = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#677
  def derive_class_name; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#683
  def derive_foreign_key; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#693
  def derive_join_table; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#611
  def inverse_name; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#669
  def scope_allows_automatic_inverse_of?(reflection, inverse_reflection); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#642
  def valid_inverse_reflection?(reflection); end
end

class ActiveRecord::Reflection::BelongsToReflection < ::ActiveRecord::Reflection::AssociationReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#731
  def association_class; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#740
  def association_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#729
  def belongs_to?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#752
  def join_foreign_key; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#756
  def join_foreign_type; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#748
  def join_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#727
  def macro; end

  private

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#761
  def can_find_inverse_of_automatically?(*_arg0); end
end

module ActiveRecord::Reflection::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#119
  def _reflect_on_association(association); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#128
  def clear_reflections_cache; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#67
  def reflect_on_aggregation(aggregation); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#59
  def reflect_on_all_aggregations; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#104
  def reflect_on_all_associations(macro = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#124
  def reflect_on_all_autosave_associations; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#115
  def reflect_on_association(association); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#75
  def reflections; end
end

class ActiveRecord::Reflection::HasAndBelongsToManyReflection < ::ActiveRecord::Reflection::AssociationReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#769
  def collection?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#767
  def macro; end
end

class ActiveRecord::Reflection::HasManyReflection < ::ActiveRecord::Reflection::AssociationReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#703
  def association_class; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#701
  def collection?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#699
  def macro; end
end

class ActiveRecord::Reflection::HasOneReflection < ::ActiveRecord::Reflection::AssociationReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#717
  def association_class; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#715
  def has_one?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#713
  def macro; end
end

class ActiveRecord::Reflection::MacroReflection < ::ActiveRecord::Reflection::AbstractReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#348
  def initialize(name, scope, options, active_record); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#391
  def ==(other_aggregation); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#344
  def active_record; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#358
  def autosave=(autosave); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#385
  def compute_class(name); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#381
  def klass; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#334
  def name; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#342
  def options; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#346
  def plural_name; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#336
  def scope; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#399
  def scope_for(relation, owner = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#404
  def derive_class_name; end
end

class ActiveRecord::Reflection::PolymorphicReflection < ::ActiveRecord::Reflection::AbstractReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1034
  def initialize(reflection, previous_reflection); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1044
  def constraints; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1031
  def join_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1031
  def join_primary_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1039
  def join_scopes(table, predicate_builder, klass = T.unsafe(nil), record = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1031
  def klass(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1031
  def name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1031
  def plural_name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1031
  def scope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1031
  def scope_for(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1031
  def type(*_arg0, **_arg1, &_arg2); end

  private

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1049
  def source_type_scope; end
end

class ActiveRecord::Reflection::RuntimeReflection < ::ActiveRecord::Reflection::AbstractReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1059
  def initialize(reflection, association); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1068
  def aliased_table; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1076
  def all_includes; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1057
  def constraints(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1057
  def join_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1072
  def join_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1064
  def klass; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1057
  def scope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1057
  def type(*_arg0, **_arg1, &_arg2); end
end

class ActiveRecord::Reflection::ThroughReflection < ::ActiveRecord::Reflection::AbstractReflection
  # source://activerecord/7.0.4/lib/active_record/reflection.rb#780
  def initialize(delegate_reflection); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def active_record(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#777
  def active_record_primary_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#992
  def add_as_polymorphic_through(reflection, seed); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#988
  def add_as_source(seed); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#996
  def add_as_through(seed); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def association_class(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#777
  def association_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#884
  def association_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def association_scope_cache(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def autosave=(arg); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def belongs_to?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def check_eager_loadable!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#942
  def check_validity!; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#856
  def clear_association_scope_cache; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#850
  def collect_join_chain; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def collection?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def compute_class(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#982
  def constraints; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def extensions(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#777
  def foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#777
  def foreign_type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def has_inverse?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def has_one?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#870
  def has_scope?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#777
  def join_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#777
  def join_id_for(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#894
  def join_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#866
  def join_scopes(table, predicate_builder, klass = T.unsafe(nil), record = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def join_table(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#792
  def klass; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def macro(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#877
  def nested?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def options(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def parent_reflection(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def parent_reflection=(arg); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def plural_name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def polymorphic?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def polymorphic_inverse_of(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def scope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def scope_for(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#862
  def scopes; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#934
  def source_options; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#813
  def source_reflection; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#913
  def source_reflection_name; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#909
  def source_reflection_names; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#938
  def through_options; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#829
  def through_reflection; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#788
  def through_reflection?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#777
  def type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1027
  def validate?(*_arg0, **_arg1, &_arg2); end

  protected

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1001
  def actual_source_reflection; end

  private

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1008
  def collect_join_reflections(seed); end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1006
  def delegate_reflection; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1019
  def derive_class_name; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#1017
  def inverse_name; end
end

class ActiveRecord::Relation
  include ::Enumerable
  include ::ActiveRecord::Delegation
  include ::ActiveRecord::Explain
  include ::ActiveRecord::Batches
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveRecord::QueryMethods
  include ::ActiveRecord::SpawnMethods
  include ::ActiveRecord::Calculations
  include ::ActiveRecord::FinderMethods
  extend ::ActiveRecord::Delegation::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/relation.rb#27
  def initialize(klass, table: T.unsafe(nil), predicate_builder: T.unsafe(nil), values: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#766
  def ==(other); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#432
  def _exec_scope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#811
  def alias_tracker(joins = T.unsafe(nil), aliases = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#284
  def any?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#43
  def bind_attribute(name, value); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#782
  def blank?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#66
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#320
  def cache_key(timestamp_column = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#399
  def cache_key_with_version; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#347
  def cache_version(timestamp_column = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#95
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#110
  def create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#209
  def create_or_find_by(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#218
  def create_or_find_by!(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#601
  def delete_all; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#642
  def delete_by(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#579
  def destroy_all; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#629
  def destroy_by(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#751
  def eager_loading?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#269
  def empty?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#803
  def empty_scope?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#255
  def encode_with(coder); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#239
  def explain; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#168
  def find_or_create_by(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#175
  def find_or_create_by!(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#226
  def find_or_initialize_by(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#119
  def first_or_create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#123
  def first_or_create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#127
  def first_or_initialize(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#807
  def has_limit_or_offset?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#794
  def inspect; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#761
  def joined_includes_values; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#21
  def klass; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#693
  def load(&block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#664
  def load_async; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#21
  def loaded; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#21
  def loaded?; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def locked?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#297
  def many?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#21
  def model; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#66
  def new(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#278
  def none?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#290
  def one?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#21
  def predicate_builder; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#825
  def preload_associations(records); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#777
  def pretty_print(q); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#249
  def records; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#703
  def reload; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#708
  def reset; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#683
  def scheduled?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#744
  def scope_for_create; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#421
  def scoping(all_queries: T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#260
  def size; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#22
  def skip_preloading_value; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#22
  def skip_preloading_value=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#21
  def table; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#244
  def to_a; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#244
  def to_ary; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#724
  def to_sql; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#559
  def touch_all(*names, time: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#488
  def update(id = T.unsafe(nil), attributes); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#496
  def update!(id = T.unsafe(nil), attributes); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#464
  def update_all(updates); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#516
  def update_counters(counters); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#786
  def values; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#790
  def values_for_queries; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#740
  def where_values_hash(relation_table_name = T.unsafe(nil)); end

  protected

  # source://activerecord/7.0.4/lib/active_record/relation.rb#835
  def load_records(records); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#840
  def null_relation?; end

  private

  # source://activerecord/7.0.4/lib/active_record/relation.rb#865
  def _create(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#869
  def _create!(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#900
  def _increment_attribute(attribute, value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#861
  def _new(attributes, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#873
  def _scoping(scope, registry, all_queries = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#889
  def _substitute_values(values); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#845
  def already_in_scope?(registry); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#325
  def compute_cache_key(timestamp_column = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#354
  def compute_cache_version(timestamp_column); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#853
  def current_scope_restoring_block(&block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#927
  def exec_main_query(async: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#907
  def exec_queries(&block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#849
  def global_scope?(registry); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#38
  def initialize_copy(other); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#947
  def instantiate_records(rows, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#990
  def limited_count; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#966
  def references_eager_loaded_tables?; end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#958
  def skip_query_cache_if_necessary(&block); end

  # source://activerecord/7.0.4/lib/active_record/relation.rb#983
  def tables_in_string(string); end
end

# source://activerecord/7.0.4/lib/active_record/relation.rb#13
ActiveRecord::Relation::CLAUSE_METHODS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Relation::FromClause
  # source://activerecord/7.0.4/lib/active_record/relation/from_clause.rb#8
  def initialize(value, name); end

  # source://activerecord/7.0.4/lib/active_record/relation/from_clause.rb#21
  def ==(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/from_clause.rb#17
  def empty?; end

  # source://activerecord/7.0.4/lib/active_record/relation/from_clause.rb#13
  def merge(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/from_clause.rb#6
  def name; end

  # source://activerecord/7.0.4/lib/active_record/relation/from_clause.rb#6
  def value; end

  class << self
    # source://activerecord/7.0.4/lib/active_record/relation/from_clause.rb#25
    def empty; end
  end
end

class ActiveRecord::Relation::HashMerger
  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#10
  def initialize(relation, hash, rewhere = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#8
  def hash; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#18
  def merge; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#26
  def other; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#8
  def relation; end
end

# source://activerecord/7.0.4/lib/active_record/relation.rb#14
ActiveRecord::Relation::INVALID_METHODS_FOR_DELETE_ALL = T.let(T.unsafe(nil), Array)

# source://activerecord/7.0.4/lib/active_record/relation.rb#6
ActiveRecord::Relation::MULTI_VALUE_METHODS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Relation::Merger
  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#47
  def initialize(relation, other, rewhere = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#60
  def merge; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#45
  def other; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#45
  def relation; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#45
  def values; end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#176
  def merge_clauses; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#117
  def merge_joins; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#155
  def merge_multi_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#136
  def merge_outer_joins; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#96
  def merge_preloads; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#84
  def merge_select_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#168
  def merge_single_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/merger.rb#186
  def replace_from_clause?; end
end

# source://activerecord/7.0.4/lib/active_record/relation/merger.rb#54
ActiveRecord::Relation::Merger::NORMAL_VALUES = T.let(T.unsafe(nil), Array)

class ActiveRecord::Relation::QueryAttribute < ::ActiveModel::Attribute
  # source://activerecord/7.0.4/lib/active_record/relation/query_attribute.rb#27
  def infinite?; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_attribute.rb#20
  def nil?; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_attribute.rb#8
  def type_cast(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_attribute.rb#31
  def unboundable?; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_attribute.rb#12
  def value_for_database; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_attribute.rb#16
  def with_cast_value(value); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/query_attribute.rb#39
  def infinity?(value); end
end

# source://activerecord/7.0.4/lib/active_record/relation.rb#10
ActiveRecord::Relation::SINGLE_VALUE_METHODS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Relation::StrictLoadingScope
  class << self
    # source://activerecord/7.0.4/lib/active_record/relation.rb#816
    def empty_scope?; end

    # source://activerecord/7.0.4/lib/active_record/relation.rb#820
    def strict_loading_value; end
  end
end

# source://activerecord/7.0.4/lib/active_record/relation.rb#16
ActiveRecord::Relation::VALUE_METHODS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Relation::WhereClause
  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#10
  def initialize(predicates); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#14
  def +(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#18
  def -(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#75
  def ==(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#8
  def any?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#70
  def ast; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#99
  def contradiction?; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#8
  def empty?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#75
  def eql?(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#36
  def except(*columns); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#110
  def extract_attributes; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#81
  def hash; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#85
  def invert; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#26
  def merge(other, rewhere = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#40
  def or(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#61
  def to_h(table_name = T.unsafe(nil), equality_only: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#22
  def |(other); end

  protected

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#117
  def predicates; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#119
  def referenced_columns; end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#126
  def each_attributes; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#145
  def equalities(predicates, equality_only); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#171
  def equality_node?(node); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#186
  def except_predicates(columns); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#136
  def extract_attribute(node); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#221
  def extract_node_value(node); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#175
  def invert_predicate(node); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#210
  def non_empty_predicates; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#159
  def predicates_unreferenced_by(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#199
  def predicates_with_wrapped_sql_literals; end

  # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#214
  def wrap_sql_literal(node); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#95
    def empty; end
  end
end

# source://activerecord/7.0.4/lib/active_record/relation/where_clause.rb#209
ActiveRecord::Relation::WhereClause::ARRAY_WITH_EMPTY_STRING = T.let(T.unsafe(nil), Array)

module ActiveRecord::Sanitization
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Sanitization::ClassMethods
end

module ActiveRecord::Sanitization::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#138
  def disallow_raw_sql!(args, permit: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#22
  def sanitize_sql(condition); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#125
  def sanitize_sql_array(ary); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#46
  def sanitize_sql_for_assignment(assignments, default_table_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#22
  def sanitize_sql_for_conditions(condition); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#62
  def sanitize_sql_for_order(condition); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#85
  def sanitize_sql_hash_for_assignment(attrs, table); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#109
  def sanitize_sql_like(string, escape_character = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#187
  def quote_bound_value(value, c = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#201
  def raise_if_bind_arity_mismatch(statement, expected, provided); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#167
  def replace_bind_variable(value, c = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#158
  def replace_bind_variables(statement, values); end

  # source://activerecord/7.0.4/lib/active_record/sanitization.rb#175
  def replace_named_bind_variables(statement, bind_vars); end
end

module ActiveRecord::Scoping
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Autoload
  include GeneratedInstanceMethods
  include ::ActiveRecord::Scoping::Default
  include ::ActiveRecord::Scoping::Named

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Scoping::ClassMethods
  mixes_in_class_methods ::ActiveRecord::Scoping::Default::ClassMethods
  mixes_in_class_methods ::ActiveRecord::Scoping::Named::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#54
  def initialize_internals_callback; end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#47
  def populate_with_current_scope_attributes; end

  module GeneratedClassMethods
    def default_scope_override; end
    def default_scope_override=(value); end
    def default_scopes; end
    def default_scopes=(value); end
  end

  module GeneratedInstanceMethods
    def default_scope_override; end
    def default_scopes; end
  end
end

module ActiveRecord::Scoping::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/scoping.rb#26
  def current_scope(skip_inherited_scope = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#30
  def current_scope=(scope); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#34
  def global_current_scope(skip_inherited_scope = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#38
  def global_current_scope=(scope); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#17
  def scope_attributes; end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#22
  def scope_attributes?; end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#42
  def scope_registry; end
end

module ActiveRecord::Scoping::Default
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Scoping::Default::ClassMethods

  module GeneratedClassMethods
    def default_scope_override; end
    def default_scope_override=(value); end
    def default_scopes; end
    def default_scopes=(value); end
  end

  module GeneratedInstanceMethods
    def default_scope_override; end
    def default_scopes; end
  end
end

module ActiveRecord::Scoping::Default::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#54
  def default_scopes?(all_queries: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#47
  def scope_attributes?; end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#42
  def unscoped(&block); end

  private

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#135
  def build_default_scope(relation = T.unsafe(nil), all_queries: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#119
  def default_scope(scope = T.unsafe(nil), all_queries: T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#182
  def evaluate_default_scope; end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#167
  def execute_scope?(all_queries, default_scope_obj); end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#175
  def ignore_default_scope=(ignore); end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#171
  def ignore_default_scope?; end
end

class ActiveRecord::Scoping::DefaultScope
  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#8
  def initialize(scope, all_queries = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#6
  def all_queries; end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#6
  def scope; end
end

module ActiveRecord::Scoping::Named
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Scoping::Named::ClassMethods
end

module ActiveRecord::Scoping::Named::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/scoping/named.rb#22
  def all; end

  # source://activerecord/7.0.4/lib/active_record/scoping/named.rb#49
  def default_extensions; end

  # source://activerecord/7.0.4/lib/active_record/scoping/named.rb#45
  def default_scoped(scope = T.unsafe(nil), all_queries: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping/named.rb#154
  def scope(name, body, &block); end

  # source://activerecord/7.0.4/lib/active_record/scoping/named.rb#36
  def scope_for_association(scope = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/scoping/named.rb#192
  def singleton_method_added(name); end
end

class ActiveRecord::Scoping::ScopeRegistry
  # source://activerecord/7.0.4/lib/active_record/scoping.rb#86
  def initialize; end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#92
  def current_scope(model, skip_inherited_scope = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#108
  def global_current_scope(model, skip_inherited_scope = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#100
  def ignore_default_scope(model, skip_inherited_scope = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#96
  def set_current_scope(model, value); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#112
  def set_global_current_scope(model, value); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#104
  def set_ignore_default_scope(model, value); end

  private

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#130
  def set_value_for(scope_type, model, value); end

  # source://activerecord/7.0.4/lib/active_record/scoping.rb#118
  def value_for(scope_type, model, skip_inherited_scope = T.unsafe(nil)); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/scoping.rb#78
    def current_scope(*_arg0, **_arg1, &_arg2); end

    # source://activerecord/7.0.4/lib/active_record/scoping.rb#78
    def global_current_scope(*_arg0, **_arg1, &_arg2); end

    # source://activerecord/7.0.4/lib/active_record/scoping.rb#78
    def ignore_default_scope(*_arg0, **_arg1, &_arg2); end

    # source://activerecord/7.0.4/lib/active_record/scoping.rb#81
    def instance; end

    # source://activerecord/7.0.4/lib/active_record/scoping.rb#78
    def set_current_scope(*_arg0, **_arg1, &_arg2); end

    # source://activerecord/7.0.4/lib/active_record/scoping.rb#78
    def set_global_current_scope(*_arg0, **_arg1, &_arg2); end

    # source://activerecord/7.0.4/lib/active_record/scoping.rb#78
    def set_ignore_default_scope(*_arg0, **_arg1, &_arg2); end
  end
end

module ActiveRecord::SecureToken
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::SecureToken::ClassMethods
end

module ActiveRecord::SecureToken::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/secure_token.rb#43
  def generate_unique_secure_token(length: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/secure_token.rb#32
  def has_secure_token(attribute = T.unsafe(nil), length: T.unsafe(nil)); end
end

# source://activerecord/7.0.4/lib/active_record/secure_token.rb#7
ActiveRecord::SecureToken::MINIMUM_TOKEN_LENGTH = T.let(T.unsafe(nil), Integer)

class ActiveRecord::SecureToken::MinimumLengthError < ::StandardError; end

module ActiveRecord::Serialization
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveModel::Serializers::JSON

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Naming

  # source://activerecord/7.0.4/lib/active_record/serialization.rb#13
  def serializable_hash(options = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/serialization.rb#25
  def attribute_names_for_serialization; end

  module GeneratedClassMethods
    def include_root_in_json; end
    def include_root_in_json=(value); end
    def include_root_in_json?; end
  end

  module GeneratedInstanceMethods
    def include_root_in_json; end
    def include_root_in_json?; end
  end
end

module ActiveRecord::SignedId
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::SignedId::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#112
  def signed_id(expires_in: T.unsafe(nil), purpose: T.unsafe(nil)); end

  module GeneratedClassMethods
    def signed_id_verifier_secret; end
    def signed_id_verifier_secret=(value); end
    def signed_id_verifier_secret?; end
  end

  module GeneratedInstanceMethods
    def signed_id_verifier_secret; end
    def signed_id_verifier_secret?; end
  end
end

module ActiveRecord::SignedId::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#92
  def combine_signed_id_purposes(purpose); end

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#42
  def find_signed(signed_id, purpose: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#62
  def find_signed!(signed_id, purpose: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#71
  def signed_id_verifier; end

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#87
  def signed_id_verifier=(verifier); end
end

module ActiveRecord::SpawnMethods
  # source://activerecord/7.0.4/lib/active_record/relation/spawn_methods.rb#58
  def except(*skips); end

  # source://activerecord/7.0.4/lib/active_record/relation/spawn_methods.rb#31
  def merge(other, *rest); end

  # source://activerecord/7.0.4/lib/active_record/relation/spawn_methods.rb#41
  def merge!(other, *rest); end

  # source://activerecord/7.0.4/lib/active_record/relation/spawn_methods.rb#66
  def only(*onlies); end

  # source://activerecord/7.0.4/lib/active_record/relation/spawn_methods.rb#10
  def spawn; end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/spawn_methods.rb#71
  def relation_with(values); end
end

module ActiveRecord::Store
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Store::ClassMethods

  private

  # source://activerecord/7.0.4/lib/active_record/store.rb#206
  def read_store_attribute(store_attribute, key); end

  # source://activerecord/7.0.4/lib/active_record/store.rb#216
  def store_accessor_for(store_attribute); end

  # source://activerecord/7.0.4/lib/active_record/store.rb#211
  def write_store_attribute(store_attribute, key, value); end
end

module ActiveRecord::Store::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/store.rb#188
  def _store_accessors_module; end

  # source://activerecord/7.0.4/lib/active_record/store.rb#104
  def store(store_attribute, options = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/store.rb#109
  def store_accessor(store_attribute, *keys, prefix: T.unsafe(nil), suffix: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/store.rb#196
  def stored_attributes; end
end

class ActiveRecord::Store::HashAccessor
  class << self
    # source://activerecord/7.0.4/lib/active_record/store.rb#234
    def prepare(object, attribute); end

    # source://activerecord/7.0.4/lib/active_record/store.rb#221
    def read(object, attribute, key); end

    # source://activerecord/7.0.4/lib/active_record/store.rb#226
    def write(object, attribute, key, value); end
  end
end

class ActiveRecord::Store::IndifferentCoder
  # source://activerecord/7.0.4/lib/active_record/store.rb#261
  def initialize(attr_name, coder_or_class_name); end

  # source://activerecord/7.0.4/lib/active_record/store.rb#270
  def dump(obj); end

  # source://activerecord/7.0.4/lib/active_record/store.rb#274
  def load(yaml); end

  private

  # source://activerecord/7.0.4/lib/active_record/store.rb#290
  def as_regular_hash(obj); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/store.rb#278
    def as_indifferent_hash(obj); end
  end
end

class ActiveRecord::Store::IndifferentHashAccessor < ::ActiveRecord::Store::HashAccessor
  class << self
    # source://activerecord/7.0.4/lib/active_record/store.rb#250
    def prepare(object, store_attribute); end
  end
end

class ActiveRecord::Store::StringKeyedHashAccessor < ::ActiveRecord::Store::HashAccessor
  class << self
    # source://activerecord/7.0.4/lib/active_record/store.rb#240
    def read(object, attribute, key); end

    # source://activerecord/7.0.4/lib/active_record/store.rb#244
    def write(object, attribute, key, value); end
  end
end

module ActiveRecord::Suppressor
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Suppressor::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/suppressor.rb#49
  def save(**_arg0); end

  # source://activerecord/7.0.4/lib/active_record/suppressor.rb#53
  def save!(**_arg0); end

  class << self
    # source://activerecord/7.0.4/lib/active_record/suppressor.rb#34
    def registry; end
  end
end

module ActiveRecord::Suppressor::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/suppressor.rb#40
  def suppress(&block); end
end

module ActiveRecord::Timestamp
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Timestamp::ClassMethods

  private

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#99
  def _create_record; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#111
  def _update_record; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#141
  def all_timestamp_attributes_in_model; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#156
  def clear_timestamp_attributes; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#124
  def create_or_update(touch: T.unsafe(nil), **_arg1); end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#145
  def current_time_from_proper_timezone; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#50
  def initialize_dup(other); end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#149
  def max_updated_column_timestamp; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#129
  def should_record_timestamps?; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#133
  def timestamp_attributes_for_create_in_model; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#137
  def timestamp_attributes_for_update_in_model; end

  module GeneratedClassMethods
    def record_timestamps; end
    def record_timestamps=(value); end
    def record_timestamps?; end
  end

  module GeneratedInstanceMethods
    def record_timestamps; end
    def record_timestamps=(value); end
    def record_timestamps?; end
  end
end

module ActiveRecord::Timestamp::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#72
  def all_timestamp_attributes_in_model; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#77
  def current_time_from_proper_timezone; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#62
  def timestamp_attributes_for_create_in_model; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#67
  def timestamp_attributes_for_update_in_model; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#56
  def touch_attributes_with_time(*names, time: T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#90
  def reload_schema_from_cache; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#82
  def timestamp_attributes_for_create; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#86
  def timestamp_attributes_for_update; end
end

module ActiveRecord::TouchLater
  # source://activerecord/7.0.4/lib/active_record/touch_later.rb#6
  def before_committed!; end

  # source://activerecord/7.0.4/lib/active_record/touch_later.rb#34
  def touch(*names, time: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/touch_later.rb#11
  def touch_later(*names); end

  private

  # source://activerecord/7.0.4/lib/active_record/touch_later.rb#61
  def belongs_to_touch_method; end

  # source://activerecord/7.0.4/lib/active_record/touch_later.rb#57
  def has_defer_touch_attrs?; end

  # source://activerecord/7.0.4/lib/active_record/touch_later.rb#45
  def surreptitiously_touch(attr_names); end

  # source://activerecord/7.0.4/lib/active_record/touch_later.rb#52
  def touch_deferred_attributes; end
end

module ActiveRecord::Transactions
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Transactions::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#309
  def before_committed!; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#317
  def committed!(should_run_callbacks: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#293
  def destroy; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#329
  def rolledback!(force_restore_state: T.unsafe(nil), should_run_callbacks: T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#297
  def save(**_arg0); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#301
  def save!(**_arg0); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#305
  def touch(*_arg0, **_arg1); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#289
  def transaction(**options, &block); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#360
  def trigger_transactional_callbacks?; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#345
  def with_transaction_returning_status; end

  private

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#366
  def _committed_already_called; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#366
  def _trigger_destroy_callback; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#366
  def _trigger_update_callback; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#433
  def add_to_transaction(ensure_finalize = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#389
  def clear_transaction_record_state; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#437
  def has_transactional_callbacks?; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#369
  def remember_transaction_record_state; end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#396
  def restore_transaction_record_state(force_restore_state = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#418
  def transaction_include_any_action?(actions); end
end

# source://activerecord/7.0.4/lib/active_record/transactions.rb#8
ActiveRecord::Transactions::ACTIONS = T.let(T.unsafe(nil), Array)

module ActiveRecord::Transactions::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/transactions.rb#229
  def after_commit(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#241
  def after_create_commit(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#253
  def after_destroy_commit(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#261
  def after_rollback(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#235
  def after_save_commit(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#247
  def after_update_commit(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#212
  def before_commit(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#208
  def transaction(**options, &block); end

  private

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#281
  def assert_valid_transaction_action(actions); end

  # source://activerecord/7.0.4/lib/active_record/transactions.rb#267
  def set_options_for_callbacks!(args, enforced_options = T.unsafe(nil)); end
end

module ActiveRecord::Translation
  include ::ActiveModel::Naming
  include ::ActiveModel::Translation

  # source://activerecord/7.0.4/lib/active_record/translation.rb#20
  def i18n_scope; end

  # source://activerecord/7.0.4/lib/active_record/translation.rb#8
  def lookup_ancestors; end
end

module ActiveRecord::Validations
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods
  mixes_in_class_methods ::ActiveRecord::Validations::ClassMethods

  # source://activerecord/7.0.4/lib/active_record/validations.rb#46
  def save(**options); end

  # source://activerecord/7.0.4/lib/active_record/validations.rb#52
  def save!(**options); end

  # source://activerecord/7.0.4/lib/active_record/validations.rb#66
  def valid?(context = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/validations.rb#66
  def validate(context = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/validations.rb#75
  def default_validation_context; end

  # source://activerecord/7.0.4/lib/active_record/validations.rb#83
  def perform_validations(options = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/validations.rb#79
  def raise_validation_error; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
  end
end

class ActiveRecord::Validations::AbsenceValidator < ::ActiveModel::Validations::AbsenceValidator
  # source://activerecord/7.0.4/lib/active_record/validations/absence.rb#6
  def validate_each(record, attribute, association_or_value); end
end

class ActiveRecord::Validations::AssociatedValidator < ::ActiveModel::EachValidator
  # source://activerecord/7.0.4/lib/active_record/validations/associated.rb#6
  def validate_each(record, attribute, value); end

  private

  # source://activerecord/7.0.4/lib/active_record/validations/associated.rb#13
  def valid_object?(record); end
end

module ActiveRecord::Validations::ClassMethods
  # source://activerecord/7.0.4/lib/active_record/validations/absence.rb#20
  def validates_absence_of(*attr_names); end

  # source://activerecord/7.0.4/lib/active_record/validations/associated.rb#54
  def validates_associated(*attr_names); end

  # source://activerecord/7.0.4/lib/active_record/validations/length.rb#19
  def validates_length_of(*attr_names); end

  # source://activerecord/7.0.4/lib/active_record/validations/numericality.rb#30
  def validates_numericality_of(*attr_names); end

  # source://activerecord/7.0.4/lib/active_record/validations/presence.rb#63
  def validates_presence_of(*attr_names); end

  # source://activerecord/7.0.4/lib/active_record/validations/length.rb#19
  def validates_size_of(*attr_names); end

  # source://activerecord/7.0.4/lib/active_record/validations/uniqueness.rb#241
  def validates_uniqueness_of(*attr_names); end
end

class ActiveRecord::Validations::LengthValidator < ::ActiveModel::Validations::LengthValidator
  # source://activerecord/7.0.4/lib/active_record/validations/length.rb#6
  def validate_each(record, attribute, association_or_value); end
end

class ActiveRecord::Validations::NumericalityValidator < ::ActiveModel::Validations::NumericalityValidator
  # source://activerecord/7.0.4/lib/active_record/validations/numericality.rb#6
  def validate_each(record, attribute, value, precision: T.unsafe(nil), scale: T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/validations/numericality.rb#13
  def column_precision_for(record, attribute); end

  # source://activerecord/7.0.4/lib/active_record/validations/numericality.rb#17
  def column_scale_for(record, attribute); end
end

class ActiveRecord::Validations::PresenceValidator < ::ActiveModel::Validations::PresenceValidator
  # source://activerecord/7.0.4/lib/active_record/validations/presence.rb#6
  def validate_each(record, attribute, association_or_value); end
end

class ActiveRecord::Validations::UniquenessValidator < ::ActiveModel::EachValidator
  # source://activerecord/7.0.4/lib/active_record/validations/uniqueness.rb#6
  def initialize(options); end

  # source://activerecord/7.0.4/lib/active_record/validations/uniqueness.rb#19
  def validate_each(record, attribute, value); end

  private

  # source://activerecord/7.0.4/lib/active_record/validations/uniqueness.rb#67
  def build_relation(klass, attribute, value); end

  # source://activerecord/7.0.4/lib/active_record/validations/uniqueness.rb#57
  def find_finder_class_for(record); end

  # source://activerecord/7.0.4/lib/active_record/validations/uniqueness.rb#98
  def map_enum_attribute(klass, attribute, value); end

  # source://activerecord/7.0.4/lib/active_record/validations/uniqueness.rb#85
  def scope_relation(record, relation); end
end

module ActiveSupport::Autoload
  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#37
  def autoload(const_name, path = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#57
  def autoload_at(path); end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#50
  def autoload_under(path); end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#75
  def autoloads; end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#64
  def eager_autoload; end

  # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#71
  def eager_load!; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/dependencies/autoload.rb#28
    def extended(base); end
  end
end

module ActiveSupport::Benchmarkable
  # source://activesupport/7.0.4/lib/active_support/benchmarkable.rb#37
  def benchmark(message = T.unsafe(nil), options = T.unsafe(nil), &block); end
end

module ActiveSupport::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#95
  def run_callbacks(kind); end

  private

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#147
  def halted_callback_hook(filter, name); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://activesupport/7.0.4/lib/active_support/callbacks.rb#71
ActiveSupport::Callbacks::CALLBACK_FILTER_TYPES = T.let(T.unsafe(nil), Array)

module ActiveSupport::Callbacks::CallTemplate
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#533
    def build(filter, callback); end
  end
end

class ActiveSupport::Callbacks::CallTemplate::InstanceExec0
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#435
  def initialize(block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#439
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#449
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#443
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::InstanceExec1
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#457
  def initialize(block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#461
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#471
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#465
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::InstanceExec2
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#479
  def initialize(block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#483
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#495
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#488
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::MethodCall
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#377
  def initialize(method); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#394
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#404
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#398
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::ObjectCall
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#412
  def initialize(target, method); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#417
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#427
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#421
  def make_lambda; end
end

class ActiveSupport::Callbacks::CallTemplate::ProcCall
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#504
  def initialize(target); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#508
  def expand(target, value, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#518
  def inverted_lambda; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#512
  def make_lambda; end
end

class ActiveSupport::Callbacks::Callback
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#295
  def initialize(name, filter, kind, options, chain_config); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#330
  def apply(callback_sequence); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#293
  def chain_config; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#344
  def current_scopes; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#320
  def duplicates?(other); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#293
  def filter; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def kind; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def kind=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#316
  def matches?(_kind, _filter); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#304
  def merge_conditional_options(chain, if_option:, unless_option:); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def name; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#292
  def name=(_arg0); end

  private

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#352
  def check_conditionals(conditionals); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#367
  def conditions_lambdas; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#281
    def build(chain, filter, kind, options); end
  end
end

class ActiveSupport::Callbacks::CallbackChain
  include ::Enumerable

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#608
  def initialize(name, config); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#654
  def append(*callbacks); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#633
  def clear; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#645
  def compile; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#606
  def config; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#628
  def delete(o); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#619
  def each(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#621
  def empty?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#620
  def index(o); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#623
  def insert(index, o); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#606
  def name; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#658
  def prepend(*callbacks); end

  protected

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#663
  def chain; end

  private

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#666
  def append_one(callback); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#683
  def default_terminator; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#639
  def initialize_copy(other); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#672
  def prepend_one(callback); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#678
  def remove_duplicates(callback); end
end

class ActiveSupport::Callbacks::CallbackSequence
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#557
  def initialize(nested = T.unsafe(nil), call_template = T.unsafe(nil), user_conditions = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#571
  def after(&after); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#576
  def around(call_template, user_conditions); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#566
  def before(&before); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#590
  def expand_call_template(arg, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#586
  def final?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#598
  def invoke_after(arg); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#594
  def invoke_before(arg); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#584
  def nested; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#580
  def skip?(arg); end
end

module ActiveSupport::Callbacks::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#705
  def __update_callbacks(name); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#917
  def define_callbacks(*names); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#696
  def normalize_callback_params(filters, block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#827
  def reset_callbacks(name); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#756
  def set_callback(name, *filter_list, &block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#802
  def skip_callback(name, *filter_list, &block); end

  protected

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#948
  def get_callbacks(name); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#952
  def set_callbacks(name, callbacks); end
end

module ActiveSupport::Callbacks::Conditionals; end

class ActiveSupport::Callbacks::Conditionals::Value
  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#152
  def initialize(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#155
  def call(target, value); end
end

module ActiveSupport::Callbacks::Filters; end

class ActiveSupport::Callbacks::Filters::After
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#213
    def build(callback_sequence, user_callback, user_conditions, chain_config); end

    private

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#255
    def conditional(callback_sequence, user_callback, user_conditions); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#244
    def halting(callback_sequence, user_callback); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#229
    def halting_and_conditional(callback_sequence, user_callback, user_conditions); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#269
    def simple(callback_sequence, user_callback); end
  end
end

class ActiveSupport::Callbacks::Filters::Before
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#163
    def build(callback_sequence, user_callback, user_conditions, chain_config, filter, name); end

    private

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#192
    def halting(callback_sequence, user_callback, halted_lambda, filter, name); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#173
    def halting_and_conditional(callback_sequence, user_callback, user_conditions, halted_lambda, filter, name); end
  end
end

class ActiveSupport::Callbacks::Filters::Environment < ::Struct
  def halted; end
  def halted=(_); end
  def target; end
  def target=(_); end
  def value; end
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module ActiveSupport::Concern
  # source://activesupport/7.0.4/lib/active_support/concern.rb#127
  def append_features(base); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#207
  def class_methods(&class_methods_module_definition); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#156
  def included(base = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#140
  def prepend_features(base); end

  # source://activesupport/7.0.4/lib/active_support/concern.rb#173
  def prepended(base = T.unsafe(nil), &block); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/concern.rb#123
    def extended(base); end
  end
end

class ActiveSupport::Concern::MultipleIncludedBlocks < ::StandardError
  # source://activesupport/7.0.4/lib/active_support/concern.rb#112
  def initialize; end
end

class ActiveSupport::Concern::MultiplePrependBlocks < ::StandardError
  # source://activesupport/7.0.4/lib/active_support/concern.rb#118
  def initialize; end
end

module ActiveSupport::Configurable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveSupport::Configurable::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#145
  def config; end
end

module ActiveSupport::Configurable::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/configurable.rb#28
  def config; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#37
  def configure; end

  private

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#109
  def config_accessor(*names, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil)); end
end

class ActiveSupport::Configurable::Configuration < ::ActiveSupport::InheritableOptions
  # source://activesupport/7.0.4/lib/active_support/configurable.rb#13
  def compile_methods!; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/configurable.rb#18
    def compile_methods!(keys); end
  end
end

module ActiveSupport::DescendantsTracker
  # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#88
  def descendants; end

  # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#92
  def direct_descendants; end

  # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#82
  def subclasses; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#66
    def clear(classes); end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#62
    def descendants(klass); end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#11
    def direct_descendants(klass); end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#50
    def disable_clear!; end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#77
    def native?; end

    # source://activesupport/7.0.4/lib/active_support/descendants_tracker.rb#58
    def subclasses(klass); end
  end
end

class ActiveSupport::InheritableOptions < ::ActiveSupport::OrderedOptions
  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#80
  def initialize(parent = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#91
  def inheritable_copy; end
end

class ActiveSupport::LogSubscriber < ::ActiveSupport::Subscriber
  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
  def colorize_logging; end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
  def colorize_logging=(val); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def debug(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def error(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def fatal(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#114
  def finish(name, id, payload); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def info(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#106
  def logger; end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#120
  def publish_event(event); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#110
  def start(name, id, payload); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def unknown(progname = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#129
  def warn(progname = T.unsafe(nil), &block); end

  private

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#139
  def color(text, color, bold = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#146
  def log_exception(name, e); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
    def colorize_logging; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#80
    def colorize_logging=(val); end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#96
    def flush_all!; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#91
    def log_subscribers; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#83
    def logger; end

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#89
    def logger=(_arg0); end

    private

    # source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#101
    def fetch_public_methods(subscriber, inherit_all); end
  end
end

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#71
ActiveSupport::LogSubscriber::BLACK = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#75
ActiveSupport::LogSubscriber::BLUE = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#68
ActiveSupport::LogSubscriber::BOLD = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#67
ActiveSupport::LogSubscriber::CLEAR = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#77
ActiveSupport::LogSubscriber::CYAN = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#73
ActiveSupport::LogSubscriber::GREEN = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#76
ActiveSupport::LogSubscriber::MAGENTA = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#72
ActiveSupport::LogSubscriber::RED = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#78
ActiveSupport::LogSubscriber::WHITE = T.let(T.unsafe(nil), String)

# source://activesupport/7.0.4/lib/active_support/log_subscriber.rb#74
ActiveSupport::LogSubscriber::YELLOW = T.let(T.unsafe(nil), String)

class ActiveSupport::OrderedOptions < ::Hash
  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#39
  def [](key); end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#35
  def []=(key, value); end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#62
  def extractable_options?; end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#66
  def inspect; end

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#43
  def method_missing(name, *args); end

  protected

  def _get(_arg0); end

  private

  # source://activesupport/7.0.4/lib/active_support/ordered_options.rb#58
  def respond_to_missing?(name, include_private); end
end

module ActiveSupport::Rescuable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#170
  def handler_for_rescue(exception); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#164
  def rescue_with_handler(exception); end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

module ActiveSupport::Rescuable::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#103
  def handler_for_rescue(exception, object: T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#51
  def rescue_from(*klasses, with: T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#88
  def rescue_with_handler(exception, object: T.unsafe(nil), visited_exceptions: T.unsafe(nil)); end

  private

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#137
  def constantize_rescue_handler_class(class_or_name); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#122
  def find_rescue_handler(exception); end
end

class ActiveSupport::Subscriber
  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#128
  def initialize; end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#143
  def finish(name, id, payload); end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#126
  def patterns; end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#152
  def publish_event(event); end

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#134
  def start(name, id, payload); end

  private

  # source://activesupport/7.0.4/lib/active_support/subscriber.rb#158
  def event_stack; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#33
    def attach_to(namespace, subscriber = T.unsafe(nil), notifier = T.unsafe(nil), inherit_all: T.unsafe(nil)); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#48
    def detach_from(namespace, notifier = T.unsafe(nil)); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#67
    def method_added(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#76
    def subscribers; end

    private

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#83
    def add_event_subscriber(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#121
    def fetch_public_methods(subscriber, inherit_all); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#105
    def find_attached_subscriber; end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#109
    def invalid_event?(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#81
    def namespace; end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#81
    def notifier; end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#117
    def pattern_subscribed?(pattern); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#113
    def prepare_pattern(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#94
    def remove_event_subscriber(event); end

    # source://activesupport/7.0.4/lib/active_support/subscriber.rb#81
    def subscriber; end
  end
end

class ActiveSupport::TestCase < ::Minitest::Test
  include ::ActiveSupport::Testing::SetupAndTeardown
  include ::ActiveSupport::Testing::TaggedLogging
  include ::ActiveSupport::Callbacks
  include ::ActiveSupport::Testing::Assertions
  include ::ActiveSupport::Testing::Deprecation
  include ::ActiveSupport::Testing::TimeHelpers
  include ::ActiveSupport::Testing::FileFixtures
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveSupport::Testing::SetupAndTeardown::ClassMethods
  extend ::ActiveSupport::Testing::Declarative

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_setup_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_teardown_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _setup_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _teardown_callbacks; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#709
  def assert_no_match(matcher, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#638
  def assert_not_empty(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#649
  def assert_not_equal(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#661
  def assert_not_in_delta(exp, act, delta = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#673
  def assert_not_in_epsilon(a, b, epsilon = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#680
  def assert_not_includes(collection, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#691
  def assert_not_instance_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#701
  def assert_not_kind_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#719
  def assert_not_nil(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#730
  def assert_not_operator(o1, op, o2 = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#753
  def assert_not_predicate(o1, op, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#761
  def assert_not_respond_to(obj, meth, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#770
  def assert_not_same(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#396
  def assert_raise(*exp); end

  # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
  def file_fixture_path; end

  # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
  def file_fixture_path?; end

  # source://activesupport/7.0.4/lib/active_support/test_case.rb#151
  def inspect; end

  # source://minitest/5.16.3/lib/minitest.rb#304
  def method_name; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _setup_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _setup_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _teardown_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _teardown_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path; end

    # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path=(value); end

    # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#20
    def file_fixture_path?; end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#79
    def parallelize(workers: T.unsafe(nil), with: T.unsafe(nil), threshold: T.unsafe(nil)); end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#101
    def parallelize_setup(&block); end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#118
    def parallelize_teardown(&block); end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#42
    def test_order; end

    # source://activesupport/7.0.4/lib/active_support/test_case.rb#32
    def test_order=(new_order); end
  end
end

# source://activesupport/7.0.4/lib/active_support/test_case.rb#20
ActiveSupport::TestCase::Assertion = Minitest::Assertion

module ActiveSupport::Testing::Assertions
  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#175
  def assert_changes(expression, message = T.unsafe(nil), from: T.unsafe(nil), to: T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#86
  def assert_difference(expression, *args, &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#222
  def assert_no_changes(expression, message = T.unsafe(nil), from: T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#137
  def assert_no_difference(expression, message = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#21
  def assert_not(object, message = T.unsafe(nil)); end

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#33
  def assert_nothing_raised; end

  private

  # source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#249
  def _assert_nothing_raised_or_warn(assertion, &block); end
end

# source://activesupport/7.0.4/lib/active_support/testing/assertions.rb#8
ActiveSupport::Testing::Assertions::UNTRACKED = T.let(T.unsafe(nil), Object)

module ActiveSupport::Testing::Declarative
  # source://activesupport/7.0.4/lib/active_support/testing/declarative.rb#13
  def test(name, &block); end
end

module ActiveSupport::Testing::Deprecation
  # source://activesupport/7.0.4/lib/active_support/testing/deprecation.rb#31
  def assert_deprecated(match = T.unsafe(nil), deprecator = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/deprecation.rb#56
  def assert_not_deprecated(deprecator = T.unsafe(nil), &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/deprecation.rb#75
  def collect_deprecations(deprecator = T.unsafe(nil)); end
end

module ActiveSupport::Testing::FileFixtures
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://activesupport/7.0.4/lib/active_support/testing/file_fixtures.rb#26
  def file_fixture(fixture_name); end

  module GeneratedClassMethods
    def file_fixture_path; end
    def file_fixture_path=(value); end
    def file_fixture_path?; end
  end

  module GeneratedInstanceMethods
    def file_fixture_path; end
    def file_fixture_path?; end
  end
end

module ActiveSupport::Testing::SetupAndTeardown
  # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#44
  def after_teardown; end

  # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#39
  def before_setup; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#21
    def prepended(klass); end
  end
end

module ActiveSupport::Testing::SetupAndTeardown::ClassMethods
  # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#29
  def setup(*args, &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/setup_and_teardown.rb#34
  def teardown(*args, &block); end
end

module ActiveSupport::Testing::TaggedLogging
  # source://activesupport/7.0.4/lib/active_support/testing/tagged_logging.rb#10
  def before_setup; end

  # source://activesupport/7.0.4/lib/active_support/testing/tagged_logging.rb#8
  def tagged_logger=(_arg0); end

  private

  # source://activesupport/7.0.4/lib/active_support/testing/tagged_logging.rb#22
  def tagged_logger; end
end

module ActiveSupport::Testing::TimeHelpers
  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#70
  def after_teardown; end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#234
  def freeze_time(&block); end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#93
  def travel(duration, &block); end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#208
  def travel_back; end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#128
  def travel_to(date_or_time); end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#208
  def unfreeze_time; end

  private

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#243
  def in_block; end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#243
  def in_block=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/testing/time_helpers.rb#239
  def simple_stubs; end
end

class Loofah::Scrubber
  # source://loofah/2.19.0/lib/loofah/scrubber.rb#65
  def initialize(options = T.unsafe(nil), &block); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#94
  def append_attribute(node, attribute, value); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#49
  def block; end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#44
  def direction; end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#86
  def scrub(node); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#78
  def traverse(node); end

  private

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#103
  def html5lib_sanitize(node); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#125
  def traverse_conditionally_bottom_up(node); end

  # source://loofah/2.19.0/lib/loofah/scrubber.rb#116
  def traverse_conditionally_top_down(node); end
end

# source://loofah/2.19.0/lib/loofah/scrubber.rb#37
Loofah::Scrubber::CONTINUE = T.let(T.unsafe(nil), Object)

# source://loofah/2.19.0/lib/loofah/scrubber.rb#40
Loofah::Scrubber::STOP = T.let(T.unsafe(nil), Object)

module Mail
  class << self
    # source://mail/2.7.1/lib/mail/mail.rb#163
    def all(*args, &block); end

    # source://mail/2.7.1/lib/mail/mail.rb#183
    def connection(&block); end

    # source://mail/2.7.1/lib/mail/mail.rb#98
    def defaults(&block); end

    # source://mail/2.7.1/lib/mail/mail.rb#174
    def delete_all(*args, &block); end

    # source://mail/2.7.1/lib/mail/mail.rb#131
    def deliver(*args, &block); end

    # source://mail/2.7.1/lib/mail/mail.rb#103
    def delivery_method; end

    # source://mail/2.7.1/lib/mail.rb#53
    def eager_autoload!; end

    # source://mail/2.7.1/lib/mail/mail.rb#139
    def find(*args, &block); end

    # source://mail/2.7.1/lib/mail/mail.rb#145
    def find_and_delete(*args, &block); end

    # source://mail/2.7.1/lib/mail/mail.rb#151
    def first(*args, &block); end

    # source://actionmailbox//lib/action_mailbox/mail_ext/from_source.rb#4
    def from_source(source); end

    # source://mail/2.7.1/lib/mail/mail.rb#233
    def inform_interceptors(mail); end

    # source://mail/2.7.1/lib/mail/mail.rb#227
    def inform_observers(mail); end

    # source://mail/2.7.1/lib/mail/mail.rb#157
    def last(*args, &block); end

    # source://mail/2.7.1/lib/mail/mail.rb#50
    def new(*args, &block); end

    # source://mail/2.7.1/lib/mail/mail.rb#243
    def random_tag; end

    # source://mail/2.7.1/lib/mail/mail.rb#168
    def read(filename); end

    # source://mail/2.7.1/lib/mail/mail.rb#179
    def read_from_string(mail_as_string); end

    # source://mail/2.7.1/lib/mail.rb#41
    def register_autoload(name, path); end

    # source://mail/2.7.1/lib/mail/mail.rb#215
    def register_interceptor(interceptor); end

    # source://mail/2.7.1/lib/mail/mail.rb#196
    def register_observer(observer); end

    # source://mail/2.7.1/lib/mail/mail.rb#108
    def retriever_method; end

    # source://mail/2.7.1/lib/mail/mail.rb#252
    def something_random; end

    # source://mail/2.7.1/lib/mail/mail.rb#256
    def uniq; end

    # source://mail/2.7.1/lib/mail/mail.rb#223
    def unregister_interceptor(interceptor); end

    # source://mail/2.7.1/lib/mail/mail.rb#204
    def unregister_observer(observer); end
  end
end

class Mail::Address
  include ::Mail::Constants
  include ::Mail::Utilities

  # source://mail/2.7.1/lib/mail/elements/address.rb#25
  def initialize(value = T.unsafe(nil)); end

  # source://actionmailbox//lib/action_mailbox/mail_ext/address_equality.rb#5
  def ==(other_address); end

  # source://mail/2.7.1/lib/mail/elements/address.rb#65
  def address(output_type = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/elements/address.rb#79
  def address=(value); end

  # source://mail/2.7.1/lib/mail/elements/address.rb#132
  def comments; end

  # source://mail/2.7.1/lib/mail/elements/address.rb#173
  def decoded; end

  # source://mail/2.7.1/lib/mail/elements/address.rb#87
  def display_name(output_type = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/elements/address.rb#99
  def display_name=(str); end

  # source://mail/2.7.1/lib/mail/elements/address.rb#118
  def domain(output_type = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/elements/address.rb#169
  def encoded; end

  # source://mail/2.7.1/lib/mail/elements/address.rb#47
  def format(output_type = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/elements/address.rb#177
  def group; end

  # source://mail/2.7.1/lib/mail/elements/address.rb#164
  def inspect; end

  # source://mail/2.7.1/lib/mail/elements/address.rb#108
  def local(output_type = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/elements/address.rb#147
  def name; end

  # source://mail/2.7.1/lib/mail/elements/address.rb#36
  def raw; end

  # source://mail/2.7.1/lib/mail/elements/address.rb#156
  def to_s; end

  private

  # source://mail/2.7.1/lib/mail/elements/address.rb#237
  def format_comments; end

  # source://mail/2.7.1/lib/mail/elements/address.rb#254
  def get_comments; end

  # source://mail/2.7.1/lib/mail/elements/address.rb#218
  def get_display_name; end

  # source://mail/2.7.1/lib/mail/elements/address.rb#250
  def get_domain; end

  # source://mail/2.7.1/lib/mail/elements/address.rb#246
  def get_local; end

  # source://mail/2.7.1/lib/mail/elements/address.rb#227
  def get_name; end

  # source://mail/2.7.1/lib/mail/elements/address.rb#183
  def parse(value = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/elements/address.rb#198
  def strip_all_comments(string); end

  # source://mail/2.7.1/lib/mail/elements/address.rb#207
  def strip_domain_comments(value); end

  class << self
    # source://actionmailbox//lib/action_mailbox/mail_ext/address_wrapping.rb#5
    def wrap(address); end
  end
end

class Mail::AddressContainer < ::Array
  # source://mail/2.7.1/lib/mail/fields/common/address_container.rb#6
  def initialize(field, list = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/common/address_container.rb#11
  def <<(address); end
end

class Mail::AddressList
  # source://mail/2.7.1/lib/mail/elements/address_list.rb#24
  def initialize(string); end

  # source://mail/2.7.1/lib/mail/elements/address_list.rb#7
  def addresses; end

  # source://mail/2.7.1/lib/mail/elements/address_list.rb#30
  def addresses_grouped_by_group; end

  # source://mail/2.7.1/lib/mail/elements/address_list.rb#7
  def group_names; end
end

class Mail::AttachmentsList < ::Array
  # source://mail/2.7.1/lib/mail/attachments_list.rb#5
  def initialize(parts_list); end

  # source://mail/2.7.1/lib/mail/attachments_list.rb#32
  def [](index_value); end

  # source://mail/2.7.1/lib/mail/attachments_list.rb#40
  def []=(name, value); end

  # source://mail/2.7.1/lib/mail/attachments_list.rb#91
  def guess_encoding; end

  # source://mail/2.7.1/lib/mail/attachments_list.rb#20
  def inline; end

  # source://mail/2.7.1/lib/mail/attachments_list.rb#99
  def set_mime_type(filename); end
end

class Mail::BccField < ::Mail::StructuredField
  include ::Mail::CommonAddress

  # source://mail/2.7.1/lib/mail/fields/bcc_field.rb#40
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/bcc_field.rb#63
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/bcc_field.rb#55
  def encoded; end

  # source://mail/2.7.1/lib/mail/fields/bcc_field.rb#50
  def include_in_headers; end

  # source://mail/2.7.1/lib/mail/fields/bcc_field.rb#46
  def include_in_headers=(include_in_headers); end
end

# source://mail/2.7.1/lib/mail/fields/bcc_field.rb#38
Mail::BccField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/bcc_field.rb#37
Mail::BccField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::Body
  # source://mail/2.7.1/lib/mail/body.rb#30
  def initialize(string = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/body.rb#256
  def <<(val); end

  # source://mail/2.7.1/lib/mail/body.rb#67
  def ==(other); end

  # source://mail/2.7.1/lib/mail/body.rb#85
  def =~(regexp); end

  # source://mail/2.7.1/lib/mail/body.rb#276
  def ascii_only?; end

  # source://mail/2.7.1/lib/mail/body.rb#243
  def boundary; end

  # source://mail/2.7.1/lib/mail/body.rb#248
  def boundary=(val); end

  # source://mail/2.7.1/lib/mail/body.rb#192
  def charset; end

  # source://mail/2.7.1/lib/mail/body.rb#196
  def charset=(val); end

  # source://mail/2.7.1/lib/mail/body.rb#180
  def decoded; end

  # source://mail/2.7.1/lib/mail/body.rb#287
  def default_encoding; end

  # source://mail/2.7.1/lib/mail/body.rb#283
  def empty?; end

  # source://mail/2.7.1/lib/mail/body.rb#150
  def encoded(transfer_encoding = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/body.rb#200
  def encoding(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/body.rb#208
  def encoding=(val); end

  # source://mail/2.7.1/lib/mail/body.rb#228
  def epilogue; end

  # source://mail/2.7.1/lib/mail/body.rb#233
  def epilogue=(val); end

  # source://mail/2.7.1/lib/mail/body.rb#113
  def include?(other); end

  # source://mail/2.7.1/lib/mail/body.rb#99
  def match(regexp); end

  # source://mail/2.7.1/lib/mail/body.rb#238
  def multipart?; end

  # source://mail/2.7.1/lib/mail/body.rb#142
  def negotiate_best_encoding(message_encoding, allowed_encodings = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/body.rb#252
  def parts; end

  # source://mail/2.7.1/lib/mail/body.rb#218
  def preamble; end

  # source://mail/2.7.1/lib/mail/body.rb#223
  def preamble=(val); end

  # source://mail/2.7.1/lib/mail/body.rb#138
  def raw_source; end

  # source://mail/2.7.1/lib/mail/body.rb#120
  def set_sort_order(order); end

  # source://mail/2.7.1/lib/mail/body.rb#128
  def sort_parts!; end

  # source://mail/2.7.1/lib/mail/body.rb#264
  def split!(boundary); end

  # source://mail/2.7.1/lib/mail/body.rb#188
  def to_s; end

  private

  # source://mail/2.7.1/lib/mail/body.rb#316
  def crlf_boundary; end

  # source://mail/2.7.1/lib/mail/body.rb#320
  def end_boundary; end

  # source://mail/2.7.1/lib/mail/body.rb#294
  def extract_parts; end

  # source://mail/2.7.1/lib/mail/body.rb#324
  def set_charset; end
end

class Mail::CcField < ::Mail::StructuredField
  include ::Mail::CommonAddress

  # source://mail/2.7.1/lib/mail/fields/cc_field.rb#40
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/cc_field.rb#50
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/cc_field.rb#46
  def encoded; end
end

# source://mail/2.7.1/lib/mail/fields/cc_field.rb#38
Mail::CcField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/cc_field.rb#37
Mail::CcField::FIELD_NAME = T.let(T.unsafe(nil), String)

module Mail::CheckDeliveryParams
  class << self
    # source://mail/2.7.1/lib/mail/check_delivery_params.rb#5
    def check(mail); end

    # source://mail/2.7.1/lib/mail/check_delivery_params.rb#29
    def check_addr(addr_name, addr); end

    # source://mail/2.7.1/lib/mail/check_delivery_params.rb#11
    def check_from(addr); end

    # source://mail/2.7.1/lib/mail/check_delivery_params.rb#49
    def check_message(message); end

    # source://mail/2.7.1/lib/mail/check_delivery_params.rb#19
    def check_to(addrs); end

    # source://mail/2.7.1/lib/mail/check_delivery_params.rb#35
    def validate_smtp_addr(addr); end
  end
end

class Mail::CommentsField < ::Mail::UnstructuredField
  # source://mail/2.7.1/lib/mail/fields/comments_field.rb#34
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end
end

# source://mail/2.7.1/lib/mail/fields/comments_field.rb#32
Mail::CommentsField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/comments_field.rb#31
Mail::CommentsField::FIELD_NAME = T.let(T.unsafe(nil), String)

module Mail::CommonAddress
  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#90
  def <<(val); end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#38
  def addresses; end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#56
  def addrs; end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#15
  def charset; end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#72
  def decoded_group_addresses; end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#86
  def default; end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#50
  def display_names; end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#31
  def each; end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#19
  def encode_if_needed(val); end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#77
  def encoded_group_addresses; end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#44
  def formatted; end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#67
  def group_addresses; end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#82
  def group_names; end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#62
  def groups; end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#7
  def parse(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#101
  def value=(val); end

  private

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#147
  def address_list; end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#137
  def do_decode; end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#127
  def do_encode(field_name); end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#151
  def get_group_addresses(group_list); end

  # source://mail/2.7.1/lib/mail/fields/common/common_address.rb#110
  def utf8_if_needed(val); end
end

module Mail::CommonDate
  # source://mail/2.7.1/lib/mail/fields/common/common_date.rb#6
  def date_time; end

  # source://mail/2.7.1/lib/mail/fields/common/common_date.rb#10
  def default; end

  # source://mail/2.7.1/lib/mail/fields/common/common_date.rb#14
  def parse(val = T.unsafe(nil)); end

  private

  # source://mail/2.7.1/lib/mail/fields/common/common_date.rb#28
  def do_decode; end

  # source://mail/2.7.1/lib/mail/fields/common/common_date.rb#24
  def do_encode(field_name); end

  # source://mail/2.7.1/lib/mail/fields/common/common_date.rb#32
  def element; end
end

module Mail::CommonField
  include ::Mail::Constants

  # source://mail/2.7.1/lib/mail/fields/common/common_field.rb#29
  def default; end

  # source://mail/2.7.1/lib/mail/fields/common/common_field.rb#33
  def field_length; end

  # source://mail/2.7.1/lib/mail/fields/common/common_field.rb#11
  def name; end

  # source://mail/2.7.1/lib/mail/fields/common/common_field.rb#7
  def name=(value); end

  # source://mail/2.7.1/lib/mail/fields/common/common_field.rb#37
  def responsible_for?(val); end

  # source://mail/2.7.1/lib/mail/fields/common/common_field.rb#25
  def to_s; end

  # source://mail/2.7.1/lib/mail/fields/common/common_field.rb#21
  def value; end

  # source://mail/2.7.1/lib/mail/fields/common/common_field.rb#15
  def value=(value); end

  private

  # source://mail/2.7.1/lib/mail/fields/common/common_field.rb#44
  def ensure_filename_quoted(value); end
end

# source://mail/2.7.1/lib/mail/fields/common/common_field.rb#43
Mail::CommonField::FILENAME_RE = T.let(T.unsafe(nil), Regexp)

module Mail::CommonMessageId
  # source://mail/2.7.1/lib/mail/fields/common/common_message_id.rb#25
  def default; end

  # source://mail/2.7.1/lib/mail/fields/common/common_message_id.rb#5
  def element; end

  # source://mail/2.7.1/lib/mail/fields/common/common_message_id.rb#17
  def message_id; end

  # source://mail/2.7.1/lib/mail/fields/common/common_message_id.rb#21
  def message_ids; end

  # source://mail/2.7.1/lib/mail/fields/common/common_message_id.rb#9
  def parse(val = T.unsafe(nil)); end

  private

  # source://mail/2.7.1/lib/mail/fields/common/common_message_id.rb#40
  def do_decode; end

  # source://mail/2.7.1/lib/mail/fields/common/common_message_id.rb#36
  def do_encode(field_name); end

  # source://mail/2.7.1/lib/mail/fields/common/common_message_id.rb#44
  def formated_message_ids(join); end
end

class Mail::Configuration
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://mail/2.7.1/lib/mail/configuration.rb#18
  def initialize; end

  # source://mail/2.7.1/lib/mail/configuration.rb#24
  def delivery_method(method = T.unsafe(nil), settings = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/configuration.rb#29
  def lookup_delivery_method(method); end

  # source://mail/2.7.1/lib/mail/configuration.rb#57
  def lookup_retriever_method(method); end

  # source://mail/2.7.1/lib/mail/configuration.rb#72
  def param_encode_language(value = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/configuration.rb#52
  def retriever_method(method = T.unsafe(nil), settings = T.unsafe(nil)); end
end

module Mail::Constants; end

# source://mail/2.7.1/lib/mail/constants.rb#45
Mail::Constants::ASTERISK = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/constants.rb#34
Mail::Constants::ATOM_UNSAFE = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#55
Mail::Constants::B_VALUES = T.let(T.unsafe(nil), Array)

# source://mail/2.7.1/lib/mail/constants.rb#50
Mail::Constants::CAPITAL_M = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/constants.rb#44
Mail::Constants::COLON = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/constants.rb#33
Mail::Constants::CONTROL_CHAR = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#46
Mail::Constants::CR = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/constants.rb#19
Mail::Constants::CRLF = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#48
Mail::Constants::CR_ENCODED = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/constants.rb#40
Mail::Constants::EMPTY = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/constants.rb#37
Mail::Constants::ENCODED_VALUE = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#51
Mail::Constants::EQUAL_LF = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/constants.rb#25
Mail::Constants::FIELD_BODY = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#26
Mail::Constants::FIELD_LINE = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#23
Mail::Constants::FIELD_NAME = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#24
Mail::Constants::FIELD_PREFIX = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#27
Mail::Constants::FIELD_SPLIT = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#38
Mail::Constants::FULL_ENCODED_VALUE = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#21
Mail::Constants::FWS = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#28
Mail::Constants::HEADER_LINE = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#29
Mail::Constants::HEADER_SPLIT = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#43
Mail::Constants::HYPHEN = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/constants.rb#47
Mail::Constants::LF = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/constants.rb#49
Mail::Constants::LF_ENCODED = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/constants.rb#52
Mail::Constants::NULL_SENDER = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/constants.rb#35
Mail::Constants::PHRASE_UNSAFE = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#32
Mail::Constants::QP_SAFE = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#31
Mail::Constants::QP_UNSAFE = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#54
Mail::Constants::Q_VALUES = T.let(T.unsafe(nil), Array)

# source://mail/2.7.1/lib/mail/constants.rb#41
Mail::Constants::SPACE = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/constants.rb#22
Mail::Constants::TEXT = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#36
Mail::Constants::TOKEN_UNSAFE = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/constants.rb#42
Mail::Constants::UNDERSCORE = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/constants.rb#20
Mail::Constants::WSP = T.let(T.unsafe(nil), Regexp)

class Mail::ContentDescriptionField < ::Mail::UnstructuredField
  # source://mail/2.7.1/lib/mail/fields/content_description_field.rb#12
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end
end

# source://mail/2.7.1/lib/mail/fields/content_description_field.rb#10
Mail::ContentDescriptionField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/content_description_field.rb#9
Mail::ContentDescriptionField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ContentDispositionElement
  # source://mail/2.7.1/lib/mail/elements/content_disposition_element.rb#9
  def initialize(string); end

  # source://mail/2.7.1/lib/mail/elements/content_disposition_element.rb#7
  def disposition_type; end

  # source://mail/2.7.1/lib/mail/elements/content_disposition_element.rb#7
  def parameters; end

  private

  # source://mail/2.7.1/lib/mail/elements/content_disposition_element.rb#16
  def cleaned(string); end
end

class Mail::ContentDispositionField < ::Mail::StructuredField
  # source://mail/2.7.1/lib/mail/fields/content_disposition_field.rb#11
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/content_disposition_field.rb#61
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/content_disposition_field.rb#29
  def disposition_type; end

  # source://mail/2.7.1/lib/mail/fields/content_disposition_field.rb#25
  def element; end

  # source://mail/2.7.1/lib/mail/fields/content_disposition_field.rb#52
  def encoded; end

  # source://mail/2.7.1/lib/mail/fields/content_disposition_field.rb#39
  def filename; end

  # source://mail/2.7.1/lib/mail/fields/content_disposition_field.rb#33
  def parameters; end

  # source://mail/2.7.1/lib/mail/fields/content_disposition_field.rb#19
  def parse(val = T.unsafe(nil)); end
end

# source://mail/2.7.1/lib/mail/fields/content_disposition_field.rb#9
Mail::ContentDispositionField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/content_disposition_field.rb#8
Mail::ContentDispositionField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ContentIdField < ::Mail::StructuredField
  # source://mail/2.7.1/lib/mail/fields/content_id_field.rb#12
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/content_id_field.rb#39
  def content_id; end

  # source://mail/2.7.1/lib/mail/fields/content_id_field.rb#52
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/content_id_field.rb#31
  def element; end

  # source://mail/2.7.1/lib/mail/fields/content_id_field.rb#48
  def encoded; end

  # source://mail/2.7.1/lib/mail/fields/content_id_field.rb#35
  def name; end

  # source://mail/2.7.1/lib/mail/fields/content_id_field.rb#25
  def parse(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/content_id_field.rb#43
  def to_s; end

  private

  # source://mail/2.7.1/lib/mail/fields/content_id_field.rb#58
  def generate_content_id; end
end

# source://mail/2.7.1/lib/mail/fields/content_id_field.rb#10
Mail::ContentIdField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/content_id_field.rb#9
Mail::ContentIdField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ContentLocationElement
  # source://mail/2.7.1/lib/mail/elements/content_location_element.rb#9
  def initialize(string); end

  # source://mail/2.7.1/lib/mail/elements/content_location_element.rb#7
  def location; end

  # source://mail/2.7.1/lib/mail/elements/content_location_element.rb#13
  def to_s(*args); end
end

class Mail::ContentLocationField < ::Mail::StructuredField
  # source://mail/2.7.1/lib/mail/fields/content_location_field.rb#12
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/content_location_field.rb#38
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/content_location_field.rb#25
  def element; end

  # source://mail/2.7.1/lib/mail/fields/content_location_field.rb#34
  def encoded; end

  # source://mail/2.7.1/lib/mail/fields/content_location_field.rb#29
  def location; end

  # source://mail/2.7.1/lib/mail/fields/content_location_field.rb#19
  def parse(val = T.unsafe(nil)); end
end

# source://mail/2.7.1/lib/mail/fields/content_location_field.rb#10
Mail::ContentLocationField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/content_location_field.rb#9
Mail::ContentLocationField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ContentTransferEncodingElement
  # source://mail/2.7.1/lib/mail/elements/content_transfer_encoding_element.rb#9
  def initialize(string); end

  # source://mail/2.7.1/lib/mail/elements/content_transfer_encoding_element.rb#7
  def encoding; end
end

class Mail::ContentTransferEncodingField < ::Mail::StructuredField
  # source://mail/2.7.1/lib/mail/fields/content_transfer_encoding_field.rb#12
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/content_transfer_encoding_field.rb#40
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/content_transfer_encoding_field.rb#27
  def element; end

  # source://mail/2.7.1/lib/mail/fields/content_transfer_encoding_field.rb#36
  def encoded; end

  # source://mail/2.7.1/lib/mail/fields/content_transfer_encoding_field.rb#31
  def encoding; end

  # source://mail/2.7.1/lib/mail/fields/content_transfer_encoding_field.rb#21
  def parse(val = T.unsafe(nil)); end
end

# source://mail/2.7.1/lib/mail/fields/content_transfer_encoding_field.rb#10
Mail::ContentTransferEncodingField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/content_transfer_encoding_field.rb#9
Mail::ContentTransferEncodingField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ContentTypeElement
  # source://mail/2.7.1/lib/mail/elements/content_type_element.rb#9
  def initialize(string); end

  # source://mail/2.7.1/lib/mail/elements/content_type_element.rb#7
  def main_type; end

  # source://mail/2.7.1/lib/mail/elements/content_type_element.rb#7
  def parameters; end

  # source://mail/2.7.1/lib/mail/elements/content_type_element.rb#7
  def sub_type; end

  private

  # source://mail/2.7.1/lib/mail/elements/content_type_element.rb#17
  def cleaned(string); end
end

class Mail::ContentTypeField < ::Mail::StructuredField
  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#11
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#45
  def attempt_to_clean; end

  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#61
  def content_type; end

  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#121
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#65
  def default; end

  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#37
  def element; end

  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#112
  def encoded; end

  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#99
  def filename; end

  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#53
  def main_type; end

  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#71
  def parameters; end

  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#29
  def parse(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#61
  def string; end

  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#95
  def stringify(params); end

  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#57
  def sub_type; end

  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#87
  def value; end

  private

  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#188
  def get_mime_type(val); end

  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#132
  def method_missing(name, *args, &block); end

  # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#143
  def sanatize(val); end

  class << self
    # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#83
    def generate_boundary; end

    # source://mail/2.7.1/lib/mail/fields/content_type_field.rb#79
    def with_boundary(type); end
  end
end

# source://mail/2.7.1/lib/mail/fields/content_type_field.rb#9
Mail::ContentTypeField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/content_type_field.rb#8
Mail::ContentTypeField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::DateField < ::Mail::StructuredField
  include ::Mail::CommonDate

  # source://mail/2.7.1/lib/mail/fields/date_field.rb#35
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/date_field.rb#52
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/date_field.rb#48
  def encoded; end
end

# source://mail/2.7.1/lib/mail/fields/date_field.rb#33
Mail::DateField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/date_field.rb#32
Mail::DateField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::DateTimeElement
  # source://mail/2.7.1/lib/mail/elements/date_time_element.rb#9
  def initialize(string); end

  # source://mail/2.7.1/lib/mail/elements/date_time_element.rb#7
  def date_string; end

  # source://mail/2.7.1/lib/mail/elements/date_time_element.rb#7
  def time_string; end
end

module Mail::Encodings
  include ::Mail::Constants
  extend ::Mail::Constants
  extend ::Mail::Utilities

  class << self
    # source://mail/2.7.1/lib/mail/encodings.rb#168
    def address_encode(address, charset = T.unsafe(nil)); end

    # source://mail/2.7.1/lib/mail/encodings.rb#259
    def b_value_decode(str); end

    # source://mail/2.7.1/lib/mail/encodings.rb#224
    def b_value_encode(string, encoding = T.unsafe(nil)); end

    # source://mail/2.7.1/lib/mail/encodings.rb#287
    def collapse_adjacent_encodings(str); end

    # source://mail/2.7.1/lib/mail/encodings.rb#106
    def decode_encode(str, output_type); end

    # source://mail/2.7.1/lib/mail/encodings.rb#29
    def defined?(name); end

    # source://mail/2.7.1/lib/mail/encodings.rb#309
    def each_base64_chunk_byterange(str, max_bytesize_per_base64_chunk, &block); end

    # source://mail/2.7.1/lib/mail/encodings.rb#322
    def each_chunk_byterange(str, max_bytesize_per_chunk); end

    # source://mail/2.7.1/lib/mail/encodings.rb#176
    def encode_non_usascii(address, charset); end

    # source://mail/2.7.1/lib/mail/encodings.rb#273
    def find_encoding(str); end

    # source://mail/2.7.1/lib/mail/encodings.rb#45
    def get_all; end

    # source://mail/2.7.1/lib/mail/encodings.rb#41
    def get_encoding(name); end

    # source://mail/2.7.1/lib/mail/encodings.rb#49
    def get_name(name); end

    # source://mail/2.7.1/lib/mail/encodings.rb#94
    def param_decode(str, encoding); end

    # source://mail/2.7.1/lib/mail/encodings.rb#74
    def param_encode(str); end

    # source://mail/2.7.1/lib/mail/encodings.rb#269
    def q_value_decode(str); end

    # source://mail/2.7.1/lib/mail/encodings.rb#242
    def q_value_encode(encoded_str, encoding = T.unsafe(nil)); end

    # source://mail/2.7.1/lib/mail/encodings.rb#20
    def register(name, cls); end

    # source://mail/2.7.1/lib/mail/encodings.rb#53
    def transcode_charset(str, from_charset, to_charset = T.unsafe(nil)); end

    # source://mail/2.7.1/lib/mail/encodings.rb#141
    def unquote_and_convert_to(str, to_encoding); end

    # source://mail/2.7.1/lib/mail/encodings.rb#123
    def value_decode(str); end

    # source://mail/2.7.1/lib/mail/encodings.rb#278
    def value_encoding_from_string(str); end

    # source://mail/2.7.1/lib/mail/encodings.rb#212
    def with_ascii_kcode; end
  end
end

class Mail::Encodings::Base64 < ::Mail::Encodings::SevenBit
  class << self
    # source://mail/2.7.1/lib/mail/encodings/base64.rb#14
    def can_encode?(enc); end

    # source://mail/2.7.1/lib/mail/encodings/base64.rb#33
    def compatible_input?(str); end

    # source://mail/2.7.1/lib/mail/encodings/base64.rb#27
    def cost(str); end

    # source://mail/2.7.1/lib/mail/encodings/base64.rb#18
    def decode(str); end

    # source://mail/2.7.1/lib/mail/encodings/base64.rb#22
    def encode(str); end
  end
end

# source://mail/2.7.1/lib/mail/encodings/base64.rb#10
Mail::Encodings::Base64::NAME = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/encodings/base64.rb#11
Mail::Encodings::Base64::PRIORITY = T.let(T.unsafe(nil), Integer)

class Mail::Encodings::Binary < ::Mail::Encodings::Identity; end

# source://mail/2.7.1/lib/mail/encodings/binary.rb#8
Mail::Encodings::Binary::NAME = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/encodings/binary.rb#9
Mail::Encodings::Binary::PRIORITY = T.let(T.unsafe(nil), Integer)

class Mail::Encodings::EightBit < ::Mail::Encodings::Binary
  class << self
    # source://mail/2.7.1/lib/mail/encodings/8bit.rb#13
    def compatible_input?(str); end
  end
end

# source://mail/2.7.1/lib/mail/encodings/8bit.rb#8
Mail::Encodings::EightBit::NAME = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/encodings/8bit.rb#9
Mail::Encodings::EightBit::PRIORITY = T.let(T.unsafe(nil), Integer)

class Mail::Encodings::Identity < ::Mail::Encodings::TransferEncoding
  class << self
    # source://mail/2.7.1/lib/mail/encodings/identity.rb#19
    def cost(str); end

    # source://mail/2.7.1/lib/mail/encodings/identity.rb#10
    def decode(str); end

    # source://mail/2.7.1/lib/mail/encodings/identity.rb#14
    def encode(str); end
  end
end

class Mail::Encodings::QuotedPrintable < ::Mail::Encodings::SevenBit
  class << self
    # source://mail/2.7.1/lib/mail/encodings/quoted_printable.rb#12
    def can_encode?(enc); end

    # source://mail/2.7.1/lib/mail/encodings/quoted_printable.rb#36
    def compatible_input?(str); end

    # source://mail/2.7.1/lib/mail/encodings/quoted_printable.rb#26
    def cost(str); end

    # source://mail/2.7.1/lib/mail/encodings/quoted_printable.rb#18
    def decode(str); end

    # source://mail/2.7.1/lib/mail/encodings/quoted_printable.rb#22
    def encode(str); end
  end
end

# source://mail/2.7.1/lib/mail/encodings/quoted_printable.rb#8
Mail::Encodings::QuotedPrintable::NAME = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/encodings/quoted_printable.rb#10
Mail::Encodings::QuotedPrintable::PRIORITY = T.let(T.unsafe(nil), Integer)

class Mail::Encodings::SevenBit < ::Mail::Encodings::EightBit
  class << self
    # source://mail/2.7.1/lib/mail/encodings/7bit.rb#13
    def decode(str); end

    # source://mail/2.7.1/lib/mail/encodings/7bit.rb#17
    def encode(str); end
  end
end

# source://mail/2.7.1/lib/mail/encodings/7bit.rb#9
Mail::Encodings::SevenBit::NAME = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/encodings/7bit.rb#10
Mail::Encodings::SevenBit::PRIORITY = T.let(T.unsafe(nil), Integer)

class Mail::Encodings::TransferEncoding
  class << self
    # source://mail/2.7.1/lib/mail/encodings/transfer_encoding.rb#19
    def can_encode?(enc); end

    # source://mail/2.7.1/lib/mail/encodings/transfer_encoding.rb#12
    def can_transport?(enc); end

    # source://mail/2.7.1/lib/mail/encodings/transfer_encoding.rb#27
    def compatible_input?(str); end

    # source://mail/2.7.1/lib/mail/encodings/transfer_encoding.rb#23
    def cost(str); end

    # source://mail/2.7.1/lib/mail/encodings/transfer_encoding.rb#56
    def lowest_cost(str, encodings); end

    # source://mail/2.7.1/lib/mail/encodings/transfer_encoding.rb#35
    def negotiate(message_encoding, source_encoding, str, allowed_encodings = T.unsafe(nil)); end

    # source://mail/2.7.1/lib/mail/encodings/transfer_encoding.rb#46
    def renegotiate(message_encoding, source_encoding, str, allowed_encodings = T.unsafe(nil)); end

    # source://mail/2.7.1/lib/mail/encodings/transfer_encoding.rb#31
    def to_s; end
  end
end

# source://mail/2.7.1/lib/mail/encodings/transfer_encoding.rb#6
Mail::Encodings::TransferEncoding::NAME = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/encodings/transfer_encoding.rb#8
Mail::Encodings::TransferEncoding::PRIORITY = T.let(T.unsafe(nil), Integer)

class Mail::Encodings::UnixToUnix < ::Mail::Encodings::TransferEncoding
  class << self
    # source://mail/2.7.1/lib/mail/encodings/unix_to_unix.rb#7
    def decode(str); end

    # source://mail/2.7.1/lib/mail/encodings/unix_to_unix.rb#11
    def encode(str); end
  end
end

# source://mail/2.7.1/lib/mail/encodings/unix_to_unix.rb#5
Mail::Encodings::UnixToUnix::NAME = T.let(T.unsafe(nil), String)

class Mail::Envelope < ::Mail::StructuredField
  # source://mail/2.7.1/lib/mail/envelope.rb#14
  def initialize(*args); end

  # source://mail/2.7.1/lib/mail/envelope.rb#22
  def date; end

  # source://mail/2.7.1/lib/mail/envelope.rb#18
  def element; end

  # source://mail/2.7.1/lib/mail/envelope.rb#26
  def from; end
end

class Mail::EnvelopeFromElement
  # source://mail/2.7.1/lib/mail/elements/envelope_from_element.rb#10
  def initialize(string); end

  # source://mail/2.7.1/lib/mail/elements/envelope_from_element.rb#8
  def address; end

  # source://mail/2.7.1/lib/mail/elements/envelope_from_element.rb#8
  def date_time; end

  # source://mail/2.7.1/lib/mail/elements/envelope_from_element.rb#21
  def formatted_date_time; end

  # source://mail/2.7.1/lib/mail/elements/envelope_from_element.rb#29
  def to_s; end
end

class Mail::Exim < ::Mail::Sendmail
  class << self
    # source://mail/2.7.1/lib/mail/network/delivery_methods/exim.rb#45
    def call(path, arguments, destinations, encoded_message); end
  end
end

# source://mail/2.7.1/lib/mail/network/delivery_methods/exim.rb#40
Mail::Exim::DEFAULTS = T.let(T.unsafe(nil), Hash)

class Mail::Field
  include ::Mail::Constants
  include ::Mail::Utilities
  include ::Comparable

  # source://mail/2.7.1/lib/mail/field.rb#164
  def initialize(name, value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/field.rb#230
  def <=>(other); end

  # source://mail/2.7.1/lib/mail/field.rb#221
  def ==(other); end

  # source://mail/2.7.1/lib/mail/field.rb#186
  def field; end

  # source://mail/2.7.1/lib/mail/field.rb#182
  def field=(value); end

  # source://mail/2.7.1/lib/mail/field.rb#234
  def field_order_id; end

  # source://mail/2.7.1/lib/mail/field.rb#206
  def inspect; end

  # source://mail/2.7.1/lib/mail/field.rb#238
  def method_missing(name, *args, &block); end

  # source://mail/2.7.1/lib/mail/field.rb#190
  def name; end

  # source://mail/2.7.1/lib/mail/field.rb#226
  def responsible_for?(val); end

  # source://mail/2.7.1/lib/mail/field.rb#216
  def same(other); end

  # source://mail/2.7.1/lib/mail/field.rb#202
  def to_s; end

  # source://mail/2.7.1/lib/mail/field.rb#150
  def unparsed_value; end

  # source://mail/2.7.1/lib/mail/field.rb#212
  def update(name, value); end

  # source://mail/2.7.1/lib/mail/field.rb#194
  def value; end

  # source://mail/2.7.1/lib/mail/field.rb#198
  def value=(val); end

  private

  # source://mail/2.7.1/lib/mail/field.rb#265
  def create_field(name, value, charset); end

  # source://mail/2.7.1/lib/mail/field.rb#283
  def field_class_for(name); end

  # source://mail/2.7.1/lib/mail/field.rb#273
  def new_field(name, value, charset); end

  # source://mail/2.7.1/lib/mail/field.rb#243
  def respond_to_missing?(method_name, include_private); end

  # source://mail/2.7.1/lib/mail/field.rb#295
  def unfold(string); end

  class << self
    # source://mail/2.7.1/lib/mail/field.rb#124
    def parse(field, charset = T.unsafe(nil)); end

    # source://mail/2.7.1/lib/mail/field.rb#131
    def split(raw_field); end
  end
end

# source://mail/2.7.1/lib/mail/field.rb#40
Mail::Field::FIELDS_MAP = T.let(T.unsafe(nil), Hash)

# source://mail/2.7.1/lib/mail/field.rb#72
Mail::Field::FIELD_NAME_MAP = T.let(T.unsafe(nil), Hash)

# source://mail/2.7.1/lib/mail/field.rb#252
Mail::Field::FIELD_ORDER = T.let(T.unsafe(nil), Array)

# source://mail/2.7.1/lib/mail/field.rb#261
Mail::Field::FIELD_ORDER_LOOKUP = T.let(T.unsafe(nil), Hash)

class Mail::Field::FieldError < ::StandardError; end

class Mail::Field::IncompleteParseError < ::Mail::Field::ParseError
  # source://mail/2.7.1/lib/mail/field.rb#109
  def initialize(element, original_text, unparsed_index); end
end

# source://mail/2.7.1/lib/mail/field.rb#38
Mail::Field::KNOWN_FIELDS = T.let(T.unsafe(nil), Array)

class Mail::Field::NilParseError < ::Mail::Field::ParseError
  # source://mail/2.7.1/lib/mail/field.rb#103
  def initialize(element); end
end

class Mail::Field::ParseError < ::Mail::Field::FieldError
  # source://mail/2.7.1/lib/mail/field.rb#85
  def initialize(element, value, reason); end

  # source://mail/2.7.1/lib/mail/field.rb#83
  def element; end

  # source://mail/2.7.1/lib/mail/field.rb#83
  def element=(_arg0); end

  # source://mail/2.7.1/lib/mail/field.rb#83
  def reason; end

  # source://mail/2.7.1/lib/mail/field.rb#83
  def reason=(_arg0); end

  # source://mail/2.7.1/lib/mail/field.rb#83
  def value; end

  # source://mail/2.7.1/lib/mail/field.rb#83
  def value=(_arg0); end

  private

  # source://mail/2.7.1/lib/mail/field.rb#93
  def to_utf8(text); end
end

# source://mail/2.7.1/lib/mail/field.rb#30
Mail::Field::STRUCTURED_FIELDS = T.let(T.unsafe(nil), Array)

class Mail::Field::SyntaxError < ::Mail::Field::FieldError; end

class Mail::FieldList < ::Array
  # source://mail/2.7.1/lib/mail/field_list.rb#18
  def <<(new_field); end
end

class Mail::FileDelivery
  # source://mail/2.7.1/lib/mail/network/delivery_methods/file_delivery.rb#24
  def initialize(values); end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/file_delivery.rb#28
  def deliver!(mail); end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/file_delivery.rb#22
  def settings; end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/file_delivery.rb#22
  def settings=(_arg0); end
end

class Mail::FromField < ::Mail::StructuredField
  include ::Mail::CommonAddress

  # source://mail/2.7.1/lib/mail/fields/from_field.rb#40
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/from_field.rb#50
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/from_field.rb#46
  def encoded; end
end

# source://mail/2.7.1/lib/mail/fields/from_field.rb#38
Mail::FromField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/from_field.rb#37
Mail::FromField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::Header
  include ::Mail::Constants
  include ::Mail::Utilities
  include ::Enumerable

  # source://mail/2.7.1/lib/mail/header.rb#51
  def initialize(header_text = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/header.rb#135
  def [](name); end

  # source://mail/2.7.1/lib/mail/header.rb#162
  def []=(name, value); end

  # source://mail/2.7.1/lib/mail/header.rb#191
  def charset; end

  # source://mail/2.7.1/lib/mail/header.rb#195
  def charset=(val); end

  # source://mail/2.7.1/lib/mail/header.rb#222
  def decoded; end

  # source://mail/2.7.1/lib/mail/header.rb#209
  def encoded; end

  # source://mail/2.7.1/lib/mail/header.rb#110
  def errors; end

  # source://mail/2.7.1/lib/mail/header.rb#226
  def field_summary; end

  # source://mail/2.7.1/lib/mail/header.rb#71
  def fields; end

  # source://mail/2.7.1/lib/mail/header.rb#94
  def fields=(unfolded_fields); end

  # source://mail/2.7.1/lib/mail/header.rb#236
  def has_content_id?; end

  # source://mail/2.7.1/lib/mail/header.rb#241
  def has_date?; end

  # source://mail/2.7.1/lib/mail/header.rb#231
  def has_message_id?; end

  # source://mail/2.7.1/lib/mail/header.rb#246
  def has_mime_version?; end

  # source://mail/2.7.1/lib/mail/header.rb#65
  def raw_source; end

  # source://mail/2.7.1/lib/mail/header.rb#218
  def to_s; end

  private

  # source://mail/2.7.1/lib/mail/header.rb#272
  def each(&block); end

  # source://mail/2.7.1/lib/mail/header.rb#57
  def initialize_copy(original); end

  # source://mail/2.7.1/lib/mail/header.rb#266
  def limited_field?(name); end

  # source://mail/2.7.1/lib/mail/header.rb#252
  def raw_source=(val); end

  # source://mail/2.7.1/lib/mail/header.rb#262
  def select_field_for(name); end

  # source://mail/2.7.1/lib/mail/header.rb#258
  def split_header; end

  class << self
    # source://mail/2.7.1/lib/mail/header.rb#31
    def maximum_amount; end

    # source://mail/2.7.1/lib/mail/header.rb#35
    def maximum_amount=(value); end
  end
end

# source://mail/2.7.1/lib/mail/header.rb#203
Mail::Header::LIMITED_FIELDS = T.let(T.unsafe(nil), Array)

class Mail::IMAP < ::Mail::Retriever
  # source://mail/2.7.1/lib/mail/network/retriever_methods/imap.rb#42
  def initialize(values); end

  # source://mail/2.7.1/lib/mail/network/retriever_methods/imap.rb#133
  def connection(&block); end

  # source://mail/2.7.1/lib/mail/network/retriever_methods/imap.rb#119
  def delete_all(mailbox = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/network/retriever_methods/imap.rb#73
  def find(options = T.unsafe(nil), &block); end

  # source://mail/2.7.1/lib/mail/network/retriever_methods/imap.rb#52
  def settings; end

  # source://mail/2.7.1/lib/mail/network/retriever_methods/imap.rb#52
  def settings=(_arg0); end

  private

  # source://mail/2.7.1/lib/mail/network/retriever_methods/imap.rb#160
  def start(config = T.unsafe(nil), &block); end

  # source://mail/2.7.1/lib/mail/network/retriever_methods/imap.rb#144
  def validate_options(options); end
end

class Mail::InReplyToField < ::Mail::StructuredField
  include ::Mail::CommonMessageId

  # source://mail/2.7.1/lib/mail/fields/in_reply_to_field.rb#40
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/in_reply_to_field.rb#52
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/in_reply_to_field.rb#48
  def encoded; end
end

# source://mail/2.7.1/lib/mail/fields/in_reply_to_field.rb#38
Mail::InReplyToField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/in_reply_to_field.rb#37
Mail::InReplyToField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::IndifferentHash < ::Hash
  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#10
  def initialize(constructor = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#41
  def []=(key, value); end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#19
  def default(key = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#117
  def delete(key); end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#96
  def dup; end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#80
  def fetch(key, *extras); end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#71
  def has_key?(key); end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#71
  def include?(key); end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#71
  def key?(key); end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#71
  def member?(key); end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#102
  def merge(hash); end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#57
  def merge!(other_hash); end

  def regular_update(*_arg0); end
  def regular_writer(_arg0, _arg1); end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#108
  def reverse_merge(other_hash); end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#112
  def reverse_merge!(other_hash); end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#41
  def store(key, value); end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#122
  def stringify_keys; end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#121
  def stringify_keys!; end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#123
  def symbolize_keys; end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#126
  def to_hash; end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#124
  def to_options!; end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#57
  def update(other_hash); end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#91
  def values_at(*indices); end

  protected

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#132
  def convert_key(key); end

  # source://mail/2.7.1/lib/mail/indifferent_hash.rb#136
  def convert_value(value); end

  class << self
    # source://mail/2.7.1/lib/mail/indifferent_hash.rb#27
    def new_from_hash_copying_default(hash); end
  end
end

class Mail::KeywordsField < ::Mail::StructuredField
  # source://mail/2.7.1/lib/mail/fields/keywords_field.rb#11
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/keywords_field.rb#35
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/keywords_field.rb#39
  def default; end

  # source://mail/2.7.1/lib/mail/fields/keywords_field.rb#31
  def encoded; end

  # source://mail/2.7.1/lib/mail/fields/keywords_field.rb#27
  def keywords; end

  # source://mail/2.7.1/lib/mail/fields/keywords_field.rb#17
  def parse(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/keywords_field.rb#23
  def phrase_list; end
end

# source://mail/2.7.1/lib/mail/fields/keywords_field.rb#9
Mail::KeywordsField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/keywords_field.rb#8
Mail::KeywordsField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::LoggerDelivery
  include ::Mail::CheckDeliveryParams

  # source://mail/2.7.1/lib/mail/network/delivery_methods/logger_delivery.rb#9
  def initialize(settings); end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/logger_delivery.rb#15
  def deliver!(mail); end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/logger_delivery.rb#7
  def logger; end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/logger_delivery.rb#7
  def settings; end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/logger_delivery.rb#7
  def severity; end

  private

  # source://mail/2.7.1/lib/mail/network/delivery_methods/logger_delivery.rb#21
  def default_logger; end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/logger_delivery.rb#26
  def derive_severity(severity); end
end

module Mail::Matchers
  # source://mail/2.7.1/lib/mail/matchers/attachment_matchers.rb#8
  def an_attachment_with_filename(filename); end

  # source://mail/2.7.1/lib/mail/matchers/attachment_matchers.rb#4
  def any_attachment; end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#4
  def have_sent_email; end
end

class Mail::Matchers::AnyAttachmentMatcher
  # source://mail/2.7.1/lib/mail/matchers/attachment_matchers.rb#13
  def ===(other); end
end

class Mail::Matchers::AttachmentFilenameMatcher
  # source://mail/2.7.1/lib/mail/matchers/attachment_matchers.rb#20
  def initialize(filename); end

  # source://mail/2.7.1/lib/mail/matchers/attachment_matchers.rb#24
  def ===(other); end

  # source://mail/2.7.1/lib/mail/matchers/attachment_matchers.rb#19
  def filename; end
end

class Mail::Matchers::HasSentEmailMatcher
  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#9
  def initialize(_context); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#44
  def bcc(recipient_or_list); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#33
  def cc(recipient_or_list); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#96
  def description; end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#101
  def failure_message; end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#108
  def failure_message_when_negated; end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#17
  def from(sender); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#12
  def matches?(subject); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#81
  def matching_body(body_matcher); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#71
  def matching_subject(subject_matcher); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#22
  def to(recipient_or_list); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#61
  def with_any_attachments; end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#50
  def with_attachments(attachments); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#76
  def with_body(body); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#86
  def with_html(body); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#56
  def with_no_attachments; end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#66
  def with_subject(subject); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#91
  def with_text(body); end

  protected

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#196
  def dump_deliveries; end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#181
  def explain_expectations; end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#117
  def filter_matched_deliveries(deliveries); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#159
  def matches_on_attachments?(delivery); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#142
  def matches_on_blind_copy_recipients?(delivery); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#165
  def matches_on_body?(delivery); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#169
  def matches_on_body_matcher?(delivery); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#138
  def matches_on_copy_recipients?(delivery); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#154
  def matches_on_having_attachments?(delivery); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#173
  def matches_on_html_part_body?(delivery); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#134
  def matches_on_recipients?(delivery); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#130
  def matches_on_sender?(delivery); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#146
  def matches_on_subject?(delivery); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#150
  def matches_on_subject_matcher?(delivery); end

  # source://mail/2.7.1/lib/mail/matchers/has_sent_mail.rb#177
  def matches_on_text_part_body?(delivery); end
end

class Mail::Message
  include ::Mail::Constants
  include ::Mail::Utilities

  # source://mail/2.7.1/lib/mail/message.rb#109
  def initialize(*args, &block); end

  # source://mail/2.7.1/lib/mail/message.rb#341
  def <=>(other); end

  # source://mail/2.7.1/lib/mail/message.rb#380
  def ==(other); end

  # source://mail/2.7.1/lib/mail/message.rb#1341
  def [](name); end

  # source://mail/2.7.1/lib/mail/message.rb#1323
  def []=(name, value); end

  # source://mail/2.7.1/lib/mail/message.rb#1589
  def action; end

  # source://mail/2.7.1/lib/mail/message.rb#1484
  def add_charset; end

  # source://mail/2.7.1/lib/mail/message.rb#1497
  def add_content_transfer_encoding; end

  # source://mail/2.7.1/lib/mail/message.rb#1477
  def add_content_type; end

  # source://mail/2.7.1/lib/mail/message.rb#1460
  def add_date(date_val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1788
  def add_file(values); end

  # source://mail/2.7.1/lib/mail/message.rb#1450
  def add_message_id(msg_id_val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1470
  def add_mime_version(ver_val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1732
  def add_part(part); end

  # source://mail/2.7.1/lib/mail/message.rb#1501
  def add_transfer_encoding; end

  # source://mail/2.7.1/lib/mail/message.rb#1944
  def all_parts; end

  # source://mail/2.7.1/lib/mail/message.rb#1935
  def attachment; end

  # source://mail/2.7.1/lib/mail/message.rb#1930
  def attachment?; end

  # source://mail/2.7.1/lib/mail/message.rb#1657
  def attachments; end

  # source://mail/2.7.1/lib/mail/message.rb#507
  def bcc(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#519
  def bcc=(val); end

  # source://actionmailbox//lib/action_mailbox/mail_ext/addresses.rb#21
  def bcc_addresses; end

  # source://mail/2.7.1/lib/mail/message.rb#1313
  def bcc_addrs; end

  # source://mail/2.7.1/lib/mail/message.rb#1258
  def body(value = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1244
  def body=(value); end

  # source://mail/2.7.1/lib/mail/message.rb#1267
  def body_encoding(value = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1275
  def body_encoding=(value); end

  # source://mail/2.7.1/lib/mail/message.rb#1585
  def bounced?; end

  # source://mail/2.7.1/lib/mail/message.rb#1614
  def boundary; end

  # source://mail/2.7.1/lib/mail/message.rb#548
  def cc(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#560
  def cc=(val); end

  # source://actionmailbox//lib/action_mailbox/mail_ext/addresses.rb#17
  def cc_addresses; end

  # source://mail/2.7.1/lib/mail/message.rb#1307
  def cc_addrs; end

  # source://mail/2.7.1/lib/mail/message.rb#1522
  def charset; end

  # source://mail/2.7.1/lib/mail/message.rb#1531
  def charset=(value); end

  # source://mail/2.7.1/lib/mail/message.rb#564
  def comments(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#568
  def comments=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#572
  def content_description(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#576
  def content_description=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#580
  def content_disposition(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#584
  def content_disposition=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#588
  def content_id(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#592
  def content_id=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#596
  def content_location(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#600
  def content_location=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#604
  def content_transfer_encoding(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#608
  def content_transfer_encoding=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#612
  def content_type(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#616
  def content_type=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1554
  def content_type_parameters; end

  # source://mail/2.7.1/lib/mail/message.rb#1801
  def convert_to_multipart; end

  # source://mail/2.7.1/lib/mail/message.rb#620
  def date(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#624
  def date=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1924
  def decode_body; end

  # source://mail/2.7.1/lib/mail/message.rb#1903
  def decoded; end

  # source://mail/2.7.1/lib/mail/message.rb#1211
  def default(sym, val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#257
  def deliver; end

  # source://mail/2.7.1/lib/mail/message.rb#274
  def deliver!; end

  # source://mail/2.7.1/lib/mail/message.rb#201
  def delivery_handler; end

  # source://mail/2.7.1/lib/mail/message.rb#201
  def delivery_handler=(_arg0); end

  # source://mail/2.7.1/lib/mail/message.rb#281
  def delivery_method(method = T.unsafe(nil), settings = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1574
  def delivery_status_part; end

  # source://mail/2.7.1/lib/mail/message.rb#1569
  def delivery_status_report?; end

  # source://mail/2.7.1/lib/mail/message.rb#1289
  def destinations; end

  # source://mail/2.7.1/lib/mail/message.rb#1601
  def diagnostic_code; end

  # source://mail/2.7.1/lib/mail/message.rb#1821
  def encode!; end

  # source://mail/2.7.1/lib/mail/message.rb#1829
  def encoded; end

  # source://mail/2.7.1/lib/mail/message.rb#425
  def envelope_date; end

  # source://mail/2.7.1/lib/mail/message.rb#421
  def envelope_from; end

  # source://mail/2.7.1/lib/mail/message.rb#1597
  def error_status; end

  # source://mail/2.7.1/lib/mail/message.rb#478
  def errors; end

  # source://mail/2.7.1/lib/mail/message.rb#1940
  def filename; end

  # source://mail/2.7.1/lib/mail/message.rb#1593
  def final_recipient; end

  # source://mail/2.7.1/lib/mail/message.rb#1948
  def find_first_mime_type(mt); end

  # source://mail/2.7.1/lib/mail/message.rb#665
  def from(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#677
  def from=(val); end

  # source://actionmailbox//lib/action_mailbox/mail_ext/addresses.rb#5
  def from_address; end

  # source://mail/2.7.1/lib/mail/message.rb#1295
  def from_addrs; end

  # source://mail/2.7.1/lib/mail/message.rb#1661
  def has_attachments?; end

  # source://mail/2.7.1/lib/mail/message.rb#1430
  def has_charset?; end

  # source://mail/2.7.1/lib/mail/message.rb#1435
  def has_content_transfer_encoding?; end

  # source://mail/2.7.1/lib/mail/message.rb#1425
  def has_content_type?; end

  # source://mail/2.7.1/lib/mail/message.rb#1415
  def has_date?; end

  # source://mail/2.7.1/lib/mail/message.rb#1409
  def has_message_id?; end

  # source://mail/2.7.1/lib/mail/message.rb#1421
  def has_mime_version?; end

  # source://mail/2.7.1/lib/mail/message.rb#1439
  def has_transfer_encoding?; end

  # source://mail/2.7.1/lib/mail/message.rb#450
  def header(value = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#435
  def header=(value); end

  # source://mail/2.7.1/lib/mail/message.rb#1403
  def header_fields; end

  # source://mail/2.7.1/lib/mail/message.rb#455
  def headers(hash = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1666
  def html_part(&block); end

  # source://mail/2.7.1/lib/mail/message.rb#1686
  def html_part=(msg); end

  # source://mail/2.7.1/lib/mail/message.rb#681
  def in_reply_to(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#685
  def in_reply_to=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#247
  def inform_interceptors; end

  # source://mail/2.7.1/lib/mail/message.rb#243
  def inform_observers; end

  # source://mail/2.7.1/lib/mail/message.rb#1899
  def inspect; end

  # source://mail/2.7.1/lib/mail/message.rb#1977
  def is_marked_for_delete?; end

  # source://mail/2.7.1/lib/mail/message.rb#689
  def keywords(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#693
  def keywords=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1538
  def main_type; end

  # source://mail/2.7.1/lib/mail/message.rb#1964
  def mark_for_delete=(value = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1516
  def message_content_type; end

  # source://mail/2.7.1/lib/mail/message.rb#710
  def message_id(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#719
  def message_id=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1384
  def method_missing(name, *args, &block); end

  # source://mail/2.7.1/lib/mail/message.rb#1548
  def mime_parameters; end

  # source://mail/2.7.1/lib/mail/message.rb#1512
  def mime_type; end

  # source://mail/2.7.1/lib/mail/message.rb#736
  def mime_version(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#746
  def mime_version=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1559
  def multipart?; end

  # source://mail/2.7.1/lib/mail/message.rb#1564
  def multipart_report?; end

  # source://mail/2.7.1/lib/mail/message.rb#1753
  def part(params = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1619
  def parts; end

  # source://mail/2.7.1/lib/mail/message.rb#225
  def perform_deliveries; end

  # source://mail/2.7.1/lib/mail/message.rb#225
  def perform_deliveries=(_arg0); end

  # source://mail/2.7.1/lib/mail/message.rb#232
  def raise_delivery_errors; end

  # source://mail/2.7.1/lib/mail/message.rb#232
  def raise_delivery_errors=(_arg0); end

  # source://mail/2.7.1/lib/mail/message.rb#417
  def raw_envelope; end

  # source://mail/2.7.1/lib/mail/message.rb#404
  def raw_source; end

  # source://mail/2.7.1/lib/mail/message.rb#1916
  def read; end

  # source://mail/2.7.1/lib/mail/message.rb#1812
  def ready_to_send!; end

  # source://mail/2.7.1/lib/mail/message.rb#750
  def received(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#758
  def received=(val); end

  # source://actionmailbox//lib/action_mailbox/mail_ext/recipients.rb#5
  def recipients; end

  # source://actionmailbox//lib/action_mailbox/mail_ext/addresses.rb#9
  def recipients_addresses; end

  # source://mail/2.7.1/lib/mail/message.rb#762
  def references(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#766
  def references=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#238
  def register_for_delivery_notification(observer); end

  # source://mail/2.7.1/lib/mail/message.rb#1605
  def remote_mta; end

  # source://mail/2.7.1/lib/mail/message.rb#289
  def reply(*args, &block); end

  # source://mail/2.7.1/lib/mail/message.rb#795
  def reply_to(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#807
  def reply_to=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#836
  def resent_bcc(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#848
  def resent_bcc=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#877
  def resent_cc(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#889
  def resent_cc=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#893
  def resent_date(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#897
  def resent_date=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#926
  def resent_from(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#938
  def resent_from=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#942
  def resent_message_id(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#946
  def resent_message_id=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#965
  def resent_sender(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#975
  def resent_sender=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1004
  def resent_to(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1016
  def resent_to=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1609
  def retryable?; end

  # source://mail/2.7.1/lib/mail/message.rb#1021
  def return_path(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1026
  def return_path=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1044
  def sender(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1054
  def sender=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#409
  def set_envelope(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1956
  def skip_deletion; end

  # source://mail/2.7.1/lib/mail/message.rb#1074
  def smtp_envelope_from(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1088
  def smtp_envelope_from=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1107
  def smtp_envelope_to(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1124
  def smtp_envelope_to=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1543
  def sub_type; end

  # source://mail/2.7.1/lib/mail/message.rb#1149
  def subject(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1159
  def subject=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1981
  def text?; end

  # source://mail/2.7.1/lib/mail/message.rb#1675
  def text_part(&block); end

  # source://mail/2.7.1/lib/mail/message.rb#1710
  def text_part=(msg); end

  # source://mail/2.7.1/lib/mail/message.rb#1188
  def to(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1200
  def to=(val); end

  # source://actionmailbox//lib/action_mailbox/mail_ext/addresses.rb#13
  def to_addresses; end

  # source://mail/2.7.1/lib/mail/message.rb#1301
  def to_addrs; end

  # source://mail/2.7.1/lib/mail/message.rb#1895
  def to_s; end

  # source://mail/2.7.1/lib/mail/message.rb#1849
  def to_yaml(opts = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1506
  def transfer_encoding; end

  # source://mail/2.7.1/lib/mail/message.rb#628
  def transport_encoding(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#636
  def transport_encoding=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1837
  def without_attachments!; end

  # source://actionmailbox//lib/action_mailbox/mail_ext/addresses.rb#25
  def x_original_to_addresses; end

  private

  # source://mail/2.7.1/lib/mail/message.rb#2083
  def add_boundary; end

  # source://mail/2.7.1/lib/mail/message.rb#2049
  def add_encoding_to_body; end

  # source://mail/2.7.1/lib/mail/message.rb#2077
  def add_multipart_alternate_header; end

  # source://mail/2.7.1/lib/mail/message.rb#2092
  def add_multipart_mixed_header; end

  # source://mail/2.7.1/lib/mail/message.rb#2063
  def add_required_fields; end

  # source://mail/2.7.1/lib/mail/message.rb#2071
  def add_required_message_fields; end

  # source://mail/2.7.1/lib/mail/message.rb#2042
  def allowed_encodings; end

  # source://mail/2.7.1/lib/mail/message.rb#2007
  def body_lazy(value); end

  # source://mail/2.7.1/lib/mail/message.rb#2166
  def decode_body_as_text; end

  # source://mail/2.7.1/lib/mail/message.rb#2156
  def do_delivery; end

  # source://mail/2.7.1/lib/mail/message.rb#2138
  def find_attachment; end

  # source://mail/2.7.1/lib/mail/message.rb#2055
  def identify_and_set_transfer_encoding; end

  # source://mail/2.7.1/lib/mail/message.rb#2100
  def init_with_hash(hash); end

  # source://mail/2.7.1/lib/mail/message.rb#2130
  def init_with_string(string); end

  # source://mail/2.7.1/lib/mail/message.rb#391
  def initialize_copy(original); end

  # source://mail/2.7.1/lib/mail/message.rb#1996
  def parse_message; end

  # source://mail/2.7.1/lib/mail/message.rb#2022
  def process_body_raw; end

  # source://mail/2.7.1/lib/mail/message.rb#2002
  def raw_source=(value); end

  # source://mail/2.7.1/lib/mail/message.rb#2038
  def separate_parts; end

  # source://mail/2.7.1/lib/mail/message.rb#2030
  def set_envelope_header; end

  class << self
    # source://mail/2.7.1/lib/mail/message.rb#234
    def default_charset; end

    # source://mail/2.7.1/lib/mail/message.rb#235
    def default_charset=(charset); end

    # source://mail/2.7.1/lib/mail/message.rb#1891
    def from_hash(hash); end

    # source://mail/2.7.1/lib/mail/message.rb#1869
    def from_yaml(str); end
  end
end

# source://mail/2.7.1/lib/mail/message.rb#1987
Mail::Message::HEADER_SEPARATOR = T.let(T.unsafe(nil), Regexp)

class Mail::MessageIdField < ::Mail::StructuredField
  include ::Mail::CommonMessageId

  # source://mail/2.7.1/lib/mail/fields/message_id_field.rb#42
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/message_id_field.rb#72
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/message_id_field.rb#68
  def encoded; end

  # source://mail/2.7.1/lib/mail/fields/message_id_field.rb#60
  def message_ids; end

  # source://mail/2.7.1/lib/mail/fields/message_id_field.rb#56
  def name; end

  # source://mail/2.7.1/lib/mail/fields/message_id_field.rb#64
  def to_s; end

  private

  # source://mail/2.7.1/lib/mail/fields/message_id_field.rb#78
  def generate_message_id; end
end

# source://mail/2.7.1/lib/mail/fields/message_id_field.rb#40
Mail::MessageIdField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/message_id_field.rb#39
Mail::MessageIdField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::MessageIdsElement
  # source://mail/2.7.1/lib/mail/elements/message_ids_element.rb#9
  def initialize(string); end

  # source://mail/2.7.1/lib/mail/elements/message_ids_element.rb#13
  def message_id; end

  # source://mail/2.7.1/lib/mail/elements/message_ids_element.rb#7
  def message_ids; end

  private

  # source://mail/2.7.1/lib/mail/elements/message_ids_element.rb#18
  def clean_msg_id(val); end
end

class Mail::MimeVersionElement
  # source://mail/2.7.1/lib/mail/elements/mime_version_element.rb#9
  def initialize(string); end

  # source://mail/2.7.1/lib/mail/elements/mime_version_element.rb#7
  def major; end

  # source://mail/2.7.1/lib/mail/elements/mime_version_element.rb#7
  def minor; end
end

class Mail::MimeVersionField < ::Mail::StructuredField
  # source://mail/2.7.1/lib/mail/fields/mime_version_field.rb#12
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/mime_version_field.rb#49
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/mime_version_field.rb#29
  def element; end

  # source://mail/2.7.1/lib/mail/fields/mime_version_field.rb#45
  def encoded; end

  # source://mail/2.7.1/lib/mail/fields/mime_version_field.rb#37
  def major; end

  # source://mail/2.7.1/lib/mail/fields/mime_version_field.rb#41
  def minor; end

  # source://mail/2.7.1/lib/mail/fields/mime_version_field.rb#23
  def parse(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/mime_version_field.rb#33
  def version; end
end

# source://mail/2.7.1/lib/mail/fields/mime_version_field.rb#10
Mail::MimeVersionField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/mime_version_field.rb#9
Mail::MimeVersionField::FIELD_NAME = T.let(T.unsafe(nil), String)

module Mail::Multibyte
  class << self
    # source://mail/2.7.1/lib/mail/multibyte/utils.rb#47
    def clean(string); end

    # source://mail/2.7.1/lib/mail/multibyte.rb#56
    def mb_chars(str); end

    # source://mail/2.7.1/lib/mail/multibyte.rb#17
    def proxy_class; end

    # source://mail/2.7.1/lib/mail/multibyte.rb#17
    def proxy_class=(_arg0); end

    # source://mail/2.7.1/lib/mail/multibyte/utils.rb#8
    def valid_character; end

    # source://mail/2.7.1/lib/mail/multibyte/utils.rb#24
    def verify(string); end

    # source://mail/2.7.1/lib/mail/multibyte/utils.rb#39
    def verify!(string); end
  end
end

class Mail::Multibyte::Chars
  include ::Comparable

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#43
  def initialize(string); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#93
  def <=>(other); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#239
  def =~(other); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#306
  def [](*args); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#266
  def []=(*args); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#71
  def acts_like_string?; end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#359
  def capitalize; end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#421
  def capitalize!(*args); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#397
  def compose; end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#388
  def decompose; end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#351
  def downcase; end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#421
  def downcase!(*args); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#406
  def g_length; end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#335
  def limit(limit); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#54
  def method_missing(method, *args, &block); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#379
  def normalize(form = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#66
  def respond_to?(method, include_private = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#297
  def reverse; end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#421
  def reverse!(*args); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#306
  def slice(*args); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#421
  def slice!(*args); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#249
  def split(*args); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#413
  def tidy_bytes(force = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#421
  def tidy_bytes!(*args); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#368
  def titlecase; end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#368
  def titleize; end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#37
  def to_s; end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#37
  def to_str; end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#343
  def upcase; end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#421
  def upcase!(*args); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#37
  def wrapped_string; end

  protected

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#471
  def chars(string); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#446
  def justify(integer, way, padstr = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#463
  def padding(padsize, padstr = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/multibyte/chars.rb#430
  def translate_offset(byte_offset); end

  class << self
    # source://mail/2.7.1/lib/mail/multibyte/chars.rb#76
    def consumes?(string); end
  end
end

class Mail::Multibyte::EncodingError < ::StandardError; end

module Mail::Multibyte::Unicode
  extend ::Mail::Multibyte::Unicode

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#318
  def apply_mapping(string, mapping); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#184
  def compose_codepoints(codepoints); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#163
  def decompose_codepoints(type, codepoints); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#37
  def default_normalization_form; end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#37
  def default_normalization_form=(_arg0); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#142
  def g_pack(unpacked); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#108
  def g_unpack(string); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#99
  def in_char_class?(codepoint, classes); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#300
  def normalize(string, form = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#147
  def reorder_characters(codepoints); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#245
  def tidy_bytes(string, force = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#86
  def u_unpack(string); end

  private

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#399
  def database; end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#389
  def tidy_byte(byte); end

  class << self
    # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#75
    def codepoints_to_pattern(array_of_codepoints); end
  end
end

class Mail::Multibyte::Unicode::Codepoint
  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#15
  def initialize; end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#12
  def code; end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#12
  def code=(_arg0); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#12
  def combining_class; end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#12
  def combining_class=(_arg0); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#12
  def decomp_mapping; end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#12
  def decomp_mapping=(_arg0); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#12
  def decomp_type; end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#12
  def decomp_type=(_arg0); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#12
  def lowercase_mapping; end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#12
  def lowercase_mapping=(_arg0); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#21
  def swapcase_mapping; end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#12
  def uppercase_mapping; end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#12
  def uppercase_mapping=(_arg0); end
end

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#51
Mail::Multibyte::Unicode::HANGUL_JAMO_FIRST = T.let(T.unsafe(nil), Integer)

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#52
Mail::Multibyte::Unicode::HANGUL_JAMO_LAST = T.let(T.unsafe(nil), Integer)

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#42
Mail::Multibyte::Unicode::HANGUL_LBASE = T.let(T.unsafe(nil), Integer)

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#45
Mail::Multibyte::Unicode::HANGUL_LCOUNT = T.let(T.unsafe(nil), Integer)

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#48
Mail::Multibyte::Unicode::HANGUL_NCOUNT = T.let(T.unsafe(nil), Integer)

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#41
Mail::Multibyte::Unicode::HANGUL_SBASE = T.let(T.unsafe(nil), Integer)

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#49
Mail::Multibyte::Unicode::HANGUL_SCOUNT = T.let(T.unsafe(nil), Integer)

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#50
Mail::Multibyte::Unicode::HANGUL_SLAST = T.let(T.unsafe(nil), Integer)

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#44
Mail::Multibyte::Unicode::HANGUL_TBASE = T.let(T.unsafe(nil), Integer)

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#47
Mail::Multibyte::Unicode::HANGUL_TCOUNT = T.let(T.unsafe(nil), Integer)

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#43
Mail::Multibyte::Unicode::HANGUL_VBASE = T.let(T.unsafe(nil), Integer)

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#46
Mail::Multibyte::Unicode::HANGUL_VCOUNT = T.let(T.unsafe(nil), Integer)

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#72
Mail::Multibyte::Unicode::LEADERS_AND_TRAILERS = T.let(T.unsafe(nil), Array)

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#79
Mail::Multibyte::Unicode::LEADERS_PAT = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#30
Mail::Multibyte::Unicode::NORMALIZATION_FORMS = T.let(T.unsafe(nil), Array)

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#78
Mail::Multibyte::Unicode::TRAILERS_PAT = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#8
Mail::Multibyte::Unicode::UNICODE_VERSION = T.let(T.unsafe(nil), String)

class Mail::Multibyte::Unicode::UnicodeDatabase
  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#335
  def initialize; end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#346
  def boundary; end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#333
  def boundary=(_arg0); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#346
  def codepoints; end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#333
  def codepoints=(_arg0); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#346
  def composition_exclusion; end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#333
  def composition_exclusion=(_arg0); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#346
  def composition_map; end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#333
  def composition_map=(_arg0); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#346
  def cp1252; end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#333
  def cp1252=(_arg0); end

  # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#354
  def load; end

  class << self
    # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#377
    def dirname; end

    # source://mail/2.7.1/lib/mail/multibyte/unicode.rb#382
    def filename; end
  end
end

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#331
Mail::Multibyte::Unicode::UnicodeDatabase::ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://mail/2.7.1/lib/mail/multibyte/unicode.rb#55
Mail::Multibyte::Unicode::WHITESPACE = T.let(T.unsafe(nil), Array)

# source://mail/2.7.1/lib/mail/multibyte.rb#74
Mail::Multibyte::VALID_CHARACTER = T.let(T.unsafe(nil), Hash)

class Mail::OptionalField < ::Mail::UnstructuredField
  private

  # source://mail/2.7.1/lib/mail/fields/optional_field.rb#13
  def do_encode; end
end

class Mail::POP3 < ::Mail::Retriever
  # source://mail/2.7.1/lib/mail/network/retriever_methods/pop3.rb#38
  def initialize(values); end

  # source://mail/2.7.1/lib/mail/network/retriever_methods/pop3.rb#104
  def connection(&block); end

  # source://mail/2.7.1/lib/mail/network/retriever_methods/pop3.rb#94
  def delete_all; end

  # source://mail/2.7.1/lib/mail/network/retriever_methods/pop3.rb#60
  def find(options = T.unsafe(nil), &block); end

  # source://mail/2.7.1/lib/mail/network/retriever_methods/pop3.rb#48
  def settings; end

  # source://mail/2.7.1/lib/mail/network/retriever_methods/pop3.rb#48
  def settings=(_arg0); end

  private

  # source://mail/2.7.1/lib/mail/network/retriever_methods/pop3.rb#127
  def start(config = T.unsafe(nil), &block); end

  # source://mail/2.7.1/lib/mail/network/retriever_methods/pop3.rb#115
  def validate_options(options); end
end

class Mail::ParameterHash < ::Mail::IndifferentHash
  include ::Mail::Constants
  include ::Mail::Utilities

  # source://mail/2.7.1/lib/mail/fields/common/parameter_hash.rb#16
  def [](key_name); end

  # source://mail/2.7.1/lib/mail/fields/common/parameter_hash.rb#53
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/common/parameter_hash.rb#43
  def encoded; end
end

module Mail::ParserTools
  # source://mail/2.7.1/lib/mail/parser_tools.rb#6
  def chars(data, from_bytes, to_bytes); end
end

module Mail::Parsers; end

module Mail::Parsers::AddressListsParser
  extend ::Mail::ParserTools

  class << self
    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#31948
    def en_comment_tail; end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#31948
    def en_comment_tail=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#31952
    def en_main; end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#31952
    def en_main=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#31943
    def error; end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#31943
    def error=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#31939
    def first_final; end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#31939
    def first_final=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#31956
    def parse(data); end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#31935
    def start; end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#31935
    def start=(_arg0); end

    private

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#31611
    def _eof_actions; end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#31611
    def _eof_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#1297
    def _index_offsets; end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#1297
    def _index_offsets=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#1621
    def _indicies; end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#1621
    def _indicies=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#973
    def _key_spans; end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#973
    def _key_spans=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#30980
    def _trans_actions; end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#30980
    def _trans_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#15
    def _trans_keys; end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#15
    def _trans_keys=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#30349
    def _trans_targs; end

    # source://mail/2.7.1/lib/mail/parsers/address_lists_parser.rb#30349
    def _trans_targs=(_arg0); end
  end
end

class Mail::Parsers::AddressListsParser::AddressListStruct < ::Struct
  def addresses; end
  def addresses=(_); end
  def error; end
  def error=(_); end
  def group_names; end
  def group_names=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class Mail::Parsers::AddressListsParser::AddressStruct < ::Struct
  def comments; end
  def comments=(_); end
  def display_name; end
  def display_name=(_); end
  def domain; end
  def domain=(_); end
  def error; end
  def error=(_); end
  def group; end
  def group=(_); end
  def local; end
  def local=(_); end
  def obs_domain_list; end
  def obs_domain_list=(_); end
  def raw; end
  def raw=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module Mail::Parsers::ContentDispositionParser
  extend ::Mail::ParserTools

  class << self
    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#553
    def en_comment_tail; end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#553
    def en_comment_tail=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#557
    def en_main; end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#557
    def en_main=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#548
    def error; end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#548
    def error=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#544
    def first_final; end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#544
    def first_final=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#561
    def parse(data); end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#540
    def start; end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#540
    def start=(_arg0); end

    private

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#527
    def _eof_actions; end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#527
    def _eof_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#51
    def _index_offsets; end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#51
    def _index_offsets=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#64
    def _indicies; end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#64
    def _indicies=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#38
    def _key_spans; end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#38
    def _key_spans=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#507
    def _trans_actions; end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#507
    def _trans_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#13
    def _trans_keys; end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#13
    def _trans_keys=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#487
    def _trans_targs; end

    # source://mail/2.7.1/lib/mail/parsers/content_disposition_parser.rb#487
    def _trans_targs=(_arg0); end
  end
end

class Mail::Parsers::ContentDispositionParser::ContentDispositionStruct < ::Struct
  def disposition_type; end
  def disposition_type=(_); end
  def error; end
  def error=(_); end
  def parameters; end
  def parameters=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module Mail::Parsers::ContentLocationParser
  extend ::Mail::ParserTools

  class << self
    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#574
    def en_comment_tail; end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#574
    def en_comment_tail=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#578
    def en_main; end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#578
    def en_main=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#569
    def error; end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#569
    def error=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#565
    def first_final; end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#565
    def first_final=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#582
    def parse(data); end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#561
    def start; end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#561
    def start=(_arg0); end

    private

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#548
    def _eof_actions; end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#548
    def _eof_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#49
    def _index_offsets; end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#49
    def _index_offsets=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#62
    def _indicies; end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#62
    def _indicies=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#36
    def _key_spans; end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#36
    def _key_spans=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#530
    def _trans_actions; end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#530
    def _trans_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#13
    def _trans_keys; end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#13
    def _trans_keys=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#512
    def _trans_targs; end

    # source://mail/2.7.1/lib/mail/parsers/content_location_parser.rb#512
    def _trans_targs=(_arg0); end
  end
end

class Mail::Parsers::ContentLocationParser::ContentLocationStruct < ::Struct
  def error; end
  def error=(_); end
  def location; end
  def location=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module Mail::Parsers::ContentTransferEncodingParser
  extend ::Mail::ParserTools

  class << self
    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#325
    def en_comment_tail; end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#325
    def en_comment_tail=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#329
    def en_main; end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#329
    def en_main=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#320
    def error; end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#320
    def error=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#316
    def first_final; end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#316
    def first_final=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#333
    def parse(data); end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#312
    def start; end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#312
    def start=(_arg0); end

    private

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#301
    def _eof_actions; end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#301
    def _eof_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#42
    def _index_offsets; end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#42
    def _index_offsets=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#53
    def _indicies; end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#53
    def _indicies=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#31
    def _key_spans; end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#31
    def _key_spans=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#287
    def _trans_actions; end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#287
    def _trans_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#13
    def _trans_keys; end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#13
    def _trans_keys=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#273
    def _trans_targs; end

    # source://mail/2.7.1/lib/mail/parsers/content_transfer_encoding_parser.rb#273
    def _trans_targs=(_arg0); end
  end
end

class Mail::Parsers::ContentTransferEncodingParser::ContentTransferEncodingStruct < ::Struct
  def encoding; end
  def encoding=(_); end
  def error; end
  def error=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module Mail::Parsers::ContentTypeParser
  extend ::Mail::ParserTools

  class << self
    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#678
    def en_comment_tail; end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#678
    def en_comment_tail=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#682
    def en_main; end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#682
    def en_main=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#673
    def error; end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#673
    def error=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#669
    def first_final; end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#669
    def first_final=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#686
    def parse(data); end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#665
    def start; end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#665
    def start=(_arg0); end

    private

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#651
    def _eof_actions; end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#651
    def _eof_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#55
    def _index_offsets; end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#55
    def _index_offsets=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#69
    def _indicies; end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#69
    def _indicies=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#41
    def _key_spans; end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#41
    def _key_spans=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#629
    def _trans_actions; end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#629
    def _trans_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#13
    def _trans_keys; end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#13
    def _trans_keys=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#607
    def _trans_targs; end

    # source://mail/2.7.1/lib/mail/parsers/content_type_parser.rb#607
    def _trans_targs=(_arg0); end
  end
end

class Mail::Parsers::ContentTypeParser::ContentTypeStruct < ::Struct
  def error; end
  def error=(_); end
  def main_type; end
  def main_type=(_); end
  def parameters; end
  def parameters=(_); end
  def sub_type; end
  def sub_type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module Mail::Parsers::DateTimeParser
  extend ::Mail::ParserTools

  class << self
    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#657
    def en_comment_tail; end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#657
    def en_comment_tail=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#661
    def en_main; end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#661
    def en_main=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#652
    def error; end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#652
    def error=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#648
    def first_final; end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#648
    def first_final=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#665
    def parse(data); end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#644
    def start; end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#644
    def start=(_arg0); end

    private

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#623
    def _eof_actions; end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#623
    def _eof_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#83
    def _index_offsets; end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#83
    def _index_offsets=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#104
    def _indicies; end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#104
    def _indicies=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#62
    def _key_spans; end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#62
    def _key_spans=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#592
    def _trans_actions; end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#592
    def _trans_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#13
    def _trans_keys; end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#13
    def _trans_keys=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#561
    def _trans_targs; end

    # source://mail/2.7.1/lib/mail/parsers/date_time_parser.rb#561
    def _trans_targs=(_arg0); end
  end
end

class Mail::Parsers::DateTimeParser::DateTimeStruct < ::Struct
  def date_string; end
  def date_string=(_); end
  def error; end
  def error=(_); end
  def time_string; end
  def time_string=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module Mail::Parsers::EnvelopeFromParser
  extend ::Mail::ParserTools

  class << self
    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#3208
    def en_comment_tail; end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#3208
    def en_comment_tail=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#3212
    def en_main; end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#3212
    def en_main=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#3203
    def error; end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#3203
    def error=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#3199
    def first_final; end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#3199
    def first_final=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#3216
    def parse(data); end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#3195
    def start; end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#3195
    def start=(_arg0); end

    private

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#3149
    def _eof_actions; end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#3149
    def _eof_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#182
    def _index_offsets; end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#182
    def _index_offsets=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#228
    def _indicies; end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#228
    def _indicies=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#136
    def _key_spans; end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#136
    def _key_spans=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#3074
    def _trans_actions; end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#3074
    def _trans_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#13
    def _trans_keys; end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#13
    def _trans_keys=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#2999
    def _trans_targs; end

    # source://mail/2.7.1/lib/mail/parsers/envelope_from_parser.rb#2999
    def _trans_targs=(_arg0); end
  end
end

class Mail::Parsers::EnvelopeFromParser::EnvelopeFromStruct < ::Struct
  def address; end
  def address=(_); end
  def ctime_date; end
  def ctime_date=(_); end
  def error; end
  def error=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module Mail::Parsers::MessageIdsParser
  extend ::Mail::ParserTools

  class << self
    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#2547
    def en_comment_tail; end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#2547
    def en_comment_tail=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#2551
    def en_main; end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#2551
    def en_main=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#2542
    def error; end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#2542
    def error=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#2538
    def first_final; end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#2538
    def first_final=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#2555
    def parse(data); end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#2534
    def start; end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#2534
    def start=(_arg0); end

    private

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#2500
    def _eof_actions; end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#2500
    def _eof_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#134
    def _index_offsets; end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#134
    def _index_offsets=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#168
    def _indicies; end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#168
    def _indicies=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#100
    def _key_spans; end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#100
    def _key_spans=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#2443
    def _trans_actions; end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#2443
    def _trans_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#13
    def _trans_keys; end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#13
    def _trans_keys=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#2386
    def _trans_targs; end

    # source://mail/2.7.1/lib/mail/parsers/message_ids_parser.rb#2386
    def _trans_targs=(_arg0); end
  end
end

class Mail::Parsers::MessageIdsParser::MessageIdsStruct < ::Struct
  def error; end
  def error=(_); end
  def message_ids; end
  def message_ids=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module Mail::Parsers::MimeVersionParser
  extend ::Mail::ParserTools

  class << self
    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#289
    def en_comment_tail; end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#289
    def en_comment_tail=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#293
    def en_main; end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#293
    def en_main=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#284
    def error; end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#284
    def error=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#280
    def first_final; end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#280
    def first_final=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#297
    def parse(data); end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#276
    def start; end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#276
    def start=(_arg0); end

    private

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#265
    def _eof_actions; end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#265
    def _eof_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#42
    def _index_offsets; end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#42
    def _index_offsets=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#53
    def _indicies; end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#53
    def _indicies=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#31
    def _key_spans; end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#31
    def _key_spans=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#251
    def _trans_actions; end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#251
    def _trans_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#13
    def _trans_keys; end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#13
    def _trans_keys=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#237
    def _trans_targs; end

    # source://mail/2.7.1/lib/mail/parsers/mime_version_parser.rb#237
    def _trans_targs=(_arg0); end
  end
end

class Mail::Parsers::MimeVersionParser::MimeVersionStruct < ::Struct
  def error; end
  def error=(_); end
  def major; end
  def major=(_); end
  def minor; end
  def minor=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class Mail::Parsers::PhraseListsParser
  extend ::Mail::ParserTools

  class << self
    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#669
    def en_comment_tail; end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#669
    def en_comment_tail=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#673
    def en_main; end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#673
    def en_main=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#664
    def error; end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#664
    def error=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#660
    def first_final; end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#660
    def first_final=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#677
    def parse(data); end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#656
    def start; end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#656
    def start=(_arg0); end

    private

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#643
    def _eof_actions; end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#643
    def _eof_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#51
    def _index_offsets; end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#51
    def _index_offsets=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#64
    def _indicies; end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#64
    def _indicies=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#38
    def _key_spans; end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#38
    def _key_spans=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#623
    def _trans_actions; end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#623
    def _trans_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#13
    def _trans_keys; end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#13
    def _trans_keys=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#603
    def _trans_targs; end

    # source://mail/2.7.1/lib/mail/parsers/phrase_lists_parser.rb#603
    def _trans_targs=(_arg0); end
  end
end

class Mail::Parsers::PhraseListsParser::PhraseListsStruct < ::Struct
  def error; end
  def error=(_); end
  def phrases; end
  def phrases=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module Mail::Parsers::ReceivedParser
  extend ::Mail::ParserTools

  class << self
    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#7481
    def en_comment_tail; end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#7481
    def en_comment_tail=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#7485
    def en_main; end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#7485
    def en_main=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#7476
    def error; end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#7476
    def error=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#7472
    def first_final; end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#7472
    def first_final=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#7489
    def parse(data); end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#7468
    def start; end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#7468
    def start=(_arg0); end

    private

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#7379
    def _eof_actions; end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#7379
    def _eof_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#355
    def _index_offsets; end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#355
    def _index_offsets=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#444
    def _indicies; end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#444
    def _indicies=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#266
    def _key_spans; end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#266
    def _key_spans=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#7196
    def _trans_actions; end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#7196
    def _trans_actions=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#13
    def _trans_keys; end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#13
    def _trans_keys=(_arg0); end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#7013
    def _trans_targs; end

    # source://mail/2.7.1/lib/mail/parsers/received_parser.rb#7013
    def _trans_targs=(_arg0); end
  end
end

class Mail::Parsers::ReceivedParser::ReceivedStruct < ::Struct
  def date; end
  def date=(_); end
  def error; end
  def error=(_); end
  def info; end
  def info=(_); end
  def time; end
  def time=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class Mail::Part < ::Mail::Message
  # source://mail/2.7.1/lib/mail/part.rb#69
  def action; end

  # source://mail/2.7.1/lib/mail/part.rb#12
  def add_content_id(content_id_val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/part.rb#41
  def add_required_fields; end

  # source://mail/2.7.1/lib/mail/part.rb#46
  def add_required_message_fields; end

  # source://mail/2.7.1/lib/mail/part.rb#58
  def bounced?; end

  # source://mail/2.7.1/lib/mail/part.rb#28
  def cid; end

  # source://mail/2.7.1/lib/mail/part.rb#54
  def delivery_status_data; end

  # source://mail/2.7.1/lib/mail/part.rb#50
  def delivery_status_report_part?; end

  # source://mail/2.7.1/lib/mail/part.rb#81
  def diagnostic_code; end

  # source://mail/2.7.1/lib/mail/part.rb#77
  def error_status; end

  # source://mail/2.7.1/lib/mail/part.rb#73
  def final_recipient; end

  # source://mail/2.7.1/lib/mail/part.rb#18
  def has_content_id?; end

  # source://mail/2.7.1/lib/mail/part.rb#37
  def inline?; end

  # source://mail/2.7.1/lib/mail/part.rb#22
  def inline_content_id; end

  # source://mail/2.7.1/lib/mail/part.rb#85
  def remote_mta; end

  # source://mail/2.7.1/lib/mail/part.rb#89
  def retryable?; end

  # source://mail/2.7.1/lib/mail/part.rb#33
  def url; end

  private

  # source://mail/2.7.1/lib/mail/part.rb#95
  def get_return_values(key); end

  # source://mail/2.7.1/lib/mail/part.rb#117
  def parse_delivery_status_report; end

  # source://mail/2.7.1/lib/mail/part.rb#106
  def parse_message; end
end

class Mail::PartsList
  # source://mail/2.7.1/lib/mail/parts_list.rb#8
  def initialize(*args); end

  # source://mail/2.7.1/lib/mail/parts_list.rb#24
  def attachments; end

  # source://mail/2.7.1/lib/mail/parts_list.rb#28
  def collect; end

  # source://mail/2.7.1/lib/mail/parts_list.rb#43
  def collect!; end

  # source://mail/2.7.1/lib/mail/parts_list.rb#16
  def encode_with(coder); end

  # source://mail/2.7.1/lib/mail/parts_list.rb#28
  def map; end

  # source://mail/2.7.1/lib/mail/parts_list.rb#39
  def map!; end

  # source://mail/2.7.1/lib/mail/parts_list.rb#6
  def parts; end

  # source://mail/2.7.1/lib/mail/parts_list.rb#47
  def sort; end

  # source://mail/2.7.1/lib/mail/parts_list.rb#51
  def sort!(order); end

  # source://mail/2.7.1/lib/mail/parts_list.rb#20
  def to_yaml(options = T.unsafe(nil)); end

  private

  # source://mail/2.7.1/lib/mail/parts_list.rb#66
  def get_order_value(part, order); end
end

class Mail::PhraseList
  # source://mail/2.7.1/lib/mail/elements/phrase_list.rb#10
  def initialize(string); end

  # source://mail/2.7.1/lib/mail/elements/phrase_list.rb#8
  def phrases; end
end

# source://mail/2.7.1/lib/mail/mail.rb#241
Mail::RANDOM_TAG = T.let(T.unsafe(nil), String)

class Mail::ReceivedElement
  include ::Mail::Constants
  include ::Mail::Utilities

  # source://mail/2.7.1/lib/mail/elements/received_element.rb#11
  def initialize(string); end

  # source://mail/2.7.1/lib/mail/elements/received_element.rb#9
  def date_time; end

  # source://mail/2.7.1/lib/mail/elements/received_element.rb#9
  def info; end

  # source://mail/2.7.1/lib/mail/elements/received_element.rb#17
  def to_s(*args); end
end

class Mail::ReceivedField < ::Mail::StructuredField
  # source://mail/2.7.1/lib/mail/fields/received_field.rb#29
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/received_field.rb#47
  def date_time; end

  # source://mail/2.7.1/lib/mail/fields/received_field.rb#67
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/received_field.rb#43
  def element; end

  # source://mail/2.7.1/lib/mail/fields/received_field.rb#59
  def encoded; end

  # source://mail/2.7.1/lib/mail/fields/received_field.rb#55
  def formatted_date; end

  # source://mail/2.7.1/lib/mail/fields/received_field.rb#51
  def info; end

  # source://mail/2.7.1/lib/mail/fields/received_field.rb#37
  def parse(val = T.unsafe(nil)); end
end

# source://mail/2.7.1/lib/mail/fields/received_field.rb#27
Mail::ReceivedField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/received_field.rb#26
Mail::ReceivedField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ReferencesField < ::Mail::StructuredField
  include ::Mail::CommonMessageId

  # source://mail/2.7.1/lib/mail/fields/references_field.rb#40
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/references_field.rb#52
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/references_field.rb#48
  def encoded; end
end

# source://mail/2.7.1/lib/mail/fields/references_field.rb#38
Mail::ReferencesField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/references_field.rb#37
Mail::ReferencesField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ReplyToField < ::Mail::StructuredField
  include ::Mail::CommonAddress

  # source://mail/2.7.1/lib/mail/fields/reply_to_field.rb#40
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/reply_to_field.rb#50
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/reply_to_field.rb#46
  def encoded; end
end

# source://mail/2.7.1/lib/mail/fields/reply_to_field.rb#38
Mail::ReplyToField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/reply_to_field.rb#37
Mail::ReplyToField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ResentBccField < ::Mail::StructuredField
  include ::Mail::CommonAddress

  # source://mail/2.7.1/lib/mail/fields/resent_bcc_field.rb#40
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/resent_bcc_field.rb#50
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/resent_bcc_field.rb#46
  def encoded; end
end

# source://mail/2.7.1/lib/mail/fields/resent_bcc_field.rb#38
Mail::ResentBccField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/resent_bcc_field.rb#37
Mail::ResentBccField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ResentCcField < ::Mail::StructuredField
  include ::Mail::CommonAddress

  # source://mail/2.7.1/lib/mail/fields/resent_cc_field.rb#40
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/resent_cc_field.rb#50
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/resent_cc_field.rb#46
  def encoded; end
end

# source://mail/2.7.1/lib/mail/fields/resent_cc_field.rb#38
Mail::ResentCcField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/resent_cc_field.rb#37
Mail::ResentCcField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ResentDateField < ::Mail::StructuredField
  include ::Mail::CommonDate

  # source://mail/2.7.1/lib/mail/fields/resent_date_field.rb#15
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/resent_date_field.rb#30
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/resent_date_field.rb#26
  def encoded; end
end

# source://mail/2.7.1/lib/mail/fields/resent_date_field.rb#13
Mail::ResentDateField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/resent_date_field.rb#12
Mail::ResentDateField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ResentFromField < ::Mail::StructuredField
  include ::Mail::CommonAddress

  # source://mail/2.7.1/lib/mail/fields/resent_from_field.rb#40
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/resent_from_field.rb#50
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/resent_from_field.rb#46
  def encoded; end
end

# source://mail/2.7.1/lib/mail/fields/resent_from_field.rb#38
Mail::ResentFromField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/resent_from_field.rb#37
Mail::ResentFromField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ResentMessageIdField < ::Mail::StructuredField
  include ::Mail::CommonMessageId

  # source://mail/2.7.1/lib/mail/fields/resent_message_id_field.rb#15
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/resent_message_id_field.rb#30
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/resent_message_id_field.rb#26
  def encoded; end

  # source://mail/2.7.1/lib/mail/fields/resent_message_id_field.rb#22
  def name; end
end

# source://mail/2.7.1/lib/mail/fields/resent_message_id_field.rb#13
Mail::ResentMessageIdField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/resent_message_id_field.rb#12
Mail::ResentMessageIdField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ResentSenderField < ::Mail::StructuredField
  include ::Mail::CommonAddress

  # source://mail/2.7.1/lib/mail/fields/resent_sender_field.rb#39
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/resent_sender_field.rb#49
  def address; end

  # source://mail/2.7.1/lib/mail/fields/resent_sender_field.rb#45
  def addresses; end

  # source://mail/2.7.1/lib/mail/fields/resent_sender_field.rb#57
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/resent_sender_field.rb#53
  def encoded; end
end

# source://mail/2.7.1/lib/mail/fields/resent_sender_field.rb#37
Mail::ResentSenderField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/resent_sender_field.rb#36
Mail::ResentSenderField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ResentToField < ::Mail::StructuredField
  include ::Mail::CommonAddress

  # source://mail/2.7.1/lib/mail/fields/resent_to_field.rb#40
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/resent_to_field.rb#50
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/resent_to_field.rb#46
  def encoded; end
end

# source://mail/2.7.1/lib/mail/fields/resent_to_field.rb#38
Mail::ResentToField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/resent_to_field.rb#37
Mail::ResentToField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::Retriever
  # source://mail/2.7.1/lib/mail/network/retriever_methods/base.rb#39
  def all(options = T.unsafe(nil), &block); end

  # source://mail/2.7.1/lib/mail/network/retriever_methods/base.rb#56
  def find_and_delete(options = T.unsafe(nil), &block); end

  # source://mail/2.7.1/lib/mail/network/retriever_methods/base.rb#14
  def first(options = T.unsafe(nil), &block); end

  # source://mail/2.7.1/lib/mail/network/retriever_methods/base.rb#27
  def last(options = T.unsafe(nil), &block); end
end

class Mail::ReturnPathField < ::Mail::StructuredField
  include ::Mail::CommonAddress

  # source://mail/2.7.1/lib/mail/fields/return_path_field.rb#41
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/return_path_field.rb#56
  def address; end

  # source://mail/2.7.1/lib/mail/fields/return_path_field.rb#52
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/return_path_field.rb#60
  def default; end

  # source://mail/2.7.1/lib/mail/fields/return_path_field.rb#48
  def encoded; end
end

# source://mail/2.7.1/lib/mail/fields/return_path_field.rb#39
Mail::ReturnPathField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/return_path_field.rb#38
Mail::ReturnPathField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::Ruby19
  class << self
    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#124
    def b_value_decode(str); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#119
    def b_value_encode(str, encoding = T.unsafe(nil)); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#65
    def bracket(str); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#43
    def charset_encoder; end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#43
    def charset_encoder=(_arg0); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#71
    def decode_base64(str); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#109
    def decode_utf7(utf7); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#78
    def encode_base64(str); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#98
    def encode_utf7(string); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#60
    def escape_bracket(str); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#49
    def escape_paren(str); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#86
    def get_constant(klass, string); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#82
    def has_constant?(klass, string); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#161
    def param_decode(str, encoding); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#170
    def param_encode(str); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#54
    def paren(str); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#186
    def pick_encoding(charset); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#142
    def q_value_decode(str); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#137
    def q_value_encode(str, encoding = T.unsafe(nil)); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#247
    def string_byteslice(str, *args); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#90
    def transcode_charset(str, from_encoding, to_encoding = T.unsafe(nil)); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#176
    def uri_parser; end

    private

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#259
    def convert_to_encoding(encoding); end

    # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#272
    def transcode_to_scrubbed_utf8(str); end
  end
end

class Mail::Ruby19::BestEffortCharsetEncoder
  # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#18
  def encode(string, charset); end

  private

  # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#29
  def pick_encoding(charset); end
end

class Mail::Ruby19::StrictCharsetEncoder
  # source://mail/2.7.1/lib/mail/version_specific/ruby_1_9.rb#7
  def encode(string, charset); end
end

# source://mail/2.7.1/lib/mail.rb#22
Mail::RubyVer = Mail::Ruby19

class Mail::SMTP
  # source://mail/2.7.1/lib/mail/network/delivery_methods/smtp.rb#95
  def initialize(values); end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/smtp.rb#99
  def deliver!(mail); end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/smtp.rb#77
  def settings; end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/smtp.rb#77
  def settings=(_arg0); end

  private

  # source://mail/2.7.1/lib/mail/network/delivery_methods/smtp.rb#112
  def build_smtp_session; end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/smtp.rb#135
  def ssl_context; end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/smtp.rb#108
  def start_smtp_session(&block); end
end

# source://mail/2.7.1/lib/mail/network/delivery_methods/smtp.rb#79
Mail::SMTP::DEFAULTS = T.let(T.unsafe(nil), Hash)

class Mail::SMTPConnection
  # source://mail/2.7.1/lib/mail/network/delivery_methods/smtp_connection.rb#43
  def initialize(values); end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/smtp_connection.rb#51
  def deliver!(mail); end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/smtp_connection.rb#41
  def settings; end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/smtp_connection.rb#41
  def settings=(_arg0); end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/smtp_connection.rb#41
  def smtp; end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/smtp_connection.rb#41
  def smtp=(_arg0); end

  private

  # source://mail/2.7.1/lib/mail/network/delivery_methods/smtp_connection.rb#62
  def dot_stuff(message); end
end

class Mail::SenderField < ::Mail::StructuredField
  include ::Mail::CommonAddress

  # source://mail/2.7.1/lib/mail/fields/sender_field.rb#40
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/sender_field.rb#50
  def address; end

  # source://mail/2.7.1/lib/mail/fields/sender_field.rb#46
  def addresses; end

  # source://mail/2.7.1/lib/mail/fields/sender_field.rb#58
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/sender_field.rb#62
  def default; end

  # source://mail/2.7.1/lib/mail/fields/sender_field.rb#54
  def encoded; end
end

# source://mail/2.7.1/lib/mail/fields/sender_field.rb#38
Mail::SenderField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/sender_field.rb#37
Mail::SenderField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::Sendmail
  # source://mail/2.7.1/lib/mail/network/delivery_methods/sendmail.rb#48
  def initialize(values); end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/sendmail.rb#52
  def deliver!(mail); end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/sendmail.rb#46
  def settings; end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/sendmail.rb#46
  def settings=(_arg0); end

  class << self
    # source://mail/2.7.1/lib/mail/network/delivery_methods/sendmail.rb#62
    def call(path, arguments, destinations, encoded_message); end

    # source://mail/2.7.1/lib/mail/network/delivery_methods/sendmail.rb#74
    def popen(command, &block); end

    # source://mail/2.7.1/lib/mail/network/delivery_methods/sendmail.rb#85
    def shellquote(address); end
  end
end

# source://mail/2.7.1/lib/mail/network/delivery_methods/sendmail.rb#41
Mail::Sendmail::DEFAULTS = T.let(T.unsafe(nil), Hash)

class Mail::StructuredField
  include ::Mail::Constants
  include ::Mail::CommonField
  include ::Mail::Utilities

  # source://mail/2.7.1/lib/mail/fields/structured_field.rb#28
  def initialize(name = T.unsafe(nil), value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/structured_field.rb#35
  def charset; end

  # source://mail/2.7.1/lib/mail/fields/structured_field.rb#39
  def charset=(val); end

  # source://mail/2.7.1/lib/mail/fields/structured_field.rb#43
  def default; end

  # source://mail/2.7.1/lib/mail/fields/structured_field.rb#47
  def errors; end
end

class Mail::SubjectField < ::Mail::UnstructuredField
  # source://mail/2.7.1/lib/mail/fields/subject_field.rb#11
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end
end

# source://mail/2.7.1/lib/mail/fields/subject_field.rb#9
Mail::SubjectField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/subject_field.rb#8
Mail::SubjectField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::TestMailer
  # source://mail/2.7.1/lib/mail/network/delivery_methods/test_mailer.rb#33
  def initialize(values); end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/test_mailer.rb#37
  def deliver!(mail); end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/test_mailer.rb#31
  def settings; end

  # source://mail/2.7.1/lib/mail/network/delivery_methods/test_mailer.rb#31
  def settings=(_arg0); end

  class << self
    # source://mail/2.7.1/lib/mail/network/delivery_methods/test_mailer.rb#12
    def deliveries; end

    # source://mail/2.7.1/lib/mail/network/delivery_methods/test_mailer.rb#27
    def deliveries=(val); end
  end
end

class Mail::TestRetriever < ::Mail::Retriever
  # source://mail/2.7.1/lib/mail/network/retriever_methods/test_retriever.rb#16
  def initialize(values); end

  # source://mail/2.7.1/lib/mail/network/retriever_methods/test_retriever.rb#20
  def find(options = T.unsafe(nil), &block); end

  class << self
    # source://mail/2.7.1/lib/mail/network/retriever_methods/test_retriever.rb#8
    def emails; end

    # source://mail/2.7.1/lib/mail/network/retriever_methods/test_retriever.rb#12
    def emails=(val); end
  end
end

class Mail::ToField < ::Mail::StructuredField
  include ::Mail::CommonAddress

  # source://mail/2.7.1/lib/mail/fields/to_field.rb#40
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/to_field.rb#50
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/to_field.rb#46
  def encoded; end
end

# source://mail/2.7.1/lib/mail/fields/to_field.rb#38
Mail::ToField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/fields/to_field.rb#37
Mail::ToField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::UnknownEncodingType < ::StandardError; end

class Mail::UnstructuredField
  include ::Mail::Constants
  include ::Mail::CommonField
  include ::Mail::Utilities

  # source://mail/2.7.1/lib/mail/fields/unstructured_field.rb#26
  def initialize(name, value, charset = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/unstructured_field.rb#23
  def charset; end

  # source://mail/2.7.1/lib/mail/fields/unstructured_field.rb#23
  def charset=(_arg0); end

  # source://mail/2.7.1/lib/mail/fields/unstructured_field.rb#61
  def decoded; end

  # source://mail/2.7.1/lib/mail/fields/unstructured_field.rb#65
  def default; end

  # source://mail/2.7.1/lib/mail/fields/unstructured_field.rb#57
  def encoded; end

  # source://mail/2.7.1/lib/mail/fields/unstructured_field.rb#24
  def errors; end

  # source://mail/2.7.1/lib/mail/fields/unstructured_field.rb#69
  def parse; end

  private

  # source://mail/2.7.1/lib/mail/fields/unstructured_field.rb#83
  def do_decode; end

  # source://mail/2.7.1/lib/mail/fields/unstructured_field.rb#75
  def do_encode; end

  # source://mail/2.7.1/lib/mail/fields/unstructured_field.rb#198
  def encode(value); end

  # source://mail/2.7.1/lib/mail/fields/unstructured_field.rb#209
  def encode_crlf(value); end

  # source://mail/2.7.1/lib/mail/fields/unstructured_field.rb#131
  def fold(prepend = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/fields/unstructured_field.rb#215
  def normalized_encoding; end

  # source://mail/2.7.1/lib/mail/fields/unstructured_field.rb#125
  def wrap_lines(name, folded_lines); end

  # source://mail/2.7.1/lib/mail/fields/unstructured_field.rb#113
  def wrapped_value; end
end

module Mail::Utilities
  include ::Mail::Constants

  # source://mail/2.7.1/lib/mail/utilities.rb#14
  def atom_safe?(str); end

  # source://mail/2.7.1/lib/mail/utilities.rb#133
  def bracket(str); end

  # source://mail/2.7.1/lib/mail/utilities.rb#187
  def capitalize_field(str); end

  # source://mail/2.7.1/lib/mail/utilities.rb#198
  def constantize(str); end

  # source://mail/2.7.1/lib/mail/utilities.rb#209
  def dasherize(str); end

  # source://mail/2.7.1/lib/mail/utilities.rb#71
  def dquote(str); end

  # source://mail/2.7.1/lib/mail/utilities.rb#154
  def escape_paren(str); end

  # source://mail/2.7.1/lib/mail/utilities.rb#244
  def map_lines(str, &block); end

  # source://mail/2.7.1/lib/mail/utilities.rb#248
  def map_with_index(enum, &block); end

  # source://mail/2.7.1/lib/mail/utilities.rb#177
  def match_to_s(obj1, obj2); end

  # source://mail/2.7.1/lib/mail/utilities.rb#113
  def paren(str); end

  # source://mail/2.7.1/lib/mail/utilities.rb#20
  def quote_atom(str); end

  # source://mail/2.7.1/lib/mail/utilities.rb#26
  def quote_phrase(str); end

  # source://mail/2.7.1/lib/mail/utilities.rb#47
  def quote_token(str); end

  # source://mail/2.7.1/lib/mail/utilities.rb#41
  def token_safe?(str); end

  # source://mail/2.7.1/lib/mail/utilities.rb#143
  def unbracket(str); end

  # source://mail/2.7.1/lib/mail/utilities.rb#220
  def underscoreize(str); end

  # source://mail/2.7.1/lib/mail/utilities.rb#123
  def unparen(str); end

  # source://mail/2.7.1/lib/mail/utilities.rb#158
  def uri_escape(str); end

  # source://mail/2.7.1/lib/mail/utilities.rb#166
  def uri_parser; end

  # source://mail/2.7.1/lib/mail/utilities.rb#162
  def uri_unescape(str); end

  private

  # source://mail/2.7.1/lib/mail/utilities.rb#103
  def unescape(str); end

  # source://mail/2.7.1/lib/mail/utilities.rb#85
  def unquote(str); end

  class << self
    # source://mail/2.7.1/lib/mail/utilities.rb#268
    def binary_unsafe_to_crlf(string); end

    # source://mail/2.7.1/lib/mail/utilities.rb#254
    def binary_unsafe_to_lf(string); end

    # source://mail/2.7.1/lib/mail/utilities.rb#314
    def blank?(value); end

    # source://mail/2.7.1/lib/mail/utilities.rb#277
    def safe_for_line_ending_conversion?(string); end

    # source://mail/2.7.1/lib/mail/utilities.rb#300
    def to_crlf(string); end

    # source://mail/2.7.1/lib/mail/utilities.rb#288
    def to_lf(string); end

    # source://mail/2.7.1/lib/mail/utilities.rb#103
    def unescape(str); end

    # source://mail/2.7.1/lib/mail/utilities.rb#85
    def unquote(str); end
  end
end

# source://mail/2.7.1/lib/mail/utilities.rb#9
Mail::Utilities::CRLF = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/utilities.rb#8
Mail::Utilities::LF = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail/utilities.rb#258
Mail::Utilities::TO_CRLF_REGEX = T.let(T.unsafe(nil), Regexp)

module Mail::VERSION
  class << self
    # source://mail/2.7.1/lib/mail/version.rb#12
    def version; end
  end
end

# source://mail/2.7.1/lib/mail/version.rb#8
Mail::VERSION::BUILD = T.let(T.unsafe(nil), T.untyped)

# source://mail/2.7.1/lib/mail/version.rb#5
Mail::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://mail/2.7.1/lib/mail/version.rb#6
Mail::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://mail/2.7.1/lib/mail/version.rb#7
Mail::VERSION::PATCH = T.let(T.unsafe(nil), Integer)

# source://mail/2.7.1/lib/mail/version.rb#10
Mail::VERSION::STRING = T.let(T.unsafe(nil), String)

module Minitest::Assertions
  # source://minitest/5.16.3/lib/minitest/assertions.rb#188
  def _synchronize; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#178
  def assert(test, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#195
  def assert_empty(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#216
  def assert_equal(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#240
  def assert_in_delta(exp, act, delta = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#252
  def assert_in_epsilon(exp, act, epsilon = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#259
  def assert_includes(collection, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#270
  def assert_instance_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#281
  def assert_kind_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#291
  def assert_match(matcher, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#303
  def assert_nil(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#313
  def assert_operator(o1, op, o2 = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#331
  def assert_output(stdout = T.unsafe(nil), stderr = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#355
  def assert_path_exists(path, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#369
  def assert_predicate(o1, op, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#396
  def assert_raises(*exp); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#427
  def assert_respond_to(obj, meth, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#437
  def assert_same(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#450
  def assert_send(send_ary, m = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#466
  def assert_silent; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#475
  def assert_throws(sym, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#516
  def capture_io; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#549
  def capture_subprocess_io; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#59
  def diff(exp, act); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#581
  def exception_details(e, msg); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#597
  def fail_after(y, m, d, msg); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#604
  def flunk(msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#612
  def message(msg = T.unsafe(nil), ending = T.unsafe(nil), &default); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#129
  def mu_pp(obj); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#152
  def mu_pp_for_diff(obj); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#623
  def pass(_msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#630
  def refute(test, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#638
  def refute_empty(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#649
  def refute_equal(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#661
  def refute_in_delta(exp, act, delta = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#673
  def refute_in_epsilon(a, b, epsilon = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#680
  def refute_includes(collection, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#691
  def refute_instance_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#701
  def refute_kind_of(cls, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#709
  def refute_match(matcher, obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#719
  def refute_nil(obj, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#730
  def refute_operator(o1, op, o2 = T.unsafe(nil), msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#739
  def refute_path_exists(path, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#753
  def refute_predicate(o1, op, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#761
  def refute_respond_to(obj, meth, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#770
  def refute_same(exp, act, msg = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#783
  def skip(msg = T.unsafe(nil), bt = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#795
  def skip_until(y, m, d, msg); end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#804
  def skipped?; end

  # source://minitest/5.16.3/lib/minitest/assertions.rb#104
  def things_to_diff(exp, act); end

  class << self
    # source://minitest/5.16.3/lib/minitest/assertions.rb#29
    def diff; end

    # source://minitest/5.16.3/lib/minitest/assertions.rb#47
    def diff=(o); end
  end
end

# source://minitest/5.16.3/lib/minitest/assertions.rb#201
Minitest::Assertions::E = T.let(T.unsafe(nil), String)

# source://minitest/5.16.3/lib/minitest/assertions.rb#19
Minitest::Assertions::UNDEFINED = T.let(T.unsafe(nil), Object)

module Minitest::Guard
  # source://minitest/5.16.3/lib/minitest.rb#984
  def jruby?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#991
  def maglev?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#1001
  def mri?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#1008
  def osx?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#1015
  def rubinius?(platform = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest.rb#1025
  def windows?(platform = T.unsafe(nil)); end
end

module Minitest::Reportable
  # source://minitest/5.16.3/lib/minitest.rb#495
  def class_name; end

  # source://minitest/5.16.3/lib/minitest.rb#516
  def error?; end

  # source://minitest/5.16.3/lib/minitest.rb#490
  def location; end

  # source://minitest/5.16.3/lib/minitest.rb#482
  def passed?; end

  # source://minitest/5.16.3/lib/minitest.rb#502
  def result_code; end

  # source://minitest/5.16.3/lib/minitest.rb#509
  def skipped?; end
end

class Minitest::Runnable
  # source://minitest/5.16.3/lib/minitest.rb#431
  def initialize(name); end

  # source://minitest/5.16.3/lib/minitest.rb#281
  def assertions; end

  # source://minitest/5.16.3/lib/minitest.rb#281
  def assertions=(_arg0); end

  # source://minitest/5.16.3/lib/minitest.rb#427
  def failure; end

  # source://minitest/5.16.3/lib/minitest.rb#286
  def failures; end

  # source://minitest/5.16.3/lib/minitest.rb#286
  def failures=(_arg0); end

  # source://minitest/5.16.3/lib/minitest.rb#413
  def marshal_dump; end

  # source://minitest/5.16.3/lib/minitest.rb#423
  def marshal_load(ary); end

  # source://minitest/5.16.3/lib/minitest.rb#304
  def name; end

  # source://minitest/5.16.3/lib/minitest.rb#311
  def name=(o); end

  # source://minitest/5.16.3/lib/minitest.rb#450
  def passed?; end

  # source://minitest/5.16.3/lib/minitest.rb#459
  def result_code; end

  # source://minitest/5.16.3/lib/minitest.rb#440
  def run; end

  # source://minitest/5.16.3/lib/minitest.rb#466
  def skipped?; end

  # source://minitest/5.16.3/lib/minitest.rb#291
  def time; end

  # source://minitest/5.16.3/lib/minitest.rb#291
  def time=(_arg0); end

  # source://minitest/5.16.3/lib/minitest.rb#293
  def time_it; end

  class << self
    # source://minitest/5.16.3/lib/minitest.rb#1077
    def inherited(klass); end

    # source://minitest/5.16.3/lib/minitest.rb#318
    def methods_matching(re); end

    # source://minitest/5.16.3/lib/minitest.rb#383
    def on_signal(name, action); end

    # source://minitest/5.16.3/lib/minitest.rb#322
    def reset; end

    # source://minitest/5.16.3/lib/minitest.rb#333
    def run(reporter, options = T.unsafe(nil)); end

    # source://minitest/5.16.3/lib/minitest.rb#363
    def run_one_method(klass, method_name, reporter); end

    # source://minitest/5.16.3/lib/minitest.rb#400
    def runnable_methods; end

    # source://minitest/5.16.3/lib/minitest.rb#407
    def runnables; end

    # source://minitest/5.16.3/lib/minitest.rb#368
    def with_info_handler(reporter, &block); end
  end
end

# source://minitest/5.16.3/lib/minitest.rb#381
Minitest::Runnable::SIGNALS = T.let(T.unsafe(nil), Hash)

class Minitest::Test < ::Minitest::Runnable
  include ::Minitest::Assertions
  include ::Minitest::Reportable
  include ::Minitest::Test::LifecycleHooks
  include ::Minitest::Guard
  extend ::Minitest::Guard

  # source://minitest/5.16.3/lib/minitest/test.rb#194
  def capture_exceptions; end

  # source://minitest/5.16.3/lib/minitest/test.rb#15
  def class_name; end

  # source://minitest/5.16.3/lib/minitest/test.rb#211
  def neuter_exception(e); end

  # source://minitest/5.16.3/lib/minitest/test.rb#222
  def new_exception(klass, msg, bt, kill = T.unsafe(nil)); end

  # source://minitest/5.16.3/lib/minitest/test.rb#92
  def run; end

  # source://minitest/5.16.3/lib/minitest/test.rb#204
  def sanitize_exception(e); end

  # source://minitest/5.16.3/lib/minitest/test.rb#236
  def with_info_handler(&block); end

  class << self
    # source://minitest/5.16.3/lib/minitest/test.rb#31
    def i_suck_and_my_tests_are_order_dependent!; end

    # source://minitest/5.16.3/lib/minitest/test.rb#22
    def io_lock; end

    # source://minitest/5.16.3/lib/minitest/test.rb#22
    def io_lock=(_arg0); end

    # source://minitest/5.16.3/lib/minitest/test.rb#44
    def make_my_diffs_pretty!; end

    # source://minitest/5.16.3/lib/minitest/test.rb#55
    def parallelize_me!; end

    # source://minitest/5.16.3/lib/minitest/test.rb#65
    def runnable_methods; end

    # source://minitest/5.16.3/lib/minitest/test.rb#83
    def test_order; end
  end
end

module Minitest::Test::LifecycleHooks
  # source://minitest/5.16.3/lib/minitest/test.rb#167
  def after_setup; end

  # source://minitest/5.16.3/lib/minitest/test.rb#191
  def after_teardown; end

  # source://minitest/5.16.3/lib/minitest/test.rb#152
  def before_setup; end

  # source://minitest/5.16.3/lib/minitest/test.rb#176
  def before_teardown; end

  # source://minitest/5.16.3/lib/minitest/test.rb#158
  def setup; end

  # source://minitest/5.16.3/lib/minitest/test.rb#182
  def teardown; end
end

# source://minitest/5.16.3/lib/minitest/test.rb#19
Minitest::Test::PASSTHROUGH_EXCEPTIONS = T.let(T.unsafe(nil), Array)

# source://minitest/5.16.3/lib/minitest/test.rb#87
Minitest::Test::TEARDOWN_METHODS = T.let(T.unsafe(nil), Array)

class Rack::Session::Abstract::SessionHash
  include ::Enumerable

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#62
  def initialize(store, req); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#82
  def [](key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#108
  def []=(key, value); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#114
  def clear; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#140
  def delete(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#119
  def destroy; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#87
  def dig(key, *keys); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#77
  def each(&block); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#163
  def empty?; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#153
  def exists?; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#92
  def fetch(key, default = T.unsafe(nil), &block); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#101
  def has_key?(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#68
  def id; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#46
  def id=(_arg0); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#101
  def include?(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#145
  def inspect; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#101
  def key?(key); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#168
  def keys; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#159
  def loaded?; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#129
  def merge!(hash); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#73
  def options; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#135
  def replace(hash); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#108
  def store(key, value); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#124
  def to_hash; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#129
  def update(hash); end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#173
  def values; end

  private

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#188
  def load!; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#180
  def load_for_read!; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#184
  def load_for_write!; end

  # source://rack/2.2.4/lib/rack/session/abstract/id.rb#194
  def stringify_keys(other); end

  class << self
    # source://rack/2.2.4/lib/rack/session/abstract/id.rb#50
    def find(req); end

    # source://rack/2.2.4/lib/rack/session/abstract/id.rb#54
    def set(req, session); end

    # source://rack/2.2.4/lib/rack/session/abstract/id.rb#58
    def set_options(req, options); end
  end
end

# source://rack/2.2.4/lib/rack/session/abstract/id.rb#48
Rack::Session::Abstract::SessionHash::Unspecified = T.let(T.unsafe(nil), Object)

module Rails
  extend ::ActiveSupport::Autoload
  extend ::ActiveSupport::Benchmarkable

  class << self
    # source://railties/7.0.4/lib/rails.rb#38
    def app_class; end

    # source://railties/7.0.4/lib/rails.rb#38
    def app_class=(_arg0); end

    # source://railties/7.0.4/lib/rails.rb#39
    def application; end

    # source://railties/7.0.4/lib/rails.rb#37
    def application=(_arg0); end

    # source://railties/7.0.4/lib/rails.rb#123
    def autoloaders; end

    # source://railties/7.0.4/lib/rails.rb#50
    def backtrace_cleaner; end

    # source://railties/7.0.4/lib/rails.rb#38
    def cache; end

    # source://railties/7.0.4/lib/rails.rb#38
    def cache=(_arg0); end

    # source://railties/7.0.4/lib/rails.rb#46
    def configuration; end

    # source://railties/7.0.4/lib/rails.rb#72
    def env; end

    # source://railties/7.0.4/lib/rails.rb#79
    def env=(environment); end

    # source://railties/7.0.4/lib/rails.rb#90
    def error; end

    # source://railties/7.0.4/lib/rails/gem_version.rb#5
    def gem_version; end

    # source://railties/7.0.4/lib/rails.rb#103
    def groups(*groups); end

    # source://railties/7.0.4/lib/rails.rb#43
    def initialize!(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.0.4/lib/rails.rb#43
    def initialized?(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.0.4/lib/rails.rb#38
    def logger; end

    # source://railties/7.0.4/lib/rails.rb#38
    def logger=(_arg0); end

    # source://railties/7.0.4/lib/rails.rb#119
    def public_path; end

    # source://railties/7.0.4/lib/rails.rb#63
    def root; end

    # source://railties/7.0.4/lib/rails/version.rb#7
    def version; end
  end
end

class Rails::Application < ::Rails::Engine
  # source://railties/7.0.4/lib/rails/application.rb#106
  def initialize(initial_variable_values = T.unsafe(nil), &block); end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def assets; end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def assets=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def autoloaders; end

  # source://railties/7.0.4/lib/rails/engine.rb#511
  def build_middleware_stack; end

  # source://railties/7.0.4/lib/rails/application.rb#383
  def config; end

  # source://railties/7.0.4/lib/rails/application.rb#387
  def config=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#221
  def config_for(name, env: T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application.rb#303
  def console(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#432
  def credentials; end

  # source://railties/7.0.4/lib/rails/application.rb#403
  def credentials=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#101
  def default_url_options(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/application.rb#101
  def default_url_options=(arg); end

  # source://railties/7.0.4/lib/rails/application.rb#497
  def eager_load!; end

  # source://railties/7.0.4/lib/rails/application.rb#463
  def encrypted(path, key_path: T.unsafe(nil), env_key: T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application.rb#250
  def env_config; end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def executor; end

  # source://railties/7.0.4/lib/rails/application.rb#309
  def generators(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#476
  def helpers_paths; end

  # source://importmap-rails/1.1.5/lib/importmap/engine.rb#4
  def importmap; end

  # source://importmap-rails/1.1.5/lib/importmap/engine.rb#4
  def importmap=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#370
  def initialize!(group = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application.rb#129
  def initialized?; end

  # source://railties/7.0.4/lib/rails/application.rb#291
  def initializer(name, opts = T.unsafe(nil), &block); end

  # source://railties/7.0.4/lib/rails/application.rb#377
  def initializers; end

  # source://railties/7.0.4/lib/rails/application.rb#320
  def isolate_namespace(mod); end

  # source://railties/7.0.4/lib/rails/application.rb#153
  def key_generator; end

  # source://railties/7.0.4/lib/rails/application.rb#179
  def message_verifier(verifier_name); end

  # source://railties/7.0.4/lib/rails/application.rb#492
  def migration_railties; end

  # source://railties/7.0.4/lib/rails/application.rb#284
  def rake_tasks(&block); end

  # source://railties/7.0.4/lib/rails/application.rb#148
  def reload_routes!; end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def reloader; end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def reloaders; end

  # source://railties/7.0.4/lib/rails/application.rb#346
  def require_environment!; end

  # source://railties/7.0.4/lib/rails/application.rb#351
  def routes_reloader; end

  # source://railties/7.0.4/lib/rails/application.rb#133
  def run_load_hooks!; end

  # source://railties/7.0.4/lib/rails/application.rb#297
  def runner(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def sandbox; end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def sandbox=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def sandbox?; end

  # source://railties/7.0.4/lib/rails/application.rb#415
  def secret_key_base; end

  # source://railties/7.0.4/lib/rails/application.rb#389
  def secrets; end

  # source://railties/7.0.4/lib/rails/application.rb#403
  def secrets=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#315
  def server(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#472
  def to_app; end

  # source://railties/7.0.4/lib/rails/application.rb#358
  def watchable_args; end

  protected

  # source://railties/7.0.4/lib/rails/application.rb#570
  def default_middleware_stack; end

  # source://railties/7.0.4/lib/rails/application.rb#536
  def ordered_railties; end

  # source://railties/7.0.4/lib/rails/application.rb#558
  def railties_initializers(current); end

  # source://railties/7.0.4/lib/rails/application.rb#525
  def run_console_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#515
  def run_generators_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#520
  def run_runner_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#530
  def run_server_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#504
  def run_tasks_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#575
  def validate_secret_key_base(secret_key_base); end

  private

  # source://railties/7.0.4/lib/rails/application.rb#609
  def build_middleware; end

  # source://railties/7.0.4/lib/rails/application.rb#602
  def build_request(env); end

  # source://railties/7.0.4/lib/rails/application.rb#613
  def coerce_same_site_protection(protection); end

  # source://railties/7.0.4/lib/rails/application.rb#586
  def generate_development_secret; end

  class << self
    # source://railties/7.0.4/lib/rails/application.rb#339
    def add_lib_to_load_path!(root); end

    # source://railties/7.0.4/lib/rails/application.rb#81
    def create(initial_variable_values = T.unsafe(nil), &block); end

    # source://railties/7.0.4/lib/rails/application.rb#85
    def find_root(from); end

    # source://railties/7.0.4/lib/rails/application.rb#70
    def inherited(base); end

    # source://railties/7.0.4/lib/rails/application.rb#77
    def instance; end
  end
end

module Rails::Application::Bootstrap
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

class Rails::Application::Configuration < ::Rails::Engine::Configuration
  # source://railties/7.0.4/lib/rails/application/configuration.rb#28
  def initialize(*_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def add_autoload_paths_to_load_path; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def add_autoload_paths_to_load_path=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def allow_concurrency; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def allow_concurrency=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#415
  def annotations; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#26
  def api_only; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#276
  def api_only=(value); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def asset_host; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def asset_host=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def autoflush_log; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def autoflush_log=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def beginning_of_week; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def beginning_of_week=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def cache_classes; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def cache_classes=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def cache_store; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def cache_store=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#361
  def colorize_logging; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#365
  def colorize_logging=(val); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def consider_all_requests_local; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def consider_all_requests_local=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def console; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def console=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#420
  def content_security_policy(&block); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_nonce_directives; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_nonce_directives=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_nonce_generator; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_nonce_generator=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_report_only; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def content_security_policy_report_only=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def credentials; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def credentials=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#330
  def database_configuration; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#283
  def debug_exception_response_format; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#287
  def debug_exception_response_format=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#437
  def default_log_file; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def disable_sandbox; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def disable_sandbox=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def eager_load; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def eager_load=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def enable_dependency_loading; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def enable_dependency_loading=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#26
  def encoding; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#268
  def encoding=(value); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def exceptions_app; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def exceptions_app=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def file_watcher; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def file_watcher=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def filter_parameters; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def filter_parameters=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def filter_redirect; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def filter_redirect=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def force_ssl; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def force_ssl=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def helpers_paths; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def helpers_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def host_authorization; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def host_authorization=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def hosts; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def hosts=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#312
  def load_database_yaml; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#88
  def load_defaults(target_version); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#26
  def loaded_config_version; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_formatter; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_formatter=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_level; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_level=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_tags; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def log_tags=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def logger; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def logger=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#289
  def paths; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#429
  def permissions_policy(&block); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def public_file_server; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def public_file_server=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def railties_order; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def railties_order=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def rake_eager_load; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def rake_eager_load=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def read_encrypted_secrets; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def read_encrypted_secrets=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def relative_url_root; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def relative_url_root=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def reload_classes_only_on_change; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def reload_classes_only_on_change=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def require_master_key; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def require_master_key=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def secret_key_base; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def secret_key_base=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def server_timing; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def server_timing=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def session_options; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def session_options=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#384
  def session_store(new_session_store = T.unsafe(nil), **options); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#411
  def session_store?; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def ssl_options; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def ssl_options=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def time_zone; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def time_zone=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def x; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#13
  def x=(_arg0); end

  private

  # source://railties/7.0.4/lib/rails/application/configuration.rb#486
  def credentials_available_for_current_env?; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#470
  def default_credentials_content_path; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#478
  def default_credentials_key_path; end
end

class Rails::Application::Configuration::Custom
  # source://railties/7.0.4/lib/rails/application/configuration.rb#450
  def initialize; end

  # source://railties/7.0.4/lib/rails/application/configuration.rb#454
  def method_missing(method, *args); end

  private

  # source://railties/7.0.4/lib/rails/application/configuration.rb#464
  def respond_to_missing?(symbol, *_arg1); end
end

class Rails::Application::DefaultMiddlewareStack
  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#8
  def initialize(app, config, paths); end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#6
  def app; end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#14
  def build_stack; end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#6
  def config; end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#6
  def paths; end

  private

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#103
  def load_rack_cache; end

  # source://railties/7.0.4/lib/rails/application/default_middleware_stack.rb#125
  def show_exceptions_app; end
end

module Rails::Application::Finisher
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

module Rails::Application::Finisher::InterlockHook
  class << self
    # source://railties/7.0.4/lib/rails/application/finisher.rb#109
    def complete(_state); end

    # source://railties/7.0.4/lib/rails/application/finisher.rb#105
    def run; end
  end
end

class Rails::Application::Finisher::MonitorHook
  # source://railties/7.0.4/lib/rails/application/finisher.rb#91
  def initialize(monitor = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application/finisher.rb#99
  def complete(_state); end

  # source://railties/7.0.4/lib/rails/application/finisher.rb#95
  def run; end
end

# source://railties/7.0.4/lib/rails/application.rb#103
Rails::Application::INITIAL_VARIABLES = T.let(T.unsafe(nil), Array)

class Rails::Application::RoutesReloader
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#15
  def initialize; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#11
  def eager_load; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#11
  def eager_load=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#13
  def execute(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#13
  def execute_if_updated(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#10
  def external_routes; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#10
  def paths; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#22
  def reload!; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#10
  def route_sets; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#12
  def run_after_load_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#13
  def updated?(*_arg0, **_arg1, &_arg2); end

  private

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#42
  def clear!; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#58
  def finalize!; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#49
  def load_paths; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#62
  def revert; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#54
  def run_after_load_paths; end

  # source://railties/7.0.4/lib/rails/application/routes_reloader.rb#32
  def updater; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end
  end
end

class Rails::ApplicationController < ::ActionController::Base
  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://railties/7.0.4/lib/rails/application_controller.rb#25
  def disable_content_security_policy_nonce!; end

  # source://railties/7.0.4/lib/rails/application_controller.rb#21
  def local_request?; end

  # source://railties/7.0.4/lib/rails/application_controller.rb#15
  def require_local!; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

class Rails::Autoloaders
  include ::Enumerable

  # source://railties/7.0.4/lib/rails/autoloaders.rb#11
  def initialize; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#31
  def each; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#40
  def log!; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#36
  def logger=(logger); end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#9
  def main; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#9
  def once; end

  # source://railties/7.0.4/lib/rails/autoloaders.rb#44
  def zeitwerk_enabled?; end
end

module Rails::Autoloaders::Inflector
  class << self
    # source://railties/7.0.4/lib/rails/autoloaders/inflector.rb#12
    def camelize(basename, _abspath); end

    # source://railties/7.0.4/lib/rails/autoloaders/inflector.rb#16
    def inflect(overrides); end
  end
end

module Rails::Configuration; end

class Rails::Configuration::Generators
  # source://railties/7.0.4/lib/rails/configuration.rb#108
  def initialize; end

  # source://railties/7.0.4/lib/rails/configuration.rb#130
  def after_generate(&block); end

  # source://railties/7.0.4/lib/rails/configuration.rb#106
  def after_generate_callbacks; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def aliases; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def aliases=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def api_only; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def api_only=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def colorize_logging; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def colorize_logging=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def fallbacks; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def fallbacks=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#106
  def hidden_namespaces; end

  # source://railties/7.0.4/lib/rails/configuration.rb#126
  def hide_namespace(namespace); end

  # source://railties/7.0.4/lib/rails/configuration.rb#134
  def method_missing(method, *args); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def options; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def options=(_arg0); end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def templates; end

  # source://railties/7.0.4/lib/rails/configuration.rb#105
  def templates=(_arg0); end

  private

  # source://railties/7.0.4/lib/rails/configuration.rb#119
  def initialize_copy(source); end
end

class Rails::Configuration::MiddlewareStackProxy
  # source://railties/7.0.4/lib/rails/configuration.rb#47
  def initialize(operations = T.unsafe(nil), delete_operations = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/configuration.rb#96
  def +(other); end

  # source://railties/7.0.4/lib/rails/configuration.rb#70
  def delete(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#52
  def insert(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#58
  def insert_after(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#52
  def insert_before(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#88
  def merge_into(other); end

  # source://railties/7.0.4/lib/rails/configuration.rb#74
  def move(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#80
  def move_after(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#74
  def move_before(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#62
  def swap(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#84
  def unshift(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/configuration.rb#66
  def use(*_arg0, **_arg1, &_arg2); end

  protected

  # source://railties/7.0.4/lib/rails/configuration.rb#101
  def delete_operations; end

  # source://railties/7.0.4/lib/rails/configuration.rb#101
  def operations; end
end

class Rails::Engine < ::Rails::Railtie
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods

  # source://railties/7.0.4/lib/rails/engine.rb#432
  def initialize; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _load_seed_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_load_seed_callbacks(&block); end

  # source://railties/7.0.4/lib/rails/engine.rb#511
  def app; end

  # source://railties/7.0.4/lib/rails/engine.rb#528
  def call(env); end

  # source://railties/7.0.4/lib/rails/engine.rb#547
  def config; end

  # source://railties/7.0.4/lib/rails/engine.rb#484
  def eager_load!; end

  # source://railties/7.0.4/lib/rails/engine.rb#523
  def endpoint; end

  # source://railties/7.0.4/lib/rails/engine.rb#430
  def engine_name(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#534
  def env_config; end

  # source://railties/7.0.4/lib/rails/engine.rb#494
  def helpers; end

  # source://railties/7.0.4/lib/rails/engine.rb#506
  def helpers_paths; end

  # source://railties/7.0.4/lib/rails/engine.rb#430
  def isolated?(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#446
  def load_console(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#470
  def load_generators(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#455
  def load_runner(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#555
  def load_seed; end

  # source://railties/7.0.4/lib/rails/engine.rb#479
  def load_server(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#462
  def load_tasks(app = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine.rb#429
  def middleware(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#429
  def paths(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#489
  def railties; end

  # source://railties/7.0.4/lib/rails/engine.rb#429
  def root(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/engine.rb#540
  def routes(&block); end

  # source://railties/7.0.4/lib/rails/engine.rb#654
  def routes?; end

  protected

  # source://railties/7.0.4/lib/rails/engine.rb#659
  def run_tasks_blocks(*_arg0); end

  private

  # source://railties/7.0.4/lib/rails/engine.rb#691
  def _all_autoload_once_paths; end

  # source://railties/7.0.4/lib/rails/engine.rb#695
  def _all_autoload_paths; end

  # source://railties/7.0.4/lib/rails/engine.rb#704
  def _all_load_paths(add_autoload_paths_to_load_path); end

  # source://railties/7.0.4/lib/rails/engine.rb#723
  def build_middleware; end

  # source://railties/7.0.4/lib/rails/engine.rb#715
  def build_request(env); end

  # source://railties/7.0.4/lib/rails/engine.rb#687
  def default_middleware_stack; end

  # source://railties/7.0.4/lib/rails/engine.rb#671
  def has_migrations?; end

  # source://railties/7.0.4/lib/rails/engine.rb#665
  def load_config_initializer(initializer); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _load_seed_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _load_seed_callbacks=(value); end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def called_from; end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def called_from=(_arg0); end

    # source://railties/7.0.4/lib/rails/engine.rb#358
    def eager_load!(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.0.4/lib/rails/engine.rb#378
    def endpoint(endpoint = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/railtie.rb#176
    def engine_name(name = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/engine.rb#416
    def find(path); end

    # source://railties/7.0.4/lib/rails/engine.rb#374
    def find_root(from); end

    # source://railties/7.0.4/lib/rails/engine.rb#675
    def find_root_with_flag(flag, root_path, default = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/engine.rb#360
    def inherited(base); end

    # source://railties/7.0.4/lib/rails/engine.rb#384
    def isolate_namespace(mod); end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def isolated; end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def isolated=(_arg0); end

    # source://railties/7.0.4/lib/rails/engine.rb#353
    def isolated?; end
  end
end

class Rails::Engine::Configuration < ::Rails::Railtie::Configuration
  # source://railties/7.0.4/lib/rails/engine/configuration.rb#12
  def initialize(root = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#83
  def autoload_once_paths; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#10
  def autoload_once_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#87
  def autoload_paths; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#10
  def autoload_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#79
  def eager_load_paths; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#10
  def eager_load_paths=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#32
  def generators; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#9
  def javascript_path; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#9
  def javascript_path=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#9
  def middleware; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#9
  def middleware=(_arg0); end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#38
  def paths; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#8
  def root; end

  # source://railties/7.0.4/lib/rails/engine/configuration.rb#75
  def root=(value); end
end

class Rails::Engine::Railties
  include ::Enumerable

  # source://railties/7.0.4/lib/rails/engine/railties.rb#9
  def initialize; end

  # source://railties/7.0.4/lib/rails/engine/railties.rb#18
  def -(others); end

  # source://railties/7.0.4/lib/rails/engine/railties.rb#7
  def _all; end

  # source://railties/7.0.4/lib/rails/engine/railties.rb#14
  def each(*args, &block); end
end

module Rails::Html; end

class Rails::Html::FullSanitizer < ::Rails::Html::Sanitizer
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#29
  def sanitize(html, options = T.unsafe(nil)); end
end

class Rails::Html::LinkSanitizer < ::Rails::Html::Sanitizer
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#50
  def initialize; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#56
  def sanitize(html, options = T.unsafe(nil)); end
end

class Rails::Html::PermitScrubber < ::Loofah::Scrubber
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#50
  def initialize; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#48
  def attributes; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#59
  def attributes=(attributes); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#63
  def scrub(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#48
  def tags; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#55
  def tags=(tags); end

  protected

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#80
  def allowed_node?(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#92
  def keep_node?(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#134
  def scrub_attribute(node, attr_node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#88
  def scrub_attribute?(name); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#105
  def scrub_attributes(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#118
  def scrub_css_attribute(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#100
  def scrub_node(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#84
  def skip_node?(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#127
  def validate!(var, name); end
end

class Rails::Html::SafeListSanitizer < ::Rails::Html::Sanitizer
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#113
  def initialize; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#117
  def sanitize(html, options = T.unsafe(nil)); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#138
  def sanitize_css(style_string); end

  private

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#165
  def allowed_attributes(options); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#157
  def allowed_tags(options); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#144
  def loofah_using_html5?; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#149
  def remove_safelist_tag_combinations(tags); end

  class << self
    # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#106
    def allowed_attributes; end

    # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#106
    def allowed_attributes=(_arg0); end

    # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#105
    def allowed_tags; end

    # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#105
    def allowed_tags=(_arg0); end
  end
end

class Rails::Html::Sanitizer
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#6
  def sanitize(html, options = T.unsafe(nil)); end

  private

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#17
  def properly_encode(fragment, options); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#12
  def remove_xpaths(node, xpaths); end

  class << self
    # source://rails-html-sanitizer/1.4.3/lib/rails-html-sanitizer.rb#10
    def full_sanitizer; end

    # source://rails-html-sanitizer/1.4.3/lib/rails-html-sanitizer.rb#14
    def link_sanitizer; end

    # source://rails-html-sanitizer/1.4.3/lib/rails-html-sanitizer.rb#18
    def safe_list_sanitizer; end

    # source://rails-html-sanitizer/1.4.3/lib/rails-html-sanitizer.rb#22
    def white_list_sanitizer; end
  end
end

# source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer/version.rb#4
Rails::Html::Sanitizer::VERSION = T.let(T.unsafe(nil), String)

class Rails::Html::TargetScrubber < ::Rails::Html::PermitScrubber
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#172
  def allowed_node?(node); end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#176
  def scrub_attribute?(name); end
end

class Rails::Html::TextOnlyScrubber < ::Loofah::Scrubber
  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#187
  def initialize; end

  # source://rails-html-sanitizer/1.4.3/lib/rails/html/scrubbers.rb#191
  def scrub(node); end
end

# source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#170
Rails::Html::WhiteListSanitizer = Rails::Html::SafeListSanitizer

# source://rails-html-sanitizer/1.4.3/lib/rails/html/sanitizer.rb#3
Rails::Html::XPATHS_TO_REMOVE = T.let(T.unsafe(nil), Array)

module Rails::Info
  # source://railties/7.0.4/lib/rails/info.rb#10
  def properties; end

  # source://railties/7.0.4/lib/rails/info.rb#10
  def properties=(val); end

  class << self
    # source://railties/7.0.4/lib/rails/info.rb#31
    def inspect; end

    # source://railties/7.0.4/lib/rails/info.rb#10
    def properties; end

    # source://railties/7.0.4/lib/rails/info.rb#10
    def properties=(val); end

    # source://railties/7.0.4/lib/rails/info.rb#25
    def property(name, value = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/info.rb#43
    def to_html; end

    # source://railties/7.0.4/lib/rails/info.rb#31
    def to_s; end
  end
end

class Rails::InfoController < ::Rails::ApplicationController
  # source://railties/7.0.4/lib/rails/info_controller.rb#12
  def index; end

  # source://railties/7.0.4/lib/rails/info_controller.rb#16
  def properties; end

  # source://railties/7.0.4/lib/rails/info_controller.rb#21
  def routes; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://railties/7.0.4/lib/rails/info_controller.rb#8
  def _layout_from_proc; end

  # source://railties/7.0.4/lib/rails/info_controller.rb#36
  def match_route; end

  # source://railties/7.0.4/lib/rails/info_controller.rb#40
  def with_leading_slash(path); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

module Rails::Initializable
  mixes_in_class_methods ::Rails::Initializable::ClassMethods

  # source://railties/7.0.4/lib/rails/initializable.rb#66
  def initializers; end

  # source://railties/7.0.4/lib/rails/initializable.rb#58
  def run_initializers(group = T.unsafe(nil), *args); end

  class << self
    # source://railties/7.0.4/lib/rails/initializable.rb#7
    def included(base); end
  end
end

module Rails::Initializable::ClassMethods
  # source://railties/7.0.4/lib/rails/initializable.rb#88
  def initializer(name, opts = T.unsafe(nil), &blk); end

  # source://railties/7.0.4/lib/rails/initializable.rb#71
  def initializers; end

  # source://railties/7.0.4/lib/rails/initializable.rb#75
  def initializers_chain; end

  # source://railties/7.0.4/lib/rails/initializable.rb#84
  def initializers_for(binding); end
end

class Rails::Initializable::Collection < ::Array
  include ::TSort

  # source://railties/7.0.4/lib/rails/initializable.rb#53
  def +(other); end

  # source://railties/7.0.4/lib/rails/initializable.rb#49
  def tsort_each_child(initializer, &block); end

  def tsort_each_node; end
end

class Rails::Initializable::Initializer
  # source://railties/7.0.4/lib/rails/initializable.rb#14
  def initialize(name, context, options, &block); end

  # source://railties/7.0.4/lib/rails/initializable.rb#23
  def after; end

  # source://railties/7.0.4/lib/rails/initializable.rb#19
  def before; end

  # source://railties/7.0.4/lib/rails/initializable.rb#27
  def belongs_to?(group); end

  # source://railties/7.0.4/lib/rails/initializable.rb#35
  def bind(context); end

  # source://railties/7.0.4/lib/rails/initializable.rb#12
  def block; end

  # source://railties/7.0.4/lib/rails/initializable.rb#40
  def context_class; end

  # source://railties/7.0.4/lib/rails/initializable.rb#12
  def name; end

  # source://railties/7.0.4/lib/rails/initializable.rb#31
  def run(*args); end
end

class Rails::MailersController < ::Rails::ApplicationController
  # source://railties/7.0.4/lib/rails/mailers_controller.rb#16
  def index; end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#21
  def preview; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#80
  def find_part(format); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#68
  def find_preferred_part(*formats); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#56
  def find_preview; end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#92
  def locale_query(locale); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#88
  def part_query(mime_type); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#96
  def set_locale(&block); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#52
  def show_previews?; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

module Rails::MailersController::HelperMethods
  include ::ActionController::Base::HelperMethods

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#12
  def locale_query(*args, **_arg1, &block); end

  # source://railties/7.0.4/lib/rails/mailers_controller.rb#12
  def part_query(*args, **_arg1, &block); end
end

module Rails::Paths; end

class Rails::Paths::Path
  include ::Enumerable

  # source://railties/7.0.4/lib/rails/paths.rb#116
  def initialize(root, current, paths, options = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/paths.rb#168
  def <<(path); end

  # source://railties/7.0.4/lib/rails/paths.rb#129
  def absolute_current; end

  # source://railties/7.0.4/lib/rails/paths.rb#150
  def autoload!; end

  # source://railties/7.0.4/lib/rails/paths.rb#158
  def autoload?; end

  # source://railties/7.0.4/lib/rails/paths.rb#150
  def autoload_once!; end

  # source://railties/7.0.4/lib/rails/paths.rb#158
  def autoload_once?; end

  # source://railties/7.0.4/lib/rails/paths.rb#133
  def children; end

  # source://railties/7.0.4/lib/rails/paths.rb#173
  def concat(paths); end

  # source://railties/7.0.4/lib/rails/paths.rb#164
  def each(&block); end

  # source://railties/7.0.4/lib/rails/paths.rb#150
  def eager_load!; end

  # source://railties/7.0.4/lib/rails/paths.rb#158
  def eager_load?; end

  # source://railties/7.0.4/lib/rails/paths.rb#217
  def existent; end

  # source://railties/7.0.4/lib/rails/paths.rb#228
  def existent_directories; end

  # source://railties/7.0.4/lib/rails/paths.rb#198
  def expanded; end

  # source://railties/7.0.4/lib/rails/paths.rb#193
  def extensions; end

  # source://railties/7.0.4/lib/rails/paths.rb#140
  def first; end

  # source://railties/7.0.4/lib/rails/paths.rb#114
  def glob; end

  # source://railties/7.0.4/lib/rails/paths.rb#114
  def glob=(_arg0); end

  # source://railties/7.0.4/lib/rails/paths.rb#144
  def last; end

  # source://railties/7.0.4/lib/rails/paths.rb#150
  def load_path!; end

  # source://railties/7.0.4/lib/rails/paths.rb#158
  def load_path?; end

  # source://railties/7.0.4/lib/rails/paths.rb#185
  def paths; end

  # source://railties/7.0.4/lib/rails/paths.rb#168
  def push(path); end

  # source://railties/7.0.4/lib/rails/paths.rb#154
  def skip_autoload!; end

  # source://railties/7.0.4/lib/rails/paths.rb#154
  def skip_autoload_once!; end

  # source://railties/7.0.4/lib/rails/paths.rb#154
  def skip_eager_load!; end

  # source://railties/7.0.4/lib/rails/paths.rb#154
  def skip_load_path!; end

  # source://railties/7.0.4/lib/rails/paths.rb#198
  def to_a; end

  # source://railties/7.0.4/lib/rails/paths.rb#181
  def to_ary; end

  # source://railties/7.0.4/lib/rails/paths.rb#177
  def unshift(*paths); end

  private

  # source://railties/7.0.4/lib/rails/paths.rb#235
  def files_in(path); end
end

class Rails::Paths::Root
  # source://railties/7.0.4/lib/rails/paths.rb#51
  def initialize(path); end

  # source://railties/7.0.4/lib/rails/paths.rb#66
  def [](path); end

  # source://railties/7.0.4/lib/rails/paths.rb#56
  def []=(path, value); end

  # source://railties/7.0.4/lib/rails/paths.rb#61
  def add(path, options = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/paths.rb#82
  def all_paths; end

  # source://railties/7.0.4/lib/rails/paths.rb#86
  def autoload_once; end

  # source://railties/7.0.4/lib/rails/paths.rb#94
  def autoload_paths; end

  # source://railties/7.0.4/lib/rails/paths.rb#90
  def eager_load; end

  # source://railties/7.0.4/lib/rails/paths.rb#74
  def keys; end

  # source://railties/7.0.4/lib/rails/paths.rb#98
  def load_paths; end

  # source://railties/7.0.4/lib/rails/paths.rb#49
  def path; end

  # source://railties/7.0.4/lib/rails/paths.rb#49
  def path=(_arg0); end

  # source://railties/7.0.4/lib/rails/paths.rb#70
  def values; end

  # source://railties/7.0.4/lib/rails/paths.rb#78
  def values_at(*list); end

  private

  # source://railties/7.0.4/lib/rails/paths.rb#103
  def filter_by(&block); end
end

module Rails::Rack; end

class Rails::Rack::Logger < ::ActiveSupport::LogSubscriber
  # source://railties/7.0.4/lib/rails/rack/logger.rb#16
  def initialize(app, taggers = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/rack/logger.rb#21
  def call(env); end

  private

  # source://railties/7.0.4/lib/rails/rack/logger.rb#32
  def call_app(request, env); end

  # source://railties/7.0.4/lib/rails/rack/logger.rb#59
  def compute_tags(request); end

  # source://railties/7.0.4/lib/rails/rack/logger.rb#72
  def logger; end

  # source://railties/7.0.4/lib/rails/rack/logger.rb#51
  def started_request_message(request); end
end

class Rails::Railtie
  include ::Rails::Initializable
  extend ::ActiveSupport::DescendantsTracker
  extend ::Rails::Initializable::ClassMethods

  # source://railties/7.0.4/lib/rails/railtie.rb#246
  def initialize; end

  # source://railties/7.0.4/lib/rails/railtie.rb#263
  def config; end

  # source://railties/7.0.4/lib/rails/railtie.rb#256
  def configure(&block); end

  # source://railties/7.0.4/lib/rails/railtie.rb#252
  def inspect; end

  # source://railties/7.0.4/lib/rails/railtie.rb#244
  def railtie_name(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/railtie.rb#267
  def railtie_namespace; end

  protected

  # source://railties/7.0.4/lib/rails/railtie.rb#272
  def run_console_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#276
  def run_generators_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#280
  def run_runner_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#289
  def run_server_blocks(app); end

  # source://railties/7.0.4/lib/rails/railtie.rb#284
  def run_tasks_blocks(app); end

  private

  # source://railties/7.0.4/lib/rails/railtie.rb#295
  def each_registered_block(type, &block); end

  class << self
    # source://railties/7.0.4/lib/rails/railtie.rb#194
    def <=>(other); end

    # source://railties/7.0.4/lib/rails/railtie.rb#172
    def abstract_railtie?; end

    # source://railties/7.0.4/lib/rails/railtie.rb#146
    def config(*_arg0, **_arg1, &_arg2); end

    # source://railties/7.0.4/lib/rails/railtie.rb#190
    def configure(&block); end

    # source://railties/7.0.4/lib/rails/railtie.rb#156
    def console(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#164
    def generators(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#198
    def inherited(subclass); end

    # source://railties/7.0.4/lib/rails/railtie.rb#183
    def instance; end

    # source://railties/7.0.4/lib/rails/railtie.rb#176
    def railtie_name(name = T.unsafe(nil)); end

    # source://railties/7.0.4/lib/rails/railtie.rb#152
    def rake_tasks(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#160
    def runner(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#168
    def server(&blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#148
    def subclasses; end

    protected

    # source://railties/7.0.4/lib/rails/railtie.rb#206
    def increment_load_index; end

    # source://railties/7.0.4/lib/rails/railtie.rb#204
    def load_index; end

    private

    # source://railties/7.0.4/lib/rails/railtie.rb#212
    def generate_railtie_name(string); end

    # source://railties/7.0.4/lib/rails/railtie.rb#224
    def method_missing(name, *args, **_arg2, &block); end

    # source://railties/7.0.4/lib/rails/railtie.rb#236
    def register_block_for(type, &blk); end

    # source://railties/7.0.4/lib/rails/railtie.rb#216
    def respond_to_missing?(name, _); end
  end
end

# source://railties/7.0.4/lib/rails/railtie.rb#142
Rails::Railtie::ABSTRACT_RAILTIES = T.let(T.unsafe(nil), Array)

class Rails::Railtie::Configuration
  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#8
  def initialize; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#70
  def after_initialize(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#47
  def app_generators; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#39
  def app_middleware; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#54
  def before_configuration(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#60
  def before_eager_load(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#65
  def before_initialize(&block); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#18
  def eager_load_namespaces; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#85
  def respond_to?(name, include_private = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#81
  def to_prepare(&blk); end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#75
  def to_prepare_blocks; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#30
  def watchable_dirs; end

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#23
  def watchable_files; end

  private

  # source://railties/7.0.4/lib/rails/railtie/configuration.rb#90
  def method_missing(name, *args, &blk); end

  class << self
    # source://railties/7.0.4/lib/rails/railtie/configuration.rb#13
    def eager_load_namespaces; end
  end
end

class Rails::Secrets
  class << self
    # source://railties/7.0.4/lib/rails/secrets.rb#45
    def decrypt(data); end

    # source://railties/7.0.4/lib/rails/secrets.rb#41
    def encrypt(data); end

    # source://railties/7.0.4/lib/rails/secrets.rb#37
    def key; end

    # source://railties/7.0.4/lib/rails/secrets.rb#24
    def parse(paths, env:); end

    # source://railties/7.0.4/lib/rails/secrets.rb#49
    def read; end

    # source://railties/7.0.4/lib/rails/secrets.rb#58
    def read_for_editing(&block); end

    # source://railties/7.0.4/lib/rails/secrets.rb#22
    def root=(_arg0); end

    # source://railties/7.0.4/lib/rails/secrets.rb#53
    def write(contents); end

    private

    # source://railties/7.0.4/lib/rails/secrets.rb#103
    def encryptor; end

    # source://railties/7.0.4/lib/rails/secrets.rb#63
    def handle_missing_key; end

    # source://railties/7.0.4/lib/rails/secrets.rb#73
    def key_path; end

    # source://railties/7.0.4/lib/rails/secrets.rb#77
    def path; end

    # source://railties/7.0.4/lib/rails/secrets.rb#81
    def preprocess(path); end

    # source://railties/7.0.4/lib/rails/secrets.rb#67
    def read_key_file; end

    # source://railties/7.0.4/lib/rails/secrets.rb#89
    def writing(contents); end
  end
end

class Rails::Secrets::MissingKeyError < ::RuntimeError
  # source://railties/7.0.4/lib/rails/secrets.rb#10
  def initialize; end
end

class Rails::SourceAnnotationExtractor
  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#85
  def initialize(tag); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#137
  def display(results, options = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#125
  def extract_annotations_from(file, pattern); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#91
  def find(dirs); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#99
  def find_in(dir); end

  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#83
  def tag; end

  class << self
    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#76
    def enumerate(tag = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

class Rails::SourceAnnotationExtractor::Annotation < ::Struct
  # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#55
  def to_s(options = T.unsafe(nil)); end

  class << self
    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#15
    def directories; end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#35
    def extensions; end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#21
    def register_directories(*dirs); end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#41
    def register_extensions(*exts, &block); end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#31
    def register_tags(*additional_tags); end

    # source://railties/7.0.4/lib/rails/source_annotation_extractor.rb#25
    def tags; end
  end
end

module Rails::VERSION; end

# source://railties/7.0.4/lib/rails/gem_version.rb#10
Rails::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://railties/7.0.4/lib/rails/gem_version.rb#11
Rails::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://railties/7.0.4/lib/rails/gem_version.rb#13
Rails::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)

# source://railties/7.0.4/lib/rails/gem_version.rb#15
Rails::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://railties/7.0.4/lib/rails/gem_version.rb#12
Rails::VERSION::TINY = T.let(T.unsafe(nil), Integer)

class Rails::WelcomeController < ::Rails::ApplicationController
  # source://railties/7.0.4/lib/rails/welcome_controller.rb#9
  def index; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end
